#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2009 Cristina Valeria Torres
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""
This python script is responisble for taking multi-media files and 
converting them into an XML based form for using a SQL or XML 
database environment.  Our goal for now is to encode the 'png' files 
created by the search.  Encoding file in and out of the XML makes 
moving plot content simpler.
"""

__author__  = "Cristina Valeria Torres <cristina.torres@ligo.org>"
__prog__    = 'followupCheckParamCons.py'


import optparse
import sys
import os
import re
import mimetypes
from pylal import git_version
from glue.ligolw import lsctables,ligolw,utils
sys.path.append('@PYTHONLIBDIR@')

###########################################################################3
## Local methods required to accomplish media insertion and extraction
###########################################################################3
def recurseTreeRegex(parentPath=".",myRegex=None,traverseTree=False):
    """
    Given a base path to start recursing and regex it selects all the
    files which match the regex.
    """
    matchingFiles=list()
    dirTreeGuide= os.walk(os.path.normpath(parentDir))
    if traverseTree:
        for root,dir,files in dirTreeGuide:
            for file in files:
                normFilename=os.path.normpath(os.path.join(root,file))
                if myRegex != None:
                    match=re.search(myRegex,normFilename)
                else:
                    match=normFilename
                matchingFiles.append(match)
    else:
        level01=dirTreeGuide.next()
        #Select only the files in '.'
        for file in level01[2]:
            if myRegex != None:
                match=re.search(myRegex,normFilename)
            else:
                match=normFilename
            matchingFiles.append(match)
    return match

def listFilesInXML(myTable=None):
    """
    """
    if not myTable: return
    fileList=list()
    for row in myTable:
        fileList.append(row.filename)
    return fileList

def createTree(parentPath=".",fileList=None):
    if fileList == None: return
    pathList=list()
    for Z in fileList:
        myPath=os.path.split(Z)[0]
        if os.path.isdir(myPath):
            pathList.append(myPath)
    for path in pathList:
        os.makedirs(path)

def insertMedia(xmlTable=None,filename=None):
    """
    """
    if not xmlTable: return
    if not filename: filename="UnknownFile.unknownfile"
    #Create a ROW object to append to the xmldoc (table)
    myRow = xmlTable.RowType()
    myRow.origin=\
        myRow.process_id=\
        myRow.submitter=\
        myRow.frameset_group=\
        myRow.segment_def_id=\
        myRow.start_time=\
        myRow.start_time_ns=\
        myRow.end_time=\
        myRow.end_time_ns=\
        myRow.mimetype=\
        myRow.comment=\
        myRow.summ_mime_id=\
        myRow.filename=\
        None
    myType,myEncoding=mimetypes.guess_type(filename)
    myRow.submitter=os.getenv('USER')
    myRow.mimetype=myType
    myRow.filename=filename
    myRow.mimedata=buffer(file(filename).read())
    xmlTable.append(myRow)

def extractMedia(xmlTable=None,filename=None,extractTree=False):
    """
    """
    if not xmlTable: return
    if not filename: filename="UnknownFile.unknownfile"
    for row in xmlTable:
        if ((filename==row.filename) or \
                (filename == os.path.split(row.filename)[1])):
            if extractTree:
                file(os.path.normpath(extractlocation+'/'+filename)).write(row.mimedata)
            else:
                file(filename).write(row.mimedata)


###########################################################################3
## Main part of code
###########################################################################3
usage = """ usage: %prog [options] """

parser = optparse.OptionParser(usage,version=git_version.verbose_msg)
#All possible options for performing imports and export of media files
parser.add_option("-f","--xml-file",action="store",type="string",\
                      metavar="XMLFILE",default=None,\
                      help="Set the XML file name for which you will \
be getting files from the XML containter.")
parser.add_option("-i","--insert-media",action="store",type="string",\
                      metavar="MEDIAFILES",default=None,\
                      help="List the filename that you want to insert \
into the XML file.  You can use a input file which is a list of files, \
a single file or a directory to traverse to insert files.")
parser.add_option("-x","--extract-media",action="store",type="string",\
                       metavar="EXTRACT",default=None,\
                       help="Specify this flag extract the media \
records to files that are inside this XML file.  You can either \
specify a filename (with or without path), or file which is a list of \
files to extract or a * to mean extract everything.  All extractions \
will be to the local directory unless you specify --tree flag.")
parser.add_option("-t","--tree",action="store_true",\
                      default=False,help="Use this option if you want \
to recreate the directory hiearchy of all the media files in this XML \
object, otherwise we extract all files to the CWD.  In the case of \
insertion this causes the program to traverse the lower directories to \
add all media files found that match your REGEX.  The directory \
hiearchy will be relative to the current working directory.")
parser.add_option("-l","--ls",action="store_true",\
                      default=False,help="Use this option to get a \
ascii listing of all the media files saved inside of this XML \
object.")
#
# Add delete option
#
(opts,args) = parser.parse_args()

xmlDoc=None
#Check to see if XML doc already exists?
xmlFile=os.path.normpath(opts.xml_file)
if os.path.isfile(xmlFile):
    #Open the xml doc object and select the table to append to
    xmlDoc=utils.loadfilename(xmlFile,gz = (name or "stdin").endswidth(".gz"))

    #Select the SummMimeTable
    xmlTable=lsctables.getTablesByName(xmlDoc,SummMimeTable.tableName)
else:
    #Create an XML Table object since xmlFile does not exist
    xmlTable=lsctables.New(lsctables.SummMimeTable)
#
# Add content, extract content, or list content as requested by user
#
# Add content
#
if (opts.insert_media):
    #Is argument a single media file, regex matching files or a list
    #of matching files?
    myRegex=None
    myFile=None
    myFilelist=None
    if os.path.isfile(opts.insert_media):
        #If file is mime type text assume it is list of files
        insertMediaMimeType=mimetypes.guess_type(os.path.normpath(opts.insert_media))
        if insertMediaMimeType == mimetypes.guess_type("file.txt"):
            myFilelist=os.path.normpath(opts.insert_media)
        else:
            myFile=os.path.normpath(opts.insert_media)
        
        if myFile:
            #Insert the media file into the xmlTable
            insertMediaFile(xmlTable,myFile)

        if myFilelist:
            #Loop over the list of files and insert each one
            for file in file(myFilelist).readlines():
                insertMediaFile(xmlTable,myFile)

    else:
        #Assume argument is part of regex
        myPath,myRegex=os.path.split(os.path.normpath(opts.insert_media))
        for file in recurseTreeRegex(myPath,myRegex,opts.tree):
            insertMediaFile(xmlTable,file)
#
# Extract content
#
if (opts.extract_media):
    #Is argument a single media file, regex matching files or a list
    #of matching files?
    myRegex=None
    myFile=None
    myFilelist=None
    if os.path.isfile(opts.extract_media):
        #If file is mime type text assume it is list of files
        insertMediaMimeType=mimetypes.guess_type(os.path.normpath(opts.extract_media))
        if insertMediaMimeType == mimetypes.guess_type("file.txt"):
            myFilelist=os.path.normpath(opts.extract_media)
        else:
            myFile=os.path.normpath(opts.extract_media)
        
        if myFile:
            #Insert the media file into the xmlTable
            if opts.tree: createTree(myFile)
            extractMediaFile(xmlTable,myFile,opts.tree)

        if myFilelist:
            #Loop over the list of files and insert each one
            for file in file(myFilelist).readlines():
                if opts.tree: createTree(myFile)                
                extractMediaFile(xmlTable,myFile,opts.tree)

    else:
        #Assume argument is part of regex
        myPath,myRegex=os.path.split(os.path.normpath(opts.extract_media))
        for file in recurseXMLRegex(myPath,myRegex):
            extractMediaFile(xmlTable,file,opts.tree)
#
# List the file contents of the XML file to STDOUT
#
if opts.ls:
    fileList=listFilesInXML(xmlTable)
    for file in fileList:
        os.stdout.write(file)
#
# Save the modified XML table back to the disk
#
xmlTable.write(xmlFile)
#
# Exit program
#
