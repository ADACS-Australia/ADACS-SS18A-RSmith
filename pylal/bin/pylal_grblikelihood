#!/usr/bin/python

# $Id$
__author__ = "Stephen Fairhurst <sfairhur@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils

##############################################################################
# helper functions
def square_axis():
  tmpv = asarray(axis())
  xmax = max([tmpv[1], tmpv[3]])
  xmin = min([tmpv[0], tmpv[2]])
  axis([xmin, xmax, xmin, xmax])

##############################################################################
usage = """
usage: %prog [options] 

GRB Summary Information

Generate a set of summary information and plots on-source and off
source runs around a GRB trigger. First, specify which ifos the
triggers come from using: --g1-triggers, --h1-triggers, --h2-triggers,
--l1-triggers.


The plots which can be generated are:

1)  A plot of the snr of coincident triggers (for each ifo) vs time.
    Generated by specifying: --snr-time

2)  ....... 

"""

parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
parser.add_option("-g","--on-source-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB on-source thinca files to read" )
parser.add_option("-o","--off-source-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB off-source thinca files to read" )
parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
    metavar=" SEC", help="length of time over which to cluster triggers" )
parser.add_option("-e","--epsilon",action="store",type="float",\
    default=0, metavar=" EPSILON",help="if metric distance squared > EPSILON, discard" )
parser.add_option("-n","--ntrials",action="store",type="float",\
    default=0, metavar=" NTRIALS",help="number off source segments" )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" )
parser.add_option("-x","--min-snr",action="store",type="float",\
    default=0, metavar=" MIN_SNR",help="minimum value of snr on plot" )
parser.add_option("-X","--max-snr",action="store",type="float",\
    default=0, metavar=" MAX_SNR",help="maximum value of snr on plot" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-v","--verbose",action="store_true",default=False,\
    help="verbose debugging output" )
parser.add_option("-A","--g1-triggers",action="store_true",default=False,\
    help="input files contain triggers from G1" )
parser.add_option("-B","--h1-triggers",action="store_true",default=False,\
    help="input files contain triggers from H1" )
parser.add_option("-C","--h2-triggers",action="store_true",default=False,\
    help="input files contain triggers from H2" )
parser.add_option("-D","--l1-triggers",action="store_true",default=False,\
    help="input files contain triggers from L1" )
parser.add_option("-S","--statistic",action="store",default='snr',\
    type="string",\
    help="choice of statistic used in making plots, valid arguments are: "
         "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr, " 
         "bitten_l, bitten_lsq") 
parser.add_option("-V","--veto-file",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="read in segments from FNAME (assumed segwizard format)")
parser.add_option("-O","--off-source-segs",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="read in segments from FNAME (assumed segwizard format)")

(opts,args) = parser.parse_args()

if not opts.on_source_glob:
  print >>sys.stderr, "Must specify a GLOB of on-source files to read"
  print >>sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

if not opts.off_source_glob:
  print >>sys.stderr, "Must specify a GLOB of off-source files to read"
  print >>sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

# check that statistic is OK:
if (opts.statistic != 'snr') and (opts.statistic != 'snr_over_chi') \
    and (opts.statistic != 's3_snr_chi_stat') \
    and (opts.statistic != 'effective_snr')\
    and (opts.statistic != 'bitten_lsq')\
    and (opts.statistic != 'bitten_l'):
  print >>sys.stderr, "--statistic must be one of"
  print >>sys.stderr, "(snr|snr_over_chi|s3_snr_chi_stat|effective_snr|bitten_l)"
  sys.exit(1)

# check if bittenl-parameters has been specifiedv (or bitten_lsq), set snglStat 	 
snglStat=opts.statistic 	 

# Change to Agg back-end if show() will not be called
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

statistic = CoincInspiralUtils.coincStatistic( opts.statistic )
    
plotsymbols = ['r+','bx','ko','g1']
hanfordsym = ['b+','bx','r1']
addsym = ['k+','kx','k1']

xlow = 20
xhigh = 0
f_name = opts.figure_name
if opts.cluster_window and f_name:
  f_name += '_clust_' + str(opts.cluster_window) + 'sec'

ifo_list = []
ifo_non_h = []
if opts.g1_triggers:
  ifo_list.append('G1')
  ifo_non_h.append('G1')
if opts.h1_triggers:
  ifo_list.append('H1')
if opts.h2_triggers:
  ifo_list.append('H2')
if opts.l1_triggers:
  ifo_list.append('L1')
  ifo_non_h.append('L1')

ifo_coincs = []
# two ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    if ifo1 < ifo2:
      ifo_coincs.append([ifo1, ifo2])
      
# three ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    for ifo3 in ifo_list:
      if ifo1 < ifo2 and ifo2 < ifo3:
        ifo_coincs.append([ifo1, ifo2, ifo3])
        
# four ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    for ifo3 in ifo_list:
      for ifo4 in ifo_list:
        if ifo1 < ifo2 and ifo2 < ifo3 and ifo3 < ifo4:
          ifo_coincs.append([ifo1, ifo2, ifo3, ifo4])

###################################
# glob the list of files to read in

# On Source Files
if opts.on_source_glob:  
  allfiles = []
  gl_pats = opts.on_source_glob.split(" ")
  for gl in gl_pats:
    allfiles += glob.glob(gl)

  if len(allfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.on_source_glob + " returned no files"
    sys.exit(1)

  slidefiles = []
  coincfiles = []

  for file in allfiles:
    if 'SLIDE' in file:
      slidefiles.append(file)
    else:
      coincfiles.append(file)

# Off Source Files
if opts.off_source_glob:  
  allfiles = []
  gl_pats = opts.off_source_glob.split(" ")
  for gl in gl_pats:
    allfiles += glob.glob(gl)

  if len(allfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.off_source_glob + " returned no files"
    sys.exit(1)

  offsourcefiles = []

  for file in allfiles: 
    offsourcefiles.append(file)

########################
# read in coinc triggers
inspTriggers = None
coincTriggers = None

if coincfiles:
  inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(coincfiles)
  # perform the veto
  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    inspTriggers = inspTriggers.veto(seglist)
      
  # construct the coincs
  coincTriggers = \
      CoincInspiralUtils.coincInspiralTable(inspTriggers,statistic)

  # cluster them
  if opts.cluster_window:
    coincTriggers = coincTriggers.cluster(opts.cluster_window)

  if not opts.max_snr:
    if inspTriggers:
      xhigh = max( inspTriggers.get_column(snglStat) )
    else:
      xhigh = 50.0
  else:
    xhigh = opts.max_snr + 1

  if not opts.min_snr:
    if inspTriggers:
      xlow = min( inspTriggers.get_column(snglStat) )
    else:
      xlow = 1.0
  else:
    xlow = opts.min_snr
else:
  coincTriggers = None

########################
# read in off-source triggers
offsourceTriggers = None

if offsourcefiles:
  inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(offsourcefiles)
  # perform the veto
  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    inspTriggers = inspTriggers.veto(seglist)
      
  # construct the coincs
  offsourceTriggers = \
      CoincInspiralUtils.coincInspiralTable(inspTriggers,statistic)

  # cluster them
  if opts.cluster_window:
    offsourceTriggers = offsourceTriggers.cluster(opts.cluster_window)

  if not opts.max_snr:
    if inspTriggers:
      xhigh = max( inspTriggers.get_column(snglStat) )
    else:
      xhigh = 50.0
  else:
    xhigh = opts.max_snr + 1

  if not opts.min_snr:
    if inspTriggers:
      xlow = min( inspTriggers.get_column(snglStat) )
    else:
      xlow = 1.0
  else:
    xlow = opts.min_snr
else:
  offsourceTriggers = None

########################
# read in slide triggers
slideTriggers = []
if slidefiles:
  inspSlide = SnglInspiralUtils.ReadSnglInspiralFromFiles(slidefiles)
  # perform the veto
  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    inspSlide = inspSlide.veto(seglist)
      
  slide_num = range(1 , opts.num_slides + 1)
  slide_num.extend(range(-opts.num_slides, 0))

  for slide in slide_num:
    this_slide = {}
    this_slide["slide_num"] = slide
    this_slide["sngl_trigs"] = inspSlide.getslide(slide)

    # make coincs
    this_slide["coinc_trigs"] = \
      CoincInspiralUtils.coincInspiralTable(this_slide["sngl_trigs"],statistic)

    # cluster triggers
    if opts.cluster_window:
      this_slide["coinc_trigs"] = \
        this_slide["coinc_trigs"].cluster(opts.cluster_window)  
    
    # add slide to list
    slideTriggers.append(this_slide)
    print (str(slide) + ' ' + str(len(this_slide["sngl_trigs"])))
  
  if inspSlide:
    slide_high = max( inspSlide.get_column(snglStat) )
    slide_low = min( inspSlide.get_column(snglStat) )
  else:
    slide_high = 50.0
    slide_low = 1.0


fig_num = 1

#################################
# check we have required triggers
if not coincTriggers:
  print >>sys.stderr, \
     "there must be on source files in the glob"
  sys.exit(1)
  
#if not slideTriggers:
  #print >>sys.stderr, \
     #"there must be time slide files whose name includes SLIDE in the glob"
  #sys.exit(1)

################################
# compute false alarm probability 
# for each candidate
if opts.off_source_segs:
  file = open( opts.off_source_segs , "r")
  tmpseglist = segmentsUtils.fromsegwizard(file)
  file.close()
  seglist = segments.segmentlist()
  for seg in tmpseglist:
    sstart = seg[0]
    while sstart < seg[1]:
      seglist.append(segments.segment(sstart, sstart+180))
      sstart += 180
  print "The number of trial segments is %i" % len(seglist)

for candidate in coincTriggers:
  dsquared = offsourceTriggers.metricHistogram(candidate)
  end_time = offsourceTriggers.getsngls(ifo_list[0]).get_column("end_time")

  fa_array = zeros(len(seglist))
  for i, e in enumerate(end_time):
    if dsquared[i] < opts.epsilon:
      fa_array[seglist.find(e)] = 1.0

  if opts.verbose: print fa_array
  faprob = sum(fa_array) / float(len(seglist))

  print "p(c|0) = %f" % faprob

if opts.show_plot:
  show()
