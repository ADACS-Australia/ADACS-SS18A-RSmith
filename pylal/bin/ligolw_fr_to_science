#!/usr/bin/python
#
# script to extract science mode segments from ldas rds frames
#
# $Id$
#
# Copyright (C) 2009 Duncan Brown
# 
# This is part of the Grid LSC User Environment (GLUE)
# 
# GLUE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import sys
import os
import pwd

from optparse import OptionParser

import pylal.Fr

from glue import lal
from glue import segments

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils as ligolw_utils
from glue.ligolw.utils import segments as ligolw_segments
from glue.ligolw.utils import process as ligolw_process

from glue.segmentdb import segmentdb_utils

PROGRAM_NAME = sys.argv[0].replace('./','')
PROGRAM_PID  = os.getpid()

try:
  USER_NAME = os.getlogin()
except:
  USER_NAME = pwd.getpwuid(os.getuid())[0]

__author__  = "Duncan Brown <dabrown@physics.syr.edu>"
__date__    = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]

parser = OptionParser(
  version = "%prog CVS $Header$",
  usage   = "%prog [OPTIONS]",
  description = "Extracts science mode segments from frame files")

parser.add_option("-c", "--cache-file", metavar="FILE", help="read input frame names from CACHE" )
parser.add_option("-i", "--ifo", metavar="IFO", help="extract segments for detector IFO" )
parser.add_option("-t", "--type", metavar="RDS_TYPE", help="extract segments from frame type RDS_TYPE" )
parser.add_option("-s", "--segment-version", metavar="VERSION", help="create science segments as version number VERSION", type=int )
parser.add_option("-V", "--verbose", action="store_true", help="print extra debugging information", default=False )

options, filenames = parser.parse_args()

if not options.cache_file:
	raise ValueError, "missing argument --cache-file"
if not options.ifo:
	raise ValueError, "missing argument --ifo"
if not options.type:
	raise ValueError, "missing argument --type"
if not options.segment_version:
	raise ValueError, "missing argument --segment-version"

frame_files = lal.Cache.fromfilenames([options.cache_file],coltype=int).sieve(ifos=options.ifo[0],description=options.type)
frame_intervals = frame_files.to_segmentlistdict()[options.ifo[0]]

# create a blank xml document and add the process id
outdoc = ligolw.Document()
outdoc.appendChild(ligolw.LIGO_LW())
proc_id = ligolw_process.register_to_xmldoc(outdoc, PROGRAM_NAME, options.__dict__).process_id

# create a science segment definition and a segment_summary entry for this interval
seg_def_id = segmentdb_utils.add_to_segment_definer(outdoc,proc_id,options.ifo,"DMT-SCIENCE",options.segment_version,comment=options.ifo + " Science mode from RDS h(t) DQ flags")
segmentdb_utils.add_to_segment_summary(outdoc,proc_id,seg_def_id,frame_intervals,comment=options.type)

# create an empty list of science segments
science_segments = segments.segmentlist()

# loop over the frames extracting the science segments
for frame in frame_files:
	if options.verbose: print frame.path()
	state_vec = pylal.Fr.frgetvect(frame.path(), ':'.join([options.ifo,'LSC-DATA_QUALITY_VECTOR']), start=-1, span=-1, verbose=False)
	start_time = state_vec[1]
	dt = state_vec[3][0]
	for i in range(len(state_vec[0])):
		if state_vec[0][i] & 0x1:
			t_now = start_time + dt * i
			science_segments |= segments.segmentlist([segments.segment(t_now, t_now + dt)])

# add the science segments to the output xml file
segmentdb_utils.add_to_segment(outdoc,proc_id,seg_def_id,science_segments)

# write the xml file to disk
outname = '-'.join([options.ifo[0],options.type + '_SCIENCE_V' + str(options.segment_version),str(frame_intervals[0][0]),str(frame_intervals[-1][1]-frame_intervals[0][0])]) + '.xml'
ligolw_utils.write_filename(outdoc,outname)

sys.exit(0)
