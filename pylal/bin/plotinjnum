#!/usr/bin/python

__Id__ = "$Id$"
__author__ = "Drew Keppel <keppel_d@ligo.caltech.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__ = "plotinjnum"
__title__ = "Found and Missed Plots"

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue import lal
from pylal import SimInspiralUtils
from pylal import SnglInspiralUtils
from pylal import CoincInspiralUtils
from pylal import InspiralUtils

##############################################################################

def found_missed(opts,foundFiles,missedFiles):
  """
  """
  statistic = CoincInspiralUtils.coincStatistic( opts.statistic )
  coincTriggers = CoincInspiralUtils.coincInspiralTable()
  for file in foundFiles:
    file = [file]
    simFound = SimInspiralUtils.ReadSimInspiralFromFiles(file)
    inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(file,mangle_event_id=True)
    # construct the coincs
    fileCoincTriggers = \
      CoincInspiralUtils.coincInspiralTable(inspTriggers,statistic)
    fileCoincTriggers.add_sim_inspirals(simFound)
    for coinc in fileCoincTriggers:
      coincTriggers.append(coinc)

  missed = [[],[],[],[]]
  for file in missedFiles:
    file = [file]
    simMissed = SimInspiralUtils.ReadSimInspiralFromFiles(file)
    for sim in simMissed:
      missed[0].append(sim.mchirp)
      missed[1].append(sim.end_time_gmst)
      missed[2].append(sim.eff_dist_h)
      missed[3].append(sim.eff_dist_h*(2.8*.25**(3.0/5.0)/sim.mchirp)**(5.0/6.0))
  
  doubles = [[],[],[],[]]
  triples = [[],[],[],[]]
  for coinc in coincTriggers:
    if coinc.numifos == 2:
      doubles[0].append(coinc.sim.mchirp)
      doubles[1].append(coinc.sim.end_time_gmst)
      doubles[2].append(coinc.sim.eff_dist_h)
      doubles[3].append(coinc.sim.eff_dist_h* \
                      (2.8*.25**(3.0/5.0)/coinc.sim.mchirp)**(5.0/6.0))
    if coinc.numifos == 3:
      triples[0].append(coinc.sim.mchirp)
      triples[1].append(coinc.sim.end_time_gmst)
      triples[2].append(coinc.sim.eff_dist_h)
      triples[3].append(coinc.sim.eff_dist_h* \
                      (2.8*.25**(3.0/5.0)/coinc.sim.mchirp)**(5.0/6.0))

  return missed, doubles, triples


def plot_found_missed_mchirp(opts, missed, doubles, triples):
  """

  """
  figure(1)
  if len(triples[0])>0:
    semilogy(triples[0],triples[2],'bx',doubles[0],doubles[2],'og',missed[0],missed[2],'rx')
    legend_text=("triple", "double", "coincs")
  elif len(doubles[0])>0:
    semilogy(doubles[0],doubles[2],'og',missed[0],missed[2],'rx')
    legend_text=( "double", "coincs")
  elif len(missed[0])>0:
    semilogy(missed[0],missed[2],'rx')
    legend_text=("missed")
  else:
    ValueError,"double, triple and missed are empty..."
  
  grid()
  title('Found and Missed Injections')
  xlabel('mchirp',size='x-large')
  ylabel('effective distance',size='x-large')
  legend(legend_text,loc=0)

  if not opts.enable_output is True:
     fig_mchirp = opts.ifo_type + '_missed_found_vs_mchirp.png'
     savefig(fig_mchirp)

  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "_missed_found_vs_mchirp")
    savefig(fname)
    return fname
  else:
    return  fig_mchirp
 
def plot_found_missed_end_time(opts, missed, doubles, triples):
  """

  """
  figure(2)
  if len(triples[1])>0:
    semilogy(triples[1],triples[2],'bx',doubles[1],doubles[2],'og',missed[1],missed[2],'rx')
    legend_text=("triple", "double", "coincs")
  elif len(doubles[1])>0:
    semilogy(doubles[1],doubles[2],'og',missed[1],missed[2],'rx')
    legend_text=( "double", "coincs")
  elif len(missed[1])>0:
    semilogy(missed[1],missed[2],'rx')
    legend_text=("missed")
  else:
    ValueError,"double, triple and missed are empty..."
  

  grid()
  title('Found and Missed Injections')
  xlabel('end time gmst',size='x-large')
  ylabel('eff dist',size='x-large')
  legend(legend_text,loc=0)
  
  if not opts.enable_output is True:
     fig_endtime = opts.ifo_type + '_missed_found_vs_mchirp.png'
     savefig(fig_endtime)
  
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "_missed_found_vs_end_time")
    savefig(fname)
    return fname
  else:
    return  fig_endtime
     
  
def plot_found_chirp_dist_vs_mchirp(opts, missed, doubles, triples):
  """

  """
 
  figure(3)
  if len(triples[0])>0:
    semilogy(triples[0],triples[3],'bx',doubles[0],doubles[3],'og',missed[0],missed[3],'rx')
    legend_text=("triple", "double", "coincs")
  elif len(doubles[0])>0:
    semilogy(doubles[0],doubles[3],'og',missed[0],missed[3],'rx')
    legend_text=( "double", "coincs")
  elif len(missed[0])>0:
    semilogy(missed[0],missed[3],'rx')
    legend_text=("missed")
  else:
    ValueError,"double, triple and missed are empty..."
  
  grid()
  title('Found and Missed Injections')
  xlabel('mchirp',size='x-large')
  ylabel('chirp distance',size='x-large')
  legend(legend_text,loc=0)
  
  if not opts.enable_output is True:
     fig_chirpdist = opts.ifo_type + '_missed_found_vs_mchirp.png'
     savefig(fig_chirpdist)
  

  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "_missed_found_chirp_dist_vs_mchirp")
    savefig(fname)
    return fname
  else:
     return  fig_chirpdist
 
##############################################################################
# Defining a config parser function
##############################################################################

usage = """
usage: %prog [options]

Injection Plotting Function

Generates plots showing the number of IFOs an injection is found in
"""
def parse_command_line():

  parser = OptionParser( usage=usage, \
      version="%prog CVS\n" + 
      "$Id$\n" + 
      "Name: $\n") 
  parser.add_option("-g","--found-glob",action="store",type="string",\
      default=None, metavar=" GLOB",\
      help="GLOB of FOUND injection files to read" )
  parser.add_option("-m","--missed-glob",action="store",type="string",\
      default=None, metavar=" GLOB",\
      help="GLOB of MISSED injection files to read" )
  parser.add_option("-S","--statistic",action="store",default='snr',\
      type="string",\
      help="choice of statistic used in making plots, valid arguments are: "
          "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr,")
  parser.add_option("-I","--cache-file",action="store",type="string",\
      default=None, metavar=" CACHE_FILE",\
      help="input file to read Cache file" )
  parser.add_option("-i","--ifo-type",action="store",type="string",\
      default=None,  help="selects the ifo type for sieve for" )
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None,metavar=" USERTAG",  help="" )
  parser.add_option("-P","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-t","--ifo-times",action="store",\
      type="string",  metavar=" IFOTIMES",\
      help="ifo times is used as prefix for the output files ")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  parser.add_option("","--cache-description", action="store",type="string",\
      default="SIRE", metavar="CACHEDESCRIPTION", help="description pattern the cache entries will be sieved with" )

  (options,args) = parser.parse_args()
  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times (which ifos were analysed) must be provided"


  return options, sys.argv[1:]

# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz


##############################################################################
# Initialise
#-- add prefix and suffix to the opts strucutre. To be used for filenames
opts = InspiralUtils.set_prefix_and_suffix(opts, __name__)
opts = InspiralUtils.set_version(opts, __name__, __version__)
# -- set the proper color code
colors = InspiralUtils.colors
figure_number = 0  # used for the figure label (showplot)
fnameList = []   # use for the cache file
tagList= []   # use for the cache file

# Checking for found files and missed files.
##############################################################################
print opts.ifo_type

if opts.found_glob:
  foundFiles = glob.glob(opts.found_glob)
  if opts.verbose:
     print " ...reading the following list of found files " + str(foundFiles) + "\n"

elif opts.cache_file:
  files =  lal.Cache.fromfile(open(opts.cache_file)).sieve(ifos=opts.ifo_type, exact_match=True).sieve(description=opts.cache_description)
  foundFiles = files.sieve(description= "FOUND").checkfilesexist()[0].pfnlist()
  print foundFiles
  if opts.verbose:
      print " ...reading the following list of found files " + str(foundFiles) + "\n"

else:
  print >>sys.stderr, "Must specify a glob of FOUND injections"
  sys.exit(1)

if opts.missed_glob:
   missedFiles = glob.glob(opts.missed_glob)
   if opts.verbose:
      print " ...reading the following list of missed files " + str(missedFiles) + "\n"

elif opts.cache_file:
   files =  lal.Cache.fromfile(open(opts.cache_file)).sieve(ifos=opts.ifo_type, exact_match=True).sieve(description=opts.cache_description)
   missedFiles = files.sieve(description="MISSED" ).checkfilesexist()[0].pfnlist()
   if opts.verbose:
      print " ...reading the following list of missed files " + str(missedFiles) + "\n"
       
else:
  print >>sys.stderr, "Must specify a glob of MISSED injections"
  sys.exit(1)



##############################################################################

# Generating missed, doubles and triple coincs

missed, doubles, triples = found_missed(opts,foundFiles,missedFiles)



# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  fname = plot_found_chirp_dist_vs_mchirp(opts, missed, doubles, triples)
  fnameList.append(fname)
  tagList.append("Found Chirp distance versus chirp mass")
  fname = plot_found_missed_end_time(opts, missed, doubles, triples)
  fnameList.append(fname)
  tagList.append("Missed versus end time")
  fname = plot_found_missed_mchirp(opts, missed, doubles, triples)
  fnameList.append(fname)
  tagList.append("Found and missed versus chirp mass")
else: # we can probably remove the else and put the function calls before the if 
  Fig_chirpdist  = plot_found_chirp_dist_vs_mchirp(opts, missed, doubles, triples)
  Fig_endtime = plot_found_missed_end_time(opts, missed, doubles, triples)
  Fig_mchirp = plot_found_missed_mchirp(opts, missed, doubles, triples)
  
if opts.enable_output is True:
  html_filename = InspiralUtils.html_write_output(opts, args, fnameList, tagList)
  InspiralUtils.write_output_cache(opts, html_filename, fnameList)




####################
if opts.show_plot:
    show()
