#!/usr/bin/python
__author__ = "Chad Hanna"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]

import os
import sys

import matplotlib
matplotlib.use('Agg')

from pylal.webUtils import *
from pylal import Fr
from optparse import *
from glue import lal

from pylab import *

from pylal import viz
from pylal import date
from pylal import xlal
usage = """ %prog [options]
"""

parser = OptionParser( usage )

parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information and exit")

## ADD OPTIONS FOR DATA TYPES, OBSERVATORIES ETC..!!!
#parser.add_option("-D","--dataFind-executable",action="store",type="string",\
#    metavar=" EXEC",help="use EXEC to check the call LSCdataFind query")

parser.add_option("-g","--gps-time",action="store",type="string",\
    metavar=" GPS",help="use gps GPS to check trends")

parser.add_option("-i","--ifo",action="store",type="string",\
    metavar=" IFO",help="use gps IFO to check trends")

## standard webTheNode arguments
parser.add_option("-o","--output-path",action="store",type="string",\
    metavar=" PATH",help="use output path PATH for snr and chisq plots")

parser.add_option("-O","--page-rel-path",action="store",type="string",\
    metavar=" PATH",help="use output path relative to page")

parser.add_option("-c","--output-web-file", action="store",type="string", \
    metavar=" FILE",help="file to append html tables to")

parser.add_option("-p","--page",action="store",type="string",\
    default="investigations/s5/people/followups/",metavar=" PAGE",\
    help="web page path (default 'investigations/s5/people/followups/'")

command_line = sys.argv[1:]
(opts,args) = parser.parse_args()

if opts.version:
  print "$Id$"
  sys.exit(0)


#################################
# Sanity check of input arguments

if not opts.output_path:
  print >> sys.stderr, "No output path specified."
  print >> sys.stderr, "Use --output-path PATH to specify location."
  sys.exit(1)

if not opts.page_rel_path:
  print >> sys.stderr, "No relative path specified"
  print >> sys.stderr, "Use --page-rel-path PATH to specify location."
  sys.exit(1)

talk = talkBack(opts.output_web_file)

gps = xlal.date.LIGOTimeGPS(opts.gps_time)
gpsplus = xlal.date.LIGOTimeGPS(str(int(opts.gps_time)+86400))
gpsminus = xlal.date.LIGOTimeGPS(str(int(opts.gps_time)-86400))

utc = xlal.date.XLALGPSToUTC(gps)

if utc[1] < 10: month = '0'+str(utc[1])
else: month = str(utc[1])

if utc[2] < 10: day = '0'+str(utc[2])
else: day = str(utc[2])

plotURL = 'http://blue.ligo-wa.caltech.edu/scirun/S5/DailyStatistics/'
plotLink = 'Summary' + '_' + str(utc[0]) + '_' + month+day+'_' + opts.ifo.lower()+'.pdf' 
talk.link(plotLink,plotLink)

plot = os.popen('wget '+plotURL+plotLink)
for line in plot:
  print line


utc = xlal.date.XLALGPSToUTC(gpsplus)
if utc[1] < 10: month = '0'+str(utc[1])
else: month = str(utc[1])

if utc[2] < 10: day = '0'+str(utc[2])
else: day = str(utc[2])

plotURL = 'http://blue.ligo-wa.caltech.edu/scirun/S5/DailyStatistics/'
plotLink = 'Summary' + '_' + str(utc[0]) + '_' + month+day+'_' + opts.ifo.lower()+'.pdf'
talk.link(plotLink,plotLink)

plot = os.popen('wget '+plotURL+plotLink)
for line in plot:
  print line

utc = xlal.date.XLALGPSToUTC(gpsminus)
if utc[1] < 10: month = '0'+str(utc[1])
else: month = str(utc[1])

if utc[2] < 10: day = '0'+str(utc[2])
else: day = str(utc[2])

plotURL = 'http://blue.ligo-wa.caltech.edu/scirun/S5/DailyStatistics/'
plotLink = 'Summary' + '_' + str(utc[0]) + '_' + month+day+'_' + opts.ifo.lower()+'.pdf'
talk.link(plotLink,plotLink)

plot = os.popen('wget '+plotURL+plotLink)
for line in plot:
  print line


talk.write()

sys.exit(0)

#################### OLD CODE #########################################
# DO SENSE MON PLOTS
if opts.ifo == 'H1' or opts.ifo == 'H2':
  command = opts.dataFind_executable + ' --observatory=H --type=SenseMonitor_H1_M --gps-start-time ' + opts.gps_time + ' --gps-end-time ' + opts.gps_time + ' --lal-cache --url-type=file'

else:
  command = opts.dataFind_executable + ' --observatory=L --type=SenseMonitor_H1_M --gps-start-time ' + opts.gps_time + ' --gps-end-time ' + opts.gps_time + ' --lal-cache --url-type=file'

SenseMoncacheFile = os.popen(command)

lalCache = lal.Cache()
myCache = lalCache.fromfile(SenseMoncacheFile)

#talk = talkBack(opts.output_web_file)
#web = WebPage('my title',opts.output_web_file)

for entry in myCache:
  print entry.path()
  sensMon = Fr.frgetvect(entry.path(),opts.ifo+':DMT-SNSM_EFFECTIVE_RANGE_MPC.mean') 
  figure(1)
  plot(sensMon[0])  
  savefig(opts.ifo+'sensemon'+opts.gps_time+'.png')

#web.cleanWrite('IUL')
#talk.write()

### Do Seismic plots
if opts.ifo == 'H1' or opts.ifo == 'H2':
  command = opts.dataFind_executable + ' --observatory=H --type=Seis_Blrms_M --gps-start-time ' + opts.gps_time + ' --gps-end-time ' + opts.gps_time + ' --lal-cache --url-type=file'

else:
  command = opts.dataFind_executable + ' --observatory=L --type=Seis_Blrms_M --gps-start-time ' + opts.gps_time + ' --gps-end-time ' + opts.gps_time + ' --lal-cache --url-type=file'

seiscacheFile = os.popen(command)

lalCache = lal.Cache()
myCache = lalCache.fromfile(seiscacheFile)

for entry in myCache:
  print entry.path()
  #sensMon = Fr.frgetvect(entry.path(),opts.ifo+':DMT-SNSM_EFFECTIVE_RANGE_MPC.mean')
  #figure(1)
  #plot(sensMon[0])
  #savefig(opts.ifo+'sensemon'+opts.gps_time+'.png')



