#!/usr/bin/python
__version__ = "$Revision$"
__name__ = "plotnumtemplates"
__Id__ = "$Id$"

# $Source$

import sys
import glob
import gzip
from optparse import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue import lal

##############################################################################

##############################################################################
# function to read in a list of files
def isSearchSumm(name, attrs):
  return lsctables.IsTableProperties(lsctables.SearchSummaryTable, name, attrs)

def isProcess(name, attrs):
  return lsctables.IsTableProperties(lsctables.ProcessTable, name, attrs)

def writeProcessParams(page, command_line):
  """
  function to write out the process params that the code was called with
  """
  text = "Figures produced with "+ __name__+", "+__version__[1:len(__version__)-1]+", invoked with arguments:\n\n"+ __name__

  for arg in command_line:
    text += " " +  arg
  page.pre( text )
  return page


def readFiles(fList):
  """
  read in the SimInspiralTables from a list of files
  @param fList:       list of input files
  """
  output = {}
  if not fList:
    return output
  count = 0
  for thisFile in fList:
    fileobj = file(thisFile)
    count = count+1
    if opts.verbose is True:
      print '...reading ' +  str(count)+'/'+str(len(fList))
    if thisFile.endswith(".gz"):
      fileobj = gzip.GzipFile(mode = "rb", fileobj=fileobj)
    else:
      fileobj = thisFile
 
    doc = ligolw.Document()
    # read in ifo from process, as not stored in SearchSumm
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
	isProcess)).parse(fileobj)
    ifo = doc.childNodes[0].getColumnByName('ifos')[0]
    if thisFile.endswith(".gz"):
       fileobj.seek(0)
    else: pass
  
    # read in SearchSummary
    doc = ligolw.Document()
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
        isSearchSumm)).parse(fileobj)
    searchSummTable = doc.childNodes[0]
    if output.has_key(ifo):
      output[ifo].extend(searchSummTable)
    else:
      output[ifo] = searchSummTable
  return output


#################################################################
# help message
usage = """\
Usage: plotnumtemplates [options]

  SUMMARY: Makes a plot of the number of templates against time.  The code
           will read in either TMPLTBANK files or TRIGBANK files or both, 
           for as many ifo's as you like.  It will then plot the number of 
           templates vs time for each ifo and each type of bank (TMPLT and 
           TRIG).

"""

##############################################################################
parser = OptionParser( usage=usage, \
    version= "%prog CVS\n" +
    "$Id$\n" +
    "$Name$\n")

    
parser.add_option("-t","--tmplt-glob",action="store",type="string",\
    default=None,metavar="TMPLT",\
    help="glob for files containing the string TMPLT")
    
parser.add_option("-T","--trig-glob",action="store",type="string",\
    default=None,metavar="TRIG",\
    help="glob for files containing the string TRIG")

parser.add_option("-c","--cache-file",action="store",type="string",\
    default=None,metavar="INPUT",\
    help="supply a bunch of TMPLT files or TRIG files")

parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )

parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME.png" )

parser.add_option("-p","--print-numbers",action="store_true",default=False,\
    help="prints each number on the screen" )

parser.add_option("-v","--verbose",action="store_true",default=False,\
    help="prints verbose information" )

parser.add_option("-W","--output-html",action="store_true",\
    default=False, metavar="HTML",\
    help="generate a html page containing the plots")

parser.add_option("-C","--output-cache",action="store_true",\
    default=False, metavar="CACHE",\
    help="generate a cache file with the figure names")

parser.add_option("-P","--output-path",action="store",\
    type="string",default="",  metavar="PATH",\
    help="path where the figures would be stored")

parser.add_option("-S","--gps-start-time",action="store",\
    type="int",  metavar="GPSSTART",\
    help="gps start time (for naming figure and output files")

parser.add_option("-E","--gps-end-time",action="store",\
    type="int",  metavar=" GPSEND",\
    help="gps end time (for naming figure and output files")



command_line = sys.argv[1:]
(opts,args) = parser.parse_args()

if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

# identify the template bank files
if opts.tmplt_glob:
  tmpltbankFiles = glob.glob(opts.tmplt_glob)
  if not tmpltbankFiles:
    print >>sys.stderr, "The glob for " + opts.tmplt_glob + \
        " returned no files"
    sys.exit(1)
else:
  tmpltbankFiles = None

# identify the trigbank files
if opts.trig_glob:
  trigbankFiles = glob.glob(opts.trig_glob)
  if not trigbankFiles:
    print >>sys.stderr, "The glob for " + opts.trig_glob + \
        " returned no files"
    sys.exit(1)
else:
  trigbankFiles = None
 

if opts.cache_file:
  trig = lal.Cache().fromfile(open(opts.cache_file))
  if not trig:
    print >>sys.stderr, "Must supply a list of input files"
    sys.exit(1) 
  else:
    tmpltbankFiles = trig.sieve(description = "TMPLTBANK").checkfilesexist()[0].pfnlist()
    trigbankFiles = trig.sieve(description = "TRIGBANK").checkfilesexist()[0].pfnlist()




#######################################################################
# Initialise
# Initialise the png output filenames
if not opts.figure_name:
  prefix = __name__ + "_"
else:
  prefix = __name__ + "_" + opts.figure_name + "_"
if opts.gps_start_time and opts.gps_end_time :
  suffix = "-"+str(opts.gps_start_time)+"-"+str(opts.gps_end_time-opts.gps_start_time)
else:
  suffix = "-unspecified-gpstime"

# Initialise the html output file
if opts.output_html is True:
  try:
    import markup
    from markup import oneliner as e
  except:
    raise ImportError("Require markup.py to generate the html page")

  html_filename = prefix[0:len(prefix)-1] + suffix +".html"
  html_file = file(html_filename, "w")
  page = markup.page()
  title = "Template Bank Size"
  page.init(title=title)

# set output_cache properly: make sure there is a slash
if len(opts.output_path)>1 :
  opts.output_path = opts.output_path +'/'

output_name = []


#######################################################################
# Read in the search summaries from the template banks

print 'Reading files...' + str(len(tmpltbankFiles))
tmpltSumm = readFiles(tmpltbankFiles)
print 'Reading files...' + str(len(trigbankFiles))
trigSumm  = readFiles(trigbankFiles)
print 'done'
colors = {'G1':'k','H1':'r','H2':'b','L1':'g'}


for ifo in tmpltSumm.keys():
  numTemplates = tmpltSumm[ifo].getColumnByName('nevents').asarray()
  startTime = viz.timeindays(tmpltSumm[ifo].getColumnByName('out_start_time').asarray())
  style = colors[ifo] + 'x'
  plot(startTime, numTemplates, style, label=ifo+' tmplt',\
      markersize=12, markeredgewidth=1)
  if opts.print_numbers:
    print "Number of templates for :" +ifo+ str(startTime) +" " + str(numTemplates)


for ifo in trigSumm.keys():
  numTrigs = trigSumm[ifo].getColumnByName('nevents').asarray()
  startTime = viz.timeindays(trigSumm[ifo].getColumnByName('out_start_time').asarray())
  style = colors[ifo] + 'o'
  plot(startTime, numTrigs, style, label=ifo+' trig',\
      markersize=12, markeredgewidth=1)
  if opts.print_numbers:
    print "Number templates for :" +ifo+ str(startTime) +" " + str(numTrigs)
      
xlabel('Days after start of run', size='x-large')
ylabel('Number of templates', size='x-large')
legend()
grid("on")

fname = prefix[0:len(prefix)-1]   + suffix + ".png"
savefig(fname)

if opts.output_html is True:
  text ="Variation in template and triggered template bank sizes"
  page.a(e.img(src = [opts.output_path +fname], width = 400, \
      alt=text, border="2"), title=text, href=[opts.output_path+fname])
  if opts.output_cache:
    output_name.append(fname)


# Initialise the html output if needed
  

page = writeProcessParams(page, command_line)
html_file.write(page(False))
html_file.close()

if opts.output_cache is True:
  output_cache_name = prefix[0:len(prefix)-1] + suffix +'.cache'
  this = open(output_cache_name, 'w')
  if opts.output_html is True:
    this.write(html_filename + '\n')
  for fname in output_name:
    this.write(fname + '\n')
  this.close()



if opts.show_plot:
  show()  
