#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from glue import segmentsUtils
from pylal import viz
from pylal import SimInspiralUtils

##############################################################################
usage = """usage: %prog [options] file1 (file2 file3)

Inspiral Injection Plotting Functions

Generate a set of summary plots from an injection file to understand
which regions of parameter space are sampled.

Available plots:

1) Chirp mass accuracy can be plotted as:
  a) a function of the injected chirp mass, using --plot-mchirp
  b) a histogram, using --hist-mchirp
  c) a function of the injected effective distance, using --chirp-dist
  d) a function of the detected SNR, using --chirp-snr
The width of all these plots is set using --chirp-axis

"""
parser = OptionParser( usage )
parser.add_option("-d","--dist-v-dist",action="store_true",default=False,\
    help="make a plot of hanford versus livingston effective distance" )
parser.add_option("-S","--spin-v-spin",action="store_true",default=False,\
    help="make an amplitude plot of spin1 versus spin2" )
parser.add_option("-l","--logdist",action="store_true",default=False,\
    help="make an histogram of log of distance" )
parser.add_option("-m","--mchirp",action="store_true",default=False,\
    help="make an histogram of chirp mass" )
parser.add_option("-e","--eta",action="store_true",default=False,\
    help="make an histogram of eta" )
parser.add_option("-M","--mass-v-mass",action="store_true",default=False,\
    help="make a plot of mass1 versus mass2" )
parser.add_option("-1","--mass-spin1",action="store_true",default=False,\
    help="make a plot of mass1 versus mass2 with spin1 color coded" )
parser.add_option("-2","--mass-spin2",action="store_true",default=False,\
    help="make a plot of mass1 versus mass2 with spin2 color coded" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-f","--fig-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" ) 
parser.add_option("-F","--glob-injfile",action="store",type="string",\
    default=None, metavar=" INJFILE",\
    help="glob of the injection file" ) 
parser.add_option("-x","--title-text",action="store",type="string",\
    default=None, metavar=" TEXT",\
    help="add TEXT at start of plot titles" )
parser.add_option("-X","--x-value",action="store",type="string",\
    default=None, metavar=" TEXT",\
    help="variable to plot on the x-axis" )
parser.add_option("-Y","--y-value",action="store",type="string",\
    default=None, metavar=" TEXT",\
    help="variable to plot on the y-axis" )
parser.add_option("-a","--x-log",action="store_true",default=False,\
    help="make x axis logarithmic" )
parser.add_option("-b","--y-log",action="store_true",default=False,\
    help="make y axis logarithmic" )

(opts,args) = parser.parse_args()

# glob the list of files to read in
injfiles = glob.glob(opts.glob_injfile);

# an instance of the simInspiralTable
binaries = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)


if opts.dist_v_dist:
  viz.plot_a_v_b(binaries,"eff_dist_l","eff_dist_h",plot_sym = 'rx')
  axis([0, 40, 0, 40])
  grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_dist-dist.png")

# set of arrays for each spin component
s1x=binaries.get_column("spin1x")
s1y=binaries.get_column("spin1y")
s1z=binaries.get_column("spin1z")
s2x=binaries.get_column("spin2x")
s2y=binaries.get_column("spin2y")
s2z=binaries.get_column("spin2z")

# amplitude of each set of spin (1 & 2)
amps1=sqrt(s1x*s1x+s1y*s1y+s1z*s1z)
amps2=sqrt(s2x*s2x+s2y*s2y+s2z*s2z)

if opts.spin_v_spin:
  figure()
  plot(amps1,amps2,'r.')
  xlabel('S1 amplitude')
  ylabel('S2 amplitude')
  title('Amplitude Comparison: S1 vs S2')
  axis([0, .9, 0, .9])
  grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_spin-spin.png")
    
# set arrays for mass1 and mass2
mass1=asarray(binaries.get_column("mass1"))
mass2=asarray(binaries.get_column("mass2"))

if opts.mass_v_mass:
  figure()
  plot(mass1,mass2, 'rx')
  xlabel('Mass1')
  ylabel('Mass2')
  title('Mass1 Versus Mass2')
  grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_mass-mass.png")

# set of arrays for distance
dist=binaries.get_column("distance")

# log if distance
logdist=log(dist)

if opts.logdist:
  figure()
  hist(logdist,bins=(0,.5,1,1.5,2,2.5,3,3.5,4,4.5))
  title('Histogram of Log of Distance')
  if opts.fig_name:
    savefig(opts.fig_name + "_logdist.png")

# set of arrays for mchirp
mass1=binaries.get_column('mass1')
mass2=binaries.get_column('mass2')
mchirp=((mass1*mass2)**(.6))/((mass1+mass2)**(.2))

if opts.mchirp:
  figure()
  hist(mchirp)
  title('Histogram of Chirp Mass')
  if opts.fig_name:
    savefig(opts.fig_name + "_mchirp.png")

# set of arrays for eta
eta=binaries.get_column("eta")

if opts.eta:
  figure()
  hist(eta)
  title('Histogram of Eta')
  if opts.fig_name:
    savefig(opts.fig_name + "_eta.png")

# Scatter plot of mass1 versus mass2 with spin1
if opts.mass_spin1:
  figure()
  scatter(mass1,mass2,c=asarray(amps1))
  colorbar()
  axis([1,3,1,3])
  title('Mass Comparison with Spin1')
  if opts.fig_name:
    savefig(opts.fig_name + "_mass-spin1.png")

# Scatter plot of mass1 versus mass2 with spin2
if opts.mass_spin2:
  figure()
  scatter(mass1,mass2,c=amps2)
  colorbar()
  axis([1,3,1,3])
  title('Mass Comparison with Spin2')
  if opts.fig_name:
    savefig(opts.fig_name + "_mass-spin2.png")


if opts.x_value and opts.y_value:
  if opts.x_log and not opts.y_log:
    semilogx(binaries.get_column(opts.x_value),\
             binaries.get_column(opts.y_value),'bo')
  elif not opts.x_log and opts.y_log:
    semilogy(binaries.get_column(opts.x_value), \
             binaries.get_column(opts.y_value),'bo')
  else:
    plot(binaries.get_column(opts.x_value),\
         binaries.get_column(opts.y_value),'bo')

  xlabel(opts.x_value)
  ylabel(opts.y_value)
  title(opts.y_value+ ' versus '+ opts.x_value)
  grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_"+opts.y_value +'-'+ opts.x_value+".png")

  

if opts.show_plot:
  show()

