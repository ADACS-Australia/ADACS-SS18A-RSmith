#!/usr/bin/python

# $Id$
__author__ = "Alexander Dietz <Alexander.Dietz@astro.cf.ac.uk>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__ = "plotinsppop"
__Id__ = "$Id$"
__title__ = "Injection Population Plots"


import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *
import itertools
from glue import lal, segmentsUtils
from pylal import SimInspiralUtils, InspiralUtils

##############################################################################
usage = """usage: %prog [options] file1 (file2 file3)

Inspiral Injection Plotting Functions

Generate a set of summary plots from an injection file to understand
which regions of parameter space are sampled.

Available plots:

1) Chirp mass accuracy can be plotted as:
  a) a function of the injected chirp mass, using --plot-mchirp
  b) a histogram, using --hist-mchirp
  c) a function of the injected effective distance, using --chirp-dist
  d) a function of the detected SNR, using --chirp-snr
The width of all these plots is set using --chirp-axis

Any two-dimensional plot is also available for each of the value that is stored
in the sim_inspiral table, including 'total_mass','spin1' and 'spin2'. Just specify the values you want to have plotted with '--x-value' and '--y-value' (repetitive arguments possible).

Example:
plotinsppop --glob-injfile \"../Injection/HL/HL*.xml\" --fig-name s5_test --logdist --mass-v-mass

plotinsppop --glob-injfile \"../Injection/HL/HL*.xml\" --fig-name s5_test --x-value total_mass --y-value distanceLOG --x-value mass1 --y-value mass2 --x-value inclination --y-value distanceLOG

"""
parser = OptionParser( usage )
parser.add_option("-C","--cache-file",action="store",type="string",\
    default=None, metavar=" CACHE",\
    help="setting cache-filename" )
parser.add_option("-F","--glob-injfile",action="store",type="string",\
    default=None, metavar=" INJFILE",\
    help="glob of the injection file" )
parser.add_option("-I","--ifo-times",action="store",type="string",\
    default=None, metavar=" IFO-TIMES",\
    help="setting IFO-times" )
parser.add_option("-B","--gps-start-time",action="store",type="int",\
    default=None, metavar=" TEXT",\
    help="setting GPS start time" )
parser.add_option("-E","--gps-end-time",action="store",type="int",\
    default=None, metavar=" TEXT",\
    help="setting GPS end time" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-f","--enable-output",action="store_true",\
    default=False, metavar=" OUTPUT",\
    help="enable the generation of the html and cache documents" )
parser.add_option("-u","--user-tag",action="store",type="string",\
    default=None, metavar=" USER-TAG",\
    help="setting the user-tag" )
parser.add_option("","--output-path",action="store",type="string",\
    default=None, metavar=" output",\
    help="setting the output-path" )
parser.add_option("-X","--x-value",action="append",type="string",\
    default=None, metavar=" TEXT",\
    help="variable to plot on the x-axis. Add 'LOG' at the end to make it a log  axis" )
parser.add_option("-Y","--y-value",action="append",type="string",\
    default=None, metavar=" TEXT",\
    help="variable to plot on the y-axis. Add 'LOG' at the end to make it a log  axis" )
parser.add_option("-H","--hist",action="append",type="string",\
    default=None, metavar=" HIST",\
    help="setting histograms to plot. Add 'LOG' at the end to make it a log plot" )
parser.add_option("","--verbose",action="store_true",\
    default=False, metavar=" VERBOSE",\
    help="setting verbosity" )



######################################################
## basic preparations
######################################################
(opts,args) = parser.parse_args()
args  = sys.argv[1:]
opts = InspiralUtils.initialise( opts, __name__, __version__)

colors = InspiralUtils.colors
fnameList = []
tagList = []
plot_num = itertools.count(1)

# loading the graphics libs
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

  


######################################################
### reading data
######################################################

if opts.cache_file:
  injfiles = lal.Cache.fromfile(open(opts.cache_file)).sieve(ifos=opts.ifo_times, description = 'INJECTION').\
             checkfilesexist()[0].pfnlist()

else:
  # glob the list of files to read in
  injfiles = glob.glob(opts.glob_injfile);

# an instance of the simInspiralTable
binaries = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)


######################################################
### plotting routines
######################################################


## make the a vs b plots
if opts.x_value and opts.y_value:

  # loop over the given values
  numberPlot = len(opts.x_value)
  for i in range(numberPlot):

    # restore the corresponding value
    xval=opts.x_value[i]
    yval=opts.y_value[i]

    # test for log-plot
    xlog=False
    ylog=False
    if xval[len(xval)-3:]=='LOG':
      xlog=True
      xval=xval[0:len(xval)-3]
    if yval[len(yval)-3:]=='LOG':
      ylog=True
      yval=yval[0:len(yval)-3]
 
    figure(plot_num.next())
    px=binaries.get_column(xval)
    py=binaries.get_column(yval)
    if "end_time" in xval:
      px=[px[i]-opts.start_time for i in range(len(px))]

    if xlog and not ylog:
      semilogx(px, py, 'bo')
    elif not xlog and ylog:
      semilogy(px, py, 'bo')
    else:
      plot(px, py, 'bo')
   
    if "end_time" in xval:
      v=axis()
      print v
      axis([0, opts.end_time-opts.start_time, v[2], v[3]])
      print opts.start_time
    xlabel(xval.replace('_','-'))
    ylabel(yval.replace('_','-'))
    titleString=yval+ ' versus '+ xval
    title(titleString.replace('_','-'))
    grid(True)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name( opts, xval+'_'+yval)
      savefig(fname)
      fnameList.append( fname )
      tagList.append(xval +' vs. '+yval)



## create all the histograms
if opts.hist:
  for hist in opts.hist:
    nbins=30
    
    xlog=False
    ylog=False
    plot_type='normal'
    if hist[len(hist)-3:]=='LOG':
      hist=hist[0:len(hist)-3]
      plot_type='semilogy'

      if hist[len(hist)-3:]=='LOG':
        hist=hist[0:len(hist)-3]
        plot_type='loglog'  
    

    figure(plot_num.next())
    viz.histcol( binaries, hist, nbins = nbins, plot_type=plot_type)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name( opts, 'hist '+hist)
      savefig(fname)
      fnameList.append( fname )
      tagList.append('histogram '+hist)
      

# generate html and cache
if opts.enable_output:
  html_filename = InspiralUtils.write_html_output( opts, args, fnameList, tagList)
  InspiralUtils.write_cache_output( opts, html_filename, fnameList)
  

if opts.show_plot:
  show()

