#!/usr/bin/env python

# $Id$

from __future__ import division

__author__ = "Stephen Fairhurst <sfairhur@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *
import itertools   # This is Python's included itertools, not Pylal's

from glue import lal
from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import itertools as pylal_itertools
from numpy import histogram

##############################################################################
usage = """%prog [options] 

Thinca Triggers Plotting Function

Generate a set of summary plots from a list of thinca files.  First, specify
the ifos from which the triggers come using as many of --ifo options as
necessary.

If you wish to overlay different populations of triggers together, provide
multiple --glob options.

Generate plots of ethinca parameter vs time or mass or snr with --x-value
or histogram the ethinca values with --hist.
"""

parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
parser.add_option("-g","--glob",action="append",type="string",\
  default=[], metavar=" GLOB",help="GLOB of thinca files to read" )
parser.add_option("-I", "--input", action="append", default=[],
  help="read thinca filenames from input file")
parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
  metavar=" SEC", help="length of time over which to cluster triggers" )
parser.add_option("-f","--figure-name",action="store",type="string",\
  default=None, metavar=" FNAME",\
  help="generate png figures with name FNAME-fig.png" )
parser.add_option("-i","--ifo",action="append",type="string",\
  metavar="IFO",dest="ifo_list",\
  help="look at triggers for specified ifo (append to list)" )
parser.add_option("-e", "--ethinca-vs-stat", action="store_true",
  help="plot ethinca parameters vs the combined statistics")
parser.add_option("-x","--x-value",action="append",type="string",\
  metavar="COL_NAME", dest="columns", default=[], help=\
  "plot ethinca parameter against this sngl_inspiral column (add to list)" )
parser.add_option("-S","--statistic",action="store",default='snr',\
  type="string",\
  help="choice of statistic used in making plots, valid arguments are: "
    "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr,")
parser.add_option("-H","--hist",action="store_true",default=False,\
  help="make a histogram of the e-thinca values" )
parser.add_option("-n","--num-bins",action="store",type='int',\
  default=20, metavar=" NUM",\
  help="number of bins used in histogram" )
parser.add_option("-V","--veto-file",action="store",type="string",\
  default=None,metavar=" FNAME",\
  help="read in segments from FNAME (assumed segwizard format)")
parser.add_option("-s","--show-plot",action="store_true",default=False,\
  help="display the figures on the terminal" )

(opts,args) = parser.parse_args()

if len(opts.ifo_list) < 2:
  print >>sys.stderr, "Must specify at least 2 ifos with triggers"
  print >>sys.stderr, "Enter 'plotethinca --help' for usage"
  sys.exit(1)

# If show() is not required, use Agg backend to prevent X display dependency
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz
rc('font', size='x-large')

bins = [i/opts.num_bins for i in range(opts.num_bins+1)]

filelists = [glob.glob(g) for g in opts.glob] + \
    [[lal.CacheEntry(line).path() for line in open(f)] for f in opts.input]
statistic = CoincInspiralUtils.coincStatistic(opts.statistic)

coincTriggersList = []
for filegroup in filelists:
  # read raw triggers
  inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(filegroup)
  
  # perform the veto
  if opts.veto_file is not None:
    seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
    inspTriggers = inspTriggers.veto(seglist)
  
  # reconstruct the coincs
  newCoincs = CoincInspiralUtils.coincInspiralTable(inspTriggers, statistic)
  
  # cluster them
  if opts.cluster_window:
    newCoincs = newCoincs.cluster(opts.cluster_window)
  
  # append them to our list
  coincTriggersList.append(newCoincs)

# Plot
figure_numbers = itertools.count(1) # Infinite "list" of numbers starting at 1
symbol_list = ('rx', 'b+', 'k^', 'g*')
color_list = ('r', 'b', 'k', 'g')
if len(filelists) > min(len(symbol_list), len(color_list)):
  print >>sys.stderr, "Warning: Only the first %d globs being used.  Extend "\
    "symbol_list or color_list to handle more of them."

# For each pair of IFOs:
for ifos in pylal_itertools.choices(opts.ifo_list, 2):
  # Pick out relevant double coincs and calculate ethinca parameters
  coincs_list = [x.coincinclude(ifos) for x in coincTriggersList]
  ethinca_list = [x.getEThincaValues(ifos) for x in coincs_list]
  
  for col in opts.columns:  # ethinca-param vs col
    for ifo in ifos:
      figure(figure_numbers.next())
      for coincs, ethincaVals, symbol in zip(coincs_list, ethinca_list, symbol_list):
        xVals = coincs.getsngls(ifo).get_column(col)
        plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6)
      
      grid(True)
      if len(ethincaVals) == 0 or max(ethincaVals) < 1:
        ylim((0,1))
      xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
      ylabel("E-thinca parameter")
      title("E-thinca parameter vs %s for %s and %s triggers" % \
        (col.replace('_', r'\_'), ifos[0], ifos[1]))
      
      if opts.figure_name:
        savefig("%s_%s_%s_ethinca_vs_%s_%s.jng" % \
          (opts.figure_name, ifos[0], ifos[1], ifo, col.replace('_', r'\_')))
      if not opts.show_plot:
        close()
  
  if opts.ethinca_vs_stat:
    figure(figure_numbers.next())
    for coincs, ethincaVals, symbol in zip(coincs_list, ethinca_list, symbol_list):
      xVals = [x.stat for x in coincs]
      plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6)

    grid(True)
    if len(ethincaVals) and max(ethincaVals) < 1:
      ylim((0,1))
    xlabel("Combined %s" % opts.statistic.replace('_', r'\_'))
    ylabel("E-thinca parameter")
    title("E-thinca parameter vs combined %s for %s and %s triggers" % \
      (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]))

    if opts.figure_name:
      savefig("%s_%s_%s_ethinca_vs_combined_%s.png" % (opts.figure_name,
        ifos[0], ifos[1], opts.statistic))
    if not opts.show_plot:
      close()
  
  if opts.hist:
    figure(figure_numbers.next())
    
    # Histogram all datasets with the same bins
    ep_max = max([max(eps) for eps in ethinca_list if len(eps)] + [0.1])
    y_list, x_list = zip(*[histogram(eps, bins=opts.num_bins, range=[0, ep_max]) \
                           for eps in ethinca_list])
    
    n = len(x_list)
    for i, x, y, color in zip(range(n), x_list, y_list, color_list):
      x += 0.1*i*ep_max/opts.num_bins  # Introduce some stagger
      bar(x, y, color=color, width=(1-0.1*n)*ep_max/opts.num_bins)
    ylabel("\#")
    xlabel("E-thinca parameter")
    title("E-thinca parameter Histogram for " + ifos[0] + \
          " and " + ifos[1] + " triggers")
    if opts.figure_name:
      savefig(opts.figure_name + "_" + ifos[0] + "_" + ifos[1] + \
        "_ethinca_hist.png")
    if not opts.show_plot:
      close()

if opts.show_plot:
  show()
