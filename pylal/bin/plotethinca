#!/usr/bin/python
"""
routine to look at  ethinca parameter
"""
# $Id$

from __future__ import division

__author__ = "Stephen Fairhurst <sfairhur@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__="plotethinca"
__Id__ = "$Id$"

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *
import itertools   # This is Python's included itertools, not Pylal's

from glue import lal
from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import SearchSummaryUtils
from pylal import itertools as pylal_itertools
from pylal import InspiralUtils
from numpy import histogram

##############################################################################
usage = """%prog [options] 

Thinca Triggers Plotting Function

Generate a set of summary plots from a list of thinca files.  First, specify
the ifos from which the triggers come using as many of --ifo options as
necessary.

If you wish to overlay different populations of triggers together, provide
multiple --glob options.

Generate plots of ethinca parameter vs time or mass or snr with --x-value
or histogram the ethinca values with --hist.
"""


def parse_command_line():
  """
  Parser function dedicated
  """


  parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
  # options related to input and output
  parser.add_option("-g","--injection-glob",action="append",type="string",\
      default=[], metavar=" GLOB",help="GLOB of injection thinca files to read" )
  parser.add_option("-I", "--injection-input", action="append", default=[],
      help="read injection thinca filenames from input file")

  parser.add_option("-t","--slide-glob",action="append",type="string",\
      default=[], metavar=" GLOB",help="GLOB of time slide thinca files to read" )
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")

  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None, metavar=" USERTAG",\
      help="The user tag used in the name of the figures" )

  parser.add_option("","--gps-start-time",action="store", type="int", metavar="GPSSTARTTIME",\
      help="gps start time used in the figure and output file names")

  parser.add_option("","--gps-end-time",action="store", type= "int", metavar="GPSENDTIME",\
      help="gps end time used in the figure and output file names")

  parser.add_option("-P","--output-path",action="store",\
      type="string",default=None,  metavar="PATH",\
      help="path where the figures would be stored")

  parser.add_option("","--ifo-times",action="store",type="string",\
      default=None,metavar="IFOS",\
      help="Which ifo times are being looked at for slides (e.g. H1H2L1)" )

  parser.add_option("-V","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="read in segments from FNAME (assumed segwizard format)")

  parser.add_option("", "--cache-file", action="store", type="string", default=None, metavar="CACHEFILE",\
      help="output cache file for injections, zerolag or playground  COIRE(THINCA) files")

#  parser.add_option("","--coinc-pattern", action="store", type="string", default=None,metavar="COINCPATTERN")

  parser.add_option("","--slide-pattern", action="store", type="string", default= None,metavar="SLIDEPATTERN")

  parser.add_option("","--inj-pattern", action="store", type="string", default=None,metavar="INJPATTERN")

#  parser.add_option("","--bank-pattern", action="store", type="string", default= None,metavar="BANKPATTERN")

#  parser.add_option("","--trig-pattern", action="store", type="string", default= None,metavar="TRIGPATTERN")

  parser.add_option("","--time-slides", action="store_true", default=False,\
      help="add time slides to the plots" )

  parser.add_option("","--match", action="store", default=None,type="string",\
      metavar="MATCH",help="sieves exactly to a given pattern, if set True" )

  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )

  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  # options that sets parameters for ploting

  parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
      metavar=" SEC", help="length of time over which to cluster triggers" )

  parser.add_option("-i","--ifo-tag",action="store",type="string",\
      metavar="IFO",\
      help="look at triggers for specified ifos [H1H2L1]" )

  parser.add_option("-e", "--ethinca-vs-stat", action="store_true",
      help="plot ethinca parameters vs the combined statistics")

  parser.add_option("-x","--x-value",action="append",type="string",\
      metavar="COL_NAME", dest="columns", default=[], help=\
      "plot ethinca parameter against this sngl_inspiral column (add to list)" )

  parser.add_option("-S","--statistic",action="store",default='snr',\
      type="string",\
      help="choice of statistic used in making plots, valid arguments are: "
      "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr,")

  parser.add_option("-X", "--log-x", action="store_true",
      help="for ethinca vs ... make x axis log")

  parser.add_option("-H","--hist",action="store_true",default=False,\
      help="make a histogram of the e-thinca values" )

  parser.add_option("","--hist-stat",action="store_true",default=False,\
      help="make a histogram of the combined statistics" )

  parser.add_option("-n","--num-bins",action="store",type='int',\
      default=20, metavar=" NUM",\
      help="number of bins used in histogram" )

  parser.add_option("-N","--num-slides",action="store",type="int",default=0,\
      metavar="NUM_SLIDES",help="number of time slides performed" )

  parser.add_option("","--h1-slide-time",action="store",type="int",default=0,\
      metavar="SEC",help="time slid for H1 per slide number" )

  parser.add_option("","--h2-slide-time",action="store",type="int",default=10,\
      metavar="SEC",help="time slid for H2 per slide number" )

  parser.add_option("","--l1-slide-time",action="store",type="int",default=5,\
      metavar="SEC",help="time slid for L1 per slide number" )

  parser.add_option("","--injection-window",action="store",type="float",\
      default=None,metavar="SEC",\
      help="injection window used for found injections" )

  parser.add_option("","--second-stage",action="store_true",\
      default=False,metavar="SECONDSTAGE",\
      help="specify stage of the analysis" )

  parser.add_option("", "--figure-resolution",action="store",type="int",\
      default=50, metavar="FIGURERESOLUTION", \
      help="resolution of the thumbnails (50 by default)" )
  
  
  (options,args) = parser.parse_args()
  
  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times (which ifos were analysed) must be provided"


  return options, sys.argv[1:]





# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
if opts.verbose: InspiralUtils.message(opts, "Initialisation...")
# -- get command line arguments

# -- some initialisation
opts = InspiralUtils.initialise(opts, __name__, __version__)
# -- set the proper color code
colors = InspiralUtils.colors
fnameList = []   # use for the cache file
tagList= []   # use for the cache file

# Change to Agg back-end if show() will not be called thus avoiding display problem
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

# test the input options
if not opts.ifo_times:
  raise ValueError, "--ifo-times (which ifos were analysed) must be provided"

if opts.cache_file and (opts.injection_glob or opts.slide_glob):
    raise ValueError, """ Use either the glob options(--inj-glob OR the cachefile options (--cache-input), not both at the same time.
"""

#parse the ifos from the ifo tag
opts.ifo_list = []
temp_ifo_list = ['H1','H2','L1','G1','V1','T1']
for ifo in temp_ifo_list:
  if opts.ifo_tag.count(ifo): opts.ifo_list.append(ifo)

if len(opts.ifo_list) < 2:
  print >>sys.stderr, "Must specify at least 2 ifos with triggers"
  print >>sys.stderr, "Enter 'plotethinca --help' for usage"
  sys.exit(1)

if opts.slide_glob or opts.time_slides:
  if not opts.num_slides or not opts.ifo_times:
    print >>sys.stderr, "--num-slides and --ifo-times must be specified if"
    print >>sys.stderr, "working with time slides"
    sys.exit(1)

# ============================================================================
InspiralUtils.message(opts, "reading data...")

rc('font', size='x-large')
if not opts.show_plot:
  rc('text', usetex=True)

bins = [i/opts.num_bins for i in range(opts.num_bins+1)]

if opts.cache_file  is not None:
  print 'reading cache'
  cache_injfilelist = []
  cache_slidefilelist = []
  allfilesCache = lal.Cache.fromfile(open(opts.cache_file))
  print opts.slide_pattern
  if opts.slide_pattern:
    cache_slidefilelist = allfilesCache.sieve(ifos=opts.ifo_times, exact_match=True).sieve(description=opts.slide_pattern).checkfilesexist()[0].pfnlist()
  if opts.inj_pattern:
    cache_injfilelist = allfilesCache.sieve(ifos=opts.ifo_times, exact_match=True).sieve(description=opts.inj_pattern).checkfilesexist()[0].pfnlist()

if opts.injection_glob:
  filelists = [glob.glob(g) for g in opts.injection_glob]
elif opts.cache_file:
  filelists = [cache_injfilelist]
  
if opts.slide_glob:
  slidefilelists = [glob.glob(g) for g in opts.slide_glob]
elif opts.time_slides:
  slidefilelists = [cache_slidefilelist]
else:
  slidefilelists = []
  
statistic = CoincInspiralUtils.coincStatistic(opts.statistic)

coincTriggersList = []
for filegroup in filelists:
  for file in filegroup:
    # read raw triggers
    inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles([file], verbose=opts.verbose) 
    # perform the veto
    if opts.veto_file is not None:
      seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
      inspTriggers = inspTriggers.veto(seglist)
  
    # reconstruct the coincs
    newCoincs = CoincInspiralUtils.coincInspiralTable(inspTriggers, statistic)
    # cluster them
    if opts.cluster_window:
      newCoincs = newCoincs.cluster(opts.cluster_window)

    # append them to our list
    coincTriggersList.append(newCoincs)

slideTriggersList = []
if slidefilelists:
  for filegroup in slidefilelists:
    # read raw triggers
    slideTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(filegroup, verbose=opts.verbose)

    segs = SearchSummaryUtils.GetSegListFromSearchSummaries(filegroup)

    slideTimeAnalyzed = 0
    for i in range(len(segs[opts.ifo_times])):
      slideTimeAnalyzed += segs[opts.ifo_times][i][1].seconds \
        - segs[opts.ifo_times][i][0].seconds

    # perform the veto
    if opts.veto_file is not None:
      seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
      slideTriggers = slideTriggers.veto(seglist)

    slide_num = range(1 , opts.num_slides + 1)
    slide_num.extend(range(-opts.num_slides, 0))

    for slide in slide_num:

      dtH1 = slide * opts.h1_slide_time
      dtH2 = slide * opts.h2_slide_time
      dtL1 = slide * opts.l1_slide_time

      this_slide = {}
      this_slide["slide_num"] = slide
      this_slide["sngl_trigs"] = slideTriggers.getslide(slide)

      # Add the slide times
      for i in this_slide["sngl_trigs"]:

        segListIdx=segs[opts.ifo_times].find(i.end_time)
        segStartTime=segs[opts.ifo_times][segListIdx][0].seconds
        segEndTime=segs[opts.ifo_times][segListIdx][1].seconds

        if i.ifo == 'H1':
          i.end_time += dtH1
        if i.ifo == 'H2':
          i.end_time += dtH2
        if i.ifo == 'L1':
          i.end_time += dtL1

        while i.end_time + i.end_time_ns * 1.0e-9 > segEndTime or \
              i.end_time < segStartTime:
          if i.end_time >= segEndTime:
            i.end_time = segStartTime + (i.end_time - segEndTime)
          elif i.end_time < segStartTime:
            i.end_time = segEndTime - (segStartTime - i.end_time)

    # make coincs
    newSlides = CoincInspiralUtils.coincInspiralTable(slideTriggers, statistic)

    # cluster triggers
    if opts.cluster_window:
      newSlides = newSlides.cluster(opts.cluster_window)

    slideTriggersList.append(newSlides)

# Plot
text = "End time versus SNR (missed injections)"
InspiralUtils.message(opts, "plotting..."+text)

figure_numbers = itertools.count(1) # Infinite "list" of numbers starting at 1
symbol_list = ('rx', 'b+', 'k^', 'gv')
color_list = ('r', 'b', 'k', 'g')
symbol_slide_list = ('mx', 'c+', '0.5^', 'yv')
color_slide_list = ('m', 'c', '0.5', 'y')
if len(filelists) > min(len(symbol_list), len(color_list)):
  print >>sys.stderr, "Warning: Only the first %d globs being used.  Extend "\
    "symbol_list or color_list to handle more of them."

# For each pair of IFOs, plot snr versus ethinca versus total mass
for ifos in pylal_itertools.choices(opts.ifo_list, 2):
  coincs_list = [x.coincinclude(ifos) for x in coincTriggersList]
  numInjections = 0
  for coincs in coincs_list:
    numInjections += len(coincs)
  ethinca_list = [x.getEThincaValues(ifos) for x in coincs_list]
  if slideTriggersList:
    slides_list = [x.coincinclude(ifos) for x in slideTriggersList]
    ethinca_slide_list = [x.getEThincaValues(ifos) for x in slides_list]
  else:
    slides_list = []
    ethinca_slide_list = []
  col = 'snr'
  for ifo in ifos:
    text = "Eithinca versus total mass ("+ifo+")"
    InspiralUtils.message(opts, "plotting..."+text)
    figure(figure_numbers.next())
    for coincs, ethincaVals, symbol in \
        zip(coincs_list, ethinca_list, symbol_list):
      xValsSNR = coincs.getsngls(ifo).get_column('snr')
      totMass = coincs.getsngls(ifo).get_column('mass1')+ coincs.getsngls(ifo).get_column('mass2')

      label=ifo+' : ' + str(len(xValsSNR))+' coincidences'
      scatter(xValsSNR, ethincaVals, s=40, c=totMass, faceted=False)
      ax = axes()
      ax.set_xscale('log')
#      ax.set_yscale('log')
      colorbar()
        
#    if slideTriggersList:
#      hold(True)
#      for slides, ethincaSlideVals, symbolSlide in \
#          zip(slides_list, ethinca_slide_list, symbol_slide_list):
#        xSlideVals = slides.getsngls(ifo).get_column(col)
#        if opts.log_x:
#          semilogx(xSlideVals, ethincaSlideVals, symbolSlide,
#            markeredgewidth=1, markersize=6)
#        else:
    grid(True)
    if coincTriggersList:
      if len(ethincaVals) == 0 or max(ethincaVals) < 1:
        ylim((0,1))
    elif slideTriggersList:
      if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < 1:
        ylim((0,1))
    xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
    ylabel("E-thinca parameter ")
    title("E-thinca parameter vs %s for %s and %s triggers" % \
      (col.replace('_', r'\_'), ifos[0], ifos[1]))
      
    xlim(xmin=5.5, xmax=1000)
    ylim(ymin=0, ymax=1)
    #ax.set_yscale('log')
#    legend()

    if opts.enable_output:
      name = "%s_%s_%s_ethinca_vs_%s_%s_andtotMass.png" % \
        (opts.user_tag, ifos[0], ifos[1], ifo, col.replace('_', r'\_'))
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)

for ifos in pylal_itertools.choices(opts.ifo_list, 2):
  # Pick out relevant double coincs and calculate ethinca parameters
  coincs_list = [x.coincinclude(ifos) for x in coincTriggersList]
  numInjections = 0
  for coincs in coincs_list:
    numInjections += len(coincs)
  ethinca_list = [x.getEThincaValues(ifos) for x in coincs_list]
  if slideTriggersList:
    slides_list = [x.coincinclude(ifos) for x in slideTriggersList]
    ethinca_slide_list = [x.getEThincaValues(ifos) for x in slides_list]
  else:
    slides_list = []
    ethinca_slide_list = []

  for col in opts.columns:  # ethinca-param vs col
    for ifo in ifos:
      text = "E-thinca parameter vs %s for %s and %s triggers" % \
            (col.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
      InspiralUtils.message(opts, "plotting..."+text)
      figure(figure_numbers.next())
      for coincs, ethincaVals, symbol in \
          zip(coincs_list, ethinca_list, symbol_list):
        xVals = coincs.getsngls(ifo).get_column(col)
        label=ifo+' : ' + str(len(xVals))+' coincidences'
        if opts.log_x:
          semilogx(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6, label=label)
        else:
          plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6, label=label)
        
      if slideTriggersList:
        hold(True)
        for slides, ethincaSlideVals, symbolSlide in \
            zip(slides_list, ethinca_slide_list, symbol_slide_list):
          xSlideVals = slides.getsngls(ifo).get_column(col)
          if opts.log_x:
            semilogx(xSlideVals, ethincaSlideVals, symbolSlide,
              markeredgewidth=1, markersize=6)
          else:
            plot(xSlideVals, ethincaSlideVals, symbolSlide,
              markeredgewidth=1, markersize=6)

      

      grid(True)
      if coincTriggersList:
        if len(ethincaVals) == 0 or max(ethincaVals) < 1:
          ylim((0,1))
      elif slideTriggersList:
        if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < 1:
          ylim((0,1))
      xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
      ylabel("E-thinca parameter ")
      title("E-thinca parameter vs %s for %s and %s triggers" % \
        (col.replace('_', r'\_'), ifos[0], ifos[1]))
      
      xlim(xmin=5.5, xmax=1000)
      ylim(ymin=0, ymax=1)
      legend()

      if opts.enable_output:
        name = "%s_%s_ethinca_vs_%s_%s" % (ifos[0], ifos[1], ifo, col)  
        fname, = InspiralUtils.set_figure_name(opts, name)
        fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
        fnameList.append(fname)
        tagList.append(text)
        
  
  if opts.ethinca_vs_stat:  # ethinca-param vs combined statistic
    text = "E-thinca parameter vs combined %s for %s and %s triggers" % \
        (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    figure(figure_numbers.next())
    for coincs, ethincaVals, symbol in \
        zip(coincs_list, ethinca_list, symbol_list):
      xVals = [x.stat for x in coincs]
      if opts.log_x:
        semilogx(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6)
      else:
        plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6)
    if slideTriggersList:
      hold(True)
      for slides, ethincaSlideVals, symbolSlide in \
          zip(slides_list, ethinca_slide_list, symbol_slide_list):
        xSlideVals = [x.stat for x in slides]
        if opts.log_x:
          semilogx(xSlideVals, ethincaSlideVals, symbolSlide,
            markeredgewidth=1, markersize=6)
        else:
          plot(xSlideVals, ethincaSlideVals, symbolSlide,
            markeredgewidth=1, markersize=6)

    grid(True)
    if coincTriggersList:
      if len(ethincaVals) == 0 or max(ethincaVals) < 1:
        ylim((0,1))
    elif slideTriggersList:
      if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < 1:
        ylim((0,1))
    xlabel("Combined %s" % opts.statistic.replace('_', r'\_'))
    ylabel("E-thinca parameter")
    title("E-thinca parameter vs combined %s for %s and %s triggers" % \
      (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]))

    xlim(xmin=5.5, xmax=1000)
    ylim(ymin=0, ymax=1)
    legend()
    if opts.enable_output:
      name = "%s_%s_ethinca_vs_combined_%s" % (ifos[0], ifos[1], opts.statistic)  
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
        

  if opts.hist_stat:  # hist combined statistic
    text = "Histogram of combined %s for %s and %s triggers" % \
          (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    figure(figure_numbers.next())
    stat_max = max([max([y.stat for y in x]) for x in coincs_list+slides_list \
        if len(x)] + [0.1])
    if coincTriggersList:
      xVals = [[x.stat for x in coincs] for coincs in coincs_list]
      y_list, x_list = zip(*[histogram(xVal, bins=opts.num_bins,
          range=[0, stat_max]) for xVal in xVals])
      n = len(x_list)

    if slideTriggersList:
      xSlideVals = [[x.stat for x in slides] for slides in slides_list]
      y_list, x_list = zip(*[histogram(xSlideVal, bins=opts.num_bins,
          range=[0, stat_max]) for xSlideVal in xSlideVals])
      if not coincTriggersList:
        n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_slide_list):
        x += 0.1*i*stat_max/opts.num_bins  # Introduce some stagger
        y[len(y)-1] = 0
        bar(x, y, color=color, width=(1-0.1*n)*stat_max/opts.num_bins)

    if coincTriggersList:
      hold(True)
      xVals = [[x.stat for x in coincs] for coincs in coincs_list]
      y_list, x_list = zip(*[histogram(xVal, bins=opts.num_bins,
          range=[0, stat_max]) for xVal in xVals])
      n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_list):
        x += 0.1*i*stat_max/opts.num_bins  # Introduce some stagger
        y[len(y)-1] = 0
        bar(x, y, color=color, width=(1-0.1*n)*stat_max/opts.num_bins)
    ylim(0,100)
    grid(True)
    xlabel("Combined %s" % opts.statistic.replace('_', r'\_'))
    ylabel("\#")
    title("Histogram of combined %s for %s and %s triggers" % \
      (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]))

    if opts.enable_output:
      name = "%s_%s_hist_combined_%s" % (ifos[0], ifos[1], opts.statistic) 
      fname, = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
        
 
  if opts.hist:
    text = "E-thinca parameter Histogram for " + ifos[0] + \
        " and " + ifos[1] + " triggers in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    figure(figure_numbers.next())
    
    # Histogram all datasets with the same bins
    ep_max = max([max(eps) for eps in ethinca_list+ethinca_slide_list \
        if len(eps)] + [0.1])
    if coincTriggersList:
      y_list, x_list = zip(*[histogram(eps, bins=opts.num_bins,\
          range=[0, ep_max]) for eps in ethinca_list])
      n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_list):
        x += 0.1*i*ep_max/opts.num_bins  # Introduce some stagger
        bar(x, y, color=color, width=(1-0.1*n)*ep_max/opts.num_bins)
    if slideTriggersList:
      hold(True)
      y_list, x_list = zip(*[histogram(eps, bins=opts.num_bins,
          range=[0, ep_max]) for eps in ethinca_slide_list])
      if coincTriggersList:
        normalization = opts.injection_window*numInjections/ \
               (2.0*opts.num_slides*slideTimeAnalyzed)
      else:
        normalization = 1.0
        n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_slide_list):
        x += 0.1*i*ep_max/opts.num_bins  # Introduce some stagger
        y_norm = zeros(len(y),Float)
        for j in range(len(y)):
          y_norm[j] = normalization*y[j]
        bar(x, y_norm, color=color, width=(1-0.1*n)*ep_max/opts.num_bins)
    ylabel("\#")
    xlabel("E-thinca parameter")
    title("E-thinca parameter Histogram for " + ifos[0] + \
          " and " + ifos[1] + " triggers")
    
    if opts.enable_output:
      name = ifos[0] + "_" + ifos[1] + "_ethinca_hist" 
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
        

# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.write_html_output(opts, args, fnameList, tagList)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)



# ============================================================================


if opts.show_plot:
  show()
