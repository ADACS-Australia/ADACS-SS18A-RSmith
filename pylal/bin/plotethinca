#!/usr/bin/python
"""
routine to look at  ethinca parameter
"""
# $Id$

from __future__ import division

__author__ = "Stephen Fairhurst <sfairhur@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__prog__="plotethinca"
__Id__ = "$Id$"

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from glue import lal
from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue import iterutils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import SearchSummaryUtils
from pylal import InspiralUtils
from numpy import histogram, float64
#from pylal import itertools as pylal_itertools

##############################################################################
usage = """%prog [options] 

Thinca Triggers Plotting Function

Generate a set of summary plots from a list of thinca files.  First, specify
the ifos from which the triggers come using as many of --ifo options as
necessary.

If you wish to overlay different populations of triggers together, provide
multiple --glob options.

Generate plots of ethinca parameter vs time or mass or snr with --x-value
or histogram the ethinca values with --hist.
"""


def parse_command_line():
  """
  Parser function dedicated
  """


  parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
  # options related to input and output
  parser.add_option("-g","--injection-glob",action="append",type="string",\
      default=[], metavar=" GLOB",help="GLOB of injection thinca files to read" )
  parser.add_option("-I", "--injection-input", action="append", default=[],
      help="read injection thinca filenames from input file")

  parser.add_option("-t","--slide-glob",action="append",type="string",\
      default=[], metavar=" GLOB",help="GLOB of time slide thinca files to read" )
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")

  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None, metavar=" USERTAG",\
      help="The user tag used in the name of the figures" )

  parser.add_option("","--gps-start-time",action="store", type="int", metavar="GPSSTARTTIME",\
      help="gps start time used in the figure and output file names")

  parser.add_option("","--gps-end-time",action="store", type= "int", metavar="GPSENDTIME",\
      help="gps end time used in the figure and output file names")

  parser.add_option("-P","--output-path",action="store",\
      type="string",default=None,  metavar="PATH",\
      help="path where the figures would be stored")

  parser.add_option("","--ifo-times",action="store",type="string",\
      default=None,metavar="IFOS",\
      help="Which ifo times are being looked at for slides (e.g. H1H2L1)" )

  parser.add_option("-V","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="read in segments from FNAME (assumed segwizard format)")

  parser.add_option("", "--cache-file", action="store", type="string", default=None, metavar="CACHEFILE",\
      help="output cache file for injections, zerolag or playground  COIRE(THINCA) files")

#  parser.add_option("","--coinc-pattern", action="store", type="string", default=None,metavar="COINCPATTERN")

  parser.add_option("","--slide-pattern", action="store", type="string", default= None,metavar="SLIDEPATTERN")

  parser.add_option("","--inj-pattern", action="store", type="string", default=None,metavar="INJPATTERN")

  parser.add_option("","--offsource-pattern", action="store", type="string", default= None,metavar="OFFSOURCEPATTERN")

#  parser.add_option("","--trig-pattern", action="store", type="string", default= None,metavar="TRIGPATTERN")

  parser.add_option("","--time-slides", action="store_true", default=False,\
      help="add time slides to the plots" )

  parser.add_option("","--match", action="store", default=None,type="string",\
      metavar="MATCH",help="sieves exactly to a given pattern, if set True" )

  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )

  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  # options that sets parameters for ploting

  parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
      metavar=" SEC", help="length of time over which to cluster triggers" )

  parser.add_option("-i","--ifo-tag",action="store",type="string",\
      metavar="IFO",\
      help="look at triggers for specified ifos [H1H2L1]" )

  parser.add_option("-e", "--ethinca-vs-stat", action="store_true",
      help="plot ethinca parameters vs the combined statistics")

  parser.add_option("-x","--x-value",action="append",type="string",\
      metavar="COL_NAME", dest="columns", default=[], help=\
      "plot ethinca parameter against this sngl_inspiral column (add to list)" )

  parser.add_option("-S","--statistic",action="store",default='snr',\
      type="string",\
      help="choice of statistic used in making plots, valid arguments are: "
      "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr,")

  parser.add_option("","--eff-snr-denom-fac",action="store",default=250.0,\
      type="float", help="Effective snr denom fac: default = 250")

  parser.add_option("-X", "--log-x", action="store_true",
      help="for ethinca vs ... make x axis log")
  parser.add_option("-Y", "--log-y", action="store_true",
      help="for ethinca vs ... make y axis log")

  parser.add_option("-H","--hist",action="store_true",default=False,\
      help="make a histogram of the e-thinca values" )

  parser.add_option("","--hist-stat",action="store_true",default=False,\
      help="make a histogram of the combined statistics" )

  parser.add_option("-n","--num-bins",action="store",type='int',\
      default=20, metavar=" NUM",\
      help="number of bins used in histogram" )

  parser.add_option("-N","--num-slides",action="store",type="int",default=0,\
      metavar="NUM_SLIDES",help="number of time slides performed" )

  parser.add_option("","--h1-slide-time",action="store",type="int",default=0,\
      metavar="SEC",help="time slid for H1 per slide number" )

  parser.add_option("","--h2-slide-time",action="store",type="int",default=10,\
      metavar="SEC",help="time slid for H2 per slide number" )

  parser.add_option("","--l1-slide-time",action="store",type="int",default=5,\
      metavar="SEC",help="time slid for L1 per slide number" )

  parser.add_option("","--v1-slide-time",action="store",type="int",default=5,\
      metavar="SEC",help="time slid for V1 per slide number" )

  parser.add_option("","--injection-window",action="store",type="float",\
      default=None,metavar="SEC",\
      help="injection window used for found injections" )
  
  parser.add_option("","--max-ethinca",action="store",type="float",\
      default=0.5,metavar="SEC",\
      help="Max Ethinca value for the plotting range (default is 0.5) " )


  parser.add_option("", "--figure-resolution",action="store",type="int",\
      default=50, metavar="FIGURERESOLUTION", \
      help="resolution of the thumbnails (50 by default)" )
  
  parser.add_option("", "--html-for-cbcweb",action="store",\
      default=False, metavar = "CVS DIRECTORY", help="publish the html "\
      "output in a format that can be directly published on the cbc webpage "\
      "or in CVS. This only works IF --enable-output is also specified. The "\
      "argument should be the cvs directory where the html file will be placed "\
      "Example: --html-for-cbcweb protected/projects/s5/yourprojectdir") 

  parser.add_option("", "--old-document",action="store_true",\
      default=False,help="this option turns on mangling. you are only "\
      "supposed to use it if you are handling old documents")
  
  (options,args) = parser.parse_args()
  
  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times (which ifos were analysed) must be provided"


  return options, sys.argv[1:]

def populate_mtotal(sngl_table):
  """
  Iterate over a sngl_inspiral table and populate its mtotal column.
  This is necessary with working with documents created with old XML table
  definitions (i.e. the S5 low mass branch).
  """
  for trig in sngl_table:
      trig.mtotal = trig.mass1 + trig.mass2

# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
InspiralUtils.message(opts, "Initialisation...")
opts = InspiralUtils.initialise(opts, __prog__, __version__)
# -- set the proper color code
colors = InspiralUtils.colors
fnameList = []   # use for the cache file
tagList= []   # use for the cache file
fig_num = 1
comments =""
maxEThinca = opts.max_ethinca

# Change to Agg back-end if show() will not be called thus avoiding display problem
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

# this scaling is equivalent to setting the font.size to the keyword 'x-large',
# which is not supported (yet?) by matplotlib 0.91
rc('font', size=rcParams['font.size'] * 1.440)

if not opts.show_plot:
  rc('text', usetex=True)

try:  bins = [i/opts.num_bins for i in range(opts.num_bins+1)]
except: ValueError, """ problems with opts.num_bins (set to zero ? )"""

if opts.cache_file and (opts.injection_glob or opts.slide_glob):
    raise ValueError, """ Use either the glob options(--inj-glob OR the cachefile options (--cache-input), not both at the same time.
"""

#parse the ifos from the ifo tag
opts.ifo_list = []
temp_ifo_list = ['H1','H2','L1','G1','V1','T1']
for ifo in temp_ifo_list:
  if opts.ifo_tag is not None and opts.ifo_tag.count(ifo):
    opts.ifo_list.append(ifo)

if len(opts.ifo_list) < 2:
  print >>sys.stderr, "Must specify at least 2 ifos with triggers"
  print >>sys.stderr, "Enter 'plotethinca --help' for usage"
  sys.exit(1)

if opts.slide_glob or opts.time_slides:
  if not opts.num_slides or not opts.ifo_times:
    print >>sys.stderr, "--num-slides and --ifo-times must be specified if"
    print >>sys.stderr, "working with time slides"
    sys.exit(1)

comments+=InspiralUtils.message(opts, "Ifo times requested is "+opts.ifo_times+"  and coincidences requested is "+opts.ifo_tag)


# ============================================================================
InspiralUtils.message(opts, "Reading data...")

slidefilelists = []
offsourcefilelists = []
if opts.cache_file  is not None:
  InspiralUtils.message(opts, 'Reading cache')
  cache_injfilelist = []
  cache_slidefilelist = []
  cache_offsourcefilelist = []
  allfilesCache = lal.Cache.fromfile(open(opts.cache_file))
  if opts.slide_pattern:
    cache_slidefilelist = allfilesCache.sieve(ifos=opts.ifo_times, exact_match=True).sieve(description=opts.slide_pattern).checkfilesexist()[0].pfnlist()
    slidefilelists = [cache_slidefilelist]
    if not len(cache_slidefilelist):
      err_msg = opts.cache_file+ " contains no files with " + opts.slide_pattern + " description"
      print >>sys.stderr, err_msg
      comments += InspiralUtils.message(opts, err_msg)
    else:
      comments += InspiralUtils.message(opts,  'Reading ' +str(len(cache_slidefilelist)) + ' files having the pattern '+opts.slide_pattern)

  if opts.inj_pattern:
    cache_injfilelist = allfilesCache.sieve(ifos=opts.ifo_times, exact_match=True).sieve(description=opts.inj_pattern).checkfilesexist()[0].pfnlist()
    filelists = [cache_injfilelist]
    if not len(cache_injfilelist):
      err_msg = opts.cache_file+ " contains no files with " + opts.inj_pattern + " description"
      print >>sys.stderr, err_msg
      comments += InspiralUtils.message(opts, err_msg)
    else:
      comments += InspiralUtils.message(opts,  'Reading ' +str(len(cache_injfilelist)) + ' files having the pattern '+opts.inj_pattern)

  if opts.offsource_pattern:
    cache_offsourcefilelist = allfilesCache.sieve(ifos=opts.ifo_times, exact_match=True).sieve(description=opts.offsource_pattern).checkfilesexist()[0].pfnlist()
    offsourcefilelists = [cache_offsourcefilelist]
    if not len(cache_offsourcefilelist):
      err_msg = opts.cache_file+ " contains no files with " + opts.offsource_pattern + " description"
      print >>sys.stderr, err_msg
      comments += InspiralUtils.message(opts, err_msg)
    else:
      comments += InspiralUtils.message(opts,  'Reading ' +str(len(cache_offsourcefilelist)) + ' files having the pattern '+opts.offsource_pattern)

  if ( len(cache_slidefilelist) == 0 and len(cache_offsourcefilelist) == 0) or len(cache_injfilelist) == 0:
    if len(cache_injfilelist) == 0:
      print >>sys.stderr, "ERROR: No injection triggers found."
    else:
      print >>sys.stderr,"ERROR: No background triggers found."
    # give up and exit
    if opts.enable_output is True:
      html_filename = InspiralUtils.write_html_output(opts, args, fnameList, tagList, comment=comments)
      InspiralUtils.write_cache_output(opts, html_filename, fnameList)
    if opts.show_plot:
      sys.exit(1)
    else:
      sys.exit(0)

# if the glob option is required and therefore no cache file is provided, switch here
if opts.cache_file is None:
  if opts.injection_glob:
    filelists = [glob.glob(g) for g in opts.injection_glob]
  
  if opts.slide_glob:
    slidefilelists = [glob.glob(g) for g in opts.slide_glob]
  
statistic = CoincInspiralUtils.coincStatistic(opts.statistic, None, None, opts.eff_snr_denom_fac)

coincTriggersList = []
if filelists:
  for filegroup in filelists:
    # read raw triggers
    inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(filegroup, verbose=opts.verbose, mangle_event_id=True,old_document=opts.old_document) 
    populate_mtotal(inspTriggers)

    # perform the veto
    if opts.veto_file is not None:
      seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
      inspTriggers = inspTriggers.veto(seglist)
  
    # reconstruct the coincs
    newCoincs = CoincInspiralUtils.coincInspiralTable(inspTriggers, statistic)
    # cluster them
    if opts.cluster_window:
      newCoincs = newCoincs.cluster(opts.cluster_window)

    # append them to our list
    coincTriggersList.append(newCoincs)


slideTriggersList = []
if slidefilelists:
  shift_vector = {"H1": opts.h1_slide_time, "H2": opts.h2_slide_time,
                  "L1": opts.l1_slide_time, "V1": opts.v1_slide_time}
  for filegroup in slidefilelists:
    # read raw triggers and time-shift them appropriately
    slideTriggers = SnglInspiralUtils.ReadSnglInspiralSlidesFromFiles(filegroup,
      shift_vector, verbose=opts.verbose)

    if slideTriggers == None:
      slideTriggers = []

    populate_mtotal(slideTriggers)

    segs = SearchSummaryUtils.GetSegListFromSearchSummaries(filegroup)

    # Check the seglists agree with the ifo times 
    for i in segs.keys():
      if opts.ifo_times.find(i) == -1:
        raise ValueError

    if len(opts.ifo_times) != len(segs.keys()) * len(segs.keys()[0]):
      raise ValueError

    slideTimeAnalyzed = float(abs(segs.intersection(segs.iterkeys())))

    # perform the veto
    if opts.veto_file is not None:
      seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
      slideTriggers = slideTriggers.veto(seglist)

    slide_num = range(1 , opts.num_slides + 1)
    slide_num.extend(range(-opts.num_slides, 0))

    # make coincs
    newSlides = CoincInspiralUtils.coincInspiralTable(slideTriggers, statistic)

    # cluster triggers
    if opts.cluster_window:
      newSlides = newSlides.cluster(opts.cluster_window)

    slideTriggersList.append(newSlides)

if offsourcefilelists:
  haveOffsource = False
  for filegroup in offsourcefilelists:
       # read raw triggers and time-shift them appropriately
    offsourceTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(filegroup,
      verbose=opts.verbose)
    populate_mtotal(offsourceTriggers)

    segs = SearchSummaryUtils.GetSegListFromSearchSummaries(filegroup)
    slideTimeAnalyzed = float(abs(segs[opts.ifo_times]))

    # perform the veto
    if opts.veto_file is not None:
      seglist = segmentsUtils.fromsegwizard(open(opts.veto_file))
      offsourceTriggers = offsourceTriggers.veto(seglist)

    # make coincs
    newOffsource = CoincInspiralUtils.coincInspiralTable(offsourceTriggers, statistic)

    # cluster triggers
    if opts.cluster_window:
      newOffsource = newOffsource.cluster(opts.cluster_window)

    slideTriggersList.append(newOffsource)

    if len(newOffsource) > 0:
      haveOffsource = True

  # get normalization right on slide histograms
  if haveOffsource:
    opts.num_slides += 0.5

##################################### plotting here below.
# first some symbol definitions.
symbol_list = ('ro', 'b+', 'k^', 'gv')
color_list = ('r', 'b', 'k', 'g')
symbol_slide_list = ('kx', 'c+', '0.5^', 'yv')
color_slide_list = ('m', 'c', '0.5', 'y')
if len(filelists) > min(len(symbol_list), len(color_list)):
  print >>sys.stderr, "Warning: Only the first %d globs being used.  Extend "\
    "symbol_list or color_list to handle more of them."


########################################## compute the ethinca parameter once for all
InspiralUtils.message(opts, "Creating the coincidences")
numInjections = 0
numSlides = 0
#concatenate all different concidences together 
coincs_list = None
for ifos in list(iterutils.choices(opts.ifo_list, 2)):
  comments+=InspiralUtils.message(opts, "...processing  :"+str(ifos))

  # create the list of ethinca parameters for the injections
  try:
    this = [x.coincinclude(ifos) for x in coincTriggersList]
    coincs_list.extend(this)
    ethinca_list.extend([x.getEThincaValues(ifos) for x in this])
  except:
    coincs_list = [x.coincinclude(ifos) for x in coincTriggersList]
    ethinca_list = [x.getEThincaValues(ifos) for x in coincs_list]
  
  # used later in this code
  for coincs in coincs_list:
    numInjections += len(coincs)
  comments += InspiralUtils.message(opts, '---Total number of injections found='+str(numInjections))

  # create the list of ethinca parameters for the slides
  if slideTriggersList:
    try:
      this = [x.coincinclude(ifos) for x in slideTriggersList]
      slides_list.extend([x.coincinclude(ifos) for x in this])
      ethinca_slides_list.extend([x.getEThincaValues(ifos) for x in this])
    except:
      slides_list = [x.coincinclude(ifos) for x in slideTriggersList]
      ethinca_slides_list =[x.getEThincaValues(ifos) for x in slides_list]
    for slides in slides_list:
      numSlides += len(slides)
    comments+=InspiralUtils.message(opts, '---Total number of slide triggers is '+str(numSlides))
  else:
    try:
      slides_list.extend([])
      ethinca_slides_list.extend([])
    except:
      slides_list = [[]]
      ethinca_slides_list = [[]]
    comments+=InspiralUtils.message(opts, '---Total number of slide triggers is '+str(numSlides))
  

########################################## injections only first
nCombi = len(list(iterutils.choices(opts.ifo_list,2)))

for ifos,ifos_index in zip(list(iterutils.choices(opts.ifo_list, 2)), range(0,nCombi)):
  # now we can start to plots the results
  col = 'snr'
  InspiralUtils.message(opts, "Plotting e-thinca versus total mass")
  for ifo in ifos:
    text = "Ethinca versus total mass ("+ifo+")"
    InspiralUtils.message(opts,"        "+ text)
    fig_num+=1
    figure(fig_num)
    for coincs, ethincaVals, symbol in \
        zip([coincs_list[ifos_index]], [ethinca_list[ifos_index]], symbol_list):
      xValsSNR = coincs.getsngls(ifo).get_column('snr')
      totMass = coincs.getsngls(ifo).get_column('mass1')+ coincs.getsngls(ifo).get_column('mass2')
      label=ifo+' (inj): ' + str(len(xValsSNR))+' coincidences'
      InspiralUtils.message(opts, '         '+label)
      if len(coincs) > 0:
        scatter(xValsSNR, ethincaVals, s=40, c=totMass, faceted=False,
          alpha=0.8)
    legend([label])
    ax = axes()
    if opts.log_x: ax.set_xscale('log')
    if opts.log_y: ax.set_yscale('log')
    colorbar()
    grid(True)
    if coincTriggersList:
      if len(ethincaVals) == 0 or max(ethincaVals) < maxEThinca:
        ylim((1e-5,maxEThinca))
    if col=='snr': xlabel(r"$\rho_{%s}$" % (ifo))
    else:xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
    ylabel("E-thinca parameter ")
    title("E-thinca parameter vs %s for %s and %s triggers" % \
      (col.replace('_', r'\_'), ifos[0], ifos[1]))
    xlim(xmin=5.5, xmax=1000)
    ylim(ymin=1e-5, ymax=maxEThinca)
    if opts.enable_output:
      name = "%s_%s_ethinca_vs_%s_%s_andtotMass" % \
        ( ifos[0], ifos[1], ifo, col)
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
    if not opts.show_plot:
      close()

###################################### same as above but for the slide only
if numSlides>0:
  for ifos,ifos_index in zip(list(iterutils.choices(opts.ifo_list, 2)), range(0,nCombi)):
    # now we can start to plots the results
    InspiralUtils.message(opts, "Plotting e-thinca (slide case) versus total mass")
    col = 'snr'
    for ifo in ifos:
      text = "Ethinca (slide case) versus total mass ("+ifo+")"
      InspiralUtils.message(opts,"        "+ text)
      fig_num+=1
      figure(fig_num)
      for slides, ethincaSlideVals, symbolSlide in \
          zip([slides_list[ifos_index]], [ethinca_slides_list[ifos_index]], symbol_slide_list):
        xSlideVals = slides.getsngls(ifo).get_column(col)
        totMass = slides.getsngls(ifo).get_column('mass1')+ slides.getsngls(ifo).get_column('mass2')
        label=ifo+' (slide): ' + str(len(xSlideVals))+' coincidences'
        InspiralUtils.message(opts, '          '+label)
        try:
          scatter(xSlideVals, ethincaSlideVals, s=40, c=totMass,
            faceted=False, alpha=0.8)
        except: pass
      legend([label])
      ax = axes()
      if opts.log_x: ax.set_xscale('log')
      if opts.log_y: ax.set_yscale('log')
      colorbar()
      grid(True)
      if coincTriggersList:
        if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < maxEThinca:
          ylim((1e-5,maxEThinca))
      if col=='snr': xlabel(r"$\rho_{%s}$" % (ifo))
      else:xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
      ylabel("E-thinca parameter (slide only)")
      title("E-thinca parameter vs %s for %s and %s triggers" % \
        (col.replace('_', r'\_'), ifos[0], ifos[1]))
      xlim(xmin=5.5, xmax=1000)
      ylim(ymin=1e-5, ymax=maxEThinca)
      if opts.enable_output:
        name = "%s_%s_ethinca_slide_only_vs_%s_%s_andtotMass" % \
          ( ifos[0], ifos[1], ifo, col)
        fname = InspiralUtils.set_figure_name(opts, name)
        fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
        fnameList.append(fname)
        tagList.append(text)
      if not opts.show_plot:
        close()

#####################################  now we combine the slide and injections        
for ifos,ifos_index in zip(list(iterutils.choices(opts.ifo_list, 2)), range(0,nCombi)):
  # Pick out relevant double coincs and calculate ethinca parameters

  for col in opts.columns:  # ethinca-param vs col
    for ifo in ifos:
      text = "E-thinca parameter vs %s for %s and %s triggers" % \
            (col.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
      InspiralUtils.message(opts, "      "+text)
      fig_num+=1
      figure(fig_num)
       
      if slideTriggersList:
        for slides, ethincaSlideVals, symbolSlide in \
            zip([slides_list[ifos_index]], [ethinca_slides_list[ifos_index]], symbol_slide_list):
          xSlideVals = slides.getsngls(ifo).get_column(col)
          label=ifo+' (slide): ' + str(len(xSlideVals))+' coincidences'
          InspiralUtils.message(opts, "....(slide)"+label)
          try:
            if opts.log_x:
              semilogx(xSlideVals, ethincaSlideVals, symbolSlide,
                markeredgewidth=1, markersize=6, label=label, alpha=0.5)
            else:
              plot(xSlideVals, ethincaSlideVals, symbolSlide,
                markeredgewidth=1, markersize=6,label=label, alpha=0.5)
          except:pass

      hold(True)
      for coincs, ethincaVals, symbol in \
          zip([coincs_list[ifos_index]], [ethinca_list[ifos_index]], symbol_list):
        xVals = coincs.getsngls(ifo).get_column(col)
        label=ifo+' (inj): ' + str(len(xVals))+' coincidences'
        InspiralUtils.message(opts, "...."+label)
        if opts.log_x:
          try:
            semilogx(xVals, ethincaVals, symbol, markeredgewidth=1,
              markersize=6, label=label, alpha=0.5)
          except:pass
        else:
          try:
            plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6,
              label=label, alpha=0.5)
          except:pass
        
      grid(True)
      if coincTriggersList:
        if len(ethincaVals) == 0 or max(ethincaVals) < maxEThinca:
          ylim((0,maxEThinca))
      elif slideTriggersList:
        if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < maxEThinca:
          ylim((0,maxEThinca))
      if col=='snr': xlabel(r"$\rho_{%s}$" % (ifo))
      else:xlabel("%s %s" % (ifo, col.replace('_', r'\_')))
      ylabel("E-thinca parameter ")
      title("E-thinca parameter vs %s for %s and %s triggers" % \
        (col.replace('_', r'\_'), ifos[0], ifos[1]))
      
      xlim(xmin=5.5, xmax=1000)
      ylim(ymin=0, ymax=maxEThinca)
      legend()

      if opts.enable_output:
        name = "%s_%s_ethinca_vs_%s_%s" % (ifos[0], ifos[1], ifo, col)  
        fname = InspiralUtils.set_figure_name(opts, name)
        fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
        fnameList.append(fname)
        tagList.append(text)
      if not opts.show_plot:
        close()

  if opts.ethinca_vs_stat:  # ethinca-param vs combined statistic
    text = "E-thinca parameter vs combined %s for %s and %s triggers" % \
        (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    fig_num+=1
    figure(fig_num)

    if slideTriggersList:
      for slides, ethincaSlideVals, symbolSlide in \
          zip([slides_list[ifos_index]], [ethinca_slides_list[ifos_index]], symbol_slide_list):
        xSlideVals = [x.stat for x in slides]
        label=ifo+' (slide): ' + str(len(xSlideVals))+' coincidences'
        if opts.log_x:
          try:
            semilogx(xSlideVals, ethincaSlideVals, symbolSlide,
              markeredgewidth=1, markersize=6, label=label, alpha=0.5)
          except:pass
        else:
          try:
            plot(xSlideVals, ethincaSlideVals, symbolSlide,
              markeredgewidth=1, markersize=6, label=label, alpha=0.5)
          except:pass
    hold(True)
    for coincs, ethincaVals, symbol in \
        zip([coincs_list[ifos_index]], [ethinca_list[ifos_index]], symbol_list):
      xVals = [x.stat for x in coincs]
      label=ifo+' (inj): ' + str(len(xVals))+' coincidences'
      if opts.log_x:
        try:
          semilogx(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6,
            label=label, alpha=0.5)
        except:pass
       
      else:
        try:
          plot(xVals, ethincaVals, symbol, markeredgewidth=1, markersize=6,
            label=label, alpha=0.5)
        except:pass
       

    grid(True)
    if coincTriggersList:
      if len(ethincaVals) == 0 or max(ethincaVals) < maxEThinca:
        ylim((0, maxEThinca))
    elif slideTriggersList:
      if len(ethincaSlideVals) == 0 or max(ethincaSlideVals) < maxEThinca:
        ylim((0, maxEThinca))
    xlabel("Combined %s" % opts.statistic.replace('_', r'\_'))
    ylabel("E-thinca parameter")
    title("E-thinca parameter vs combined %s for %s and %s triggers" % \
      (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]))
    grid(True)
    xlim(xmin=5.5, xmax=1000)
    ylim(ymin=0, ymax=maxEThinca)
    legend()
    if opts.enable_output:
      name = "%s_%s_ethinca_vs_combined_%s" % (ifos[0], ifos[1], opts.statistic)  
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
    if not opts.show_plot:
      close()

  if opts.hist_stat:  # hist combined statistic
    text = "Histogram of combined %s for %s and %s triggers" % \
          (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]) + " in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    fig_num+=1
    figure(fig_num)
    leg=[]

    stat_max = max([max([y.stat for y in x]) for x in coincs_list+slides_list \
        if len(x)] + [0.1])
    
    if coincTriggersList:
      xVals = [[x.stat for x in coincs] for coincs in [coincs_list[ifos_index]]]
      y_list, x_list = zip(*[histogram(xVal, bins=opts.num_bins,
          range=[0, stat_max]) for xVal in xVals], new=False)
      n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_list):
        x += 0.1*i*stat_max/opts.num_bins  # Introduce some stagger
        y[len(y)-1] = 0
        handle = bar(x, y, color=color, width=(1-0.1*n)*stat_max/opts.num_bins)
        setp(handle, alpha=0.6)
        handle[0].set_label('injections ')

    if slideTriggersList:
      hold(True)
      xSlideVals = [[x.stat for x in slides] for slides in [slides_list[ifos_index]]]
      y_list, x_list = zip(*[histogram(xSlideVal, bins=opts.num_bins,
          range=[0, stat_max]) for xSlideVal in xSlideVals], new=False)
      if not coincTriggersList:
        n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_slide_list):
        x += 0.1*i*stat_max/opts.num_bins  # Introduce some stagger
        y[len(y)-1] = 0
        handle = bar(x, y, color=color, width=(1-0.1*n)*stat_max/opts.num_bins)
        setp(handle, alpha=0.6)
        handle[0].set_label('slides ')

    grid(True)
    xlabel("Combined %s" % opts.statistic.replace('_', r'\_'))
    ylabel("\#")
    legend()
    title("Histogram of combined %s for %s and %s triggers" % \
      (opts.statistic.replace('_', r'\_'), ifos[0], ifos[1]))

    if opts.enable_output:
      name = "%s_%s_hist_combined_%s" % (ifos[0], ifos[1], opts.statistic) 
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
    if not opts.show_plot:
      close()
 
  if opts.hist:
    text = "E-thinca parameter Histogram for " + ifos[0] + \
        " and " + ifos[1] + " triggers in " + opts.ifo_times + " times"
    InspiralUtils.message(opts, "plotting..."+text)
    fig_num+=1
    figure(fig_num)
    
    # Histogram all datasets with the same bins
    ep_max = max([max(eps) for eps in ethinca_list+ethinca_slides_list \
        if len(eps)] + [0.1])

    if slideTriggersList:
      y_list, x_list = zip(*[histogram(eps, bins=opts.num_bins,
          range=[0, ep_max]) for eps in [ethinca_slides_list[ifos_index]]],
          new=False)
      if coincTriggersList:
        thisNumInjections = len(ethinca_list[ifos_index])
        normalization = opts.injection_window*thisNumInjections/ \
               (2.0*opts.num_slides*slideTimeAnalyzed)
      else:
        normalization = 1.0
      n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_slide_list):
        x += 0.1*i*ep_max/opts.num_bins  # Introduce some stagger
        y_norm = zeros(len(y),float64)
        for j in range(len(y)):
          y_norm[j] = normalization*y[j]
        handle = bar(x, y_norm, color=color, width=(1-0.1*n)*ep_max/opts.num_bins)
        setp(handle, alpha=0.6)
        handle[0].set_label( 'slides')

    if coincTriggersList:
      hold(True)
      y_list, x_list = zip(*[histogram(eps, bins=opts.num_bins,\
          range=[0, ep_max]) for eps in [ethinca_list[ifos_index]]], new=False)
      n = len(x_list)
      for i, x, y, color in zip(range(n), x_list, y_list, color_list):
        x += 0.1*i*ep_max/opts.num_bins  # Introduce some stagger
        handle = bar(x, y, color=color, width=(1-0.1*n)*ep_max/opts.num_bins)
        setp(handle, alpha=0.6)
        handle[0].set_label('injections')

    ylabel("\#")
    xlabel("E-thinca parameter")
    title("E-thinca parameter Histogram for " + ifos[0] + \
          " and " + ifos[1] + " triggers")
    grid(True)
    legend() 
    
    if opts.enable_output:
      name = ifos[0] + "_" + ifos[1] + "_ethinca_hist" 
      fname = InspiralUtils.set_figure_name(opts, name)
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append(text)
    if not opts.show_plot:
      close()

# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.write_html_output(opts, args, fnameList, tagList, comment=comments)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)

  if opts.html_for_cbcweb:
    html_filename_publish = InspiralUtils.write_html_output(opts, args, fnameList, tagList, cbcweb=True)


# ============================================================================


if opts.show_plot:
  show()
