#!/usr/bin/python
#
# Copyright (C) 2010  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import math
from optparse import OptionParser
import sys
from PIL import Image


from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import git_version


__author__ = "Kipp Cannon <kipp.cannon@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "Name: %%prog\n%s" % git_version.verbose_msg,
		usage = "%prog [options] filename",
		description = "Convert an image into a LIGO Light-Weight XML file containing a list of sine-Gaussian burst injections.  When injected into data, the injections will cause a waterfall plot to display the image."
	)
	parser.add_option("-l", "--f-low", metavar = "Hz", type = "float", default = 64.0, help = "Set the low-frequency limit of the tiling (default = 64).")
	parser.add_option("-d", "--delta-f", metavar = "Hz", type = "float", default = 64.0, help = "Set the frequency spacing of the tiling (default = 64).")
	parser.add_option("-t", "--delta-t", metavar = "s", type = "float", default = 1.0 / 32, help = "Set the time spacing of the tiling (default = 1/32).")
	parser.add_option("-H", "--height", metavar = "pixels", type = "int", default = 64, help = "Set the number of tiles in the frequency domain (default = 64).")
	parser.add_option("-o", "--output", metavar = "filename", help = "Set the name of the output file (default = stdout).")
	parser.add_option("-s", "--gps-start-time", metavar = "seconds", help = "Set the start time of the tiling in GPS seconds (required).")
	parser.add_option("-f", "--overlap-fraction", metavar = "fraction", type = "float", default = 0.25, help = "Set the amount of adjacent tile overlap (default = 25.0).  The value must be in the range [0, 1).")
	parser.add_option("-n", "--hrss-scale", metavar = "hrss", type = "float", default = 1e-20, help = "Set the hrss corresponding to \"white\" (default = 1e-20).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if options.gps_start_time is None:
		raise ValueError, "missing required option --gps-start-time"
	if not (0 <= options.overlap_fraction < 1.0):
		raise ValueError, "--overlap-fraction must be in [0, 1)"
	options.gps_start_time = lsctables.LIGOTimeGPS(options.gps_start_time)

	return options, filenames


#
# =============================================================================
#
#                                Sine-Gaussians
#
# =============================================================================
#


def Q_from_duration_and_f(dt, f):
	return math.sqrt(2) * math.pi * f * dt


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


process_id = lsctables.ProcessID("process:process_id:0")


xmldoc = ligolw.Document()
xmldoc.appendChild(ligolw.LIGO_LW())
sim_burst_tbl = xmldoc.childNodes[-1].appendChild(lsctables.New(lsctables.SimBurstTable, ["process_id", "simulation_id", "waveform", "ra", "dec", "psi", "time_geocent_gps", "time_geocent_gps_ns", "duration", "frequency", "bandwidth", "q", "hrss", "pol_ellipse_angle", "pol_ellipse_e"]))


for filename in filenames:
	if options.verbose:
		print >>sys.stderr, "loading %s ..." % filename
	img = Image.open(filename)

	width, height = img.size
	width, height = int(round(width / float(height) * options.height)), options.height
	if options.verbose:
		print >>sys.stderr, "converting to %dx%d grayscale ... " % (width, height)
	img = img.resize((width, height)).convert("L")

	for i in xrange(width):
		for j in xrange(height):
			# new row
			row = lsctables.SimBurst()
			row.process_id = process_id
			row.simulation_id = sim_burst_tbl.get_next_id()
			if options.verbose:
				print >>sys.stderr, "generating sim_burst table ...",

			# source orientation
			row.ra = row.dec = row.psi = 0

			# linearly-polarized sine-Gaussian
			row.waveform = "SineGaussian"
			row.pol_ellipse_e = 1
			row.pol_ellipse_angle = math.pi / 2

			# time-frequency co-ordinates
			row.frequency = options.f_low + j * options.delta_f * (1.0 - options.overlap_fraction)
			row.set_time_geocent(options.gps_start_time + i * options.delta_t * (1.0 - options.overlap_fraction))
			row.bandwidth = options.delta_f
			row.duration = options.delta_t
			row.q = Q_from_duration_and_f(row.duration, row.frequency)

			# amplitude
			row.hrss = options.hrss_scale * img.getpixel((i, j)) / 255
			if row.hrss != 0:
				sim_burst_tbl.append(row)
			if options.verbose:
				print >>sys.stderr, "%d injections\r" % len(sim_burst_tbl),
	if options.verbose:
		print >>sys.stderr


utils.write_filename(xmldoc, options.output, gz = (options.output or "stdout").endswith(".gz"), verbose = options.verbose)
