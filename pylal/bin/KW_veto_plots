#!/usr/bin/env python
"""
Tomoki Isogai (isogait@carleton.edu)

This program makes plots from result files of KW_veto_calc program.

Input:
    result glob: Glob for result files from KW_veto_calc
    output directory: Output directory
    
Output: 
    - 7 plots
    1. Use Percentage vs Threshold
    2. Coincident KW Triggers Number vs Threshold
    3. Total KW Triggers Number vs Threshold
    4. Dead Time vs Threshold
    5. Dead Time Percentage vs Threshold
    6. Vetoed Inspiral Triggers Number vs Threshold
    7. Veto Efficiency vs Threshold
    - 2 time series
    1. GPS time vs SNR of all insp triggers / vetoed insp triggers
    2. GPS time vs SNR of all KW triggers / KW triggers above critical threshold
       / coincident KW triggers
    - 4 histograms
    1. Inspiral Triggers Number vs SNR for SNR 0-50
    2. Inspiral Triggers Number vs SNR for whole SNR range
    3. Vetoed Inspiral Triggers Number vs SNR for SNR 0-50
    4. Vetoed Inspiral Triggers Number vs SNR for whole SNR range
    
    The program also makes a thumbnail for each plot

!CAUTION!: make sure to put ' mark around glob
    
$Id$
"""
from __future__ import division
import optparse

import sys, os
import glob
from glue.segments import segment, segmentlist
import cPickle
import matplotlib
matplotlib.use('Agg')
from pylab import *

__author__ = "Tomoki Isogai <isogait@carleton.edu>"
__date__ = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]

def parse_commandline():
    """
    Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,\
                                   version="$Id: KW_veto_plots,v 1.00 2008/7/6")
    parser.add_option("-r", "--result_glob",\
        help="the result files from vetoStats")
    parser.add_option("-c", "--critical_usePer", type="int",\
        help="the program recognizes channels above this use percentage "\
             "as veto candidate channels")
    parser.add_option("-o", "--out_dir", default = "plots",\
        help="an output directory name")
    parser.add_option("-v", "--verbose", action="store_true",\
                      default=False, help="run verbosely")
    
    opts, args = parser.parse_args()
    
    # check if necessary input exists
    if opts.result_glob is None:
        print >>sys.stderr, "--result_glob is a required parameter"
        sys.exit(1)
        
    # make an output directory if it doesn't exist yet
    if not os.path.exists(opts.out_dir): os.makedirs(opts.out_dir)
        
    # show parameters
    if opts.verbose:
        print
        print "running plot_maker..."
        print
        print "********************** PARAMETERS ******************************"
        print 'glob for result files:'; print opts.result_glob;
        print 'critical used percentage'; print opts.critical_usePer
        print 'output directory:'; print opts.out_dir;
        print
        
    return opts

def load_info(filename):
    """
    Adapted from io.py written by Nickolas Fotopoulos, modified.
    load data from KW_veto_calc
    """
    
    if filename == '':
        raise ValueError, "Empty filename"
    # get extension
    ext = os.path.splitext(filename)[-1]
    
    # case 1: mat file
    if ext == '.mat':
        try:
            import scipy.io
        except (ImportError):
            print >>sys.stderr, "Error: need scipy to read in mat files"
            sys.exit(1)
        mat_data=scipy.io.loadmat(filename)
        output={"thresh": [], "coinKW": [], "totalKW": [], "usePercentage": [],\
             "deadTimes": [], "deadTimePer": [], "vetoedNum": [], "vetoEff": []}
        output["thresh"] = mat_data["thresh"].tolist()
        output["coinKW"] = mat_data["coinKW"].tolist()
        output["totalKW"] = mat_data["totalKW"].tolist()
        output["usePercentage"] = mat_data["usePercentage"].tolist()
        output["deadTimes"] = mat_data["deadTimes"].tolist()[:-1]
        output["deadTimePer"] = mat_data["deadTimePer"].tolist()
        output["vetoedNum"] = mat_data["vetoedNum"].tolist()[:-1]
        output["vetoEff"] = mat_data["vetoEff"].tolist()
        # the last element in vetoedNum is actually total triggers number
        totalTrigNum = mat_data["vetoedNum"].tolist()[-1]
        # the last element in deadTimes is actually total time
        totalTime = mat_data["deadTimes"].tolist()[-1]
        return output
    
    ## Set up file_handle:
    file_handle = file(filename, 'rb')
    
    # case 2: txt file
    if ext == '.txt':
        output={"thresh": [], "coinKW": [], "totalKW": [], "usePercentage": [],\
             "deadTimes": [], "deadTimePer": [], "vetoedNum": [], "vetoEff": []}
        lines=file_handle.readlines()
        totalTrigNum = float(lines[0].split(":")[1].strip())
        totalTime = float(lines[1].split(":")[1].strip())
        for line in lines:
            info=line.strip().split()
            if info[0][0]!="#" and info[0][0]!="%":
                output["thresh"].append(float(info[0]))
                output["coinKW"].append(float(info[1]))
                output["totalKW"].append(float(info[2]))
                output["usePercentage"].append(float(info[3]))
                output["deadTimes"].append(float(info[4]))
                output["deadTimePer"].append(float(info[5]))
                output["vetoedNum"].append(float(info[6]))
                output["vetoEff"].append(float(info[7]))
        return output
        
    # case 3: pickle file
    if ext == '.pickle':
        output = cPickle.load(file_handle)
        totalTrigNum = output["vetoedNum"].pop()
        totalTime = output["deadTimes"].pop()
        return output
        
    # case 4: unsupported file type
    else:
        raise ValueError, "Unrecognized file extension"
    
def plot_channel(prefix,channel,result,plot_data,critical_usePer):
    """
    This is the main function which makes all the plots.
    input:
        prefix: (tag)-(ifo)-(channel name)
        channel: channel name
        result: a dictionary that stores the result from vetoStats 
                (used percentage, veto efficiency, dead time percentage etc.)
            
    output:
        - 7 plots
        1. Use Percentage vs Threshold
        2. Coincident KW Triggers Number vs Threshold
        3. Total KW Triggers Number vs Threshold
        4. Dead Time vs Threshold
        5. Dead Time Percentage vs Threshold
        6. Vetoed Inspiral Triggers Number vs Threshold
        7. Veto Efficiency vs Threshold
        - 2 time series
        1. GPS time vs SNR of all insp triggers / vetoed insp triggers
        2. GPS time vs SNR of all KW triggers / KW triggers above 
           critical threshold / coincident KW triggers
        - 4 histograms
        1. Inspiral Triggers Number vs SNR for SNR 0-50
        2. Inspiral Triggers Number vs SNR for whole SNR range
        3. Vetoed Inspiral Triggers Number vs SNR for SNR 0-50
        4. Vetoed Inspiral Triggers Number vs SNR for whole SNR range
        
        The program also makes a thumbnail for each plot
        
    """
    thresh=result["thresh"]
    # start and end of x axis
    start=thresh[0]; end=thresh[-1]
    # at least plot 100 even if thresh interval is 0
    if start==end: end=start+100
    
    ############################## plots #######################################
    
    ## plot use percentage
    plot(thresh,result["usePercentage"],'k',\
         thresh,result["usePercentage"],'bo',markersize=3)
    xlim(start,end)
    # show critical used percentage line for candidate channel
    if max(result["usePercentage"]) > critical_usePer:
        axhline(y = critical_usePer, linewidth = 2, color = 'r')
        text(end+10,critical_usePer-1,'%d%%'%critical_usePer, color='k')
    tickspace=500 
    ticks=[start]+range((int(start/tickspace)+1)*tickspace,\
           (int(end/tickspace)+1)*tickspace,tickspace)+[end]
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Used Percentage (%)')
    title(channel.upper())
    savefig("%s-usePercentage_plot.png"%prefix)
    savefig("%s-usePercentage_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot coincident KW event number
    plot(thresh,result["coinKW"],'k',\
         thresh,result["coinKW"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Coincident KW Events')
    title(channel.upper())
    savefig("%s-coincidentKW_plot.png"%prefix)
    savefig("%s-coincidentKW_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot total KW event number
    plot(thresh,result["totalKW"],'k',\
         thresh,result["totalKW"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Total KW Events')
    title(channel.upper())
    savefig("%s-totalKW_plot.png"%prefix)
    savefig("%s-totalKW_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot dead time
    plot(thresh,result["deadTimes"],'k',\
         thresh,result["deadTimes"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Dead Time (s)')
    title(channel.upper())
    savefig("%s-deadTime_plot.png"%prefix)
    savefig("%s-deadTime_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot dead time percentage
    plot(thresh,result["deadTimePer"],'k',\
         thresh,result["deadTimePer"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Dead Time Percentage (%)')
    title(channel.upper())
    savefig("%s-deadTimePer_plot.png"%prefix)
    savefig("%s-deadTimePer_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot vetoed trigger number
    plot(thresh,result["vetoedNum"],'k',\
         thresh,result["vetoedNum"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Vetoed GW Trigger Number')
    title(channel.upper())
    savefig("%s-vetoedNum_plot.png"%prefix)
    savefig("%s-vetoedNum_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## plot veto efficiency
    plot(thresh,result["vetoEff"],'k',\
         thresh,result["vetoEff"],'bo',markersize=3)
    xlim(start,end)
    xticks(ticks)
    xlabel('KW Significance Threshold')
    ylabel('Veto Efficiency (%)')
    title(channel.upper())
    savefig("%s-vetoEff_plot.png"%prefix)
    savefig("%s-vetoEff_plot-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ############################## time series #################################
    
    ## time series for insp triggers and KW triggers
    # figure out range of x axis
    # use common x range for both insp and KW triggers
    x_min=plot_data["start_time"]
    x_max=plot_data["end_time"]
    # when x_max = x_min, at least plot an hour
    if x_max == x_min: x_max = x_min + 3600
    
    # insp time series
    subplot(211)
    semilogy(plot_data['inspTrigs'][0],plot_data['inspTrigs'][1],'bo',\
             markersize=3,label='Triggers')
    ylabel('SNR')
    title("GW Triggers")
    if len(plot_data)>5: #means candidate channel
        semilogy(plot_data['vetoedTrigs'][0],plot_data['vetoedTrigs'][1],'ro',\
                 markersize=3,label='Vetoed Triggers')
    legend(loc='upper right')
    xlim([x_min,x_max])
    
    # KW time series
    subplot(212)
    semilogy(plot_data['KWtrigs'][0],plot_data['KWtrigs'][1],'bx',\
             markersize=3,label='All KW Triggers')
    xlabel('GPS time')
    ylabel('KW significance')
    title(channel.upper()+" KW Triggers")
    if len(plot_data)>5: #means candidate channel
        semilogy(plot_data['totalKW'][0],plot_data['totalKW'][1],'bo',\
                 markersize=3,label='KW Triggers Used for Veto')
        semilogy(plot_data['coinKW'][0],plot_data['coinKW'][1],'ro',\
                 markersize=3,label='Coincident KW Triggers')
    legend(loc='upper right')
    xlim([x_min,x_max])
    savefig("%s-timeSeries.png"%prefix)
    savefig("%s-timeSeries-thumbnail.png"%prefix,dpi=60)
    close('all')

    ############################## histgrams ###################################

    ## histogram: Inspiral Triggers Number vs Snr
    # whole snr range
    # just to get bin (100)
    n,all_bins,patches=hist(plot_data['inspTrigs'][1],bins=100)
    close('all')
    # set bottom to 0.1 because it's log scale and cannot plot 0
    n,bins,patches=hist(plot_data['inspTrigs'][1],bins=all_bins,bottom=0.1,\
                                   facecolor='b',width=all_bins[1]-all_bins[0])
    ax=gca()
    ax.set_yscale('log')
    xlabel('SNR')
    ylabel('Number of GW Triggers')
    title('GW Triggers, All SNR Range')
    if len(plot_data)>5: #means candidate channel
        # figure out non vetoed triggers' SNR
        non_vetoed_snr =\
                        filter(lambda x:x not in plot_data['vetoedTrigs'][1],\
                               plot_data['inspTrigs'][1])
        # set bottom to 0.1 because it's log scale and cannot plot 0
        n2,bins2,patches2=hist(non_vetoed_snr,bins=all_bins,bottom=0.1,\
                               facecolor='r',width=all_bins[1]-all_bins[0])
        legend((patches[0],patches2[0]),("Before Veto","After Veto"),\
               loc='upper right')
        
    savefig("%s-triggers_hist.png"%prefix)
    savefig("%s-triggers_hist-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## histogram for 0 - 50 snr range
    low_hist_data=[s for s in plot_data['inspTrigs'][1] if s < 50]
    # 1 bin for 1 SNR
    low_bins = range(int(min(low_hist_data)),int(max(low_hist_data))+1)
    # set bottom to 0.1 because it's log scale and cannot plot 0
    n,bins,patches=hist(low_hist_data,bins=low_bins,bottom=0.1,facecolor='b',\
                        width=low_bins[1]-low_bins[0])
    ax=gca()
    ax.set_yscale('log')
    xlabel('SNR')
    ylabel('Number of GW Triggers')
    title("GW Triggers, Low SNR Range")
    
    if len(plot_data)>5: # means candidate channel
        # set bottom to 0.1 because it's log scale and cannot plot 0
        low_after_veto_data=[s for s in non_vetoed_snr if s < 50]
        n2,bins2,patches2=hist(low_after_veto_data,bins=low_bins,bottom=0.1,\
                               facecolor='r',width=low_bins[1]-low_bins[0])
        legend((patches[0],patches2[0]),("Before Veto","After Veto"),\
               loc='upper right')
    savefig("%s-triggers_hist_lowSnr.png"%prefix)
    savefig("%s-triggers_hist_lowSnr-thumbnail.png"%prefix,dpi=60)
    close('all')
    
    ## histogram: Vetoed Inspiral Triggers Number vs Snr
    # whole snr range
    if len(plot_data)>5: #means candidate channel
        # set bottom to 0.1 because it's log scale and cannot plot 0
        # 100 bins
        hist(plot_data['vetoedTrigs'][1],bins=all_bins,bottom=0.1,\
             facecolor='b',width=all_bins[1]-all_bins[0])
        ax=gca()
        ax.set_yscale('log')
        xlabel('SNR')
        ylabel('Number of Vetoed GW Triggers')
        title("Vetoed GW Triggers by "+channel.upper()+", All SNR Range")
        savefig("%s-vetoed_triggers_hist.png"%prefix)
        savefig("%s-vetoed_triggers_hist-thumbnail.png"%prefix,dpi=60)
        close('all')
    
    ## histogram: Vetoed Inspiral Triggers Number vs Snr
    # -50 snr range
    if len(plot_data)>5: #means candidate channel
        low_vetoed_trigs=[s for s in plot_data['vetoedTrigs'][1] if s < 50]
        # set bottom to 0.1 because it's log scale and cannot plot 0
        # 1 bin for 1 SNR
        hist(low_vetoed_trigs,bins=low_bins,bottom=0.1,facecolor='b',\
             width=low_bins[1]-low_bins[0])
        ax=gca()
        ax.set_yscale('log')
        xlabel('SNR')
        ylabel('Number of Vetoed GW Triggers')
        title("Vetoed GW Triggers by "+channel.upper()+", Low SNR Range")
        savefig("%s-vetoed_triggers_hist_lowSnr.png"%prefix)
        savefig("%s-vetoed_triggers_hist_lowSnr-thumbnail.png"%prefix,dpi=60)
        close('all')
    
def main(opts):
    
    # make a list of the result files from KW_veto_calc and check sanity
    files_list=glob.glob(opts.result_glob)
    if opts.verbose: print "result files:", files_list
    if files_list==[]: # check if there is at least one file
        print >> sys.stderr, "Error: no files found for %s"%opts.result_glob
        sys.exit(1)
    
    # check if they have the same name tag
    if os.path.commonprefix(files_list)=="":
        print >>sys.stderr, """
        Error: Possibly files from different runs are coexisting. 
               Please check the result glob.
        """
        sys.exit(1)
        
    # sort out veto data file from files_list
    veto_datafiles=[f for f in files_list if f.find("veto_data")!=-1]
    
    # for each veto_data files make plots
    for f in veto_datafiles:
        # figure out tag/ifo/channel name from file name
        name_parts = os.path.splitext(f)[0].split("-")
        chan_name = name_parts[-3]
        ifo = name_parts[-4].upper()
        tag = os.path.split(name_parts[-5])[1]
        
        ## retrieve data from file for plots
        result=load_info(f)
        
        ## get data for time series/histograms
        data_file="-".join(name_parts[:-1])+"-plot_data.pickle"
        plot_data = cPickle.load(open(data_file,"rb"))
        
        ## plot
        outname_prefix =\
                        os.path.join(opts.out_dir,"-".join([tag,ifo,chan_name]))
        if opts.verbose: print "plotting %s..."%outname_prefix
        plot_channel(\
                 outname_prefix,chan_name,result,plot_data,opts.critical_usePer)
        
        if opts.verbose: print "plot_maker for %s done!"%outname_prefix
        
if __name__=="__main__":
    # parse commandline
    opts = parse_commandline()
    # do the work
    main(opts)
