#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Excess power upper limit final result tool.
"""


import bisect
import glob
import math
import numpy
from optparse import OptionParser
from pysqlite2 import dbapi2 as sqlite3
import sys


from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import dbtables
from glue.ligolw import utils
from glue import segments
from pylal import rate
from pylal import SimBurstUtils
from pylal import SnglBurstUtils
from pylal.date import LIGOTimeGPS


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Speed Hacks
#
# =============================================================================
#


def SearchSummary_get_out(self):
	return segments.segment(LIGOTimeGPS(self.out_start_time, self.out_start_time_ns), LIGOTimeGPS(self.out_end_time, self.out_end_time_ns))


lsctables.SearchSummary.get_out = SearchSummary_get_out


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version="%prog CVS $Id$",
		usage = "%prog [options] -i|--injection-glob pattern -b|--background-glob pattern",
		description = "%prog performs the final, summary, stages of an upper-limit excess power search for burst-like gravitational waves."
	)
	parser.add_option("-b", "--background-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for non-injection files.")
	parser.add_option("-i", "--injection-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for injection files.")
	parser.add_option("-l", "--live-time-program", metavar = "program", default = "lalapps_power", help = "Set the name, as it appears in the process table, of the program whose search summary entries define the search live time (default = \"lalapps_power\")")
	parser.add_option("--foreground-survivors", metavar = "number", help = "Tune the coincidence likelihood threshold to result in this many survivors being expected in the foreground. (e.g., 0.1)")
	parser.add_option("--survivors-output", metavar = "filename", help = "Set the name of the XML file to which zero-lag survivors will be written.  Default is to not record zero-lag survivors file (keep the box closed).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if not options.background_glob:
		raise ValueError, "missing required --background-glob argument"
	if not options.injection_glob:
		raise ValueError, "missing required --injection-glob argument"
	if options.foreground_survivors is None:
		raise ValueError, "missing required --foreground-survivors argument"

	options.foreground_survivors = float(options.foreground_survivors)

	return options, (filenames or [None])


#
# =============================================================================
#
#                           Likelihood Book-Keeping
#
# =============================================================================
#


class Likelihood_Histogram(object):
	def __init__(self):
		self.injection_likelihoods = []
		self.background_likelihoods = []
		self.foreground_likelihoods = []
		self.n_background_time_slides = None

	def count_time_slides(self, contents):
		#
		# If not already done, count the number of non-zero-lag
		# time slides.  Assume all files list the same time slides.
		#

		if self.n_background_time_slides is None:
			self.n_background_time_slides = contents.connection.cursor().execute("""SELECT COUNT(DISTINCT time_slide_id) FROM time_slide WHERE offset != 0""").fetchone()[0]

	def add_background(self, contents):
		#
		# Iterate over non-zero-lag coincidences.
		#

		for (likelihood,) in contents.connection.cursor().execute("""
SELECT coinc_event.likelihood FROM
	coinc_event
WHERE
	coinc_event.coinc_def_id == ?
	AND EXISTS (
		SELECT * FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
		""", (contents.bb_definer_id,)):
			self.background_likelihoods.append(likelihood)

	def add_foreground(self, contents):
		#
		# Iterate over zero-lag coincidences.
		#

		for (likelihood,) in contents.connection.cursor().execute("""
SELECT coinc_event.likelihood FROM
	coinc_event
WHERE
	coinc_event.coinc_def_id == ?
	AND NOT EXISTS (
		SELECT * FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
		""", (contents.bb_definer_id,)):
			self.foreground_likelihoods.append(likelihood)

	def add_injections(self, contents):
		#
		# Iterate over zero-lag coincidences involving one or more
		# events identified as being the result of injections.
		#

		for (likelihood,) in contents.connection.cursor().execute("""
SELECT coinc_event.likelihood FROM
	coinc_event
WHERE
	coinc_event.coinc_def_id == ?
	AND NOT EXISTS (
		SELECT * FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
	AND EXISTS (
		-- Find an injection coinc containing at least one of the
		-- bursts in this coinc
		SELECT * FROM
			coinc_event AS a
			JOIN coinc_event_map AS b ON (
				a.coinc_event_id == b.coinc_event_id
			)
			JOIN coinc_event_map AS c ON (
				b.event_id == c.event_id
				AND b.table_name == 'sngl_burst'
				AND c.table_name == 'sngl_burst'
			)
		WHERE
			c.coinc_event_id == coinc_event.coinc_event_id
			AND a.coinc_def_id == ?
	)
		""", (contents.bb_definer_id, contents.sb_definer_id)):
			self.injection_likelihoods.append(likelihood)

	def finish_non_injections(self):
		self.foreground_likelihoods.sort(reverse = True)
		self.background_likelihoods.sort(reverse = True)

		self.foreground_rate = rate.Rate(segments.segment(0.0, 1.0), 0.01)
		self.background_rate = rate.Rate(segments.segment(0.0, 1.0), 0.01)

		for likelihood in self.foreground_likelihoods:
			self.foreground_rate[likelihood] = 1.0
		for likelihood in self.background_likelihoods:
			self.background_rate[likelihood] = 1.0

		self.foreground_rate.array /= len(self.foreground_likelihoods)
		self.background_rate.array /= len(self.background_likelihoods)

	def finish_injections(self):
		self.injection_likelihoods.sort(reverse = True)
		self.injection_rate = rate.Rate(segments.segment(0.0, 1.0), 0.01)
		for likelihood in self.injection_likelihoods:
			self.injection_rate[likelihood] = 1.0
		self.injection_rate.array /= len(self.injection_likelihoods)

	def find_likelihood_threshold(self, events_per_foreground, foreground_live_time, background_live_time):
		"""
		Given the desired average number of events per foreground
		live time, determine the likelihood threshold to cut
		coincidences on.  The interpretation is that coincidences
		with a likelihood greater than (not equal to) the value
		returned by this function are to be retained.
		"""
		#
		# How many events to retain from the non-zero-lag
		# coincidences.
		#

		n_background = int(round(events_per_foreground * background_live_time / foreground_live_time))

		#
		# Likelihood that will keep n_background background events.
		#

		return self.background_likelihoods[n_background]


#
# =============================================================================
#
#                              Zero-Lag Survivors
#
# =============================================================================
#


class Survivors(object):
	def __init__(self):
		self.xmldoc = None

	def add(self, contents):
		if self.xmldoc is None:
			self.xmldoc = ligolw.Document()
			self.xmldoc.appendChild(ligolw.LIGO_LW())
			self.sngl_burst_table = lsctables.New(lsctables.SnglBurstTable, contents.sngl_burst_table.columnnames)
			self.xmldoc.childNodes[0].appendChild(self.sngl_burst_table)

		time_slide_id = [id for id in contents.time_slide_table.iterkeys() if contents.time_slide_table.is_null(id)]
		if len(time_slide_id) != 1:
			raise ValueError, "document does not contain exactly 1 zero-lag time slide (contains %d of them)" % len(time_slide_id)
		time_slide_id = time_slide_id[0]

		self.sngl_burst_table.extend(map(contents.sngl_burst_table._row_from_cols, contents.connection.cursor().execute("""
SELECT sngl_burst.* FROM
	sngl_burst
	JOIN coinc_event_map ON (
		coinc_event_map.event_id == sngl_burst.event_id
		AND coinc_event_map.table_name == 'sngl_burst'
	)
	JOIN coinc_event ON (
		coinc_event.coinc_event_id == coinc_event_map.coinc_event_id
	)
WHERE
	coinc_event.coinc_def_id == ?
	AND coinc_event.time_slide_id == ?
		""", (contents.bb_definer_id, time_slide_id))))

	def finish(self, filename, verbose = False):
		utils.write_filename(self.xmldoc, filename, verbose = verbose, gz = (filename or "stdout")[-3:] == ".gz")


#
# =============================================================================
#
#                                  Efficiency
#
# =============================================================================
#


def Efficiency_hrss_vs_freq_add_contents(self, contents):
	self.num_injections += len(contents.sim_burst_table)
	coinc_segs = contents.seglists.intersection(contents.seglists.keys())
	for sim in contents.sim_burst_table:
		if SimBurstUtils.injection_was_made(sim, coinc_segs, contents.seglists.keys()):
			self.injected_x.append(sim.freq)
			self.injected_y.append(sim.hrss)
	# FIXME: careful, the check for a coincidence will find any
	# coincidence, no matter how many instruments participate.  For
	# now, I'm running fixed networks so this is not a problem, but if
	# variable configuration networks are adopted in the future, then
	# this will need to be re-thought.
	for sim in map(contents.sim_burst_table._row_from_cols, contents.connection.cursor().execute("""
SELECT sim_burst.* FROM
	sim_burst
WHERE
	EXISTS (
		-- Find a zero-lag burst<-->burst coinc containing a burst
		-- that matches this injection, and whose likelihood is
		-- above threshold
		SELECT * FROM
			coinc_event
			JOIN coinc_event_map AS a ON (
				a.coinc_event_id == coinc_event.coinc_event_id
			)
			JOIN coinc_event_map AS b ON (
				a.table_name == 'sngl_burst'
				AND b.table_name == 'sngl_burst'
				AND b.event_id == a.event_id
			)
			JOIN coinc_event_map AS c ON (
				c.coinc_event_id == b.coinc_event_id
				AND c.table_name == 'sim_burst'
				AND c.event_id == sim_burst.simulation_id
			)
		WHERE
			coinc_event.coinc_def_id == ?
			AND coinc_event.likelihood > ?
			AND NOT EXISTS (
				SELECT * FROM
					time_slide
				WHERE
					time_slide.time_slide_id == coinc_event.time_slide_id
					AND time_slide.offset != 0
			)
	)
	""", (contents.bb_definer_id, self.threshold))):
		self.found_x.append(sim.freq)
		self.found_y.append(sim.hrss)


SimBurstUtils.Efficiency_hrss_vs_freq.add_contents = Efficiency_hrss_vs_freq_add_contents


#
# =============================================================================
#
#                                  Live Time
#
# =============================================================================
#


def get_background_time_slides(contents):
	"""
	Query the database for the IDs and offsets of non-zero-lag time
	slides.
	"""
	time_slides = {}
	for time_slide_id, in contents.connection.cursor().execute("""
SELECT DISTINCT(time_slide_id) FROM
	time_slide
WHERE
	offset != 0
	"""):
		time_slides[time_slide_id] = {}
		for instrument, offset in contents.connection.cursor().execute("""
SELECT instrument, offset FROM
	time_slide
WHERE
	time_slide_id == ?
		""", (time_slide_id,)):
			time_slides[time_slide_id][instrument] = offset
	return time_slides


def zero_lag_livetime(seglists):
	"""
	Return the total live time in the zero lag time slide.
	"""
	return float(abs(seglists.intersection(seglists.keys())))


def time_slides_livetime(seglists, time_slides, verbose = False):
	"""
	For each of the time slides, which are instrument --> offset
	mappings, compute the live time, and return the sum.
	"""
	livetime = 0
	old_offsets = seglists.offsets
	N = len(time_slides)
	for n, time_slide in enumerate(time_slides):
		if verbose:
			print >>sys.stderr, "\t%.1g%%" % (100.0 * n / N),
		seglists.offsets.update(time_slide)
		livetime += float(abs(seglists.intersection(time_slide.keys())))
	seglists.offsets.update(old_offsets)
	if verbose:
		print >>sys.stderr, "\t100.0%"
	return livetime


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line.
#


options, filenames = parse_command_line()


#
# Set up book-keeping tools.
#


if options.survivors_output is not None:
	survivors = Survivors()
else:
	survivors = None
likelihood_histogram = Likelihood_Histogram()
efficiency = SimBurstUtils.Efficiency_hrss_vs_freq(None, 0.1)
non_injection_seglists = segments.segmentlistdict()
injection_seglists = segments.segmentlistdict()
background_time_slides = None


#
# Iterate over background files.
#


if options.verbose:
	print >>sys.stderr, "=== Background & Foreground ==="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.background_glob])

if not len(filenames):
	raise ValueError, "error:  no background files found"

for n, filename in enumerate(filenames):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), options.live_time_program, options.verbose)

	#
	# Process database contents.
	#

	if background_time_slides is None:
		background_time_slides = get_background_time_slides(database)
	if survivors is not None:
		survivors.add(database)
	likelihood_histogram.count_time_slides(database)
	likelihood_histogram.add_foreground(database)
	likelihood_histogram.add_background(database)
	non_injection_seglists |= database.seglists

	#
	# Done with this file.
	#

	connection.close()


#
# Determine likelihood threshold.
#


if options.verbose:
	print >>sys.stderr, "=== Threshold ==="
	print >>sys.stderr, "measuring live time ..."
foreground_live_time = zero_lag_livetime(non_injection_seglists)
background_live_time = time_slides_livetime(non_injection_seglists, background_time_slides.values())

if options.verbose:
	print >>sys.stderr, "sorting and binning foreground and background likelihoods ..."
likelihood_histogram.finish_non_injections()

if options.verbose:
	print >>sys.stderr, "computing likelihood threshold ..."
efficiency.threshold = threshold = likelihood_histogram.find_likelihood_threshold(options.foreground_survivors, foreground_live_time, background_live_time)


#
# Iterate over injection files.
#


if options.verbose:
	print >>sys.stderr, "=== Injections =="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.injection_glob])

if not len(filenames):
	raise ValueError, "error:  no injection files found"

for n, filename in enumerate(filenames):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), options.live_time_program, options.verbose)

	#
	# Process database contents.
	#

	likelihood_histogram.add_injections(database)
	efficiency.add_contents(database)
	injection_seglists |= database.seglists

	#
	# Done with this file.
	#

	connection.close()


#
# Summary.
#


likelihood_histogram.finish_injections()
efficiency.finish()


print
print "=== Input Summary ==="
print "Total live time in background = %s s" % background_live_time
print "Total live time in foreground = %s s" % foreground_live_time
print "Number of events in background = %d" % len(likelihood_histogram.background_likelihoods)
print "Average number of background events per foreground live time = %g" % (len(likelihood_histogram.background_likelihoods) / background_live_time * foreground_live_time)
print "Number of events in foreground = %d" % len(likelihood_histogram.foreground_likelihoods)

print
print "=== Threshold ==="
print "Likelihood threshold for which is expected %g events in foreground = %g" % (options.foreground_survivors, threshold)

# FIXME: in the future, don't display this until the box is open.
#if survivors is not None:
print "Number of foreground events above threshold = %d" % len([x for x in likelihood_histogram.foreground_likelihoods if x > threshold])

print
print "Writing plots ..."
SimBurstUtils.plot_Efficiency_hrss_vs_freq(efficiency).savefig("lalapps_excesspowerfinal_efficiency.png")

print
print "=== Done ==="
