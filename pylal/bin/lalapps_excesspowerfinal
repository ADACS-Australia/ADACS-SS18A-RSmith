#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Excess power upper limit final result tool.
"""


import glob
import math
import numpy
from optparse import OptionParser
try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3
import sys


from glue import segments
from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import dbtables
from glue.ligolw import utils
from pylal import itertools
from pylal import ligolw_tisi
from pylal import rate
from pylal import SimBurstUtils
from pylal import SnglBurstUtils
from pylal.date import LIGOTimeGPS


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Speed Hacks
#
# =============================================================================
#


lsctables.LIGOTimeGPS = LIGOTimeGPS


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version="%prog CVS $Id$",
		usage = "%prog [options] -i|--injection-glob pattern -b|--background-glob pattern",
		description = "%prog performs the final, summary, stages of an upper-limit excess power search for burst-like gravitational waves."
	)
	parser.add_option("-b", "--background-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for non-injection files.")
	parser.add_option("-i", "--injection-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for injection files.")
	parser.add_option("-l", "--live-time-program", metavar = "program", default = "lalapps_power", help = "Set the name, as it appears in the process table, of the program whose search summary entries define the search live time (default = \"lalapps_power\")")
	parser.add_option("--foreground-survivors", metavar = "number", type = "float", help = "Tune the coincidence likelihood threshold to result in this many survivors being expected in the foreground. (e.g., 0.1)")
	parser.add_option("--confidence-contour-slope", metavar = "slope", type = "float", default = -49.0, help = "Set the slope of the confidence-likelihood joint contours on which the final cut thresholds (default = -49.0).")
	parser.add_option("--survivors-output", metavar = "filename", help = "Set the name of the XML file to which zero-lag survivors will be written.  Default is to not record zero-lag survivors file (keep the box closed).")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if not options.background_glob:
		raise ValueError, "missing required --background-glob argument"
	if not options.injection_glob:
		raise ValueError, "missing required --injection-glob argument"
	if options.foreground_survivors is None:
		raise ValueError, "missing required --foreground-survivors argument"

	return options, (filenames or [None])


#
# =============================================================================
#
#                           Likelihood Book-Keeping
#
# =============================================================================
#


class old_Confidence_Likelihood_Histogram(object):
	def __init__(self, confidence_range, likelihood_range):
		self.confidence_range = confidence_range
		self.likelihood_range = likelihood_range
		self.background_bins = rate.BinnedArray(rate.NDBins((rate.LogarithmicBins(confidence_range[0], confidence_range[1], 201), rate.LogarithmicBins(likelihood_range[0], likelihood_range[1], 201))))
		self.background_extra = 0
		self.foreground_bins = rate.BinnedArray(rate.NDBins((rate.LogarithmicBins(confidence_range[0], confidence_range[1], 201), rate.LogarithmicBins(likelihood_range[0], likelihood_range[1], 201))))
		self.foreground_extra = 0
		self.filter = rate.gaussian_window2d(5, 5)

	def add_non_injections(self, contents):
		#
		# Iterate over burst<-->burst coincidences.  Assume there
		# are no injections in this file.
		#

		for likelihood, confidence, is_background in contents.connection.cursor().execute("""
SELECT
	coinc_event.likelihood,
	multi_burst.confidence,
	EXISTS (
		SELECT
			*
		FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
FROM
	coinc_event
	JOIN multi_burst ON (
		multi_burst.coinc_event_id == coinc_event.coinc_event_id
	)
WHERE
	coinc_event.coinc_def_id == ?
		""", (contents.bb_definer_id,)):
			if is_background:
				try:
					self.background_bins[(confidence, likelihood)] += 1
				except IndexError:
					if confidence > self.confidence_range[1] or likelihood > self.likelihood_range[1]:
						self.background_extra += 1
			else:
				try:
					self.foreground_bins[(confidence, likelihood)] += 1
				except IndexError:
					if confidence > self.confidence_range[1] or likelihood > self.likelihood_range[1]:
						self.foreground_extra += 1

	def finish_non_injections(self):
		rate.filter_array(self.background_bins.array, self.filter)

	def find_confidence_threshold(self, events_per_foreground, foreground_live_time, background_live_time, verbose = False):
		"""
		Given the desired average number of events per foreground
		live time, determine the likelihood threshold to cut
		coincidences on.  The interpretation is that coincidences
		with a likelihood greater than (not equal to) the value
		returned by this function are to be retained.
		"""
		#
		# How many events to retain from the non-zero-lag
		# coincidences in order to get events_per_foreground
		# survivors in the foreground, assuming the event rate is
		# the same in all time slides.
		#

		n_background = events_per_foreground * background_live_time / foreground_live_time

		#
		# Contour is initially the boundary of the binned region.
		# Represent contour as a boolean array indicating which
		# bins are outside the contour (above threshold).
		# Construct a list containing the co-ordinates of the bins
		# along the edge of the contour, sort by how many
		# background events are in each of these bins
		#

		self.keepers = rate.BinnedArray(self.background_bins.bins)

		edge = []
		xcoords, ycoords = self.background_bins.centres()
		for x in xcoords[:-1]:
			edge += [(x, ycoords[-1])]
		for y in ycoords:
			edge += [(xcoords[-1], y)]
		edge.sort(lambda a, b: cmp(self.background_bins[a], self.background_bins[b]), reverse = True)

		#
		# Add bins from the edge to the keepers until the number of
		# background events is as desired.  Move the edge in as we
		# go.
		#

		n_keepers = self.background_extra
		while edge and n_keepers < n_background:
			xy = edge.pop()
			n_keepers += self.background_bins[xy]
			self.keepers[xy] = 1
			i, j = self.keepers.bins[xy]
			edge += [(x, y) for x in xcoords[max(i - 1, 0) : i + 1] for y in ycoords[max(j - 1, 0) : j + 1] if (x, y) not in edge and not self.keepers[(x, y)]]
			edge.sort(lambda a, b: cmp(self.background_bins[a], self.background_bins[b]), reverse = True)
			if verbose:
				print >>sys.stderr, "\t%g / %g\r" % (n_keepers, n_background),
		if verbose:
			print >>sys.stderr, "\n"

	def is_a_keeper(self, likelihood, confidence):
		try:
			return bool(self.keepers[(confidence, likelihood)])
		except IndexError:
			return confidence > self.confidence_range[1] or likelihood > self.likelihood_range[1]


class Confidence_Likelihood_Histogram(object):
	def __init__(self, effective_confidence_slope):
		self.effective_confidence_slope = effective_confidence_slope
		self.slides = []
		self.background_eff_confidences = itertools.Highest(max = 5000000)
		self.foreground_eff_confidences = []

	def effective_confidence(self, likelihood, confidence):
		# In the 2-D likelihood--confidence parameter space, the
		# background density contours for high confidence, high
		# likelihood, tuples are found to be approximated by the
		# family of curves given by
		#
		#	ln likelihood = m ln confidence + ln b
		#
		# b (the y-intercept) parameterizes the family of curves,
		# and can be interpreted as an "effective confidence".
		# Injections are found to have high "b" values, and noise
		# low "b" values.  Given a likelihood and confidence pair,
		#
		#	b = likelihood / confidence^m
		#
		# This function computes and returns ln b.

		if likelihood <= 0:
			# log() doesn't like 0, so we handle this case
			# separately.  Unfortunately, Python doesn't appear
			# to have a defined way to construct a constant
			# equal to -inf.  On machines on which Python uses
			# IEEE-compliant double-precision floats, the
			# constant below is returned as -inf.  Otherwise it
			# should surely be negative enough to ensure that
			# this coinc is not retained.
			return -1e400
		return math.log(likelihood) - self.effective_confidence_slope * math.log(confidence)

	def add_non_injections(self, contents):
		#
		# Iterate over burst<-->burst coincidences.  Assume there
		# are no injections in this file.
		#

		# accumulate confidences in a separate buffer to avoid slow
		# calls to the Highest class' append() method.
		buffer = []
		for likelihood, confidence, is_background in contents.connection.cursor().execute("""
SELECT
	coinc_event.likelihood,
	multi_burst.confidence,
	EXISTS (
		SELECT * FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
FROM
	coinc_event
	JOIN multi_burst ON (
		multi_burst.coinc_event_id == coinc_event.coinc_event_id
	)
WHERE
	coinc_event.coinc_def_id == ?
		""", (contents.bb_definer_id,)):
			if is_background:
				buffer.append(self.effective_confidence(likelihood, confidence))
			else:
				self.foreground_eff_confidences.append(self.effective_confidence(likelihood, confidence))
		self.background_eff_confidences.extend(buffer)

	def finish_non_injections(self):
		pass

	def find_confidence_threshold(self, events_per_foreground, foreground_live_time, background_live_time, verbose = False):
		"""
		Given the desired average number of events per foreground
		live time, determine the likelihood threshold to cut
		coincidences on.  The interpretation is that coincidences
		with a likelihood greater than (not equal to) the value
		returned by this function are to be retained.
		"""
		#
		# How many events to retain from the non-zero-lag
		# coincidences in order to get events_per_foreground
		# survivors in the foreground, assuming the event rate is
		# the same in all time slides.
		#

		n_background = int(round(events_per_foreground * background_live_time / foreground_live_time))

		#
		# Effective confidence that will keep n_background
		# background events
		#

		self.effective_confidence_threshold = self.background_eff_confidences[n_background]

		if verbose:
			print >>sys.stderr, "\tln likelihood > %g ln confidence + %g" % (self.effective_confidence_slope, self.effective_confidence_threshold)

	def get_foreground_above_confidence_threshold(self):
		return [x for x in self.foreground_eff_confidences if x > self.effective_confidence_threshold]

	def is_a_keeper(self, likelihood, confidence):
		# FIXME:  consider imposing a minimum required likelihood
		# to prevent a noise event with a ridiculously low
		# likelihood but a stupidly high amplitude from passing the
		# test.  has to be accounted for in
		# get_foreground_above_confidence_threshold() and other
		# places.
		return self.effective_confidence(likelihood, confidence) > self.effective_confidence_threshold


#
# =============================================================================
#
#                              Zero-Lag Survivors
#
# =============================================================================
#


class Survivors(object):
	def __init__(self):
		self.xmldoc = None

	def add(self, contents):
		if self.xmldoc is None:
			self.xmldoc = ligolw.Document()
			self.xmldoc.appendChild(ligolw.LIGO_LW())
			self.sngl_burst_table = lsctables.New(lsctables.SnglBurstTable, contents.sngl_burst_table.columnnames)
			self.xmldoc.childNodes[0].appendChild(self.sngl_burst_table)

		for sngl_burst in map(contents.sngl_burst_table._row_from_cols, contents.connection.cursor().execute("""
SELECT
	sngl_burst.*
FROM
	sngl_burst
WHERE
	sngl_burst.event_id IN (
		SELECT coinc_event_map.event_id FROM
			coinc_event_map
			JOIN coinc_event ON (
				coinc_event.coinc_event_id == coinc_event_map.coinc_event_id
			)
			JOIN multi_burst ON (
				multi_burst.coinc_event_id == coinc_event.coinc_event_id
			)
		WHERE
			coinc_event_map.table_name == 'sngl_burst'
			AND coinc_event.coinc_def_id == ?
			AND is_a_keeper(coinc_event.likelihood, multi_burst.confidence)
			AND NOT EXISTS (
				SELECT * FROM
					time_slide
				WHERE
					time_slide.time_slide_id == coinc_event.time_slide_id
					AND time_slide.offset != 0
			)
	)
		""", (contents.bb_definer_id,))):
			self.sngl_burst_table.append(sngl_burst)

	def finish(self, filename, verbose = False):
		utils.write_filename(self.xmldoc, filename, verbose = verbose, gz = (filename or "stdout").endswith(".gz"))


#
# =============================================================================
#
#                                  Efficiency
#
# =============================================================================
#


class Efficiency_hrss_vs_freq(SimBurstUtils.Efficiency_hrss_vs_freq):
	def add_contents(self, contents):
		# NOTE:  we are piggy-backing on other code, so
		# "instrument" is singular even though it a set of things.
		if self.instrument is None:
			self.instrument = contents.instruments
		elif self.instrument != contents.instruments:
			raise ValueError, "this document contains instruments %s, but have been seeing %s so far" % ("+".join(contents.instruments), "+".join(self.instrument))

		# NOTE:  coinc_segs must be computed the same way the
		# segment list used to measure live time is computed,
		# otherwise the detection efficiency is not being measured
		# in the same data as the live time is being claimed.  that
		# means it must be the simple intersection, with no attempt
		# to contract it on the grounds that it's difficult to
		# detect things at the edges of segments.

		seglist = contents.seglists.intersection(self.instrument)

		# FIXME: careful, the check for a coincidence will find any
		# coincidence, no matter which instruments participate.
		# For now, I'm running fixed networks so this is not a
		# problem, but if variable configuration networks are
		# adopted in the future, then this will need to be
		# re-thought to be sure that "found in a coinc" means
		# "found in a coinc involving the correct set of
		# instruments".
		for values in contents.connection.cursor().execute("""
SELECT
	sim_burst.*,
	EXISTS (
		-- Find a burst<-->burst coinc containing a burst that
		-- is "near" this injection, and whose effective
		-- confidence is above threshold
		SELECT
			*
		FROM
			coinc_event_map AS a
			JOIN coinc_event_map AS b ON (
				b.coinc_event_id == a.coinc_event_id
			)
			JOIN coinc_event ON (
				b.table_name == 'coinc_event'
				AND b.event_id == coinc_event.coinc_event_id
			)
			JOIN multi_burst ON (
				multi_burst.coinc_event_id == coinc_event.coinc_event_id
			)
		WHERE
			a.table_name == 'sim_burst'
			AND a.event_id == sim_burst.simulation_id
			AND is_a_keeper(coinc_event.likelihood, multi_burst.confidence)
	)
FROM
	sim_burst
		"""):
			sim = contents.sim_burst_table._row_from_cols(values)
			found = values[-1]
			# FIXME:  this assumes all injections are done at
			# zero lag (which is correct, for now, but watch
			# out for this)
			if SimBurstUtils.injection_was_made(sim, seglist, self.instrument):
				self.injected_x.append(sim.freq)
				self.injected_y.append(sim.hrss)
				if found:
					self.found_x.append(sim.freq)
					self.found_y.append(sim.hrss)
			elif found:
				print >>sys.stderr, "odd, injection %s was found but not injected..." % sim.simulation_id


#
# =============================================================================
#
#                                  Live Time
#
# =============================================================================
#


def get_background_time_slides(contents):
	"""
	Query the database for the IDs and offsets of non-zero-lag time
	slides.
	"""
	time_slides = {}
	for id, instrument, offset in contents.connection.cursor().execute("""
SELECT
	time_slide_id,
	instrument,
	offset
FROM
	time_slide
WHERE
	EXISTS (
		SELECT
			*
		FROM
			time_slide AS a
		WHERE
			a.time_slide_id == time_slide_id
			AND a.offset != 0
	)
	"""):
		if id not in time_slides:
			time_slides[id] = {}
		time_slides[id][instrument] = offset
	return time_slides


def zero_lag_livetime(seglists):
	"""
	Return the total live time in the zero lag time slide.
	"""
	seglists.offsets.clear()
	return float(abs(seglists.intersection(seglists.keys())))


def time_slides_livetime(seglists, time_slides, verbose = False):
	"""
	For each of the time slides, which are instrument --> offset
	mappings, compute the live time, and return the sum.
	"""
	livetime = 0
	old_offsets = seglists.offsets.copy()
	N = len(time_slides)
	for n, time_slide in enumerate(time_slides):
		if verbose:
			print >>sys.stderr, "\t%.1g%%" % (100.0 * n / N),
		seglists.offsets.update(time_slide)
		livetime += float(abs(seglists.intersection(time_slide.keys())))
	seglists.offsets.update(old_offsets)
	if verbose:
		print >>sys.stderr, "\t100.0%"
	return livetime


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line.
#


options, filenames = parse_command_line()


#
# Set up book-keeping tools.
#

#likelihood_histogram = old_Confidence_Likelihood_Histogram(segments.segment(6.0, 25.0), segments.segment(1e-5, 1e13))
likelihood_histogram = Confidence_Likelihood_Histogram(options.confidence_contour_slope)
efficiency = Efficiency_hrss_vs_freq(None, (lambda sim, instrument: sim.hrss), 0.1)
non_injection_seglists = segments.segmentlistdict()
injection_seglists = segments.segmentlistdict()
background_time_slides = []


#
# Iterate over background files.
#


if options.verbose:
	print >>sys.stderr, "=== Background & Foreground ==="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.background_glob])
filenames.sort()

if not len(filenames):
	raise ValueError, "error:  no background files found"

for n, filename in enumerate(filenames):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(options.live_time_program, options.verbose)

	#
	# Process database contents.
	#

	background_time_slides = ligolw_tisi.time_slide_list_merge(background_time_slides, get_background_time_slides(database).itervalues())
	likelihood_histogram.add_non_injections(database)
	non_injection_seglists |= database.seglists

	#
	# Done with this file.
	#

	connection.close()
	dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)


#
# Determine likelihood threshold.
#


if options.verbose:
	print >>sys.stderr, "=== Threshold ==="
	print >>sys.stderr, "measuring live time ..."
foreground_live_time = zero_lag_livetime(non_injection_seglists)
background_live_time = time_slides_livetime(non_injection_seglists, background_time_slides)

if options.verbose:
	print >>sys.stderr, "filtering background likelihood histograms ..."
likelihood_histogram.finish_non_injections()

if options.verbose:
	print >>sys.stderr, "computing effective confidence threshold ..."
likelihood_histogram.find_confidence_threshold(options.foreground_survivors, foreground_live_time, background_live_time, verbose = options.verbose)


#
# Retrieve survivors if box is to be opened.
#


if options.survivors_output is not None:
	if options.verbose:
		print >>sys.stderr, "retrieving zero-lag survivors ..."

	survivors = Survivors(confidence_threshold)

	for n, filename in enumerate(filenames):
		#
		# Open the database file.
		#

		if options.verbose:
			print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
		working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
		connection = sqlite3.connect(working_filename)
		connection.create_function("is_a_keeper", 2, is_a_keeper)
		dbtables.DBTable_set_connection(connection)
		database = SnglBurstUtils.CoincDatabase().summarize(options.live_time_program, options.verbose)

		#
		# Process database contents.
		#

		survivors.add(database)

		#
		# Done with this file.
		#

		connection.close()
		dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)
else:
	survivors = None


#
# Iterate over injection files.
#


if options.verbose:
	print >>sys.stderr, "=== Injections =="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.injection_glob])
filenames.sort()

if not len(filenames):
	raise ValueError, "error:  no injection files found"

for n, filename in enumerate(filenames):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)
	connection.create_function("is_a_keeper", 2, likelihood_histogram.is_a_keeper)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(options.live_time_program, options.verbose)

	#
	# Process database contents.
	#

	efficiency.add_contents(database)
	injection_seglists |= database.seglists

	#
	# Done with this file.
	#

	connection.close()
	dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)


#
# Summary.
#


efficiency.finish()

#n_background = likelihood_histogram.background_extra + likelihood_histogram.background_bins.array.sum()
## FIXME:  make the underlying arrays ints
#n_foreground = likelihood_histogram.foreground_extra + int(likelihood_histogram.foreground_bins.array.sum())
#n_survivors = likelihood_histogram.foreground_extra + int(numpy.where(likelihood_histogram.keepers.array, likelihood_histogram.foreground_bins.array, 0).sum())

n_background = len(likelihood_histogram.background_eff_confidences)
n_foreground = len(likelihood_histogram.foreground_eff_confidences)
n_survivors = len(likelihood_histogram.get_foreground_above_confidence_threshold())

print
print "=== Summary ==="
print "Total live time in background = %s s" % background_live_time
print "Total live time in foreground = %s s" % foreground_live_time
print "Number of events in background = %d" % n_background
print "Average number of background events per foreground live time = %g" % (n_background / background_live_time * foreground_live_time)
print "Number of events in foreground = %d" % n_foreground

# FIXME: in the future, don't display this until the box is open.
#if survivors is not None:
print "Number of foreground events above threshold = %d (%g expected)" % (n_survivors, options.foreground_survivors)

print
print "Writing plots ..."
efficiency.instrument = list(efficiency.instrument)
efficiency.instrument.sort()
efficiency.instrument = "+".join(efficiency.instrument)
SimBurstUtils.plot_Efficiency_hrss_vs_freq(efficiency).savefig("lalapps_excesspowerfinal_efficiency.png")

print
print "=== Done ==="
