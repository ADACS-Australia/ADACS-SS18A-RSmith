#!/usr/bin/python

import sys
import os
import string
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import support
from pylal import viz
from glue import pipeline

###############################################################
usage = """usage: %prog [options]

Removes the burst triggers which lie in the times to be vetoed.

The list of the xml files containing the triggers are in the .txt file. This
shu'd be the argument for -i
The times to be vetoed as produced by the segwizard are in file which shu'd
be the argument for -f
This program will loop through each file in the list of xml files and remove
the triggers which lie inside the times in the veto file. Note, the format
of the veto file shu'd be the one as produced by segwizard, i.e. two columns
one for start time and the second for end time. One file for each in the list
of xml files will be produced with the triggers removed and will be written in
the output dir. specified by -o. If no dir is specified the default is the
working directory.

Example: burstveto -i L1.txt -f S4H1L1v08_vetotimes.txt -o L1veto --user-tag testL1

"""

parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-i","--input-file",action="store",type="string", \
    default=None, metavar=" INPUT_FILE",help="Input file with .xml list" )
parser.add_option("-f","--veto-file",action="store",type="string", \
    default=None, metavar=" VETO_FILE",help="File with times to be vetoed" )
parser.add_option("-o","--output-dir",action="store",type="string", \
    default='./', metavar=" OUTPUT_DIR",help="Output dir" )
parser.add_option("-c","--user-tag",action="store",type="string", \
    default=None, metavar=" USER_TAG",help="user comment" )

(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
    sys.exit(0)

if not (opts.input_file or opts.num_slides):
    print >>sys.stderr,"ERROR: one or both of the options\
    among input file, num slides is missing"
    print >>sys.stderr,"enter extracttimeslides --help"
    sys.exit(1)

######################################################################

#output dir
if opts.output_dir:
    try: os.mkdir(opts.output_dir)
    except: pass

# reads the trigger files in the input list
trigFile = open(opts.input_file)

veto = pipeline.ScienceData()
veto.veto_read(opts.veto_file)

trigFiles = []
for line in trigFile:
    trigFiles.append(string.strip(line,"\n"))

#for each file extracts the triggers corresponding to different
#timeslides and writes to separate files
for i in range(len(trigFiles)):
    extracttriggers = readMeta.metaDataTable(None,None)
    count = 0
    flist = []
    flist.append(trigFiles[i])
    triggers = readMeta.metaDataTable(flist, "sngl_burst")
    searchsum = readMeta.metaDataTable(flist, "search_summary")
    process = readMeta.metaDataTable(flist, "process")
    processparams = readMeta.metaDataTable(flist, "process_params")

    start_time = int((searchsum.mkarray("in_start_time"))[0])
    end_time = int((searchsum.mkarray("in_end_time"))[0])

    for trig in triggers.table:
        tokeep = 1
        ifo = str(trig['ifo'])
        trigtime = trig['peak_time'] + trig['peak_time_ns'] / 1000000000.0
        for seg in veto:
            if ( (seg.start() - trigtime) * (seg.end() - trigtime) < 0 ):
                tokeep = 0
                break

        if tokeep == 1:
            count += 1
            extracttriggers.table.append(trig)

    for entry in searchsum.table:
        entry['nevents'] = count

    output = opts.output_dir
    if opts.user_tag:
        output += '/' + str(ifo) + '-' + 'VETOED' + '_' + opts.user_tag + '-' + str(start_time) + '-' + str(end_time - start_time) + '.xml'
    else:
        output += '/' + str(ifo) + '-' + 'VETOED' + '-' + str(start_time) + '-' + str(end_time - start_time) + '.xml'
        
    #write to the output
    fileObj = support.open_xml(output)
    support.write_process(fileObj, process.table )
    support.write_process_params(fileObj, processparams.table )
    support.write_search_summary(fileObj, searchsum.table )
    support.write_sngl_burst_begin(fileObj)
    support.write_sngl_burst_write(fileObj,extracttriggers.table )
 
    # close file
    support.write_sngl_burst_end(fileObj)
    support.close_xml(fileObj)


