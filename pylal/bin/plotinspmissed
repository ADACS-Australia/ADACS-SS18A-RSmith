#!/usr/bin/python

import sys, os, re, glob, exceptions
from types    import *
from optparse import *
from pylab    import *
from lgen     import readMeta
from lgen     import viz

##########################################################################

usage = """Usage: %prog [options] [trigs1 missed1 trigs2 missed2]

Generate found and missed trig plots

Example: plotinspmissed --time-snr --show found.xml missed.xml
"""
parser = OptionParser( usage )
parser.add_option("-t","--time-snr",action="store_true",default=False,\
    help="plot snr v trig end time" )
parser.add_option("-a","--tag1",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for first input file" )
parser.add_option("-b","--tag2",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for second input file" )
parser.add_option("-c","--tag3",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for third input file" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-f","--fig-name",action="store",type="string",\
    default=None, metavar=" NAME",\
    help="generate png figures with name NAME-fig.png" )

(opts,args) = parser.parse_args()

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "a trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

# check if "found_missed": trig and missed inj files are paired
# then fill lists of injection and missed injection files
injFiles = []
misFiles = []

if len(args)<2:
  print >>sys.stderr, "a missed-file must be specified"
  print >>sys.stderr, "when making plots of missed injections"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)
elif len(args)%2:
  print >>sys.stderr, "mismatched pair"
  print >>sys.stderr, "when making plots of missed injections"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
else:
  for i in range(len(args)):
    if i%2:
      misFiles.append(args[i])
    else:
      injFiles.append(args[i])       

# read in tables into dictionaries of paired sets
injSets = []

for i in range(len(injFiles)):
  injSet = {}
  injDict = {}
  misDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sngl_inspiral"] = readMeta.metaDataTable(flist, "sngl_inspiral")
  injDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  injDict["ifo"] = injDict["sngl_inspiral"].table[1]["ifo"]
  if injDict["ifo"] == 'H1'  or  injDict["ifo"] == 'H2':
    injDict["inj_time"] =  injDict["sim_inspiral"].mkarray("h_end_time") + \
      1e-9 * injDict["sim_inspiral"].mkarray("h_end_time_ns")
    injDict["inj_dist"] =  injDict["sim_inspiral"].mkarray("eff_dist_h")
  elif injDict["ifo"] == ('L1'):
    injDict["inj_time"] =  injDict["sim_inspiral"].mkarray("l_end_time") + \
      1e-9 * injDict["sim_inspiral"].mkarray("l_end_time_ns")
    injDict["inj_dist"] =  injDict["sim_inspiral"].mkarray("eff_dist_l")
  injDict["inj_chirp"]  = injDict["sim_inspiral"].mkarray("mchirp")
  
  # test sire clustering
  if injDict['sngl_inspiral'].nevents() != injDict['sim_inspiral'].nevents():
    print >>sys.stderr, "number of triggers and found injections must be equal"
    sys.exit(1)
  #
  if misFiles:
    flist = []
    flist.append(misFiles[i])
    misDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  if injDict["ifo"] == 'H1'  or  injDict["ifo"] == 'H2':
    misDict["mis_time"] =  misDict["sim_inspiral"].mkarray("h_end_time") + \
      1e-9 * misDict["sim_inspiral"].mkarray("h_end_time_ns")
    misDict["mis_dist"] =  misDict["sim_inspiral"].mkarray("eff_dist_h")
  elif injDict["ifo"] == ('L1'):
    misDict["mis_time"] =  misDict["sim_inspiral"].mkarray("l_end_time") + \
      1e-9 * misDict["sim_inspiral"].mkarray("l_end_time_ns")
    misDict["mis_dist"] =  misDict["sim_inspiral"].mkarray("eff_dist_l")

  #
  injSet["injections"] = injDict
  injSet["missedinjs"] = misDict
  injSets.append(injSet)

###################################################
# set lists of plot symbols
plot1symbol=['bx','b+','bo']
plot2symbol=['rx','r+','ro']
    
if opts.time_snr:  
  figure()
  sym=0
  for set in injSets:
    semilogy(set['injections']['inj_time'],set['injections']['inj_dist'],\
             plot1symbol[sym],label='Found',\
             markerfacecolor=None,markeredgecolor='b',markersize=10)
    hold(True)
    semilogy(set['missedinjs']['mis_time'],set['missedinjs']['mis_dist'],\
              plot2symbol[sym],label='Missed',\
	      markerfacecolor=None,markeredgecolor='r',markersize=10)
    hold(True) 
    sym+=1
  #legend()
  title(set['injections']['ifo'] + ' Distance vs Time', size='x-large')
  xlabel('Injected End Time (GPS seconds)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #axis([min(inj_time), max(inj_time), \
  #  0.95 * min(inj_dist), 1.05 * max(missed_dist)])
  gca().grid(True)

  if opts.fig_name:
    savefig(opts.fig_name + '_' + set['injections']['ifo'] + "_time-snr.png")
  
if opts.show_plot:
  show()
