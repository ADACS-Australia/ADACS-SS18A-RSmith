#!/usr/bin/python

__Id__ = "$Id$"
__author__ = "Darren Woods and Stephen Fairhurst <sfairhurs@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__ = "plotinspmissed"
__title__ = "Found and Missed plots for triggers"

import sys, os, re, glob, exceptions
from types    import *
from optparse import *
from matplotlib.ticker import FormatStrFormatter
from glue import segments
from glue import segmentsUtils
from glue import lal
from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from pylal import InspiralUtils

#######################################################################
def isSummValue(name, attrs):
  return lsctables.IsTableProperties(lsctables.SummValueTable, name, attrs)

def readFiles(fList):
  """
  read in the SummInspiralTables from a list of files
  @param fList:       list of input files
  """
  output = {}
  if not fList:
    return output
  for thisFile in fList:
    doc = ligolw.Document()
    # read in SummValueTable
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
        isSummValue)).parse(file(thisFile))
    for row in doc.childNodes[0]:
      if row.name == 'inspiral_effective_distance':
        if not output.has_key(row.ifo):
          output[row.ifo] = lsctables.New(lsctables.SummValueTable)
        output[row.ifo].append(row)
  return output


def filestrip(file):
  x = file[0].rfind('_')
  y = file[0].rfind('-8')
  return file[0][x+1:y]

#################################################################

##############################################################################
# parse options and arguments
usage = """Usage: %prog [options] [trigs1 missed1 trigs2 missed2]

Generate found and missed trig plots

Example: plotinspmissed --time-dist --show-plot found.xml missed.xml
"""


def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")

  parser = OptionParser( usage=usage, version="%prog CVS $Id$ \n" + "$Name$\n" )
  parser.add_option("-a","--time-dist",action="store_true",default=False,\
      help="plot dist v trig end time" )
  parser.add_option("-b","--mchirp-dist-log",action="store_true",default=False,\
      help="plot dist v mchirp (log dist axis)" )
  parser.add_option("-c","--mtotal-dist-log",action="store_true",default=False,\
      help="plot dist v mtotal (log dist axis)" )
  parser.add_option("-d","--mchirp-dist-linear",action="store_true",default=False,\
      help="plot dist v mchirp (linear dist axis)" )
  parser.add_option("-e","--mtotal-dist-linear",action="store_true",default=False,\
      help="plot dist v mtotal (linear dist axis)" )
  parser.add_option("-x","--tag",action="append",type="string",\
      dest="tags", metavar=" TAG",
      help="identifier for input file (append to list)" )
  parser.add_option("-y","--tag2",action="store",type="string",\
      default=None, metavar=" TAG",help="identifier for second input file" )
  parser.add_option("-z","--tag3",action="store",type="string",\
      default=None, metavar=" TAG",help="identifier for third input file" )
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-t","--title",action="store",type="string",\
      default="", metavar=" TITLE", help="add more info to standard title" )
  parser.add_option("-l","--legend",action="store_true",default=False,\
      help="include legend on plot" )  
  parser.add_option("-V","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="read in segments from FNAME (assumed segwizard format)")
  parser.add_option("-i","--ifo",action="store",type="string",default=None,\
      help="specify the ifo (otherwise will be read from the found file")
  parser.add_option("-M","--min-distance",action="store",type="int",\
      default=None, metavar=" MIN_DIST",\
      help="provide time and dist of all missed injections closer than MIN_DIST")
  parser.add_option("-r","--add-horizon",action="store",type="string",\
      default=None,metavar="INSP",\
      help="show the inspiral horizon obtained from files matching the glob INSP")
  parser.add_option("-p","--y-min",action="store",type="float",\
      default=None,metavar="YMIN",\
      help="set the y min range to YMIN")
  parser.add_option("-q","--y-max",action="store",type="float",\
      default=None,metavar="YMAX",\
      help="set the y max range to YMAX")
  parser.add_option("","--injection-cache-file",action="store",type="string",\
      default=None, metavar=" CACHE_FILE",help="get input triggers from a cache file" )
  parser.add_option("","--ifo-type",action="store",type="string",\
      default=None, metavar=" IFO_TYPE",help="sieves the cache file for a particular ifo type" )
  parser.add_option("-u","--user-tag",action="store",type="string",\
        default=None, metavar=" USERTAG",\
        help="" )
  parser.add_option("","--cache-description", action="store",type="string",\
      default="COIRE_", metavar="CACHEDESCRIPTION", help="description pattern the cache entries will be sieved with" )
  parser.add_option("","--add-description", action="store",type="string",\
      default="SLIDE", metavar="ADDDESCRIPTION", help="additional description pattern the cache entries will be sieved with" )
  parser.add_option("-P","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
        help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-I","--ifo-times",action="store",\
        type="string",  metavar=" IFOTIMES",\
      help="ifo times is used as prefix for the output files ")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  
  command_line = sys.argv[1:]
  (options,args) = parser.parse_args()

  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times must be provided in (H1, H2, L1, V1, G1)"

  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

# ============================================================================
# Initialise
#-- add prefix and suffix to the opts strucutre. To be used for filenames
opts = InspiralUtils.set_prefix_and_suffix(opts, __name__)
opts = InspiralUtils.set_version(opts, __name__, __version__)
# -- set the proper color code
colors = InspiralUtils.colors
figure_number = 0  # used for the figure label (showplot)
fnameList = []   # use for the cache file
tagList= []   # use for the cache file

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz


# check at least one trig file was specified

if opts.injection_cache_file:
  injFiles = lal.Cache.fromfile(open(opts.injection_cache_file)).sieve(ifos=opts.ifo_type,description="FOUND").sieve(description=opts.cache_description).checkfilesexist()[0].pfnlist()
  misFiles = lal.Cache.fromfile(open(opts.injection_cache_file)).sieve(ifos=opts.ifo_type,description="MISSED").sieve(description=opts.cache_description).checkfilesexist()[0].pfnlist()
  if opts.verbose:
    print "... reading the following found files " + str(injFiles)
    print "... reading the following missed files " + str(misFiles)
  if len(injFiles) < 1:
    print >>sys.stderr,"Cache file must be input"
    sys.exit(1)
  
  if not opts.tags:
    opts.tags = []
    for entry in injFiles:
      opts.tags.append(filestrip([entry]))
   
  if opts.title != "":
      opts.title += ": "

else:

  if not args:
    print >>sys.stderr, "a trig-file must be specified"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    sys.exit(1)

  if opts.title != "":
    opts.title += ": "
#check if "found_missed": trig and missed inj files are paired
# then fill lists of injection and missed injection files
  injFiles = []
  misFiles = []
  if not args:
    print >>sys.stderr, "a trig-file must be specified"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    sys.exit(1)

  if opts.title != "":
    opts.title += ": "
  
  if len(args)<2:
    print >>sys.stderr, "a missed-file must be specified"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    sys.exit(1)

  elif len(args)%2:
    print >>sys.stderr, "mismatched pair"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
  
  else:
    for i in range(len(args)):
      if i%2:
        misFiles.append(args[i])
      else:
        injFiles.append(args[i])
  
  if not opts.tags:
      opts.tags = []
      for i in range(len(args)/2):
        opts.tags.append('')
    
 
  elif (len(opts.tags) != len(args)/2):
      print >>sys.stderr, "If you specify tags, then make sure you have the same" \
                          "number of tags as found files"
      print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"

#######################################################################
# identify the inspiral files if we want the horizon
if opts.add_horizon:
  inspiralFiles = glob.glob(opts.add_horizon)
  if not inspiralFiles:
    print >>sys.stderr, "The glob for " + opts.inspiral_horizon + \
        " returned no files"
    sys.exit(1)
else:
  inspiralFiles = None

##############################################################################
# read in tables into dictionaries of paired sets
injSets = []

for i in range(len(injFiles)):
  injSet = {}
  injDict = {}
  misDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sim_inspiral"]  = SimInspiralUtils.ReadSimInspiralFromFiles(flist)

  if opts.ifo:
    injDict["ifo"] = opts.ifo
  else:
    sngl = SnglInspiralUtils.ReadSnglInspiralFromFiles(flist)
    injDict["ifo"] = sngl[0].ifo
    
  injDict["inj_time"] = viz.timeindays( viz.readcol(injDict["sim_inspiral"], \
    "end_time", injDict["ifo"] ) )
  injDict["inj_dist"] = viz.readcol(injDict["sim_inspiral"], "eff_dist", \
    injDict["ifo"] )
  injDict["inj_chirp"]  = viz.readcol(injDict["sim_inspiral"], "mchirp" )
  injDict["inj_m1"] = viz.readcol(injDict["sim_inspiral"], "mass1" )
  injDict["inj_m2"] = viz.readcol(injDict["sim_inspiral"], "mass2" )
  injDict["inj_mtotal"] = injDict["inj_m1"] + injDict["inj_m2"]
  
    
  #
  if misFiles:
    flist = []
    flist.append(misFiles[i])
    misDict["sim_inspiral"]  = SimInspiralUtils.ReadSimInspiralFromFiles(flist)
  #
  # apply veto if there is one
  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    misDict["sim_inspiral"] = \
        misDict["sim_inspiral"].veto(seglist,"geocent_end_time")

  misDict["mis_time"] = viz.timeindays( viz.readcol(misDict["sim_inspiral"], \
    "end_time", injDict["ifo"] ) )
  misDict["mis_dist"] = viz.readcol(misDict["sim_inspiral"], "eff_dist", \
    injDict["ifo"] )
  misDict["mis_chirp"]  = viz.readcol(misDict["sim_inspiral"], "mchirp" )
  misDict["mis_m1"] = viz.readcol(misDict["sim_inspiral"], "mass1" )
  misDict["mis_m2"] = viz.readcol(misDict["sim_inspiral"], "mass2" )
  misDict["mis_mtotal"] = misDict["mis_m1"] + misDict["mis_m2"]


  if opts.min_distance:
    misDict["l_dist"] = viz.readcol(misDict["sim_inspiral"], "eff_dist", "L1" )
    misDict["h_dist"] = viz.readcol(misDict["sim_inspiral"], "eff_dist", "H1" )
    misDict["mchirp"] = viz.readcol(misDict["sim_inspiral"], "mchirp", "H1" )
    print flist[0]
    for i in range(len(misDict["mis_time"])):
      if misDict["mis_dist"][i] < opts.min_distance:
        print "Missed Distance in " + injDict["ifo"] + " was " + \
            str(misDict["mis_dist"][i]),
        print "GPS time " + \
            str(misDict["sim_inspiral"][i].geocent_end_time)
        print "L/H Distance ratio was " + \
            str(misDict["l_dist"][i]/misDict["h_dist"][i])
        print "Chirp mass was " + \
            str(misDict["mchirp"][i])

  
  # append combination of tables to list as a dictionary
  injSet["injections"] = injDict
  injSet["missedinjs"] = misDict
  injSets.append(injSet)

##############################################################################
# read in the range if desired
if inspiralFiles:
  inspiralSumm = readFiles(inspiralFiles)
  if not opts.ifo:
    print >> sys.stderr, "Must specify --ifo for --show-horizon"
    sys.exit(1)
  
  horizon = inspiralSumm[opts.ifo].getColumnByName('value').asarray()
  startTime = viz.timeindays(inspiralSumm[opts.ifo].getColumnByName('start_time').asarray())

##############################################################################
# set lists of plot symbols
plot1symbol=['bx','bo','b+','b^','b>','b<']
plot2symbol=['rx','ro','r+','r^','r>','r<']

gpsDigits = "9"
xmajorFormatter = FormatStrFormatter("%"+gpsDigits+"d")  
##############################################################################
# Initialise all the stuffs 

# plot time V dist
if opts.time_dist:  
  figure()
  t=0

  # plot found
  for injSet in injSets:
    semilogy(injSet['injections']['inj_time'],injSet['injections']['inj_dist'],\
             plot1symbol[t],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    t+=1
    hold(True)

  # and missed
  t=0  
  for injSet in injSets:
    semilogy(injSet['missedinjs']['mis_time'],injSet['missedinjs']['mis_dist'],\
        plot2symbol[t],label=opts.tags[t]+" miss",\
        markerfacecolor=None,markeredgecolor='r',markersize=10,\
        markeredgewidth=1)
    t+=1
    hold(True) 
    
  if inspiralFiles:
    semilogy(startTime, horizon, 'g.', label='Horizon (Mpc)',
      linewidth=1)

  if opts.y_min:
    ylim(ymin=opts.y_min)
  if opts.y_max:
    ylim(ymax=opts.y_max)
    
  if opts.legend:
    legend()

  title(opts.title + 'Distance vs Time', size='x-large')
  xlabel('Injected End Time (days after start of run)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  gca().grid(True)

  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "time-dist-log")
    savefig(fname)
    fnameList.append(fname)
    tagList.append("End time versus distance")

# plot mchirp V dist log plot
if opts.mchirp_dist_log:  
  figure()
  sym=0
  t=0
  for injSet in injSets:
    semilogy(injSet['injections']['inj_chirp'],injSet['injections']['inj_dist'],\
             plot1symbol[sym],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    hold(True)
    semilogy(injSet['missedinjs']['mis_chirp'],injSet['missedinjs']['mis_dist'],\
        plot2symbol[sym],label=opts.tags[t]+" miss",\
        markerfacecolor=None,markeredgecolor='r',markersize=10,\
        markeredgewidth=1)
    hold(True) 
    sym+=1
    t+=1
  if opts.legend:
    legend()
  title(opts.title + 'Distance vs Chirp Mass', size='x-large')
  xlabel('Injected Chirp Mass (Msun)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #ylim(10, 1000)
  gca().grid(True)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "time-mchirp-log")
    savefig(fname)
    fnameList.append(fname)
    tagList.append("End time versus chirp mass ")
    

# plot mchirp V dist linear plot
if opts.mchirp_dist_linear:  
  figure()
  sym=0
  t=0
  for injSet in injSets:
    plot(injSet['injections']['inj_chirp'],injSet['injections']['inj_dist'],\
             plot1symbol[sym],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    hold(True)
    plot(injSet['missedinjs']['mis_chirp'],injSet['missedinjs']['mis_dist'],\
        plot2symbol[sym],label=opts.tags[t]+" miss",\
        markerfacecolor=None,markeredgecolor='r',markersize=10,\
        markeredgewidth=1)
    hold(True) 
    sym+=1
    t+=1
  if opts.legend:
    legend()
  title(opts.title + 'Distance vs Chirp Mass', size='x-large')
  xlabel('Injected Chirp Mass (Msun)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #ylim(10, 100)
  gca().grid(True)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "time-mchirp-linear")
    savefig(fname)
    fnameList.append(fname)
    tagList.append("End time versus chirp mass (linear) ")

# plot mtotal V dist log plot
if opts.mtotal_dist_log:
  figure()
  sym=0
  t=0
  for injSet in injSets:
    semilogy(injSet['injections']['inj_mtotal'],injSet['injections']['inj_dist'],\
             plot1symbol[sym],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    hold(True)
    semilogy(injSet['missedinjs']['mis_mtotal'],injSet['missedinjs']['mis_dist'],\
             plot2symbol[sym],label=opts.tags[t]+" miss",\
             markerfacecolor=None,markeredgecolor='r',markersize=10,\
             markeredgewidth=1)
    hold(True)
    sym+=1
    t+=1
  if opts.legend:
    legend()
  title(opts.title + 'Distance vs Total Mass', size='x-large')
  xlabel('Injected Total Mass (Msun)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #ylim(10, 1000)
  gca().grid(True)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "dist-mtotal-log")
    savefig(fname)
    fnameList.append(fname)
    tagList.append("Distnace versus total mass ")

  
# plot mtotal V dist linear plot
if opts.mtotal_dist_linear:
  figure()
  sym=0
  t=0
  for injSet in injSets:
    plot(injSet['injections']['inj_mtotal'],injSet['injections']['inj_dist'],\
             plot1symbol[sym],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    hold(True)
    plot(injSet['missedinjs']['mis_mtotal'],injSet['missedinjs']['mis_dist'],\
             plot2symbol[sym],label=opts.tags[t]+" miss",\
             markerfacecolor=None,markeredgecolor='r',markersize=10,\
             markeredgewidth=1)
    hold(True)
    sym+=1
    t+=1
  if opts.legend:
    legend()
  title(opts.title + 'Distance vs Total Mass', size='x-large')
  xlabel('Injected Total Mass (Msun)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #ylim(1, 200)
  gca().grid(True)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "dist-mtotal-linear")
    savefig(fname)
    fnameList.append(fname)
    tagList.append("Distnace versus total mass (linear)")


# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.html_write_output(opts, args, fnameList, tagList)
  InspiralUtils.write_output_cache(opts, html_filename, fnameList)




#######################################################################################3
if opts.show_plot:
  show()
