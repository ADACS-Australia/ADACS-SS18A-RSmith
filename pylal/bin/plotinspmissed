#!/usr/bin/python

__Id__ = "$Id$"
__author__ = "Darren Woods and Stephen Fairhurst <sfairhurs@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__ = "plotinspmissed"
__title__ = "Found and Missed plots for triggers"

import sys, os, re, glob, exceptions
from types    import *
from optparse import *
from matplotlib.ticker import FormatStrFormatter
from glue import segments
from glue import segmentsUtils
from glue import lal
from glue.ligolw import lsctables
from pylal import SnglInspiralUtils
from pylal import CoincInspiralUtils
from pylal import SimInspiralUtils
from pylal import InspiralUtils
import numpy

#######################################################################
def isSummValue(name, attrs):
  return lsctables.IsTableProperties(lsctables.SummValueTable, name, attrs)

def readFiles(fList):
  """
  read in the SummInspiralTables from a list of files
  @param fList:       list of input files
  """
  output = {}
  if not fList:
    return output
  for thisFile in fList:
    doc = ligolw.Document()
    # read in SummValueTable
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
        isSummValue)).parse(file(thisFile))
    for row in doc.childNodes[0]:
      if row.name == 'inspiral_effective_distance':
        if not output.has_key(row.ifo):
          output[row.ifo] = lsctables.New(lsctables.SummValueTable)
        output[row.ifo].append(row)
  return output


def printMissed( misDict, ifo=None):

  print "\nMissed Distance in " + ifo + " is " + \
        str(misDict.eff_dist_h)+ ' Mpc'
  print "GPS time: %9d.%9d" % \
        (misDict.geocent_end_time, misDict.geocent_end_time_ns)
  print "L/H Distance ratio is " + \
        str(misDict.eff_dist_l/misDict.eff_dist_h)
  print "Chirp mass is %.2f" % (misDict.mchirp)
  print "Mass-pair is %.2f + %.2f " % (misDict.mass1, misDict.mass2)
  #print "Inclination is %.2f and Polarization is %.2f " \
  #% (misDict.inclination, misDict.polarization)



##############################
def createPlot( foundx, foundy, missedx, missedy, \
                titleText, xlabelText, ylabelText):

  figure()
  plot( foundx, foundy, \
        'bo', markerfacecolor=None,\
        markeredgecolor='b',markersize=10, markeredgewidth=1)

  plot( missedx, missedy, \
        'ro', markerfacecolor=None,\
        markeredgecolor='r',markersize=10, markeredgewidth=1)
  
  if inspiralFiles:
    semilogy(startTime, horizon, 'g.', label='Horizon (Mpc)',
             linewidth=1)

  if opts.y_min:
    ylim(ymin=opts.y_min)
  if opts.y_max:
    ylim(ymax=opts.y_max)
    

  title(titleText, size='x-large')
  xlabel(xlabelText, size='x-large')
  ylabel(ylabelText, size='x-large')
  grid(True)


def getData( table, xname, yname, ifo  ):

  if xname=='time':
    xp= [ t-opts.time_offset \
          for t in viz.timeindays(viz.readcol( table,"end_time", ifo)) ]
    legx = "End time (in days)"
  elif xname == 'mtotal':    
    xp = viz.readcol( table,"mass1")+viz.readcol( table,"mass2")
    legx = "Total mass"
  else:
    xp = viz.readcol( table,xname)
    legx = xname
  

  if yname == 'eff_dist':
    yp = viz.readcol( table,"eff_dist", ifo )
    legy = "Effective distance"
  else:
    yp = viz.readcol( table,yname)
    legy = yname

  return xp, yp, legx, legy

def savePlot(opts, filePart, tag ):
       
  fname = InspiralUtils.set_figure_name(opts, filePart)
  fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, \
                                            dpi_thumb=opts.figure_resolution)
  fnameList.append(fname)
  tagList.append( tag )

#################################################################

##############################################################################
# parse options and arguments
usage = """Usage: %prog [options] [trigs1 missed1 trigs2 missed2]

Generate found and missed trig plots

plotinspmissed --mtotal-dist-linear --verbose  --output-path plots/ --mchirp-dist-log  --time-dist  --gps-start-time 866088014 --mchirp-dist-linear --gps-end-time 866109614 --cache-file ihope.cache --enable-output  --mtotal-dist-log  --ifo H1 --legend --found-pattern COIRE_INJECTIONS_*_FOUND_SECOND_*_INJ* --missed-pattern COIRE_INJECTIONS_*_MISSED_SECOND_*_INJ*
"""


def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")
# opts.eff_vs_eff_dist, opts.eff_vs_distance opts.eff_vs_snr:  opts.eff_vs_snr_chi
  parser = OptionParser( usage=usage, version="%prog CVS $Id$ \n" + "$Name$\n" )
  parser.add_option("-a","--time-dist",action="store_true",default=False,\
      help="plot dist v trig end time" )
  parser.add_option("-b","--mchirp-dist-log",action="store_true",default=False,\
      help="plot dist v mchirp (log dist axis)" )
  parser.add_option("-c","--mtotal-dist-log",action="store_true",default=False,\
      help="plot dist v mtotal (log dist axis)" )
  parser.add_option("-d","--mchirp-dist-linear",action="store_true",default=False,\
      help="plot dist v mchirp (linear dist axis)" )
  parser.add_option("-e","--mtotal-dist-linear",action="store_true",default=False,\
      help="plot dist v mtotal (linear dist axis)" )
  parser.add_option("-f","--eff-vs-eff-dist",action="store_true",default=False,\
      help="efficiency plot versus effective distance (logarithmic dist axis)" )
  parser.add_option("-g","--eff-vs-distance",action="store_true",default=False,\
      help="efficiency plot versus distance (logarithmic dist axis)" )
  parser.add_option("-j","--eff-vs-snr",action="store_true",default=False,\
      help="efficiency plot versus SNR" )
  parser.add_option("-k","--eff-vs-snr-chi",action="store_true",default=False,\
      help="efficiency plot versus esnr-chi" )
  parser.add_option("-T","--time-offset",action="store",type="float",\
      default=0.0,metavar=" TIME-OFFSET",\
      help="time offset when plotting times")
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-t","--title",action="store",type="string",\
      default="", metavar=" TITLE", help="add more info to standard title" )
  parser.add_option("-l","--legend",action="store_true",default=False,\
      help="include legend on plot" )  
  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None, metavar=" USERTAG",\
      help="The user tag used in the name of the figures" )
  parser.add_option("","--ifo-tag",action="store",type="string",\
      default=None, metavar=" IFOTAG",\
      help="The ifo tag used in the name of the figures (e.g. SECOND_H1H2L1)")      
  parser.add_option("","--ifo-times",action="store",type="string",\
      default=None,metavar="IFOS",\
      help="sets ifo times for which plots will be made (e.g. H1H2L1)" )
  parser.add_option("-S","--same-symbol",action="store",type="string",\
      default=None,  metavar="SAME-SYMBOL",\
      help="enables the use of a same symbol")
  parser.add_option("-V","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="read in segments from FNAME (assumed segwizard format)")
  parser.add_option("-i","--ifo",action="store",type="string",default=None,\
      help="specify the ifo (otherwise will loop over all IFOs in ifo-times")
  parser.add_option("-M","--min-distance",action="store",type="int",\
      default=None, metavar=" MIN_DIST",\
      help="provide time and dist of all missed injections closer than MIN_DIST [Mpc]")
  parser.add_option("-N","--number-missed",action="store",type="int",\
      default=None, metavar=" NUMBER_MISSED",\
      help="provide number of missed injections to printed out")
  parser.add_option("-r","--add-horizon",action="store",type="string",\
      default=None,metavar="INSP",\
      help="show the inspiral horizon obtained from files matching the glob INSP")
  parser.add_option("-p","--y-min",action="store",type="float",\
      default=None,metavar="YMIN",\
      help="set the y min range to YMIN")
  parser.add_option("-q","--y-max",action="store",type="float",\
      default=None,metavar="YMAX",\
      help="set the y max range to YMAX")
  parser.add_option("","--found-pattern", action="store",type="string",\
      default="", metavar=" FOUND_PATTERN", help=" sieves a file for found injections of a particular type" ) 
  parser.add_option("","--missed-pattern", action="store",type="string",\
      default="", metavar=" MISSED_PATTERN", help=" sieves a file for missed injections of a particular type" )
  parser.add_option("","--cache-file", action="store", type="string",\
      default=None, metavar=" CACHE_FILE", help= "reads the cache file as input" )
  parser.add_option("-P","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
        help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  parser.add_option("", "--figure-resolution",action="store",type="int",\
      default=50, metavar="resolution of the thumbnails (50 by default)", \
      help="read a file of a particular description  from cache file" )
  
  command_line = sys.argv[1:]
  (options,args) = parser.parse_args()

  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times must be provided"

  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

# Initialise: add prefix and suffix to the opts strucutre. To be used for filenames
opts = InspiralUtils.initialise(opts, __name__, __version__)

# -- set the proper color code
colors = InspiralUtils.colors
figure_number = 0  # used for the figure label (showplot)
fnameList = []   # use for the cache file
tagList= []   # use for the cache file

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz


# do something if a title was given
if opts.title != "":
  opts.title += ": "
  
# check at least one trig file was specified
if opts.cache_file:
  cache = lal.Cache.fromfile(open(opts.cache_file))
  injcache = cache.sieve(description = opts.found_pattern).sieve(ifos=opts.ifo_times, exact_match=True)
  miscache = cache.sieve(description = opts.missed_pattern).sieve(ifos=opts.ifo_times, exact_match=True)
  injFiles = injcache.checkfilesexist()[0].pfnlist()
  misFiles = miscache.checkfilesexist()[0].pfnlist()

  if opts.verbose:
    print __name__+"... reading the following found files \n" 
    for file in injFiles:
      print file
    print __name__+"... reading the following missed files \n"
    for file in misFiles:
      print file
  if len(injFiles) < 1:
    print >>sys.stderr,"Cache file must be input"
    sys.exit(1)
  
else:

  if not args:
    print >>sys.stderr, "One trig-file must be specified at least"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    sys.exit(1)
    
  # check if trig and missed inj files are paired
  # then fill lists of injection and missed injection files
  if len(args)<2:
    print >>sys.stderr, "At least one trigger file and one missed"\
          " file must be specified"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    print usage
    sys.exit(1)

  elif len(args)%2:
    print >>sys.stderr, "The number of files specified must be even"
    print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
    print usage
    sys.exit(1)
  
  else:
    injFiles = []
    misFiles = []
    # create the list of found and missed files
    for i in range(len(args)):
      if i%2:
        misFiles.append(args[i])
      else:
        injFiles.append(args[i])


# create the ifoList
ifoList = []
for i in range(len(opts.ifo_times)/2):
  ifoList.append(opts.ifo_times[2*i:2*i+2])

# selecet one IFO if required
if opts.ifo:
  ifoList=[opts.ifo]

  
#######################################################################
# identify the inspiral files if we want the horizon
inspiralFiles = None
if opts.add_horizon:
  inspiralFiles = glob.glob(opts.add_horizon)
  if not inspiralFiles:
    print >>sys.stderr, "The glob for " + \
          opts.inspiral_horizon + \
          " returned no files"
    sys.exit(1)

##############################################################################
# read in tables into dictionaries of paired sets
# each dictionary contains the data for a different 'type'
# type e.g. H1H2, H1L1, H2L1, H1H2L1 in H1H2L1 ifo-times

foundInj  = dict()
foundTrig = dict()
missedInj = lsctables.New(lsctables.SimInspiralTable)
allFoundTrig = lsctables.New(lsctables.SnglInspiralTable)
allFoundInj = lsctables.New(lsctables.SimInspiralTable) 


## read the found injections
for entry, injfile in zip(injcache,injFiles):

  # read the found injections and get the coincidences
  sims =  SimInspiralUtils.ReadSimInspiralFromFiles([injfile])
  snglInspiralTable = SnglInspiralUtils.ReadSnglInspiralFromFiles([injfile])
  triggers = CoincInspiralUtils.coincInspiralTable(
    snglInspiralTable,CoincInspiralUtils.coincStatistic( "snr") )

  # loop over each sim, trigger
  for sim, trigger in zip(sims, triggers):

    # get the IFOs in which the trigger was recovered
    ifos, dummyList= trigger.get_ifos()

    if ifos not in foundInj:
      foundInj[ifos]  = lsctables.New(lsctables.SimInspiralTable)
      foundTrig[ifos] = lsctables.New(lsctables.SnglInspiralTable)

    foundInj[ifos].append( sim )
    foundTrig[ifos].append(trigger)
    allFoundTrig.append( trigger )
    allFoundInj.append( sim )

## read the missed injections
for misentry, misfile in zip(miscache,misFiles):
  
  # fill the dictionary    
  sims =   SimInspiralUtils.ReadSimInspiralFromFiles([misfile])
  if sims:
    missedInj.extend( sims )


##############################################################################
# read in the range if desired
if inspiralFiles:
  inspiralSumm = readFiles(inspiralFiles)
  if not opts.ifo:
    print >> sys.stderr, "Must specify --ifo for --show-horizon"
    sys.exit(1)
  
  horizon = inspiralSumm[opts.ifo].getColumnByName('value').asarray()
  startTime = viz.timeindays(inspiralSumm[opts.ifo].getColumnByName('start_time').asarray())

##############################################################################
# set lists of plot symbols
plot1symbol=['bx','bo','b+','b^','b>','b<']
plot2symbol=['rx','ro','r+','r^','r>','r<']
allsymbols=['^','v','<','>','s','+','x','D','d','1','2','3','4','h','H','p']

# GEO tags missing...
foundSymbol = {'H1H2':'x', 'H1L1':'^', 'H2L1':'+', 'H1V1':'v', 'H2L1':'<','L1V1':'>', \
               'H1H2L1':'s', 'H1H2V1':'D', 'H2L1V1':'d', 'H1L1V1':'1',\
               'H1H2L1V1':'p'}
#missedSymbol = {'H1H2':'rx', 'H1L1':'ro', 'H2L1':'r+', 'H1H2L1':'r^'}
foundSymbols = ['','','','','','','','' ]

gpsDigits = "9"
xmajorFormatter = FormatStrFormatter("%"+gpsDigits+"d")  
##############################################################################
# Create all the plots

xplot=['mchirp']
yplot=['distance']
yscale = ['lin']
if opts.time_dist:
  xplot.append('time')
  yplot.append('eff_dist')
  yscale.append('log')
if opts.mchirp_dist_linear:
  xplot.append('mchirp')
  yplot.append('eff_dist')
  yscale.append('lin')
if  opts.mchirp_dist_log:
  xplot.append('mchirp')
  yplot.append('eff_dist')
  yscale.append('log')
if opts.mtotal_dist_linear:
  xplot.append('mtotal')
  yplot.append('eff_dist')
  yscale.append('lin')
if opts.mtotal_dist_log:
  xplot.append('mtotal')
  yplot.append('eff_dist')
  yscale.append('log')


# loop over all the plotting types
for xname, yname, ys in zip( xplot, yplot, yscale):

  # create a plot for each ifo in the list
  for ifo in ifoList:

    figure()
    sym = 0

    # loop over the different types for found injections
    for type in foundInj.keys():

      if ifo in type:
        col = 'b'
      else:
        col = 'm'

      px, py, legx, legy = getData( foundInj[type], xname, yname, ifo )
      plot( px, py, col+foundSymbol[type], markerfacecolor=None,\
        markeredgecolor=col, label = type, markersize=10, markeredgewidth=1)

    # plot the missed ones
    px, py, legx, legy = getData( missedInj, xname, yname, ifo )
    plot( px, py, 'ro', markerfacecolor=None,label='missed',\
          markeredgecolor='r',markersize=10, markeredgewidth=1)
    
    if inspiralFiles:
      semilogy(startTime, horizon, 'g.', label='Horizon (Mpc)',
               linewidth=1)

    titleText = legx+' vs '+legy +' '+ifo
    title( opts.title + ' '+titleText+' in '+opts.ifo_times+' times', size='x-large')
    xlabel(legx, size='x-large')
    ylabel(legy+' '+ifo, size='x-large')
    grid(True)
    legend()

    if opts.enable_output:
      if ys=='lin':
        savePlot( opts, xname+'-'+yname+'-lin-'+ifo, titleText )
      if ys=='log':
        axes().set_yscale('log')    
        savePlot( opts, xname+'-'+yname+'-log-'+ifo, titleText )

 ##  # create the plot of everything (using the px, py from above...)
##   figure()
##   plot( px, py, 'ro', markerfacecolor=None,\
##         markeredgecolor='r',markersize=10, markeredgewidth=1)

##   # get the found  ones
##   px, py, legx, legy = getData( allFoundInj,  xname, yname, 'H1' )
##   plot( px, py, 'bo', markerfacecolor=None,\
##         markeredgecolor='b',markersize=10, markeredgewidth=1)
    

##   titleText = legx+' vs '+legy +' all'
##   title( opts.title + ' '+titleText+' in '+opts.ifo_times+' times', size='x-large')
##   xlabel(legx, size='x-large')
##   ylabel(legy+' H1', size='x-large')
##   grid(True)
##   legend()
  
##   if opts.enable_output:
##     if ys=='lin':
##       savePlot( opts, xname+'-'+yname+'-lin-H1', titleText )
##     if ys=='log':
##       axes().set_yscale('log')    
##       savePlot( opts, xname+'-'+yname+'-log-H1', titleText )
      
    
##########################################
# plot of efficiency vs different values


### print the closest missed injections
if opts.number_missed>0:

  # get the distances FIXME: H1 distance or what?
  distVector = viz.readcol( missedInj, 'eff_dist', 'H1' )
  index = numpy.argsort( distVector )

  n=min( len(index), opts.number_missed)
  for i in range( n-1, -1, -1):
    idx = index[i]
    printMissed( missedInj[idx], 'H1')  


# put together what efficiency plots we need
valueList = [ 'eff_dist_h', \
              'distance']
nameList = ["efficiency-eff_dist", "efficiency_dist"]
tagnameList = ["Efficiency versus distance", "Efficiency versus distance"]

indexPlots = []
if opts.eff_vs_eff_dist:
  indexPlots.append(0)
if opts.eff_vs_distance:
  indexPlots.append(1)

ifo = 'H1'
  
### create the efficiency plots
for index in indexPlots:
  
  figure()
  viz.efficiencyplot( allFoundInj, missedInj, valueList[index],ifo=ifo,\
                      plot_type = 'log', \
                      nbins = 20, output_name = None, errors=True )


  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, nameList[index])
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, \
                                              dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append(tagnameList[index]+ifo)



if opts.eff_vs_snr:
  
  figure()
  totalInj = len(allFoundInj) + len(missedInj)
  print allFoundTrig
  values = viz.readcol( allFoundTrig, 'stat')
  print values
  
  viz.cumhistcol(allFoundTrig, 'snr', 'linear', normalization = totalInj, \
                 xlimit = [min(values), max(values)], output_name = None)

  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "efficiency_snr")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True,\
                                              dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("Efficiency versus snr")
    
if opts.eff_vs_snr_chi:
  
  figure()
  totalInj = len(allFoundInj) + len(missedInj)
  values = viz.readcol( allFoundTrig, 'snr_over_chi')  
  
  viz.cumhistcol(allFoundTrig, 'snr_over_chi', 'linear', \
                 normalization = totalInj, \
                 xlimit = [min(values), max(values)], \
                 output_name = None)

  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "efficiency_snr-chi")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True,\
                                              dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("Efficiency versus snr-chi")



print fnameList

# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.write_html_output(opts, args, \
                                                  fnameList, tagList)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)


#######################################################################################3
if opts.show_plot:
  show()
