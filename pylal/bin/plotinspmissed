#!/usr/bin/python

import sys, os, re, glob, exceptions
from types    import *
from optparse import *
from pylab    import *
from pylal    import readMeta
from pylal    import viz
from matplotlib.ticker import FormatStrFormatter

##############################################################################
# parse options and arguments
usage = """Usage: %prog [options] [trigs1 missed1 trigs2 missed2]

Generate found and missed trig plots

Example: plotinspmissed --time-dist --show-plot found.xml missed.xml
"""
parser = OptionParser( usage )
parser.add_option("-a","--time-dist",action="store_true",default=False,\
    help="plot dist v trig end time" )
parser.add_option("-b","--mchirp-dist",action="store_true",default=False,\
    help="plot dist v mchirp" )
parser.add_option("-x","--tag",action="append",type="string",\
    dest="tags", metavar=" TAG",
    help="identifier for input file (append to list)" )
parser.add_option("-y","--tag2",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for second input file" )
parser.add_option("-z","--tag3",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for third input file" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-f","--fig-name",action="store",type="string",\
    default=None, metavar=" NAME",\
    help="generate png figures with name NAME-fig.png" )
parser.add_option("-t","--title",action="store",type="string",\
    default="", metavar=" TITLE", help="add more info to standard title" )
parser.add_option("-l","--legend",action="store_true",default=False,\
    help="include legend on plot" )  
parser.add_option("-i","--ifo",action="store",type="string",default=None,\
    help="specify the ifo (otherwise will be read from the found file")
parser.add_option("-M","--min-distance",action="store",type="int",\
    default=None, metavar=" MIN_DIST",\
    help="provide time and dist of all missed injections closer than MIN_DIST")

(opts,args) = parser.parse_args()

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "a trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
  sys.exit(1)

if opts.title != "":
  opts.title += ": "
# check if "found_missed": trig and missed inj files are paired
# then fill lists of injection and missed injection files
injFiles = []
misFiles = []

if len(args)<2:
  print >>sys.stderr, "a missed-file must be specified"
  print >>sys.stderr, "when making plots of missed injections"
  print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
  sys.exit(1)
elif len(args)%2:
  print >>sys.stderr, "mismatched pair"
  print >>sys.stderr, "when making plots of missed injections"
  print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"
else:
  for i in range(len(args)):
    if i%2:
      misFiles.append(args[i])
    else:
      injFiles.append(args[i])

if not opts.tags:
  opts.tags = []
  for i in range(len(args)/2):
    opts.tags.append('')
elif (len(opts.tags) != len(args)/2):
  print >>sys.stderr, "If you specify tags, then make sure you have the same" \
                      "number of tags as found files"
  print >>sys.stderr, "Enter 'plotinspmissed --help' for usage"

##############################################################################
# read in tables into dictionaries of paired sets
injSets = []

for i in range(len(injFiles)):
  injSet = {}
  injDict = {}
  misDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")

  if opts.ifo:
    injDict["ifo"] = opts.ifo
  else:
    sngl = readMeta.metaDataTable(flist, "sngl_inspiral")
    injDict["ifo"] = sngl.table[0]["ifo"]
    
  injDict["inj_time"] = viz.timeindays( viz.readcol(injDict["sim_inspiral"], \
    "end_time", injDict["ifo"] ) )
  injDict["inj_dist"] = viz.readcol(injDict["sim_inspiral"], "eff_dist", \
    injDict["ifo"] )
  injDict["inj_chirp"]  = viz.readcol(injDict["sim_inspiral"], "mchirp" )
  
    
  #
  if misFiles:
    flist = []
    flist.append(misFiles[i])
    misDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  
  misDict["mis_time"] = viz.timeindays( viz.readcol(misDict["sim_inspiral"], \
    "end_time", injDict["ifo"] ) )
  misDict["mis_dist"] = viz.readcol(misDict["sim_inspiral"], "eff_dist", \
    injDict["ifo"] )
  misDict["mis_chirp"]  = viz.readcol(misDict["sim_inspiral"], "mchirp" )

  if opts.min_distance:
    print flist[0]
    for i in range(len(misDict["mis_time"])):
      if misDict["mis_dist"][i] < opts.min_distance:
        print "Missed Distance in " + injDict["ifo"] + " was " + \
            str(misDict["mis_dist"][i]),
        print "GPS time " + \
            str(misDict["sim_inspiral"].table[i]["geocent_end_time"])

  
  # append combination of tables to list as a dictionary
  injSet["injections"] = injDict
  injSet["missedinjs"] = misDict
  injSets.append(injSet)

##############################################################################
# set lists of plot symbols
plot1symbol=['bx','bo','b+','b^','b>','b<']
plot2symbol=['rx','ro','r+','r^','r>','r<']

gpsDigits = "9"
xmajorFormatter = FormatStrFormatter("%"+gpsDigits+"d")  

# plot time V dist
if opts.time_dist:  
  figure()
  t=0

  # plot found
  for injSet in injSets:
    semilogy(injSet['injections']['inj_time'],injSet['injections']['inj_dist'],\
             plot1symbol[t],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    t+=1
    hold(True)

  # and missed
  t=0  
  for injSet in injSets:
    semilogy(injSet['missedinjs']['mis_time'],injSet['missedinjs']['mis_dist'],\
        plot2symbol[t],label=opts.tags[t]+" miss",\
        markerfacecolor=None,markeredgecolor='r',markersize=10,\
        markeredgewidth=1)
    t+=1
    hold(True) 
    
  if opts.legend:
    legend()
    
  title(opts.title + 'Distance vs Time', size='x-large')
  xlabel('Injected End Time (days after start of run)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  gca().grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_time-dist.png")


# plot mchirp V dist
if opts.mchirp_dist:  
  figure()
  sym=0
  t=0
  for injSet in injSets:
    semilogy(injSet['injections']['inj_chirp'],injSet['injections']['inj_dist'],\
             plot1symbol[sym],label=opts.tags[t]+" find",\
             markerfacecolor=None,markeredgecolor='b',markersize=10,\
             markeredgewidth=1)
    hold(True)
    semilogy(injSet['missedinjs']['mis_chirp'],injSet['missedinjs']['mis_dist'],\
        plot2symbol[sym],label=opts.tags[t]+" miss",\
        markerfacecolor=None,markeredgecolor='r',markersize=10,\
        markeredgewidth=1)
    hold(True) 
    sym+=1
    t+=1
  if opts.legend:
    legend()
  title(opts.title + 'Distance vs Chirp Mass', size='x-large')
  xlabel('Injected Chirp Mass (Msun)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #ylim(10, 1000)
  gca().grid(True)
  if opts.fig_name:
    savefig(opts.fig_name + "_dist-mchirp.png")

  
if opts.show_plot:
  show()
