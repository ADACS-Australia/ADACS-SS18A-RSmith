#!/usr/bin/python

import sys
import os
import getopt
import re
import exceptions
import glob
from types import *

from pylab import *
from lgen import readMeta
from lgen import viz

##############################################################################
# help message
def usage():
  msg = """\
Usage: plotinspinj [options] [trigs1 missed1 trigs2 missed2]

  SUMMARY:  
  
  Generate found and missed trig plot: snr V end-time

  OPTIONS:
  
    -h, --help                display this message
    -f, --figure-name FNAME   generate png figures with name FNAME-fig.png
    -s, --show                display the figures on the terminal.
    -l, --found-missed        plot of eff dist vs time for found/missed inj
"""
  print >> sys.stderr, msg


# grab command line options
shortop = "f:hls"
longop = [
  "figure-name=",
  "found-missed",
  "help",
  "show"]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >>sys.stderr, "Error parsing command line"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

# defaul values
plots = []

myFigure = None
showflag = 0

for o, a in opts:
  if o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-l", "--found-missed"):
    plots.append("found_missed")
  elif o in ("-f", "--figure-name"):
    myFigure = a
  elif o in ("-s", "--show"):
    showflag = 1

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "a trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

# check if "found_missed": trig and missed inj files are paired
# then fill lists of injection and missed injection files
injFiles = []
misFiles = []

if "found_missed" in plots:
  if len(args)<2:
    print >>sys.stderr, "a missed-file must be specified"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
    sys.exit(1)
  elif len(args)%2:
    print >>sys.stderr, "mismatched pair"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  else:
    for i in range(len(args)):
      if i%2:
        misFiles.append(args[i])
      else:
        injFiles.append(args[i])
else:
    injFiles = args        

# read in tables into dictionaries of paired sets
injSets = []

for i in range(len(injFiles)):
  injSet = {}
  injDict = {}
  misDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sngl_inspiral"] = readMeta.metaDataTable(flist, "sngl_inspiral")
  injDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  injDict["ifo"] = injDict["sngl_inspiral"].table[1]["ifo"]
  if injDict["ifo"] == 'H1'  or  injDict["ifo"] == 'H2':
    injDict["inj_time"] =  injDict["sim_inspiral"].mkarray("h_end_time") + \
      1e-9 * injDict["sim_inspiral"].mkarray("h_end_time_ns")
    injDict["inj_dist"] =  injDict["sim_inspiral"].mkarray("eff_dist_h")
  elif injDict["ifo"] == ('L1'):
    injDict["inj_time"] =  injDict["sim_inspiral"].mkarray("l_end_time") + \
      1e-9 * injDict["sim_inspiral"].mkarray("l_end_time_ns")
    injDict["inj_dist"] =  injDict["sim_inspiral"].mkarray("eff_dist_l")
  injDict["inj_chirp"]  = injDict["sim_inspiral"].mkarray("mchirp")
  
  # test sire clustering
  if injDict['sngl_inspiral'].nevents() != injDict['sim_inspiral'].nevents():
    print >>sys.stderr, "number of triggers and found injections must be equal"
    sys.exit(1)
  #
  if misFiles:
    flist = []
    flist.append(misFiles[i])
    misDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  if injDict["ifo"] == 'H1'  or  injDict["ifo"] == 'H2':
    misDict["mis_time"] =  misDict["sim_inspiral"].mkarray("h_end_time") + \
      1e-9 * misDict["sim_inspiral"].mkarray("h_end_time_ns")
    misDict["mis_dist"] =  misDict["sim_inspiral"].mkarray("eff_dist_h")
  elif injDict["ifo"] == ('L1'):
    misDict["mis_time"] =  misDict["sim_inspiral"].mkarray("l_end_time") + \
      1e-9 * misDict["sim_inspiral"].mkarray("l_end_time_ns")
    misDict["mis_dist"] =  misDict["sim_inspiral"].mkarray("eff_dist_l")

  #
  injSet["injections"] = injDict
  injSet["missedinjs"] = misDict
  injSets.append(injSet)
###################################################
# set lists of plot symbols
plot1symbol=['bx','b+','bo']
plot2symbol=['rx','r+','ro']
    
if "found_missed" in plots:  
  figure(8)
  sym=0
  for set in injSets:
    semilogy(set['injections']['inj_time'],set['injections']['inj_dist'],\
             plot1symbol[sym],label='Found',\
             markerfacecolor=None,markeredgecolor='b')
    hold(True)
    semilogy(set['missedinjs']['mis_time'],set['missedinjs']['mis_dist'],\
              plot2symbol[sym],label='Missed',\
	      markerfacecolor=None,markeredgecolor='r')
    hold(True) 
    sym+=1
  #legend()
  title(set['injections']['ifo'] + ' Distance vs Time', size='x-large')
  xlabel('Injected End Time (GPS seconds)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  #axis([min(inj_time), max(inj_time), \
  #  0.95 * min(inj_dist), 1.05 * max(missed_dist)])
  gca().grid(True)

  if myFigure:
    savefig(myFigure + '_' + set['injections']['ifo'] + "_found_missed.png")
  
if showflag:
  show()
