#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import glob
import math
from optparse import OptionParser
import sys

from pylal import ligolw_burca_tailor
from pylal import SnglBurstUtils


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$"
	)
	parser.add_option("-b", "--base", metavar = "base", default = "plotburca_", help = "Set the prefix for output filenames (default = \"plotburca2_\").")
	parser.add_option("-f", "--format", metavar = "format", default = "png", help = "Set the output image format (default = \"png\").")
	parser.add_option("-l", "--live-time-program", metavar = "program", default = "lalapps_power", help = "Set the name, as it appears in the process table, of the program whose search summary entries define the search live time (default = \"lalapps_power\").")
	parser.add_option("--likelihood-control", metavar = "pattern", help = "Generate plots of the coincidence parameter distribution data containing in these likelihood control files (as generated by ligolw_burca_tailor).")
	parser.add_option("--plot", metavar = "LR|P", default = "LR", help = "Select plot type:  P = background and injection parameter distribtuions, LR = parameter likelihood ratios.  Default = \"LR\".")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if options.plot not in ("LR", "P"):
		raise ValueError, "unrecognized --plot %s" % options.plot

	return options, (filenames or [None])


#
# =============================================================================
#
#                   Coincidence Parameter Distribution Plot
#
# =============================================================================
#


#
# distributions is a ligolw_burca_tailor.CoincParamsDistributions instance
#


def plot_coinc_params(distributions, plottype):
	#
	# Create a figure.
	#

	fig = SnglBurstUtils.figure.Figure()
	SnglBurstUtils.FigureCanvas(fig)

	#
	# How many instrument pairs are there?
	#

	pairs = set(tuple(name.split("_")[:2]) for name in distributions.background_rates.keys())
	n_horiz = len(pairs)

	#
	# Each sub plot's aspect ratio is the golden ratio.
	#

	size = 12.0
	n_vert = 4
	fig.set_size_inches(size * n_horiz / n_vert, size / ((1 + math.sqrt(5)) / 2))

	#
	# Iterate over instrument pairs.
	#

	for i, pair in enumerate(pairs):
		#
		# Construct the axes for this instrument pair.
		#

		vlabel_allowance = .05
		hlabel_allowance = .03
		border = .007
		left = float(i) / n_horiz + hlabel_allowance + border
		width = 1.0 / n_horiz - hlabel_allowance - 2 * border
		height = 1.0 / n_vert

		dt_axes = fig.add_axes((left, 0 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))
		df_axes = fig.add_axes((left, 1 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))
		dh_axes = fig.add_axes((left, 2 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))
		dband_axes = fig.add_axes((left, 3 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))

		dt_axes.semilogy()
		df_axes.semilogy()
		dh_axes.semilogy()
		dband_axes.semilogy()

		dt_axes.set_xlabel(r"$(t_{\mathrm{%s}} - t_{\mathrm{%s}}) / \left< \Delta t \right>$" % pair)
		df_axes.set_xlabel(r"$(f_{\mathrm{%s}} - f_{\mathrm{%s}}) / \left< \Delta f \right>$" % pair)
		dh_axes.set_xlabel(r"$({h_{\mathrm{rss}}}_{\mathrm{%s}} - {h_{\mathrm{rss}}}_{\mathrm{%s}}) / \left< h_{\mathrm{rss}} \right>$" % pair)
		dband_axes.set_xlabel(r"$(\Delta f_{\mathrm{%s}} - \Delta f_{\mathrm{%s}}) / \left< \Delta f \right>$" % pair)
		if plottype == "P":
			dt_axes.set_ylabel(r"$P$")
			df_axes.set_ylabel(r"$P$")
			dh_axes.set_ylabel(r"$P$")
			dband_axes.set_ylabel(r"$P$")
		elif plottype == "LR":
			dt_axes.set_ylabel(r"$\Lambda$")
			df_axes.set_ylabel(r"$\Lambda$")
			dh_axes.set_ylabel(r"$\Lambda$")
			dband_axes.set_ylabel(r"$\Lambda$")

		#
		# Plot the data on them.
		#

		prefix = "%s_%s_" % pair
		red_rate = distributions.injection_rates[prefix + "dt"]
		black_rate = distributions.background_rates[prefix + "dt"]
		if plottype == "P":
			dt_axes.plot(red_rate.xvals(), red_rate.array, "r")
			dt_axes.plot(black_rate.xvals(), black_rate.array, "k")
		elif plottype == "LR":
			dt_axes.plot(black_rate.xvals(), red_rate.array / black_rate.array, "k")

		red_rate = distributions.injection_rates[prefix + "df"]
		black_rate = distributions.background_rates[prefix + "df"]
		if plottype == "P":
			df_axes.plot(red_rate.xvals(), red_rate.array, "r")
			df_axes.plot(black_rate.xvals(), black_rate.array, "k")
		elif plottype == "LR":
			df_axes.plot(black_rate.xvals(), red_rate.array / black_rate.array, "k")

		red_rate = distributions.injection_rates[prefix + "dh"]
		black_rate = distributions.background_rates[prefix + "dh"]
		if plottype == "P":
			dh_axes.plot(red_rate.xvals(), red_rate.array, "r")
			dh_axes.plot(black_rate.xvals(), black_rate.array, "k")
		elif plottype == "LR":
			dh_axes.plot(black_rate.xvals(), red_rate.array / black_rate.array, "k")

		red_rate = distributions.injection_rates[prefix + "dband"]
		black_rate = distributions.background_rates[prefix + "dband"]
		if plottype == "P":
			dband_axes.plot(red_rate.xvals(), red_rate.array, "r")
			dband_axes.plot(black_rate.xvals(), black_rate.array, "k")
		elif plottype == "LR":
			dband_axes.plot(black_rate.xvals(), red_rate.array / black_rate.array, "k")

	#
	# Done.
	#

	return fig


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


if options.likelihood_control:
	distributions = ligolw_burca_tailor.coinc_params_distributions_from_filenames(glob.glob(options.likelihood_control), "ligolw_burca_tailor", verbose = options.verbose)
	distributions.finish()
	if options.verbose:
		print >>sys.stderr, "writing ligolw_burca_tailor.png ..."
	plot_coinc_params(distributions, options.plot).savefig("ligolw_burca_tailor.png")
	sys.exit()


if options.verbose:
	print >>sys.stderr, "done."
