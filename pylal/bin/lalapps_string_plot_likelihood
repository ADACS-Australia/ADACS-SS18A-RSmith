#!/usr/bin/python
#
# Copyright (C) 2009  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import bisect
import matplotlib
matplotlib.rcParams.update({
	"font.size": 8.0,
	"axes.titlesize": 10.0,
	"axes.labelsize": 10.0,
	"xtick.labelsize": 8.0,
	"ytick.labelsize": 8.0,
	"legend.fontsize": 8.0,
	"figure.dpi": 300,
	"savefig.dpi": 300,
	"text.usetex": True
})
from matplotlib import figure
from matplotlib import patches
from matplotlib import colorbar
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import numpy
from optparse import OptionParser
import sys


from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import git_version
from pylal import rate
from pylal import ligolw_burca_tailor


__author__ = "Kipp Cannon <kipp.cannon@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "Name: %%prog\n%s" % git_version.verbose_msg
	)
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Blah
#
# =============================================================================
#


def get_coincparamsdistributions(xmldoc):
	coincparamsdistributions, process_id = ligolw_burca_tailor.coinc_params_distributions_from_xml(xmldoc, u"string_cusp_likelihood")
	return coincparamsdistributions


def clip_binned_array(binnedarray, xlim, ylim):
	imin, jmin = binnedarray.bins[xlim[0], ylim[0]]
	imax, jmax = binnedarray.bins[xlim[1], ylim[1]]
	xcoords, ycoords = binnedarray.bins.centres()
	return xcoords[imin:imax], ycoords[jmin:jmax], binnedarray.array[imin:imax,jmin:jmax]


def binned_array_plot(title, xcoords, ycoords, data, ncontours = 9):
	fig = figure.Figure(figsize=(4,3))
	FigureCanvas(fig)
	axes = fig.add_axes((.15,.15,.55,.75))
	axes.loglog()

	cset = axes.contour(xcoords, ycoords, data, ncontours)
	#cbar = fig.add_axes((.75,.15,.1,.75))
	#colorbar.Colorbar(cbar, cset)
	axes.set_title(title)
	# FIXME: should extract the name of the dimensions some other way
	#axes.set_ylabel(title.split('-vs-')[0].split('-')[-1])
	#axes.set_xlabel(title.split('-vs-')[1].split(' ')[0])
	return fig


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


saved_ratios = {}
for n, filename in enumerate(filenames):
	if options.verbose:
		print >>sys.stderr, "%d/%d:" % (n + 1, len(filenames)),
	xmldoc = utils.load_filename(filename, gz = (filename or "stdin").endswith(".gz"), verbose = options.verbose)
	coincparamsdistributions = get_coincparamsdistributions(xmldoc)

for name, binnedarray in coincparamsdistributions.background_rates.items():
	if name.endswith("_snr2_chi2"):
		outname = "%s_background.png" % name
		if options.verbose:
			print >>sys.stderr, "generating %s ..." % outname
		xcoords, ycoords, data = clip_binned_array(binnedarray, [10, 1e8], [.01, 1e5])
		fig = binned_array_plot("%s Background" % name.replace("_", "-"), xcoords, ycoords, numpy.transpose(data), ncontours = 49)
		if options.verbose:
			print >>sys.stderr, "writing %s ..." % outname
		fig.savefig(outname)
