#!/usr/bin/python
#
# Copyright (C) 2009  Kipp Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import math
import matplotlib
matplotlib.rcParams.update({
	"font.size": 8.0,
	"axes.titlesize": 10.0,
	"axes.labelsize": 10.0,
	"xtick.labelsize": 8.0,
	"ytick.labelsize": 8.0,
	"legend.fontsize": 8.0,
	"figure.dpi": 300,
	"savefig.dpi": 300,
	"text.usetex": True,
	"grid.linestyle": "-",
	"grid.linewidth": 0.25
})
from matplotlib import figure
from matplotlib import patches
from matplotlib import cm
from matplotlib import colorbar
from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
import numpy
from optparse import OptionParser
import sys


from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import git_version
from pylal import inject
from pylal import ligolw_burca_tailor
from pylal import stringutils


__author__ = "Kipp Cannon <kipp.cannon@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date


golden_ratio = (1 + math.sqrt(5)) / 2


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "Name: %%prog\n%s" % git_version.verbose_msg
	)
	parser.add_option("-f", "--format", metavar = "extension", action = "append", default = [], help = "Set the image output format by setting the filename extension (default = \"png\").  Can be given multiple times to generate plots in multiple formats.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if not options.format:
		options.format = ["png"]

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Blah
#
# =============================================================================
#


def clip_binned_array_1d(binnedarray, xlim):
	imin, = binnedarray.bins[xlim[0],]
	imax, = binnedarray.bins[xlim[1],]
	coords, = binnedarray.bins.centres()
	return coords[imin:imax], binnedarray.array[imin:imax]


def clip_binned_array_2d(binnedarray, xlim, ylim):
	imin, jmin = binnedarray.bins[xlim[0], ylim[0]]
	imax, jmax = binnedarray.bins[xlim[1], ylim[1]]
	xcoords, ycoords = binnedarray.bins.centres()
	return xcoords[imin:imax], ycoords[jmin:jmax], binnedarray.array[imin:imax,jmin:jmax]


def snr2_chi2_plot(key, background_xcoords, background_ycoords, background_data, injections_xcoords, injections_ycoords, injections_data, ncontours = 49):
	fig = figure.Figure(figsize=(3, 3))
	FigureCanvas(fig)
	axes = fig.add_axes((.15, .15, .95 - .15, .90 - .15))
	axes.loglog()

	hi = math.log10(max(background_data.max(), injections_data.max()))
	contours = numpy.arange(hi - 10, hi, 0.5, dtype = "double")
	injections_cset = axes.contour(injections_xcoords, injections_ycoords, numpy.log10(injections_data), contours, cmap = cm.Reds)
	background_cset = axes.contour(background_xcoords, background_ycoords, numpy.log10(background_data), contours, cmap = cm.Greys)
	axes.set_xlim([min(background_xcoords[0], injections_xcoords[0]), max(background_xcoords[-1], injections_xcoords[-1])])
	axes.set_ylim([min(background_ycoords[0], injections_ycoords[0]), max(background_ycoords[-1], injections_ycoords[-1])])
	#cbar = fig.add_axes((.75,.15,.1,.75))
	#colorbar.Colorbar(cbar, cset)
	instrument = key.split("-")[0]
	axes.set_title(r"%s Event Density in $\rho^{2}$--$\chi^{2}$ Plane" % instrument)
	axes.set_ylabel(r"$\chi^{2} / \mathrm{DOF}$")
	axes.set_xlabel(r"$\rho^{2}$")
	axes.xaxis.grid(True, which = "major,minor")
	axes.yaxis.grid(True, which = "major,minor")
	return fig


def dA_plot(key, background_coords, background_data, injections_coords, injections_data):
	fig = figure.Figure(figsize=(4, 4 / golden_ratio))
	FigureCanvas(fig)
	axes = fig.add_axes((.14, .15, .98 - .14, .90 - .15))

	if numpy.any(background_data):
		axes.semilogy(background_coords, background_data, "k-", label = "Background")
	if numpy.any(injections_data):
		axes.semilogy(injections_coords, injections_data, "r-", label = "Injections")
	axes.legend(loc = "upper left")

	instrument1, instrument2 = key.split("-")[:2]
	axes.set_title(r"%s--%s Amplitude Ratio Distribution" % (instrument1, instrument2))
	axes.set_ylabel("Probability Density")
	axes.set_xlabel(r"$\log_{10} \left|A_{\mathrm{%s}} / A_{\mathrm{%s}}\right|$" % (instrument1, instrument2))
	axes.xaxis.grid(True, which = "major,minor")
	axes.yaxis.grid(True, which = "major,minor")
	return fig


def dt_plot(key, background_coords, background_data, injections_coords, injections_data):
	fig = figure.Figure(figsize=(4, 4 / golden_ratio))
	FigureCanvas(fig)
	axes = fig.add_axes((.14, .15, .98 - .14, .90 - .15))

	if numpy.any(background_data):
		axes.semilogy(background_coords, background_data, "k-", label = "Background")
	if numpy.any(injections_data):
		axes.semilogy(injections_coords, injections_data, "r-", label = "Injections")
	axes.legend(loc = "upper left")

	instrument1, instrument2 = key.split("-")[:2]
	axes.set_title(r"%s--%s Arrival Time Difference Distribution" % (instrument1, instrument2))
	axes.set_ylabel("Probability Density")
	axes.set_xlabel(r"$t_{\mathrm{%s}} - t_{\mathrm{%s}}$ (s)" % (instrument1, instrument2))
	axes.xaxis.grid(True, which = "major,minor")
	axes.yaxis.grid(True, which = "major,minor")
	return fig


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


coincparamsdistributions = None
for n, filename in enumerate(filenames):
	if options.verbose:
		print >>sys.stderr, "%d/%d:" % (n + 1, len(filenames)),
	xmldoc = utils.load_filename(filename, gz = (filename or "stdin").endswith(".gz"), verbose = options.verbose)
	if coincparamsdistributions is None:
		coincparamsdistributions = stringutils.get_coincparamsdistributions(xmldoc)
	else:
		coincparamsdistributions += stringutils.get_coincparamsdistributions(xmldoc)
	xmldoc.unlink()
	del xmldoc

if options.verbose:
	print >>sys.stderr, "computing event densities ..."
coincparamsdistributions.finish(filters = stringutils.DistributionsStats.filters, verbose = options.verbose)

for (background_name, background_binnedarray), (injections_name, injections_binnedarray), (zero_lag_name, zero_lag_binnedarray) in zip(sorted(coincparamsdistributions.background_rates.items()), sorted(coincparamsdistributions.injection_rates.items()), sorted(coincparamsdistributions.zero_lag_rates.items())):
	assert injections_name == background_name
	assert zero_lag_name == background_name
	name = background_name
	# FIXME:  hard-coded list of allowed instruments = BAD BAD BAD
	instruments = set(name.split("_")) & set(("G1", "H1", "H2", "L1", "T1", "V1"))
	if name.endswith("_snr2_chi2"):
		if options.verbose:
			print >>sys.stderr, "generating plots for %s ..." % name
		background_xcoords, background_ycoords, background_data = clip_binned_array_2d(background_binnedarray, [10, 1e6], [.01, 1e4])
		injections_xcoords, injections_ycoords, injections_data = clip_binned_array_2d(injections_binnedarray, [10, 1e6], [.01, 1e4])
		zero_lag_xcoords, zero_lag_ycoords, zero_lag_data = clip_binned_array_2d(zero_lag_binnedarray, [10, 1e6], [.01, 1e4])
		fig = snr2_chi2_plot("%s" % name.replace("_", "-"), background_xcoords, background_ycoords, numpy.transpose(background_data), injections_xcoords, injections_ycoords, numpy.transpose(injections_data))
		for extension in options.format:
			outname = "%s.%s" % (name, extension)
			if options.verbose:
				print >>sys.stderr, "\twriting %s ..." % outname
			fig.savefig(outname)
	elif name.endswith("_dt"):
		if options.verbose:
			print >>sys.stderr, "generating plots for %s ..." % name
		dt = .010 + inject.light_travel_time(*instruments)
		background_coords, background_data = clip_binned_array_1d(background_binnedarray, (-dt, +dt))
		injections_coords, injections_data = clip_binned_array_1d(injections_binnedarray, (-dt, +dt))
		zero_lag_coords, zero_lag_data = clip_binned_array_1d(zero_lag_binnedarray, (-dt, +dt))
		fig = dt_plot("%s" % name.replace("_", "-"), background_coords, background_data, injections_coords, injections_data)
		for extension in options.format:
			outname = "%s.%s" % (name, extension)
			if options.verbose:
				print >>sys.stderr, "\twriting %s ..." % outname
			fig.savefig(outname)
	elif name.endswith("_dA"):
		if options.verbose:
			print >>sys.stderr, "generating plots for %s ..." % name
		background_coords, background_data = clip_binned_array_1d(background_binnedarray, (-2, +2))
		injections_coords, injections_data = clip_binned_array_1d(injections_binnedarray, (-2, +2))
		zero_lag_coords, zero_lag_data = clip_binned_array_1d(zero_lag_binnedarray, (-2, +2))
		fig = dA_plot("%s" % name.replace("_", "-"), background_coords, background_data, injections_coords, injections_data)
		for extension in options.format:
			outname = "%s.%s" % (name, extension)
			if options.verbose:
				print >>sys.stderr, "\twriting %s ..." % outname
			fig.savefig(outname)
