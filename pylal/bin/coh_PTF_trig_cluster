#!/usr/bin/python

from __future__ import division
import os,sys
import matplotlib
matplotlib.use('Agg')
import pylab
import glob
from optparse import OptionParser
from pylal import SimInspiralUtils
from pylal import MultiInspiralUtils
from glue.ligolw import ilwd
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal.coh_PTF_pyutils import *

usage = ""

parser = OptionParser( usage )

parser.add_option("-r", "--run-directory",action="store",type="string",\
    default=None,\
    help="The location of the run directory")
parser.add_option("-n", "--grb-name",action="store",type="string",\
    default=None,\
    help="Name of the GRB such as 090802")
parser.add_option("-i","--ifo-tag",action="store",type="string",\
    default=None,\
    help="The ifo tag, H1L1 or H1L1V1 for instance")
parser.add_option("-t", "--trig-file",action="store",type="string",\
    default=None,\
    help="The location of the trigger file")
parser.add_option("-W","--time-window",action="store",type="float",\
    default=0,help="The cluster time window")

(opts,args) = parser.parse_args()

if not opts.run_directory:
  print "must provide run directory"
  sys.exit(1)

if not opts.grb_name:
  print "must provide GRB name"
  sys.exit(1)

if not opts.ifo_tag:
  print "must provide ifo tag"
  sys.exit(1)

if not opts.trig_file:
  print "must provide trig file"
  sys.exit(1)

if not opts.time_window > 0:
  print "time window must be given and greater than 0"
  sys.exit(1)

trigFile = opts.trig_file
timeWindow = opts.time_window
segTimes = readSegFiles(opts.run_directory)
bufferStart = int(segTimes["buffer_start"])
bufferEnd = int(segTimes["buffer_end"])
onSourceStart = int(segTimes["on_start"])
onSourceEnd = int(segTimes["on_end"])
offSourceStart = int(segTimes["off_start"])
offSourceEnd = int(segTimes["off_end"])

currTrigs =  MultiInspiralUtils.ReadMultiInspiralFromFiles([trigFile])
clusTrigs = lsctables.New(lsctables.MultiInspiralTable)

timeDiff = offSourceEnd - offSourceStart
numTimeBins = 1000
timeBins = []

for i in range(numTimeBins + 1):
  timeBins.append([])

for trig in currTrigs:
  time = trig.end_time + trig.end_time_ns * 1E-9
  trigBin = int(((time - offSourceStart)/timeDiff)*1000)
  timeBins[trigBin].append(trig)
  if trigBin != 0:
    timeBins[trigBin - 1].append(trig)
  if trigBin != numTimeBins:
    timeBins[trigBin + 1].append(trig)

print len(currTrigs)
i = 0

for trig in currTrigs:
  i += 1
  time = trig.end_time + trig.end_time_ns * 1E-9
  trigBin = int(((time - offSourceStart)/timeDiff)*numTimeBins)
  loudest = 1
  for trig2 in timeBins[trigBin]:
    time2 = trig2.end_time + trig2.end_time_ns * 1E-9
    if (time2 - time).__abs__() < timeWindow:
      if trig.snr < trig2.snr:
        loudest = 0
        break

  if (loudest == 1) and (trigBin != 0):
    for trig2 in timeBins[trigBin-1]:
      time2 = trig2.end_time + trig2.end_time_ns * 1E-9
      if (time2 - time).__abs__() < timeWindow:
        if trig.snr < trig2.snr:
          loudest = 0
          break

  if (loudest == 1) and (trigBin != numTimeBins):
    for trig2 in timeBins[trigBin+1]:
      time2 = trig2.end_time + trig2.end_time_ns * 1E-9
      if (time2 - time).__abs__ < timeWindow:
        if trig.snr < trig2.snr:
          loudest = 0
          break

  if (loudest == 1):
    clusTrigs.append(trig)

xmlFile = utils.load_filename(trigFile,\
                 gz = trigFile.endswith("gz"))
oldMultiTable = table.get_table(xmlFile,"multi_inspiral")
xmlFile.childNodes[0].removeChild(oldMultiTable)
xmlFile.childNodes[0].appendChild(clusTrigs)
utils.write_filename(xmlFile,trigFile.replace('.xml','_CLUSTERED.xml'),gz = trigFile.endswith("gz"))

