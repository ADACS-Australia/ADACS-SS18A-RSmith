#!/usr/bin/python

# =============================================================================
# Preamble
# =============================================================================

from __future__ import division
import os,sys
from optparse import OptionParser
from pylal import llwapp,MultiInspiralUtils
from glue.ligolw import ligolw,table,lsctables,utils
from pylal.coh_PTF_pyutils import append_process_params
from glue import git_version,lal
      
__author__  = "Ian Harry <ian.harry@astro.cf.ac.uk>"
__version__ = "git id %s" % git_version.id
__date__    = git_version.date

# =============================================================================
# Parse command line
# =============================================================================

def parse_command_line():

  usage = """usage: %prog [options] 
  
coh_PTF_trig_cluster is designed to cluster a MultiInspiralTable in time

--trig-file
--time-window
"""

  parser = OptionParser( usage )

  parser.add_option( "-o", "--output-dir", action="store", type="string",\
                     default=os.getcwd(), help="output directory, "+\
                                               "default: %default" )

  parser.add_option( "-v", "--verbose", action="store_true", default=False,\
                     help="verbose output, default: %default" )

  parser.add_option( "-t", "--trig-file", action="store", type="string",\
                     default=None, help="The location of the trigger file" )

  parser.add_option( "-W", "--time-window", action="store", type="float",\
                     default=0, help="The cluster time window" )

  (opts,args) = parser.parse_args()

  if not opts.trig_file:
    parser.error( "must provide trig file" )

  if not opts.time_window > 0:
    parser.error( "time window must be given and greater than 0" )

  return opts, args

# =============================================================================
# Main function
# =============================================================================

def main( trigFile, timeWindow, outdir, verbose=False ):

  # read file
  cacheFile = lal.CacheEntry.from_T050017( trigFile )
  start,end = map(int,cacheFile.segment)

  # get triggers
  if verbose:
    print >>sys.stdout
    print >>sys.stdout, 'Loading triggers...'

  currTrigs = MultiInspiralUtils.ReadMultiInspiralFromFiles([trigFile])
  clstTrigs = lsctables.New(lsctables.MultiInspiralTable)

  if verbose:
    print >>sys.stdout
    print >>sys.stdout, 'Binning triggers in time...'

  # bin all triggers in time
  numBins  = int((end-start)//timeWindow + 1) 
  timeBins = []

  for n in range(numBins):
    timeBins.append([])

  for trig in currTrigs:
    t = trig.get_end()
    bin = int(float(t-start)//timeWindow)
    timeBins[bin].append(trig)

  if verbose:
    print >>sys.stdout
    print >>sys.stdout, 'Clustering triggers...'

  # loop over all bins
  for i,bin in enumerate(timeBins):

    if len(bin)<1:  continue

    first = False
    last = False
    p = i-1
    n = i+1

    if i==0:
      first = True
    elif i==numBins-1:
      last = True
 
    # loop all triggers in bin
    for trig in bin:
      loudest=True
      t = trig.get_end()

      # search this trigger's own bin
      for trig2 in bin:
        t2 = trig2.get_end()
        if trig.snr < trig2.snr:
          loudest = False
          break
 
      # if trigger was loudest in it's bin, search previous bin
      if loudest and not first:
        for trig2 in timeBins[p]:
          t2 = trig2.get_end()
          if (t2-t).__abs__() < timeWindow:
            if trig.snr < trig2.snr:
              loudest = False
              break

      # if still loudest, check the next bin
      if loudest and not last:
        for trig2 in timeBins[n]:
          t2 = trig2.get_end()
          if (t2-t).__abs__() < timeWindow:
            if trig.snr < trig2.snr:
              loudest = False
              break

      # if this was the loudest trigger in its vicinity, keep it and move to
      # the next bin
      if loudest:
        clstTrigs.append(trig)
        break

  if verbose:
    print >>sys.stdout
    print >>sys.stdout, 'Writing triggers to new xml file...'

  # prepare xmldocument 
  xmldoc = ligolw.Document()
  xmldoc.appendChild(ligolw.LIGO_LW())

  # append process params table
  xmldoc = append_process_params( xmldoc, sys.argv, __version__, __date__ )

  # get search summary table from old file
  oldxml   = utils.load_filename( trigFile,\
                                  gz = trigFile.endswith("gz") )
  oldSearchSummTable = table.get_table( oldxml, "search_summary" )
  xmldoc.childNodes[-1].appendChild( oldSearchSummTable )
  xmldoc.childNodes[-1].appendChild(clstTrigs)

  # generate filename and write
  outdesc = '%s_%s' % ( cacheFile.description, 'CLUSTERED' )
  xmlFile = cacheFile.path().replace( cacheFile.description, outdesc )

  utils.write_filename( xmldoc, xmlFile, gz = xmlFile.endswith("gz") )
  if verbose:
    print >>sys.stdout, xmlFile

if __name__=='__main__':

  opts, args = parse_command_line()

  outdir     = os.path.abspath( opts.output_dir )
  verbose    = opts.verbose
  trigFile   = os.path.abspath( opts.trig_file )
  timeWindow = opts.time_window

  main( trigFile, timeWindow, outdir, verbose=verbose )
 
