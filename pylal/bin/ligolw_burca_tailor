#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3
import string
import sys


from glue import segments
from glue.lal import CacheEntry
from glue.ligolw import dbtables
from glue.ligolw import utils
from pylal import ligolw_burca_tailor
from pylal import SnglBurstUtils


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


# so they can be inserted into a database
dbtables.types.ToPyType["ilwd:char"] = str


# so they aren't inserted into a database
dbtables.NonDBTableNames.append(ligolw_burca_tailor.rate.BinsTable.tableName)


T010150_letters = set(string.ascii_lowercase + string.ascii_uppercase + string.digits + "_+#")


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog [options] [filename ...]",
		description = "%prog analyzes a collection of SQLite3 database files containing ligolw_burca outputs, and measures probability distributions for a variety of parameters computed from the coincidences therein.  The distributions are written to a likelihood data file in XML format, which can be used by ligolw_burca for the excesspower2 algorithm in which a second pass assigns likelihoods to each coincidence.  The command line arguments are used to provide shell patterns for the files from which to obtain injection and backgroun coincidences.  If file names are given on the command line following the arguments, then likelihood data is loaded from those files and added to the output."
	)
	parser.add_option("--add-from", metavar = "filename", default = [], action = "append", help = "Also add likelihood data from this XML file.")
	parser.add_option("--add-from-cache", metavar = "filename", help = "Also add likelihood data from all XML files listed in this LAL cache.")
	parser.add_option("-o", "--output", metavar = "filename", default = None, help = "Set the name of the likelihood control file to write (default = stdout).")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("--T010150", metavar = "description", default = None, help = "Write the output to a file whose name is compatible with the file name format described in LIGO-T010150-00-E, \"Naming Convention for Frame Files which are to be Processed by LDAS\".  The description string will be used to form the second field in the file name.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if options.T010150 is not None:
		if options.output is not None:
			raise ValueError, "cannot set both --T010150 and --output"
		if options.T010150 == "":
			options.T010150 = "EXCESSPOWER_LIKELIHOOD"
		elif set(options.T010150) - T010150_letters:
			raise ValueError, "invalid description \"%s\"" % options.T010150

	if options.add_from_cache:
		options.add_from += [CacheEntry(line).path() for line in file(options.add_from_cache)]

	return options, filenames


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line.
#


options, filenames = parse_command_line()


#
# Load pre-computed likelihood data.
#


extra_data = None
segs = segments.segmentlistdict()

if options.add_from:
	extra_data = ligolw_burca_tailor.CoincParamsDistributions()
	for n, filename in enumerate(options.add_from):
		if options.verbose:
			print >>sys.stderr, "%d/%d: " % (n + 1, len(options.add_from)),
		connection = sqlite3.connect(":memory:")
		dbtables.DBTable_set_connection(connection)
		c, s = ligolw_burca_tailor.coinc_params_distributions_from_filename(filename, u"ligolw_burca_tailor", verbose = options.verbose)
		extra_data += c
		segs |= s
		connection.close()


#
# Clear the statistics book-keeping object.
#


stats = None


#
# Iterate over files
#


for n, filename in enumerate(filenames):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)

	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)
	connection.execute("PRAGMA synchronous = OFF;")
	connection.execute("PRAGMA temp_store_directory = '%s';" % dbtables.tempfile.gettempdir()) 
	dbtables.DBTable_set_connection(connection)

	#
	# Summarize the database.
	#

	database = SnglBurstUtils.CoincDatabase().summarize("lalapps_power", options.verbose)
	segs |= database.seglists

	#
	# If not already done, construct a DistributionsStats instance to
	# populate a CoincParamsDistributions book-keeping object from the
	# information in the input files.
	#

	if stats is None:
		stats = ligolw_burca_tailor.DistributionsStats()

	#
	# Record statistics.  Assume all files with sim_burst tables are
	# the outputs of injection runs, and others aren't.
	#

	if database.sim_burst_table is None:
		stats.add_background(ligolw_burca_tailor.coinc_params, database)
	else:
		stats.add_injections(ligolw_burca_tailor.coinc_params, database)

	#
	# Clean up.
	#

	del database, connection
	dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)


#
# Do we have any data?
#


if stats is None and extra_data is None:
	if options.verbose:
		print >>sys.stderr, "warning:  no input files!"
	sys.exit()
elif stats is None and extra_data is not None:
	coinc_params_distributions = extra_data
elif stats is not None and extra_data is None:
	coinc_params_distributions = stats.distributions
else:
	coinc_params_distributions = stats.distributions
	coinc_params_distributions += extra_data


#
# Output.
#


def T010150_basename(description, seglists):
	instruments = seglists.keys()
	instruments.sort()
	seg = seglists.extent_all()
	return "%s-%s-%s-%s" % ("+".join(instruments), description, str(seg[0]), str(abs(seg)))


if options.T010150:
	filename = T010150_basename(options.T010150, segs) + ".xml.gz"
else:
	filename = options.output


xmldoc = ligolw_burca_tailor.gen_likelihood_control(coinc_params_distributions, segs)
utils.write_filename(xmldoc, filename, verbose = options.verbose, gz = (filename or "stdout").endswith(".gz"))
