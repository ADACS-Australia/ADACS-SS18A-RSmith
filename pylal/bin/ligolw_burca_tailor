#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import glob
import math
from optparse import OptionParser
from pysqlite2 import dbapi2 as sqlite3
import sys


from glue.ligolw import dbtables
from glue.ligolw import utils
from pylal import ligolw_burca_tailor
from pylal import SnglBurstUtils
from pylal import snglcoinc


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")

	parser.add_option("-i", "--injection-glob", metavar = "pattern", default = None, help = "Shell filename pattern for injection files.")
	parser.add_option("-b", "--background-glob", metavar = "pattern", default = None, help = "Shell filename pattern for non-injection files.")
	parser.add_option("-t", "--thresholds", metavar = "inst1,inst2=threshold1[,threshold2,...]", action = "append", default = [], help = "Specify the thresholds as provided to ligolw_burca (see ligolw_burca for details).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	try:
		options.thresholds = snglcoinc.parse_thresholds(options.thresholds)
		for instrumentpair, (dt, df, dhrss) in options.thresholds.items():
			options.thresholds[instrumentpair] = (float(dt), float(df), float(dhrss))
	except Exception, e:
		raise ValueError, "error parsing --thresholds: %s" % str(e)

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Bookkeeping
#
# =============================================================================
#


#
# Make a plot from a Delta_Distributions object.
#


def plot_Deltas(deltas):
	# create a figure
	fig = SnglBurstUtils.figure.Figure()
	SnglBurstUtils.FigureCanvas(fig)

	# how many instrument pairs are there?
	n_horiz = len(deltas.thresholds.keys())

	# each sub plot's aspect ratio is the golden ratio
	size = 12.0
	n_vert = 3
	fig.set_size_inches(size * n_horiz / n_vert, size / ((1 + math.sqrt(5)) / 2))

	# iterate over instrument pairs
	for i, pair in enumerate(deltas.thresholds.keys()):
		# construct the axes for this instrument pair
		vlabel_allowance = .05
		hlabel_allowance = .03
		border = .007
		left = float(i) / n_horiz + hlabel_allowance + border
		width = 1.0 / n_horiz - hlabel_allowance - 2 * border
		height = 1.0 / n_vert

		dt_axes = fig.add_axes((left, 0 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))
		df_axes = fig.add_axes((left, 1 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))
		dh_axes = fig.add_axes((left, 2 * height + vlabel_allowance + border, width, height - vlabel_allowance - 2 * border))

		dt_axes.set_xlabel(r"$(t_{\mathrm{%s}} - t_{\mathrm{%s}}) / \left< \Delta t \right>$" % pair)
		dt_axes.set_ylabel(r"$P$")
		df_axes.set_xlabel(r"$(f_{\mathrm{%s}} - f_{\mathrm{%s}}) / \left< \Delta f \right>$" % pair)
		df_axes.set_ylabel(r"$P$")
		dh_axes.set_xlabel(r"$({h_{\mathrm{rss}}}_{\mathrm{%s}} - {h_{\mathrm{rss}}}_{\mathrm{%s}}) / \left< h_{\mathrm{rss}} \right>$" % pair)
		dh_axes.set_ylabel(r"$P$")

		# plot the data on them
		dt_axes.plot(deltas.inj_dt[pair].xvals(), deltas.inj_dt[pair].filtered(), "r")
		dt_axes.plot(deltas.bak_dt[pair].xvals(), deltas.bak_dt[pair].filtered(), "k")
		df_axes.plot(deltas.inj_df[pair].xvals(), deltas.inj_df[pair].filtered(), "r")
		df_axes.plot(deltas.bak_df[pair].xvals(), deltas.bak_df[pair].filtered(), "k")
		dh_axes.plot(deltas.inj_dh[pair].xvals(), deltas.inj_dh[pair].filtered(), "r")
		dh_axes.plot(deltas.bak_dh[pair].xvals(), deltas.bak_dh[pair].filtered(), "k")

	# done
	return fig


#
# Make a plot from a scatter object
#


def plot_Scatter(scatter):
	fig = SnglBurstUtils.figure.Figure()
	SnglBurstUtils.FigureCanvas(fig)
	fig.set_size_inches(10.0, 10.0 / ((1 + math.sqrt(5)) / 2))
	axes = fig.gca()
	axes.set_title(r"Parameter Reconstruction Independence")
	axes.plot(scatter.inj_x, scatter.inj_y, "r+")
	axes.plot(scatter.bak_x, scatter.bak_y, "k+")
	axes.legend(["Injections", "Accidentals"])
	return fig


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line
#


options, filenames = parse_command_line()
options.thresholds = ligolw_burca_tailor.clean_thresholds(options.thresholds)

plots = ligolw_burca_tailor.Plots(options.thresholds)


#
# Iterate over injection files
#


if options.verbose:
	print >>sys.stderr, "=== Injections ==="

filenames = glob.glob(options.injection_glob)
for n, filename in enumerate(utils.sort_files_by_size(filenames, options.verbose, reverse = True)):
	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), "lalapps_power", options.verbose)
	plots.add_injections(database)
	connection.close()


#
# Iterate over non-injection files
#


if options.verbose:
	print >>sys.stderr, "=== Background ==="

filenames = glob.glob(options.background_glob)
for n, filename in enumerate(utils.sort_files_by_size(filenames, options.verbose, reverse = True)):
	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)
	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), "power", options.verbose)
	plots.add_background(database)
	connection.close()


#
# Post-process and generate plots
#


plots.finish()

print >>sys.stderr, "=== Summary ==="
print >>sys.stderr, "Non-injection average event rate = %g events / time slide" % (float(plots.n_background_events) / plots.n_time_slides)
print >>sys.stderr, "Injection normalized covariance matrix ="
print >>sys.stderr, str(plots.covariance.inj_cov)
print >>sys.stderr, "Background normalized covariance matrix ="
print >>sys.stderr, str(plots.covariance.bak_cov)

plot_Deltas(plots.deltas).savefig("ligolw_burca_tailor.png")
fig = plot_Scatter(plots.scatter)
fig.gca().set_xlabel(r"$(t_{\mathrm{%s}} - t_{\mathrm{%s}}) / \left< \Delta t \right>$" % ("H1", "H2"))
fig.gca().set_ylabel(r"$(f_{\mathrm{%s}} - f_{\mathrm{%s}}) / \left< \Delta f \right>$" % ("H1", "H2"))
fig.savefig("ligolw_burca_tailor_2.png")


#
# Write likelihood control file for second burca pass
#

likelihood_control = ligolw_burca_tailor.gen_likelihood_control(plots.deltas)
utils.write_filename(likelihood_control, "ligolw_burca_likelihood_control.xml.gz", verbose = options.verbose, gz = True)
