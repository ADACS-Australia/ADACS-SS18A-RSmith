#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import glob
import math
from optparse import OptionParser
from pysqlite2 import dbapi2 as sqlite3
import sys


from glue.ligolw import dbtables
from glue.ligolw import utils
from pylal import ligolw_burca_tailor
from pylal import SnglBurstUtils


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog [options] -i|--injection-glob pattern -b|--background-glob pattern",
		description = "%prog analyzes a collection of SQLite3 database files containing ligolw_burca outputs, and measures probability distributions for a variety of parameters computed from the coincidences therein.  The distributions are written to a likelihood data file in XML format, which can be used by ligolw_burca in a second pass to assign likelihoods to each coincidence.  The command line arguments are used to provide shell path patterns for the files to obtain injection data from, and the files to obtain background data from."
	)
	parser.add_option("-b", "--background-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for non-injection files.")
	parser.add_option("-i", "--injection-glob", metavar = "pattern", default = [], action = "append", help = "Shell filename pattern for injection files.")
	parser.add_option("--max-hrss-ratio", metavar = "ratio", default = "4.0", help = "When measuring the distribution of coincidence parameters associated with injections, discard any sngl_burst events from the coincs whose measured h_rss differs from the correct value for that instrument by more than this factor.  This helps ensure that the injection distributions are not being measured from accidentals.  Default = 4.0")
	parser.add_option("--max-frequency-ratio", metavar = "ratio", default = "2.0", help = "When measuring the distribution of coincidence parameters associated with injections, discard any sngl_burst events from the coincs whose measured peak frequency differs from the correct value by more than this factor.  This helps ensure that the injection distributions are not being measured from accidentals.  Default = 2.0")
	parser.add_option("-o", "--output", metavar = "filename", default = None, help = "Set the name of the likelihood control file to write (default = stdout).")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if not options.background_glob:
		raise ValueError, "missing required --background-glob argument"
	if not options.injection_glob:
		raise ValueError, "missing required --injection-glob argument"

	options.max_hrss_ratio = float(options.max_hrss_ratio)
	options.max_frequency_ratio = float(options.max_frequency_ratio)

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Bookkeeping
#
# =============================================================================
#


#
# Make a plot from a scatter object
#


def plot_Scatter(scatter):
	fig = SnglBurstUtils.figure.Figure()
	SnglBurstUtils.FigureCanvas(fig)
	fig.set_size_inches(10.0, 10.0 / ((1 + math.sqrt(5)) / 2))
	axes = fig.gca()
	axes.set_title(r"Parameter Reconstruction Independence")
	axes.plot(scatter.inj_x, scatter.inj_y, "r+")
	axes.plot(scatter.bak_x, scatter.bak_y, "k+")
	axes.legend(["Injections", "Accidentals"])
	return fig


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line.
#


options, filenames = parse_command_line()


#
# Clear the statistics book-keep object.
#


stats = None


#
# Iterate over non-injection files
#


if options.verbose:
	print >>sys.stderr, "=== Background ==="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.background_glob])

for n, filename in enumerate(utils.sort_files_by_size(filenames, options.verbose, reverse = True)):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename),

	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)

	#
	# Summarize the database.
	#

	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), "lalapps_power", options.verbose)

	#
	# If not already done, recover the --thresholds arguments, and
	# construct a stats book-keeping object.
	#

	if stats is None:
		stats = ligolw_burca_tailor.DistributionsStats(options.max_hrss_ratio, options.max_frequency_ratio, ligolw_burca_tailor.dbget_thresholds(connection))

	#
	# Record statistics.
	#

	stats.add_background(database)

	#
	# Clean up.
	#

	del database, connection


#
# Iterate over injection files.
#


if options.verbose:
	print >>sys.stderr, "=== Injections ==="

filenames = reduce(list.__add__, [glob.glob(g) for g in options.injection_glob])

for n, filename in enumerate(utils.sort_files_by_size(filenames, options.verbose, reverse = True)):
	#
	# Open the database file.
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename),

	connection = sqlite3.connect(filename)
	dbtables.DBTable_set_connection(connection)

	#
	# Summarize the database.
	#

	database = SnglBurstUtils.CoincDatabase().summarize(dbtables.DBTable_get_xml(), "lalapps_power", options.verbose)

	#
	# If not already done, recover the --thresholds arguments, and
	# construct a stats book-keeping object.
	#

	if stats is None:
		stats = ligolw_burca_tailor.DistributionsStats(options.max_hrss_ratio, options.max_frequency_ratio, ligolw_burca_tailor.dbget_thresholds(connection))

	#
	# Record statistics.
	#

	stats.add_injections(database)

	#
	# Clean up.
	#

	del database, connection


#
# Did we process any files?
#


if stats is None:
	if options.verbose:
		print >>sys.stderr, "warning:  no input files!"
	sys.exit()


#
# Summarize and write likelihood data.
#


print >>sys.stderr, "=== Summary ==="
print >>sys.stderr, "Non-injection average event rate = %g events / time slide" % (float(stats.n_background_events) / stats.n_time_slides)

#print >>sys.stderr, "Injection normalized covariance matrix ="
#print >>sys.stderr, str(stats.covariance.inj_cov)
#print >>sys.stderr, "Background normalized covariance matrix ="
#print >>sys.stderr, str(stats.covariance.bak_cov)


likelihood_control = ligolw_burca_tailor.gen_likelihood_control(stats.distributions)
utils.write_filename(likelihood_control, options.output, verbose = options.verbose, gz = (options.output or "stdout").endswith(".gz"))
