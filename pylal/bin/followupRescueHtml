#!/usr/bin/env python
#
"""
followup rescue scrip to combine new format followup html with
information from the old original followup tables.
"""

__author__ = 'Cristina Valeria Torres <cristina.torres@ligo.org>'

from pylal.scrapeHtmlUtils import scrapePage
from optparse import OptionParser
import os
import string
import sys
import time

from pylal import git_version

############################################################
##
## Main Part of Code to swap information from two html tables.
##
############################################################

Usage = """\
This file requires three arguments, it expects the OLD html file
containing the table with the information we want to scrap out.  It
also expects the NEW table html file where we will put this
information.  It also expects a COMBO html file where the update
informatin will be written to.
"""

parser = OptionParser(usage=Usage, version=git_version.verbose_msg)

parser.add_option("-o","--output-file",dest="outputfile",
                  default="output.html",
                  help="Specify the name you want to give to the html file that will be the result of merging the information from the old html table into the new table."
                  )
parser.add_option("-a","--original-file",dest="originalfile",
                  default="original.html",
                  help="Specify the name of the original html file so that we can extract the old table and query it's information against the new table and copy the relevant parts over."
                  )
parser.add_option("-b","--new-file",dest="newfile",
                  default="new.html",
                  help="Specify the name of the newer html file that we want to insert the table information into.  We want to take the old table information and if applies to the new table insert this information."
                  )
parser.add_option("-r","--show-rows",dest="showRows",
                  default=False,
                  action="store_true",
                  help="Set this flag to display the row number from the old html table and the new html tables given the logical row number, the label from each table for user information."
                  )


(options,args)=parser.parse_args()
showRows=bool(options.showRows)
outputfile=os.path.normpath(options.outputfile)
originalfile=os.path.normpath(options.originalfile)
newfile=os.path.normpath(options.newfile)

# Read original file into memory
original=scrapePage()
original.readfile(originalfile)
# Read new file into memory
new=scrapePage()
new.readfile(newfile)

#Extract list of rows from new html file to begin copy process.
newRowList=new.getRowList()
oldRowList=original.getRowList()
if showRows:
    print "***"
    print "New Row Definitions"
    for entry in newRowList:
        print entry
    print "***"
    print "Old Row Definitions"
    for entry in oldRowList:
        print entry
    print "******"
    new.showCols()
    print "***"
    original.showCols()
    print "******"


#Interate through the rows of this list looking for entries in the original
#html table to copy over to create the new table.
for newRow in newRowList:
    originalTextColThree=original.getColumnByText(newRow[1],3)
    originalTextColFive=original.getColumnByText(newRow[1],5)
    #Consider new method to strip specified tag or list of tags!
    combinedText="<td><table><tr><td>%s</td></tr><tr><td>%s</td></tr></table></td>"%(originalTextColThree,originalTextColFive)
    new.insertTextGivenText(newRow[1],
                            5,
                            combinedText)

# Manual workaroud for the very first row of the table row [0]
manual=True
if manual:
    new.insertTextAtCoord(2,3,original.getColumnByCoord(2,3))
    try:
        new.insertTextAtCoord(2,5,original.getColumnByCoord(2,5))
    except IndexError:
        new.insertTextAtCoord(2,5,original.getColumnByCoord(2,4))

exceptions=True
if exceptions:
    #Exception List
    eList=["Seismic plots",
           "Coherent studies",
           "False alarm probability",
           "Ifo status",
           "Environmental causes",
           "Auxiliary degree of freedom",
           "Candidate appearance",
           "DQ flags",
           "Elog",
           "Parameters of the candidate"]
    eCol=4
    #Loop through this list
    eList=list()
    for row in newRowList:
        if not row[1].__contains__("ID"):
            eList.append(row[1])
    for thisException in eList:
        oldText=original.getColumnByText(thisException,eCol)
        newText=new.getColumnByText(thisException,eCol)
        insertText="<td><table><tr><td bgcolor=yellow>OLD</td></tr><tr>%s</tr><tr><td bgcolor=yellow>NEW</td></tr><tr>%s</tr></table></td>"%(oldText,newText)
        if not(oldText == ""):
            new.insertTextGivenText(thisException,eCol,insertText)

#Write this new object to disk
new.writeHTML(outputfile)
#
#
