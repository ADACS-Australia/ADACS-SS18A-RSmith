#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import matplotlib
matplotlib.use("Agg")
from matplotlib import figure
from matplotlib.backends.backend_agg import FigureCanvasAgg
import sys
import urllib

from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("-o", "--output", metavar = "filename", help = "set output file name (required)")
	parser.add_option("-x", "--x-instrument", metavar = "instrument", help = "plot this instrument's offsets along the x axis")
	parser.add_option("-y", "--y-instrument", metavar = "instrument", help = "plot this instrument's offsets along the y axis")
	parser.add_option("-n", "--n-instruments", metavar = "number", help = "plot only time slides involving this many instruments")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if not options.output:
		raise ValueError, "no output file specified"

	if not options.x_instrument or not options.y_instrument:
		raise ValueError, "must set instruments for x and y axes"

	if not options.n_instruments:
		options.n_instruments = 2
	else:
		try:
			options.n_instruments = int(options.n_instruments)
		except:
			raise ValueError, "invalid --n"

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Plot
#
# =============================================================================
#

class Plot(object):
	def __init__(self, doc, x_instrument, y_instrument, n):
		slides = 0
		self.fig = figure.Figure()
		self.canvas = FigureCanvasAgg(self.fig)
		self.axes = self.fig.gca()

		self.axes.grid(True)

		self.axes.set_xlabel("%s Offset (s)" % x_instrument)
		self.axes.set_ylabel("%s Offset (s)" % y_instrument)

		tisitable = table.get_table(doc, lsctables.TimeSlideTable.tableName)
		max_offset = min_offset = tisitable[0].offset
		for id in tisitable.dict:
			offsets = tisitable.get_offset_dict(id)
			if len(offsets) == n:
				x = offsets[x_instrument]
				y = offsets[y_instrument]
				self.axes.plot((x,), (y,), "k+")
				min_offset = min((x, y, min_offset))
				max_offset = max((x, y, max_offset))
				slides += 1

		self.axes.set_xlim([min_offset, max_offset])
		self.axes.set_ylim([min_offset, max_offset])

		self.axes.set_title("%d %d-Instrument Time Slides" % (slides, n))


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


for filename in filenames:
	xmldoc = utils.load_filename(filename, verbose = options.verbose, gz = (filename or "stdin")[-3:] == ".gz")

	plot = Plot(xmldoc, options.x_instrument, options.y_instrument, options.n_instruments)

	plot.fig.savefig(options.output)
