#!/usr/bin/python

import sys
import os
import copy
from os import *
from optparse import *
from pylal.itertools import *
#from pylal.llwapp import *
import re
import exceptions
import glob

#######################################################################
# determine all trigger types
def trig_types(ifos):
  """
  determine all 2+ ifo combinations from ifos
  @param ifos:  the list of ifos
  """

  types = []
  for i in range(2,len(ifos)+1):
    types.extend(choices(ifos, i))
  
  return types

#######################################################################
# set up a sire
def sire(data_type,input,ifos,ifo=None):
  """
  set up a sire
  @param data_type:  zero lag, slide or injection
  @param inupt:      the input glob
  @param ifos:       ifos being searched
  @param ifo:        the ifo whose triggers we keep
  """

  if ifo:
    output = "sires/" + ifo + "-SIRE_in_" + ifos + "_VETO"
  else:
    output = "sires/" + ifos + "-SIRE_VETO"

  if data_type == "slide":
    output += "_SLIDE"
          
  command = opts.sire + \
    " --glob '" + input + "'" + \
    " --output " + output + ".xml" + \
    " --summary " + output + ".txt" + \
    " --data-type " + data[data_type]+\
    " --snr-threshold 10"
  if ifo:  
    command += " --ifo-cut " + ifo 
    for file in opts.vetoes:
      if ifo in file:
        command += " --veto-file " + file
    if opts.rsq_threshold:
      command += " --rsq-threshold " + opts.rsq_threshold + \
                 " --rsq-max-snr " + opts.rsq_max_snr + \
                 " --rsq-coeff " + opts.rsq_coeff + \
                 " --rsq-pow " + opts.rsq_pow

  return command

#######################################################################
# set up a coire
def coire(data_type,input,ifos,trigs=None):
  """
  set up a coire
  @param data_type:  zero lag, slide or injection
  @param inupt:      the input glob
  @param ifos:       ifos being searched
  @param trigs:      trigger type (if None, keep all)
  """

  if trigs:
    output = trigs + "/" + trigs + "-THINCA"
    if data_type == "slide": output += "_SLIDE"
    output += "_in_" + ifos
  else:
    output = ifos + "-THINCA" 
    if data_type == "slide": output += "_SLIDE"
  
  if opts.cluster_time:
    output += "_CLUST_" + str(opts.cluster_time) + "s"
  else:
    output += "_UNCLUST" 
  
  if opts.stat_threshold:
    output += "_THRESH_" + str(opts.stat_threshold)
  if data_type == "inj":
    missed = output + "_MISSED.xml"
    output += "_FOUND"

  command = opts.coire + \
        " --glob '" + input + "'" +\
        " --output " + output +".xml" +\
        " --summary " + output + ".txt" +\
        " --data-type " + data[data_type]
  if data_type == "slide":
    command += " --num-slides " + opts.num_slides
  if data_type == "inj":
    command += " --injection-file " + opts.injection_file + \
               " --injection-window " + opts.injection_window + \
               " --missed-injections " + missed    
  if trigs:
    command += " --coinc-cut " + trigs
  if opts.cluster_time:
    command += " --coinc-stat " + opts.coinc_stat +\
               " --cluster-time " + str(1000 * opts.cluster_time)
    if "bitten_l" in opts.coinc_stat:
      command += " --h1-bittenl-a " + opts.h1_bittenl_a +\
          " --h1-bittenl-b " + opts.h1_bittenl_b +\
          " --h2-bittenl-a " + opts.h2_bittenl_a +\
          " --h2-bittenl-b " + opts.h2_bittenl_b +\
          " --l1-bittenl-a " + opts.l1_bittenl_a +\
          " --l1-bittenl-b " + opts.l1_bittenl_b
    if opts.stat_threshold:
      command += " --stat-threshold " + str(opts.stat_threshold)

  return command,output

#######################################################################
# set up a plotthinca
def plotthinca(trigs = None):
  """
  set up plotthinca plots
  @param trigs: trigger type (if None, keep all)
  """
  if trigs:
    glob_files = trigs + "/" + trigs + "-THINCA*.xml"
    fname = trigs + "/" + opts.figure_name
  else:
    glob_files = "*-THINCA*.xml"
    fname = opts.figure_name
    
  if len(opts.vetoes):
    fname += "_veto" 
  if trigs:
    fname += "_" + trigs

  command = opts.plotthinca + \
            " --glob '" + glob_files + "'" + \
            " --figure-name " + fname

  for ifo in ifo_list:
    command += ' --' + ifo.lower() + '-triggers' 

  if "zero" in analyze:
    command += " --snr-snr"

  if "slide" in analyze:
    command +=  " --slide-snr" + \
                " --plot-slides" + \
                " --num-slides " + opts.num_slides
    if "zero" in analyze:
      command += " --add-zero-lag"

  return command

#######################################################################
# set up a s3_statistic
def s3_statistic(trigs = None):
  """
  set up s3_statistic plots
  @param trigs:      trigger type (if None, keep all)
  """
  if trigs:
    fname = trigs + "/" + opts.figure_name
    trigs = trigs + "/" + trigs
    extra = "_in"
  else:
    trigs = "*"
    fname = opts.figure_name
    if opts.cluster_time: extra = "_CLUST"
    else: extra = "_UNCLUST"

  command = opts.s3_statistic + \
        " --num-bins " + opts.num_bins + \
        " --statistic " + opts.s3_stat + \
        " --figure-name " + fname + \
        " --allow-h2-l1" 

  if "zero" in analyze:
    command += " --zero-glob '" + trigs + "-THINCA" + extra + "*.xml'" + \
               " --zero-stat"  

  if "slide" in analyze:
    command += " --slide-glob '" + trigs + "-THINCA_SLIDE" + extra + "*.xml'" +\
               " --slide-dist" + \
               " --slide-stat" + \
               " --num-slides " + opts.num_slides
    if "zero" in analyze:
      command += " --slide-zero-dist " + \
                 " --slide-zero-stat " 

  if "inj" in analyze:
    command += " --inj-glob '" + trigs + "-THINCA" + extra + "*FOUND.xml'" + \
            " --missed-glob '" + trigs + "-THINCA" + extra + "*MISSED.xml'" + \
               " --inj-stat" + \
               " --efficiency"
    for ifo in ifo_list:
      eff_dist = "eff_dist_" + ifo[0].lower()
      command += " --eff-vs-col " + eff_dist

  return command


#######################################################################
usage = """
usage: %prog [options] 

Script for doing coiring and vetoing and some siring too.

You must specify the ifos which have been analyzed, using --ifo.  
If you specify --num-slides, the code will assume that time slides have 
also been done.  You can specify which kind of data to keep for both the
zero lag and time slides (play/all).  Running --test will print out the
function calls but not exectute them.

There are a couple of coire specific options, specifically:
  --cluster-time
  --coinc-stat
  --veto-file (to perform vetoes)
  --rsq-threshold / --rsq-max-snr / --rsq-coeff / --rsq-pow (to do r-squared veto)
  --second-coinc (for correct file names)

And a few plotting specific options:
  --plots (to make the plots)
  --figure-name
  --num-bins
  --s3-stat (the statistic to use)  
"""

parser = OptionParser( usage )
#
# abcdefg ijklmn pqrstuvwx
# ABCDEFG I T
#

# path
parser.add_option("-a","--trig-path",action="store",type="string",\
    default='', metavar=" DIR",help="directory containing the triggers" )

# general options
parser.add_option("-f","--ifo", action="append", type="string",\
    dest="ifos",help="data from this ifo has been analyzed")

parser.add_option("-t","--test",action="store_true",default=False,\
    help="test code, don't run executables")

parser.add_option("-A","--plots-only",action="store_true",default=False,\
    help="only run the plotting routines")

parser.add_option("-T","--usertag",action="store",type="string",\
    default='', metavar=" USERTAG",help="the user tag used when running dag" )

# slide options
parser.add_option("-c","--num-slides",action="store",type="string",\
    default=None, metavar=" NSLIDES",\
    help="the number of time slides performed (default = None)" )

parser.add_option("-d","--slide-data", action="store", type="string",
    default="all_data",metavar=" SLIDE_DATA", 
    help="type of data to be used for timeslides (default = all_data)")

parser.add_option("-e","--zero-data", action="store", type="string",
    default=None,metavar=" ZERO_DATA", \
    help="type of data to be used for zero-lag (default = None)")

# injection options
parser.add_option("-w","--injection-data", action="store", type="string",
    default="all_data",metavar=" INJ_DATA", 
    help="type of data to be used for injections (default = all_data)")

parser.add_option("-v","--injection-file", action="store", type="string",
    default=None,metavar=" INJ_FILE", \
    help="name of injection file")

parser.add_option("-x","--injection-window", action="store", type="string",
    default=None,metavar=" INJ_WIN", \
    help="trig/inj coincidence window (ms)")

# coire/sire options
parser.add_option("-g","--cluster-time",action="store",type="int",\
    default=None,metavar=" CLUSTER_TIME", \
    help="cluster window used in coire, seconds (default = None)")
    
parser.add_option("-i","--coinc-stat",action="store",type="string",\
    default="effective_snrsq",metavar=" COINC_STAT", \
    help="cluster algorithm used in coire (default = effective_snrsq)")
    
parser.add_option("-I","--stat-threshold",action="store",type="float",\
    default=None,metavar=" STAT_THRESH", \
    help="statistic threshold used in coire (default = None)")
    
parser.add_option("-B","--h1-bittenl-a",action="store",\
    default=None,metavar=" H1-BITTENL-A", \
    help="value of a in bitten-l for H1 (default = None)")
    
parser.add_option("-C","--h1-bittenl-b",action="store",\
    default=None,metavar=" H1-BITTENL-A", \
    help="value of b in bitten-l for H1 (default = None)")
    
parser.add_option("-D","--h2-bittenl-a",action="store",\
    default=None,metavar=" H2-BITTENL-A", \
    help="value of a in bitten-l for H2 (default = None)")
    
parser.add_option("-E","--h2-bittenl-b",action="store",\
    default=None,metavar=" H2-BITTENL-A", \
    help="value of a in bitten-l for H2 (default = None)")
    
parser.add_option("-F","--l1-bittenl-a",action="store",\
    default=None,metavar=" L1-BITTENL-A", \
    help="value of a in bitten-l for L1 (default = None)")
    
parser.add_option("-G","--l1-bittenl-b",action="store",\
    default=None,metavar=" L1-BITTENL-A", \
    help="value of a in bitten-l for L1 (default = None)")

parser.add_option("-j","--second-coinc",action="store_true",default=False,\
    help="specify that the input comes from second coinc (default = false)")

parser.add_option("-k","--veto-file",action="append",type="string",\
    dest="vetoes",metavar=" VETOES",\
    help="specify a veto file to be used, appropriate ifo taken from file name")

parser.add_option("-s","--rsq-threshold",action="store",default=None,\
    metavar=" RSQ_THRESH",help="r-squared threshold to apply in sire")
    
parser.add_option("-u","--rsq-max-snr",action="store",default=None,\
    metavar=" RSQ_MAX",help="max snr for which to apply the r-squared veto")

parser.add_option("-y","--rsq-coeff",action="store",default=None,\
    metavar=" RSQ_COEFF",help="coefficient for which to apply the r-squared veto")

parser.add_option("-z","--rsq-pow",action="store",default=None,\
    metavar=" RSQ_POW",help="power for which to apply the r-squared veto")
    
# plotting options
parser.add_option("-p","--num-bins",action="store",type="string",\
    default="20", metavar=" NBINS",\
    help="the number of bins used in plotting (default = 20)" )

parser.add_option("-q","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="figure name used for saving the plots (default = None)" )

parser.add_option("-r","--s3-stat",action="store",type="string",\
    default='effective_snr', metavar=" PLOT_STAT",\
    help="statistic used in making plots (default = effective_snr)" )

# executables
parser.add_option("-b","--coire",action="store",type="string",\
    default="lalapps_coire", metavar=" COIRE",
    help="coire executable (default = lalapps_coire" )

parser.add_option("-l","--sire",action="store",type="string",\
    default="lalapps_sire", metavar=" SIRE",\
    help="sire executable (default = lalapps_sire)" )

parser.add_option("-n","--s3-statistic",action="store",type="string",\
    default="s3_statistic", metavar=" SIRE",\
    help="plotting executable (default = s3_statistic)" )

parser.add_option("-m","--plotthinca",action="store",type="string",\
    default="plotthinca", metavar=" SIRE",\
    help="plotting executable (default = plotthinca)" )

(opts,args) = parser.parse_args()

#######################################################################
# check options and initialize
#######################################################################

if not opts.ifos:
  print >> sys.stderr, "Must specify at least two ifos using --ifo"
  sys.exit(1)

if opts.rsq_threshold and not opts.rsq_max_snr:
  print >> sys.stderr, "Must specify --rsq-max-snr & --rsq-coeff & --rsq-pow if --rsq-threshold is given"
  sys.exit(1)

if opts.num_slides and opts.injection_file:
  print >> sys.stderr, "Cannot do slides and injections together"
  print >> sys.stderr, "Specify at most one of --num-slides, --injection-file"
  sys.exit(1)
  
opts.ifos.sort()
  
# data description
data = {}
data["inj"]   = opts.injection_data
data["zero"]  = opts.zero_data
data["slide"] = opts.slide_data

analyze = []
if opts.zero_data:
  analyze.append("zero")

if opts.num_slides:
  analyze.append("slide")

if opts.injection_file:
  if not opts.injection_window:
    print >> sys.stderr, \
        "Must specify --injection-window if --injection-coincidence is given"
    sys.exit(1)
  analyze.append("inj")

ifo_combinations = trig_types(opts.ifos)
for ifo_list in ifo_combinations:
  trigs = ''.join(ifo_list)
  try: 
    chdir(trigs)
    chdir('..')
  except: mkdir(trigs)

coire_out = []
commands = []
#######################################################################
# loop over slide/zero-lag, running sires/coires as necessary
#######################################################################
for data_type in analyze:
 
  #####################################################################
  # do vetoes if necessary
  if opts.vetoes or opts.rsq_threshold:
    for ifo_list in ifo_combinations:
      ifos = "".join(ifo_list)
    
      # set input file name
      input = opts.trig_path + '/' + ifos + "-THINCA"
      if data_type == "slide": input += "_SLIDE" 
      if opts.second_coinc:
        input += "_" + ifos
      if opts.usertag:
        input += "_" + opts.usertag
      input += "-*.xml"

      # perform vetoes for each ifo
      for ifo in ifo_list:
        command = sire(data_type,input,ifos,ifo)
        if not opts.plots_only: commands.append(command)
        
      # perform sire to put all triggers back in one file
      input = "sires/*-SIRE_in_" + ifos + "_VETO"
      if data_type == "slide": input += "_SLIDE"
      input += ".xml"
    
      command = sire(data_type,input,ifos)
      if not opts.plots_only: commands.append(command)
       
  #####################################################################
  # do coires
  for ifo_list in ifo_combinations:
    ifos = "".join(ifo_list)

    # set input file names
    if opts.vetoes:
      input = "sires/" + ifos + "-SIRE_VETO"
      if data_type == "slide": input += "_SLIDE"
      input += ".xml"
    else:
      input = opts.trig_path + '/' + ifos + "-THINCA" 
      if data_type == "slide": input += "_SLIDE"
      if opts.second_coinc:
        input += "_" + ifos
      if opts.usertag:
        input += "_" + opts.usertag
      input += "-*.xml"

    ###################################
    # do a single coire on all triggers
    command,output = coire(data_type,input,ifos)
    if not opts.plots_only: commands.append(command)

    ######################################
    # do separate coires on each trig type
    input = output + ".xml"
    
    trig_choices = trig_types(ifo_list)
    for trig_ifos in trig_choices:
      trigs = "".join(trig_ifos)
   
      command,output = coire(data_type,input,ifos,trigs)
      coire_out.append(output + ".xml")
      if not opts.plots_only: commands.append(command)

#######################################################################
# make the summary plots 
#######################################################################
if opts.figure_name:
  ifo_combinations.append([])
  for ifo_list in ifo_combinations:
    trigs = ''.join(ifo_list)

    #################################################################
    # run plotthinca
    if "zero" in analyze or "slide" in analyze: 
      command = plotthinca(trigs)
      commands.append(command)
      
    #################################################################
    # run s3_statistic
    if opts.second_coinc:
      command = s3_statistic(trigs)
      commands.append(command)


# clean up the sires
if opts.vetoes or opts.rsq_threshold:
  try: 
    chdir("sires")
    chdir('..')
  except: mkdir("sires")

# run the commands
for command in commands:
  print command
  if not opts.test:
    os.system(command)
    print "Done"
  print 

