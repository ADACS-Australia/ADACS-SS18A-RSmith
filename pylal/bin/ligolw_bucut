#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import sys

from glue import lal
from glue import segments
from glue.ligolw import lsctables
from pylal import llwapp

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$")
	parser.add_option("--coinc-discard", action = "store_true", help = "discard triggers participating in a coincident event")
	parser.add_option("--coinc-only", action = "store_true", help = "discard triggers that are not participating in a coincident event")
	parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
	parser.add_option("--min-amplitude", metavar = "value", help = "discard triggers below the given amplitude")
	parser.add_option("--max-amplitude", metavar = "value", help = "discard triggers above the given amplitude")
	parser.add_option("--min-bandwidth", metavar = "Hz", help = "discard triggers narrower than the given bandwidth")
	parser.add_option("--max-bandwidth", metavar = "Hz", help = "discard triggers wider than the given bandwidth")
	parser.add_option("--min-central-freq", metavar = "Hz", help = "discard triggers with central frequency lower than that given")
	parser.add_option("--max-central-freq", metavar = "Hz", help = "discard triggers with central frequency higher than that given")
	parser.add_option("--min-confidence", metavar = "value", help = "discard triggers below the given confidence")
	parser.add_option("--max-confidence", metavar = "value", help = "discard triggers above the given confidence")
	parser.add_option("--min-duration", metavar = "seconds", help = "discard triggers shorter than the given duration")
	parser.add_option("--max-duration", metavar = "seconds", help = "discard triggers longer than the given duration")
	parser.add_option("--min-fhigh", metavar = "Hz", help = "discard triggers with highest frequency below the given frequency")
	parser.add_option("--max-fhigh", metavar = "Hz", help = "discard triggers with highest frequency above the given frequency")
	parser.add_option("--min-flow", metavar = "Hz", help = "discard triggers with lowest frequency below the given frequency")
	parser.add_option("--max-flow", metavar = "Hz", help = "discard triggers with loest frequency above the given frequency")
	parser.add_option("--min-hrss", metavar = "value", help = "discard triggers with h_rss below the given value")
	parser.add_option("--max-hrss", metavar = "value", help = "discard triggers with h_rss above the given value")
	parser.add_option("--cut-instrument", metavar = "name", action = "append", default = [], help = "discard triggers from given instrument")
	parser.add_option("--min-peak-time", metavar = "seconds", help = "discard triggers with peak time before the given GPS time")
	parser.add_option("--max-peak-time", metavar = "seconds", help = "discard triggers with peak time after the given GPS time")
	parser.add_option("--min-start-time", metavar = "seconds", help = "discard triggers starting before the given GPS time")
	parser.add_option("--max-start-time", metavar = "seconds", help = "discard triggers starting after the given GPS time")
	parser.add_option("--min-stop-time", metavar = "seconds", help = "discard triggers ending before the given GPS time")
	parser.add_option("--max-stop-time", metavar = "seconds", help = "discard triggers ending after the given GPS time")
	parser.add_option("--min-snr", metavar = "value", help = "discard triggers below the given SNR")
	parser.add_option("--max-snr", metavar = "value", help = "discard triggers above the given SNR")
	parser.add_option("--min-tfvolume", metavar = "value", help = "discard triggers with time-frequency volume below the given volume")
	parser.add_option("--max-tfvolume", metavar = "value", help = "discard triggers with time-frequency volume above the given volume")
	parser.add_option("--veto-segments", action = "store_true", help = "veto events using the segment table contained in the input file")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()
	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Preparation
#
# =============================================================================
#

def get_tables(doc):
	snglbursttable = llwapp.get_table(doc, lsctables.SnglBurstTable.tableName)
	searchsummtable = llwapp.get_table(doc, lsctables.SearchSummaryTable.tableName)
	try:
		coinceventids = map(lsctables.ILWDID, llwapp.get_table(doc, lsctables.CoincMapTable.tableName).getColumnByName("event_id"))
	except:
		coinceventids = []
	coinceventids.sort()

	try:
		vetosegs = segments.segmentlist([row.get() for row in llwapp.get_table(doc, lsctables.SegmentTable.tableName) if row.get_active()]).coalesce()
	except:
		vetosegs = segments.segmentlist()

	return searchsummtable.get_inlist().extent(), searchsummtable.get_outlist().extent(), snglbursttable, vetosegs, coinceventids


#
# =============================================================================
#
#                           Add Process Information
#
# =============================================================================
#

def append_process(doc, options):
	process = llwapp.append_process(doc, program = "ligolw_bucut", version = __version__, cvs_repository = "lscsoft", cvs_entry_time = __date__, comment = options.comment)

	params = []
	if options.coinc_discard:
		params += [("--coinc-discard", "lstring", "")]
	if options.coinc_only:
		params += [("--coinc-only", "lstring", "")]
	if options.min_amplitude != None:
		options.min_amplitude = float(options.min_amplitude)
		params += [("--min-amplitude", "real_4", options.min_amplitude)]
	if options.max_amplitude != None:
		options.max_amplitude = float(options.max_amplitude)
		params += [("--max-amplitude", "real_4", options.max_amplitude)]
	if options.min_bandwidth != None:
		options.min_bandwidth = float(options.min_bandwidth)
		params += [("--min-bandwidth", "real_4", options.min_bandwidth)]
	if options.max_bandwidth != None:
		options.max_bandwidth = float(options.max_bandwidth)
		params += [("--max-bandwidth", "real_4", options.max_bandwidth)]
	if options.min_central_freq != None:
		options.min_central_freq = float(options.min_central_freq)
		params += [("--min-central-freq", "real_4", options.min_central_freq)]
	if options.max_central_freq != None:
		options.max_central_freq = float(options.max_central_freq)
		params += [("--max-central-freq", "real_4", options.max_central_freq)]
	if options.min_confidence != None:
		options.min_confidence = float(options.min_confidence)
		params += [("--min-confidence", "real_4", options.min_confidence)]
	if options.max_confidence != None:
		options.max_confidence = float(options.max_confidence)
		params += [("--max-confidence", "real_4", options.max_confidence)]
	if options.min_duration != None:
		options.min_duration = float(options.min_duration)
		params += [("--min-duration", "real_4", options.min_duration)]
	if options.max_duration != None:
		options.max_duration = float(options.max_duration)
		params += [("--max-duration", "real_4", options.max_duration)]
	if options.min_fhigh != None:
		options.min_fhigh = float(options.min_fhigh)
		params += [("--min-fhigh", "real_4", options.min_fhigh)]
	if options.max_fhigh != None:
		options.max_fhigh = float(options.max_fhigh)
		params += [("--max-fhigh", "real_4", options.max_fhigh)]
	if options.min_flow != None:
		options.min_flow = float(options.min_flow)
		params += [("--min-flow", "real_4", options.min_flow)]
	if options.max_flow != None:
		options.max_flow = float(options.max_flow)
		params += [("--max-flow", "real_4", options.max_flow)]
	if options.min_hrss != None:
		options.min_hrss = float(options.min_hrss)
		params += [("--min-hrss", "real_4", options.min_hrss)]
	if options.max_hrss != None:
		options.max_hrss = float(options.max_hrss)
		params += [("--max-hrss", "real_4", options.max_hrss)]
	for instrument in options.cut_instrument:
		params += [("--cut-instrument", "lstring", instrument)]
	if options.min_peak_time != None:
		options.min_peak_time = lal.LIGOTimeGPS(options.min_peak_time)
		params += [("--min-peak-time", "lstring", options.min_peak_time)]
	if options.max_peak_time != None:
		options.max_peak_time = lal.LIGOTimeGPS(options.max_peak_time)
		params += [("--max-peak-time", "lstring", options.max_peak_time)]
	if options.min_snr != None:
		options.min_snr = float(options.min_snr)
		params += [("--min-snr", "real_4", options.min_snr)]
	if options.max_snr != None:
		options.max_snr = float(options.max_snr)
		params += [("--max-snr", "real_4", options.max_snr)]
	if options.min_start_time != None:
		options.min_start_time = lal.LIGOTimeGPS(options.min_start_time)
		params += [("--min-start-time", "lstring", options.min_start_time)]
	if options.max_start_time != None:
		options.max_start_time = lal.LIGOTimeGPS(options.max_start_time)
		params += [("--max-start-time", "lstring", options.max_start_time)]
	if options.min_stop_time != None:
		options.min_stop_time = lal.LIGOTimeGPS(options.min_stop_time)
		params += [("--min-stop-time", "lstring", options.min_stop_time)]
	if options.max_stop_time != None:
		options.max_stop_time = lal.LIGOTimeGPS(options.max_stop_time)
		params += [("--max-stop-time", "lstring", options.max_stop_time)]
	if options.min_tfvolume != None:
		options.min_tfvolume = float(options.min_tfvolume)
		params += [("--min-tfvolume", "real_4", options.min_tfvolume)]
	if options.max_tfvolume != None:
		options.max_tfvolume = float(options.max_tfvolume)
		params += [("--max-tfvolume", "real_4", options.max_tfvolume)]
	if options.veto_segments:
		params += [("--veto-segments", "lstring", "")]
	llwapp.append_process_params(doc, process, params)

	return process, options


#
# =============================================================================
#
#                                     Cuts
#
# =============================================================================
#

def keep_this_trigger(burst, vetosegs, coinceventids, options):
	"""
	Returns True if the burst trigger survives the cuts described by
	the attributes of the options object.
	"""
	if options.coinc_discard and llwapp.bisect_contains(coinceventids, lsctables.ILWDID(burst.event_id)):
		return False
	if options.coinc_only and not llwapp.bisect_contains(coinceventids, lsctables.ILWDID(burst.event_id)):
		return False
	if (options.min_amplitude != None) and (burst.amplitude < options.min_amplitude):
		return False
	if (options.max_amplitude != None) and (burst.amplitude > options.max_amplitude):
		return False
	if (options.min_bandwidth != None) and (burst.bandwidth < options.min_bandwidth):
		return False
	if (options.max_bandwidth != None) and (burst.bandwidth > options.max_bandwidth):
		return False
	if (options.min_central_freq != None) and (burst.central_freq < options.min_central_freq):
		return False
	if (options.max_central_freq != None) and (burst.central_freq > options.max_central_freq):
		return False
	if (options.min_confidence != None) and (burst.confidence < options.min_confidence):
		return False
	if (options.max_confidence != None) and (burst.confidence > options.max_confidence):
		return False
	if (options.min_duration != None) and (burst.duration < options.min_duration):
		return False
	if (options.max_duration != None) and (burst.duration > options.max_duration):
		return False
	if (options.min_fhigh != None) and (burst.fhigh < options.min_fhigh):
		return False
	if (options.max_fhigh != None) and (burst.fhigh > options.max_fhigh):
		return False
	if (options.min_flow != None) and (burst.flow < options.min_flow):
		return False
	if (options.max_flow != None) and (burst.flow > options.max_flow):
		return False
	if (options.min_hrss != None) and (burst.hrss < options.min_hrss):
		return False
	if (options.max_hrss != None) and (burst.hrss > options.max_hrss):
		return False
	if burst.ifo in options.cut_instrument:
		return False
	if (options.min_peak_time != None) and (burst.get_peak() < options.min_peak_time):
		return False
	if (options.max_peak_time != None) and (burst.get_peak() > options.max_peak_time):
		return False
	if (options.min_snr != None) and (burst.snr < options.min_snr):
		return False
	if (options.max_snr != None) and (burst.snr > options.max_snr):
		return False
	if (options.min_start_time != None) and (burst.get_start() < options.min_start_time):
		return False
	if (options.max_start_time != None) and (burst.get_start() > options.max_start_time):
		return False
	if (options.min_stop_time != None) and (burst.get_stop() < options.min_stop_time):
		return False
	if (options.max_stop_time != None) and (burst.get_stop() > options.max_stop_time):
		return False
	if (options.min_tfvolume != None) and (burst.tfvolume < options.min_tfvolume):
		return False
	if (options.max_tfvolume != None) and (burst.tfvolume > options.max_tfvolume):
		return False
	if options.veto_segments and vetosegs.intersects_segment(burst.get_period()):
		return False
	return True


#
# =============================================================================
#
#                                 Library API
#
# =============================================================================
#

def ligolw_bucut(doc, options):
	# Extract segments and tables
	inseg, outseg, snglbursttable, vetosegs, coinceventids = get_tables(doc)

	# Add process information
	process, options = append_process(doc, options)

	# Do cuts
	if options.verbose:
		print >>sys.stderr, "filtering triggers..."
	i = 0
	while i < len(snglbursttable):
		if keep_this_trigger(snglbursttable[i], vetosegs, coinceventids, options):
			i += 1
		else:
			del snglbursttable[i]

	# Add Search Summary Information
	llwapp.append_search_summary(doc, process, inseg = inseg, outseg = outseg, nevents = len(snglbursttable))
	llwapp.set_process_end_time(process)

	return doc


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

options, filenames = parse_command_line()
try:
	for filename in filenames:
		doc = llwapp.load_filename(filename, options.verbose)
		doc = ligolw_bucut(doc, options)
		llwapp.write_filename(doc, filename, options.verbose)
		doc.unlink()
except Exception, e:
	print >>sys.stderr, "error: %s" % str(e)
	sys.exit(1)
