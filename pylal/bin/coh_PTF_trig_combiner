#!/usr/bin/python

from __future__ import division

import os,sys
import glob
import matplotlib
matplotlib.use('Agg')
import pylab
from optparse import OptionParser
from pylal import SimInspiralUtils
from pylal import MultiInspiralUtils
from glue.ligolw import ilwd
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal.coh_PTF_pyutils import *

usage = ""

parser = OptionParser( usage )

parser.add_option("-r", "--run-directory",action="store",type="string",\
    default=None,\
    help="The location of the run directory")
parser.add_option("-n", "--grb-name",action="store",type="string",\
    default=None,\
    help="Name of the GRB such as 090802")
parser.add_option("-i","--ifo-tag",action="store",type="string",\
    default=None,\
    help="The ifo tag, H1L1 or H1L1V1 for instance")
parser.add_option("-N","--num-files",action="store",type="int",\
    default=0,help="The number of files used in splitbank")

(opts,args) = parser.parse_args()

if not opts.run_directory:
  print "must provide run directory"
  sys.exit(1)

if not opts.grb_name:
  print "must provide GRB name"
  sys.exit(1)

if not opts.ifo_tag:
  print "must provide ifo tag"
  sys.exit(1)

if opts.num_files < 1:
  print "num_files must be given and greater than 0"
  sys.exit(1)

runDir = os.path.join(opts.run_directory, "onoff")
GRBnum = opts.grb_name
numFiles = opts.num_files
ifoTag = opts.ifo_tag
lostTime = 71
segTimes = readSegFiles(opts.run_directory)
bufferStart = int(segTimes["buffer_start"])
bufferEnd = int(segTimes["buffer_end"])
onSourceStart = int(segTimes["on_start"])
onSourceEnd = int(segTimes["on_end"])
offSourceStart = int(segTimes["off_start"])
offSourceEnd = int(segTimes["off_end"])
trialTime = onSourceEnd - onSourceStart

offSource1Start = offSourceStart + lostTime
offSource1End = offSource1Start + trialTime
offSource2End = offSource1End + trialTime
offSource3End = offSource2End + trialTime
offSource4End = offSource3End + trialTime
offSource5End = offSource4End + trialTime
offSource6End = offSource5End + trialTime


fileHead = ifoTag + "-COH_PTF_INSPIRAL_FIRST"
fileTail = "GRB" + GRBnum + "_ZERO_LAG_CATEGORY_1-*-2176.xml.gz"

# Begin by reading in injections and determining if injection is found
fileNames = []
for num in xrange(0,numFiles):
  fNam = glob.glob(runDir + '/' + fileHead + "_" + str(num) + "_" + fileTail)
  if len(fNam) == 1:
    fileNames.append(fNam[0]) 
  elif len(fNam) == 0:
    print "No files found with name " + runDir + '/' + fileHead + "_" + str(num) + "_" + fileTail 
  else:
    print "ERROR: Multiple file found fitting string " + runDir + '/' + fileHead + "_" + str(num) + "_" + fileTail
    print fNam
    raise ValueError, ""

trigSigmaH1 = []
trigSigmaH2 = []
trigSigmaL1 = []
trigSigmaV1 = []

if len(fileNames):
  currTrigs = MultiInspiralUtils.ReadMultiInspiralFromFiles(fileNames)

  offSourceTrigs = lsctables.New(lsctables.MultiInspiralTable)
  onSourceTrigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource1Trigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource2Trigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource3Trigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource4Trigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource5Trigs = lsctables.New(lsctables.MultiInspiralTable)
  offSource6Trigs = lsctables.New(lsctables.MultiInspiralTable)

  for trig in currTrigs:
    if (trig.get_end() < bufferStart) or (trig.get_end() > bufferEnd):
      offSourceTrigs.append(trig)
    elif (trig.get_end() > onSourceStart) and (trig.get_end() < onSourceEnd):
      onSourceTrigs.append(trig)
    if (trig.get_end() < offSource1End):
      offSource1Trigs.append(trig)
    elif (trig.get_end() < offSource2End):
      offSource2Trigs.append(trig)
    elif (trig.get_end() < offSource3End):
      offSource3Trigs.append(trig)
    elif (trig.get_end() < offSource4End):
      offSource4Trigs.append(trig)
    elif (trig.get_end() < offSource5End):
      offSource5Trigs.append(trig)
    elif (trig.get_end() < offSource6End):
      offSource6Trigs.append(trig)
    trigSigmaH1.append(trig.sigmasq_h1)
    trigSigmaH2.append(trig.sigmasq_h2)
    trigSigmaL1.append(trig.sigmasq_l)
    trigSigmaV1.append(trig.sigmasq_v)

  ra,dec = get_ra_dec(opts.run_directory + '/triggerGRB'+opts.grb_name+'.xml')
  fPlus,fCross = get_det_response(ra,dec,onSourceEnd-1)
  trigSigmaH1 = pylab.asarray(trigSigmaH1)
  trigSigmaH2 = pylab.asarray(trigSigmaH2)
  trigSigmaL1 = pylab.asarray(trigSigmaL1)
  trigSigmaV1 = pylab.asarray(trigSigmaV1)
  trigSigmaTot=trigSigmaH1*(fPlus['H1']*fPlus['H1'] + fCross['H1']*fCross['H1'])
  trigSigmaTot+=trigSigmaH2*(fPlus['H2']*fPlus['H2']+ fCross['H2']*fCross['H2'])
  trigSigmaTot+=trigSigmaL1*(fPlus['L1']*fPlus['L1']+ fCross['L1']*fCross['L1'])
  trigSigmaTot+=trigSigmaV1*(fPlus['V1']*fPlus['V1']+ fCross['V1']*fCross['V1'])
  trigSigmaH1 = trigSigmaH1/trigSigmaTot
  trigSigmaH2 = trigSigmaH2/trigSigmaTot
  trigSigmaL1 = trigSigmaL1/trigSigmaTot
  trigSigmaV1 = trigSigmaV1/trigSigmaTot

  file = open("sngl_snr_cut.dat","w")
  print >>file, trigSigmaH1.min(),trigSigmaH1.max()
  print >>file, trigSigmaH2.min(),trigSigmaH2.max()
  print >>file, trigSigmaL1.min(),trigSigmaL1.max()
  print >>file, trigSigmaV1.min(),trigSigmaV1.max()
  file.close()

  xmlFile = utils.load_filename(fileNames[0],\
                   gz = fileNames[0].endswith("gz"))
  oldMultiTable = table.get_table(xmlFile,"multi_inspiral")
  xmlFile.childNodes[0].removeChild(oldMultiTable)
  xmlFile.childNodes[0].appendChild(offSourceTrigs)

  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFSOURCE.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSourceTrigs)
  xmlFile.childNodes[0].appendChild(onSourceTrigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_ONSOURCE.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(onSourceTrigs)
  xmlFile.childNodes[0].appendChild(currTrigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_ALL_TIMES.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(currTrigs)
  xmlFile.childNodes[0].appendChild(offSource1Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_1.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSource1Trigs)
  xmlFile.childNodes[0].appendChild(offSource2Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_2.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSource2Trigs)
  xmlFile.childNodes[0].appendChild(offSource3Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_3.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSource3Trigs)
  xmlFile.childNodes[0].appendChild(offSource4Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_4.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSource4Trigs)
  xmlFile.childNodes[0].appendChild(offSource5Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_5.xml.gz",gz=True)
  xmlFile.childNodes[0].removeChild(offSource5Trigs)
  xmlFile.childNodes[0].appendChild(offSource6Trigs)
  utils.write_filename(xmlFile,fileHead+"_GRB" + GRBnum + "_OFFTRIAL_6.xml.gz",gz=True)



