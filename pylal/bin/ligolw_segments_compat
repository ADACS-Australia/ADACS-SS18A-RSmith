#!/usr/bin/env python


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import sys


from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import git_version


__author__ = "Kipp Cannon <kipp.cannon@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "Name: %%prog\n%s" % git_version.verbose_msg,
		usage = "%prog [options] [file ...]",
		description = "Fixes XML files generated by ligolw_segments_query and friends so that they are compatible with other segment lists in XML format.  Currently, this means adding start_time_ns and end_time_ns columns to the segment table.  If XML files are given on the command line they are modified in-place, otherwise input is read from stdin and output is written to stdout.  Filenames ending in \".gz\" are treated as gzipped files."
	)
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# parse command line
#


options, filenames = parse_command_line()


#
# iterate over files
#


for filename in filenames:
	#
	# load file
	#

	xmldoc = utils.load_filename(filename, gz = (filename or "stdin").endswith(".gz"), verbose = options.verbose)

	#
	# retrieve segment table
	#

	try:
		segment_table = lsctables.table.get_table(xmldoc, lsctables.SegmentTable.tableName)
	except ValueError:
		#
		# no table --> no op
		#

		continue

	#
	# add ns columns to segment table
	#

	for column_name in ("start_time_ns", "end_time_ns"):
		try:
			column = segment_table.appendColumn(column_name)
		except ValueError:
			#
			# table already has this column
			#

			continue

		#
		# fill with 0s
		#

		for i in range(len(segment_table)):
			column[i] = 0

	#
	# write file
	#

	utils.write_filename(xmldoc, filename, gz = (filename or "stdout").endswith(".gz"), verbose = options.verbose)
