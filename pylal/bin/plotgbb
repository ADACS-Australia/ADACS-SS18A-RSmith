#!/usr/bin/python

import sys
import os
from optparse import *
#import getopt
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz

##############################################################################
# temp "file"
def makeData( max, dx ):
# returns P(x), x, dx
  x  = arange( 0, max, dx )
  return 1.0/( x+1.0 )**2.0, x, dx

##############################################################################
# help message
usage = """\
Usage: plotgbb [options]

  SUMMARY:  
  
  Generate a set of summary plots from triggers stored as simInspiral 
  tables in LIGO lightweight format.  The plots are

    1.
    2.
    3.

"""

##############################################################################
parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="generate ps figures with name FNAME_PlotType.ps")
parser.add_option("-t","--title",action="store",type="string",default=None,\
    metavar=" STRING",help="title string for plots")
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )

(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "at least one trigger file must be specified"
  print >>sys.stderr, "Enter 'plotgbb --help' for usage"
  sys.exit(1)

trigFiles = args

##############################################################################
# Constants:
X_MAX = 40	# x-axis max for plots.
Y_MAX = 300	# y-axis max for plots.
L_MAX = 7.45	# Luminosity constant.


# an instance of the simInspiralTable
simInspTriggers=readMeta.metaDataTable( trigFiles, "sim_inspiral" )

# make a regular plot.
# The following line determines the number of sources named GBB.
numSources = len( [e for e in simInspTriggers.table if ( re.match("GBB",e["source"]) )] )

h=simInspTriggers.mkarray( "eff_dist_h" )
index=arange( 0, len(h) )*L_MAX/numSources
hs=sort(h)

l=simInspTriggers.mkarray( "eff_dist_l" )
ls=sort( l )

g=simInspTriggers.mkarray( "eff_dist_g" )
gs=sort( g )

t=simInspTriggers.mkarray( "eff_dist_t" )
ts=sort( t )

v=simInspTriggers.mkarray( "eff_dist_v" )
vs=sort( v )

plot( hs, index, ls, index, gs, index, ts, index, vs, index )
grid( True )
axis( [0, X_MAX, 0, Y_MAX] )
xlabel( 'Effective Distance (Mpc)' )
ylabel('N_G' )
legend( ('Hanford', 'Livingston', 'GEO', 'TAMA', 'VIRGO'), loc=0 )
if opts.title:
  title( opts.title )
if opts.figure_name:
  savefig( opts.figure_name + "_plot.ps" )

# make a loglog plot.
figure()
eps=0.00001	# to prevent log(0) craziness.
log_i=index+eps

loglog( hs, log_i, ls, log_i, gs, log_i, ts, log_i, vs, log_i )
grid( True )
axis( [1, X_MAX, 1, Y_MAX] )
xlabel( 'Effective Distance (Mpc)' )
ylabel( 'N_G' )
legend( ('Hanford', 'Livingston', 'GEO', 'TAMA', 'VIRGO'), loc=0 )
if opts.title:
  title( opts.title )
if opts.figure_name:
  savefig( opts.figure_name + "_loglog.ps" )


# effective distance plot.
figure()
P_x, x, dx = makeData( 50, 1 )

ng,a,b = hist( hs, x )
grid( True )
axis( [0, X_MAX, 0, max( ng[0:X_MAX+1] )] )
xlabel( 'Effective Distance (Mpc)' )
ylabel('N_G' )
if opts.title:
  title( opts.title )
if opts.figure_name:
  savefig( opts.figure_name + "_hist.ps" )

# cumulative sum plot (approximation of first plot)
figure()
ng = ng*L_MAX/numSources  	# normalize.
for i in range(1,len(x)):
  ng[i] = ng[i-1] + ng[i]

plot( x[0:X_MAX+1], ng[0:X_MAX+1] )
grid( True )
axis( [0, X_MAX, 0, Y_MAX] )
xlabel( 'Effective Distance (Mpc)' )
ylabel('N_G' )
if opts.title:
  title( opts.title )
if opts.figure_name:
  savefig( opts.figure_name + "_sum_plot.ps" )

if opts.show_plot:
  show()
