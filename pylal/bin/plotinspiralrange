#!/usr/bin/python
"""
Inspiral range plotting tool for TMPLTBANK/INSPIRAL files

Example:

>>> ~/opt/pylal/bin/pylal_plotinspiralrange \
>>> --inspiral-glob '*-INSPIRAL-*' --tmpltbank-glob '*TMPLTBANK-*' 
>>> --user-tag playground --range-min 1 --range-max 40 --n 50 
>>> --range-vs-time --range-hist --verbose -a -b 
>>> --range-mass --gps-start-time 847555570 --gps-end-time 849974770 
>>> --output-path playground --enable-output  --ifo-times H1H2L1  

todo
  - Use only the TMPLTBANK file and not INSPIRAL anymore

    Right now, the horizon distance are stored within the INSPIRAL files and 
    used to generate 2 plots : histogram of a 1.4,1.4 horizon distance, and 
    fluctuations of this horizon distance versus time. 
    There is also the possibility to generate horizon versus time BUT it 
    requires  the TMPLTBANK files. For historical reason, we started to generate
    the 2 first plots using INSPIRAL files, and later the third one using TMPLTBANK
    files. I think we could have used only the TMPLTBANK files. 
   
    For now this code needs both INSPIRAL and TMPLTBANK files to be parsed, which
    is longer than expected. If someone has the time, we should read only TMPLTBANK 
    files
  - Allow cache description to have several arguments

    one can provide both --inspiral-glob and --tmpltbank-glob options to provide the
    list of requested files. There is also the possiblity to use a cachefile 
    (--cache-file). A cache file may contain anything, so a cache-description option can
    be used to specify what are the file to keep. The problem is that if you need both 
    INSPIRAL and TMPLTBANK files, this option does not handle multiple description for now.
  - Use ContentHandler function from InspiralUtils

"""
__version__ = "$Revision$"
__date__ = "$Date$"
__name__ = "plotinspiralrange"
__Id__ = "$Id$"
__title__ = "Inspiral Range Plots"

# $Source$


import sys
import glob
from optparse import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue import lal
from pylal import InspiralUtils 

# ============================================================================
class ContentHandler(ligolw.PartialLIGOLWContentHandler):
  def __init__(self, xmldoc):
    """
    New content handler that only reads in the SummValue table
    """
    def element_filter(name, attrs):
      """
      Return True if name and attrs describe a SummValueTable
      """
      return lsctables.IsTableProperties(lsctables.SummValueTable, name, attrs) 
    ligolw.PartialLIGOLWContentHandler.__init__(self, xmldoc, element_filter)

utils.ContentHandler = ContentHandler

# ============================================================================
def stairs(xVal,yVal):
  """
  Takes in x and y values you want to plot using stairs
  and returns the necessary values to use with plot()
  @param xVal:
  @param yVal:
  """
  xLen = 2*(len(xVal))
  for i in range(xLen):
    if i == 0:
      xStairs = [xVal[0]]
      yStairs = [yVal[0]]
    elif i == xLen-1:
      xStairs.append(xVal[len(xVal)-1])
      yStairs.append(yVal[len(yVal)-1])
    elif not i%2:
      xStairs.append(mean(xVal[i/2-1],xVal[i/2]))
      yStairs.append(yVal[i/2])
    else:
      xStairs.append(mean(xVal[(i-1)/2],xVal[(i+1)/2]))
      yStairs.append(yVal[(i-1)/2])

  return xStairs,yStairs

# ============================================================================
def plotinspiralrange_histogram(opts):
  """
  Create the histogram of the inspiral range for each ifo available 
  
  @param  opts : the user arguments 
  @return  fname  the HTML document
  """
  global figure_number 
  
  prefix, suffix = InspiralUtils.create_output_name(opts, __name__)
  # iterate figure number 
  figure_number = figure_number + 1
  figure(figure_number)
  
  if opts.range_min < 0 or opts.range_max < 0:
    print >>sys.stderr, \
        "Must specify --range-min and --range-max for range hist"
    sys.exit(1)

  if opts.plot_type == 'log':
    opts.range_min = log10(opts.range_min)
    opts.range_max = log10(opts.range_max)

  bins = arange(opts.range_min,opts.range_max, \
      (opts.range_max - opts.range_min)/ opts.nbins)

  if opts.plot_type == 'log':
    bins = 10**bins
    opts.range_min = 10**(opts.range_min)
    opts.range_max = 10**(opts.range_max)

  num = {}
  for ifo in inspiralSumm.keys():
    Range = inspiralSumm[ifo].getColumnByName('value').asarray()
    startTimeSec = inspiralSumm[ifo].getColumnByName('start_time').asarray()
    style = colors[ifo]
    [num[ifo],bins,blah] = hist(Range,bins)

  clf()
  for ifo in inspiralSumm.keys():
    if opts.plot_type == 'log':
      semilogx(bins,num[ifo], colors[ifo], linewidth=2, label=ifo)
    elif opts.plot_type == 'linear':
      stairsX,stairsY = stairs(bins,num[ifo])
      plot(stairsX, stairsY, colors[ifo], linewidth=2, label=ifo)

  leg=legend()
  ltext=leg.get_texts()
  setp(ltext, fontsize='x-large')
  xlim(opts.range_min, opts.range_max)
  xticks(fontsize='x-large')
  yticks(fontsize='x-large')
  xlabel('Inspiral Horizon distance (Mpc)', size='x-large')
  ylabel('Number of 2048 sec. blocks', size='x-large')
  grid()
  
  if opts.enable_output is True:
    fname = prefix + "range_hist" + suffix + ".png"
    savefig(fname)
  else:
    fname = []
  
  return fname

# ============================================================================
def plotinspiralrange_range_versus_time(opts):
  """
  Create the range versus time plot (BNS case) 
  
  @param  opts : the user arguments 
  @return fname  the HTML document 
  """
  global figure_number
  prefix, suffix = InspiralUtils.create_output_name(opts, __name__)
  
  # iterate figure number 
  figure_number = figure_number + 1
  figure(figure_number)

  for ifo in inspiralSumm.keys():
    Range = inspiralSumm[ifo].getColumnByName('value').asarray()
    startTimeSec = inspiralSumm[ifo].getColumnByName('start_time').asarray()
    startTime = viz.timeindays(\
        inspiralSumm[ifo].getColumnByName('start_time').asarray())
    style = colors[ifo] + 'x'
    if opts.plot_type == 'linear':
      plot(startTime, Range, style, label=ifo,\
          markersize=12, markeredgewidth=1)
    elif opts.plot_type == 'log':
      semilogy(startTime, Range, style, label=ifo,\
          markersize=12, markeredgewidth=1)
  leg=legend()
  ltext=leg.get_texts()
  setp(ltext, fontsize='x-large')
  xlabel('Days after start of run', size='x-large')
  ylabel('Inspiral Horizon distance (Mpc)', size='x-large')
  grid()

  if opts.enable_output is True:
    fname = prefix + "range_plot" + suffix + ".png"
    savefig(fname)
  else:
    fname = []
  
  return fname

# ============================================================================
def plotinspiralrange_range_versus_total_mass(opts):
  """
  Create the range versus total mass (request TMPLTBANK files) 
  
  @param  opts : the user arguments 
  @return fname  the HTML document  
  """
  global figure_number
  prefix, suffix = InspiralUtils.create_output_name(opts, __name__)
  # iterate figure number 
  figure_number = figure_number + 1
  figure(figure_number)

  mass = {}
  massRange = {}
  massRangeError = {}

  for ifo in massInspiralSumm.keys():
    if not mass.has_key(ifo):
      mass[ifo] = []
      massRange[ifo] = []
      massRangeError[ifo] = []
    for massNum in range(len(massInspiralSumm[ifo])):
      Range = massInspiralSumm[ifo][massNum].getColumnByName('value').asarray()
      startTimeSec = \
          massInspiralSumm[ifo][massNum].getColumnByName('start_time').asarray()
      mass[ifo].append(2*(massNum+1))
      massRange[ifo].append(mean(Range))
      massRangeError[ifo].append(std(Range))
    if opts.verbose:
      print ifo
      print mass[ifo][4],massRange[ifo][4]
      print mass[ifo][9],massRange[ifo][9]
    errorbar(mass[ifo], massRange[ifo], massRangeError[ifo], \
      fmt='x', color=colors[ifo], label=ifo)
  currentAxes = axis()
  Axes = [currentAxes[0],currentAxes[1],currentAxes[2],currentAxes[3]]
  if opts.mass_max > 0:
    Axes[1] = opts.mass_max
  if opts.mass_min > 0:
    Axes[0] = opts.mass_min
  axis(Axes)
  lines=gca().get_lines()
  leg=legend(loc='upper left')
  ltext=leg.get_texts()
  setp(lines, linewidth=2, markeredgewidth=2, markersize=10)
  setp(ltext, fontsize='x-large')
  xticks(fontsize='x-large')
  yticks(fontsize='x-large')
  xlabel('Total Mass ($M_\odot$)', size='x-large')
  ylabel('Inspiral Horizon distance (Mpc)', size='x-large')
  grid()
  
  if opts.enable_output is True:
    fname = prefix + "range_mass" + suffix + ".png"
    savefig(fname)
  else:
    fname = []
  
  return fname

# ============================================================================
def get_filelist(opts):
  """
  return a list of files using the --glob option OR the cache file (and 
  possibly a sieve with the --cache-description option)
 
  @param opts: user options. Uses inspiral_glob, tmpltbank_glob AND/OR
  cache_file and opts.ifo_type and option.cache_description
  """
  inspiralFiles = []
  if opts.inspiral_glob:
    inspiralFiles += glob.glob(opts.inspiral_glob)
  if opts.tmpltbank_glob:
    inspiralFiles += glob.glob(opts.tmpltbank_glob)
  if opts.cache_file:
    inspiralFiles = lal.Cache.fromfile(open(opts.cache_file)).sieve(ifos=opts.ifo_type, \
    description=opts.cache_description).checkfilesexist()[0].pfnlist()
     
  return inspiralFiles

# ============================================================================
# help message
usage = """\
%prog [options]
------------------------------------------------------------------------------
 SUMMARY:  Program for plotting the range of the instruments over a given run.
           You can make three plots
         1) A plot of the range for each ifo vs time (in days after run start)
            (--range-vs-time)           
         2) A histogram of the number of blocks for which a given range 
            was achieved (--range-hist).
         3) Mean range versus total mass (--range-mass).

 Request a list of inspiral and template bank files to read the summary value
 tables
------------------------------------------------------------------------------
"""

# ============================================================================

def parse_command_line():
  """
  Parser function dedicated 
  """
  
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")
  parser.add_option("-I","--inspiral-glob",action="store",type="string",\
      default=None,metavar="INSPIRAL",\
      help="glob for INSPIRAL files")
  parser.add_option("-T","--tmpltbank-glob",action="store",type="string",\
      default=None,metavar="TMPLTBANK",\
      help="glob for TMPLTBANK files")
  parser.add_option("-c","--cache-file",action="store",type="string",\
      default=None,metavar="CACHE",\
      help="name of a cache file containing INSPIRAL and/or TMPLTBANK files")
  parser.add_option("-m","--range-min",action="store",type="float",\
      metavar="MIN", help="minimum value on range plots", default=-1 )
  parser.add_option("-M","--range-max",action="store",type="float",\
      metavar="MAX", help="maximum value on range plots", default=-1 )
  parser.add_option("-a","--range-vs-time",action="store_true",\
      default=False,help="make a plot of range vs time" )
  parser.add_option("-b","--range-hist",action="store_true",\
      default=False,help="make a histogram of the range" )
  parser.add_option("--range-mass",action="store_true",\
      default=False,help="make a plot of the range vs total mass" )
  parser.add_option("--mass-min",action="store",type="float",\
      metavar="MIN", help="minimum x-value on mass plots", default=-1 )
  parser.add_option("--mass-max",action="store",type="float",\
      metavar="MAX", help="maximum x-value on mass plots", default=-1 )
  parser.add_option("-t","--plot-type",action="store",type="string",\
      default="linear",metavar=" PLOT_TYPE", \
      help="make either linear or log or plots" )
  parser.add_option("-n","--nbins",action="store",type="int",\
      metavar="NBINS", help="number of bins for range hist (default 100)",
      default=100)
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None, metavar=" USERTAG",\
      help="" )
  parser.add_option("-i", "--ifo-times", action="store", type="string",\
      metavar="IFOTIMES", help="ifo times is used as a prefix for the output files" )
  parser.add_option("-P","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  parser.add_option("","--cache-description",action="store",\
      type="string", default=None,  metavar="CACHE-DESCRIPTION",\
      help="sieve a cache file according to description")
  parser.add_option("","--ifo-type",action="store",\
      type="string", default=None,  metavar="IFO_TYPE",\
      help="sieve a cache file according to a particular ifo type")


  command_line = sys.argv[1:]
  (options,args) = parser.parse_args()

  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times (which ifos were analysed) must be provided"

  if options.cache_file and (options.inspiral_glob or options.tmpltbank_glob):
    raise ValueError, """
Use either the glob options(inspiral-glob, tmpltbank-glob 
OR the cachefile options (--cache-file), not both at the same time.
"""

  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
# -- some initialisation
figure_number = 0  # used for the figure label (showplot)
output_cachefile_name = []   # use for the cache file

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz



# ============================================================================
# -- identify the inspiral and template bank files
if opts.verbose:
  print "Parsing the cache file...wait..."
inspiralFiles = get_filelist(opts)

# -- Read in the summ values from the inspiral/tmpltbank  files
inspiralSumm, massInspiralSumm = InspiralUtils.readFiles(inspiralFiles, opts.verbose)

# -- set the proper color code
colors = InspiralUtils.colors

# ============================================================================
# Initialise 
prefix, suffix = InspiralUtils.create_output_name(opts, __name__)

if opts.enable_output is True:
  # -- initialise the web page calling init_page
  page, extra = InspiralUtils.init_markup_page(opts)
  # -- filename 
  html_filename = prefix[0:len(prefix)-1] + suffix +".html"
  html_file = file(html_filename, "w")
  # -- set output_cache properly: make sure there is a slash 
  if len(opts.output_path)>1 :
    opts.output_path = opts.output_path +'/'


# ============================================================================
# Make plot of range vs time

if opts.range_vs_time is True:
  # create a text for the alt and title of html document
  text ="Inspiral horizon distance for a (1.4,1.4)"+\
      " solar mass system with SNR=8"
  # -- the plot itself --
  fname = plotinspiralrange_range_versus_time(opts)

  # -- save results in output files --
  if opts.enable_output is True:
    # -- create a link and image html tag
    page.a(extra.img(src=[opts.output_path +fname], width=400, \
        alt=text, border="2"), title=text, href=[opts.output_path + fname])

    # -- keep track of this filename 
    output_cachefile_name.append(fname)

# ============================================================================
# Make histogram of range values
if opts.range_hist is True:
  # create a text for the alt and title of html document
  text = "Histogram of inspiral horizon distance for a (1.4,1.4) solar "+\
      "mass system with SNR = 8"
  # -- the plot itself --
  fname = plotinspiralrange_histogram(opts)
  
  # -- save results in output files --
  if opts.enable_output is True:
    # -- create a link and image html tag
    page.a(extra.img(src=[opts.output_path +fname], width=400, \
        alt=text, border="2"), title=text, href=[opts.output_path + fname])

    # -- keep track of this filename 
    output_cachefile_name.append(fname)


# ============================================================================
# Make plot of mean range vs total mass

if opts.range_mass is True:
  # create a text for the alt and title of html document
  text = "Inspiral Horizon Distance versus Mass "+\
      "at a SNR = 8"
  # -- the plot itself --
  fname = plotinspiralrange_range_versus_total_mass(opts)
  # -- save results in output files --

  if opts.enable_output is True:
    # -- create a link and image html tag
    page.a(extra.img(src=[opts.output_path +fname], width=400, \
        alt=text, border="2"), title=text, href=[opts.output_path + fname])

    # -- keep track of this filename 
    output_cachefile_name.append(fname)




# ============================================================================
# final step: html, cahe file generation
if opts.enable_output:
  text = InspiralUtils.writeProcessParams( __name__, __version__, args)
  page.add(text)
  html_file.write(page(False))
  html_file.close()

if opts.enable_output is True:
  output_cache_name = prefix[0:len(prefix)-1] + suffix +'.cache'
  this = open(output_cache_name, 'w')
  if opts.enable_output is True: 
    this.write(html_filename + '\n')
  for fname in output_cachefile_name:
    this.write(fname + '\n')
  this.close()
  
# ============================================================================

if opts.show_plot:
  show()  
