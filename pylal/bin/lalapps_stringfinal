#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

"""
String cusp search final output rendering tool.
"""

from optparse import OptionParser
import math
import numarray
from pysqlite2 import dbapi2 as sqlite
import sys

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue import segments
from pylal import SnglBurstUtils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("-a", "--amplitude-factor", metavar = "factor", default = "1e-20", help = "multiple amplitudes in XML files by this amount (default = 1e-20)")
	parser.add_option("-f", "--format", metavar = "format", default = "png", help = "set the output image format (default = png)")
	parser.add_option("-l", "--live-time-program", metavar = "program", default = "StringSearch", help = "set the name, as it appears in the process table, of the program whose search summary entries define the search live time (default = StringSearch)")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	options.amplitude_factor = float(options.amplitude_factor)

	return options, (filenames or [None])


#
# =============================================================================
#
#                           Highest Amplitude Event
#
# =============================================================================
#

class Survivors(object):
	def __init__(self):
		self.xmldoc = None

	def add_contents(self, contents):
		if self.xmldoc == None:
			self.xmldoc = ligolw.Document()
			self.xmldoc.appendChild(ligolw.LIGO_LW())
			self.sngl_burst_table = lsctables.New(lsctables.SnglBurstTable, contents.sngl_burst_table.columnnames)
			self.xmldoc.childNodes[0].appendChild(self.sngl_burst_table)

		time_slide_id = [id for id in contents.time_slide_table.iterkeys() if contents.time_slide_table.is_null(id)]
		if len(time_slide_id) != 1:
			raise ValueError, "document does not contain exactly 1 zero-lag time slide (contains %d of them)" % len(time_slide_id)
		time_slide_id = time_slide_id[0]

		self.sngl_burst_table.extend(map(contents.sngl_burst_table._row_from_cols, contents.connection.cursor().execute("SELECT sngl_burst.* FROM sngl_burst JOIN coinc_event_map ON (coinc_event_map.event_id == sngl_burst.event_id AND coinc_event_map.table_name == 'sngl_burst') JOIN coinc_event ON (coinc_event.coinc_event_id == coinc_event_map.coinc_event_id) WHERE coinc_event.coinc_def_id == ? AND coinc_event.time_slide_id == ?", (contents.bb_definer_id, time_slide_id))))

	def finish(self, filename, verbose = "False"):
		self.sngl_burst_table.sort(lambda a, b: cmp((a.ifo, a.amplitude), (b.ifo, b.amplitude)))
		utils.write_filename(self.xmldoc, filename, verbose = verbose, gz = (filename or "stdout")[-3:] == ".gz")


#
# =============================================================================
#
#                              Rate vs. Amplitude
#
# =============================================================================
#

class RateVsAmplitude(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument, amplitude_factor):
		SnglBurstUtils.BurstPlot.__init__(self, "%s Amplitude" % instrument, "Coincident Event Rate (Hz)")
		self.instrument = instrument
		self.amplitude_factor = amplitude_factor
		self.foreground = []
		self.background = []
		self.foreground_time = 0.0
		self.background_time = 0.0
		self.axes.loglog()

	def add_contents(self, contents):
		for time_slide_id in contents.time_slide_table.iterkeys():
			offsets = contents.time_slide_table[time_slide_id]
			contents.seglists.offsets.update(offsets)
			live_time = float(contents.seglists.intersection(offsets.keys()).duration())
			if contents.time_slide_table.is_null(time_slide_id):
				bins = self.foreground
				self.foreground_time += live_time
			else:
				bins = self.background
				self.background_time += live_time
			for coinc in contents.coinc_table.selectByTimeSlideID(time_slide_id):
				if coinc.coinc_def_id != contents.bb_definer_id:
					continue
				for burst in coinc.sngl_bursts():
					if burst.ifo == self.instrument:
						bins.append(burst.amplitude * self.amplitude_factor)
		contents.seglists.offsets.clear()

	def finish(self):
		self.axes.set_title(r"\begin{center}Cummulative Coincident Event Rate vs.\ Amplitude in %s\\%d Foreground, %d Background Events\end{center}" % (self.instrument, len(self.foreground), len(self.background)))
		self.background.sort()
		self.foreground.sort()
		# ratio of live times
		foregrounds_per_background = self.foreground_time / self.background_time
		# cummulative number expected in foreground
		background_y = numarray.arange(len(self.background), 0.0, -1.0, "Float64") * foregrounds_per_background
		# \sqrt{N} std dev expected in foreground
		background_yerr = numarray.sqrt(numarray.array(background_y))
		# convert to rate and uncertainty expected in foreground
		background_y /= self.foreground_time
		background_yerr /= self.foreground_time
		# cummulative rate observed in foreground
		foreground_y = numarray.arange(len(self.foreground), 0.0, -1.0, "Float64") / self.foreground_time
		self.axes.errorbar(self.background, background_y, yerr = background_yerr, fmt = "k-")
		self.axes.plot(self.foreground, foreground_y, "ro-", markeredgecolor = "r")
		self.axes.set_xlim([1e-21, 1e-18])
		self.axes.set_ylim([1e-9, 1e-5])
		self.axes.xaxis.grid(True, which="minor")
		self.axes.yaxis.grid(True, which="minor")


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

def new_plots(amplitude_factor):
	return [
		RateVsAmplitude("H1", amplitude_factor),
		RateVsAmplitude("H2", amplitude_factor),
		RateVsAmplitude("L1", amplitude_factor),
	]

options, filenames = parse_command_line()

plots = new_plots(options.amplitude_factor)
survivors = Survivors()

for n, filename in enumerate(utils.sort_files_by_size(filenames, options.verbose, reverse = True)):
	if options.verbose:
		print >>sys.stderr, "%d/%d:" % (n + 1, len(filenames)),
	database = SnglBurstUtils.CoincDatabase(sqlite.connect(":memory:"))
	xmldoc = utils.load_filename(filename, options.verbose, gz = filename[-3:] == ".gz")
	database.summarize(xmldoc, options.live_time_program, options.verbose)
	for n, plot in enumerate(plots):
		if options.verbose:
			print >>sys.stderr, "adding to plot %d ..." % n
		plot.add_contents(database)
	if options.verbose:
		print >>sys.stderr, "storing zero-lag survivors ...",
	survivors.add_contents(database)
	if options.verbose:
		print >>sys.stderr
	xmldoc.unlink()

n = 0
format = "%%s%%0%dd.%%s" % (int(math.log10(len(plots) - 1)) + 1)
while len(plots):
	filename = format % ("string_", n, options.format)
	if options.verbose:
		print >>sys.stderr, "finishing plot %d ..." % n
	plots[0].finish()
	if options.verbose:
		print >>sys.stderr, "writing %s ..." % filename
	plots[0].fig.savefig(filename)
	del plots[0]
	n += 1
survivors.finish("string_survivors.xml", verbose = options.verbose)
if options.verbose:
	print >>sys.stderr, "done."
