#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2008  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import bisect
from optparse import OptionParser
try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3
import sys


from glue import segments
from glue.ligolw import lsctables
from glue.ligolw import dbtables
from glue.ligolw import utils
from pylal import rate
from pylal import db_thinca_rings
from pylal.date import LIGOTimeGPS


lsctables.LIGOTimeGPS = LIGOTimeGPS


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog [options] [file ...]",
		description = "%prog does blah blah blah."
	)
	parser.add_option("-b", "--mass-bins", metavar = "m0,m1[,m2,...]", help = "Set the boundaries of the mass bins.  The lowest and highest bounds must be explicitly listed.  Example 0,5,inf.  Required.")
	parser.add_option("-p", "--live-time-program", metavar = "name", help = "Set the name of the program whose entries in the search_summary table will set the search live time.  Required.")
	parser.add_option("--veto-segments-name", help = "Set the name of the veto segments to use from the XML document.")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	#
	# parse mass bins
	#

	if options.mass_bins is None:
		raise ValueError, "missing required option -b or --mass-bins"
	options.mass_bins = sorted(map(float, options.mass_bins.split(",")))
	if len(options.mass_bins) < 2:
		raise ValueError, "must supply at least two mass bin boundaries"
	options.mass_bins = rate.IrregularBins(options.mass_bins)

	#
	# other
	#

	if options.live_time_program is None:
		raise ValueError, "missing required option -p or --live-time-program"

	#
	# done
	#

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Book-Keeping
#
# =============================================================================
#


class Summaries(object):
	def __init__(self, mass_bins):
		self.mass_bins = mass_bins
		self.snrs = {}
		self.cached_livetime = {}

	def add_livetime(self, connection, veto_segments, live_time_program, verbose = False):
		if verbose:
			print >>sys.stderr, "computing livetimes:",
		for on_instruments, livetime in db_thinca_rings.get_thinca_livetimes(db_thinca_rings.get_thinca_rings_by_available_instruments(connection, program_name = live_time_program), veto_segments, db_thinca_rings.get_background_offset_vectors(connection), verbose = verbose).items():
			on_instruments = lsctables.ifos_from_instrument_set(on_instruments)
			try:
				self.cached_livetime[on_instruments] += livetime
			except KeyError:
				self.cached_livetime[on_instruments] = livetime
		if verbose:
			print >>sys.stderr

	def add_coinc(self, on_instruments, participating_instruments, mass, snr):
		try:
			self.snrs[(on_instruments, participating_instruments, self.mass_bins[mass])].append(snr)
		except KeyError:
			self.snrs[(on_instruments, participating_instruments, self.mass_bins[mass])] = [snr]

	def index(self):
		for snrs in self.snrs.values():
			snrs.sort()

	def rate(self, on_instruments, participating_instruments, mass, snr):
		try:
			snrs = self.snrs[(on_instruments, participating_instruments, self.mass_bins[mass])]
		except KeyError:
			# found coinc in category that has no background
			# events.  trap error, and create new empty event
			# list
			snrs = self.snrs[(on_instruments, participating_instruments, self.mass_bins[mass])] = []
		# len(x) - bisect.bisect_left(x, snr) = (# of elements in
		# list >= snr)
		return (len(snrs) - bisect.bisect_left(snrs, snr)) / self.cached_livetime[on_instruments]


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# command line
#


options, filenames = parse_command_line()


#
# initialize book-keeping
#


background = Summaries(options.mass_bins)


#
# iterate over database files accumulating background statistics
#


if options.verbose:
	print >>sys.stderr, "collecting background statistics ..."


for n, filename in enumerate(filenames):
	#
	# open the database
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)

	#
	# if the database contains a sim_inspiral table then it is assumed
	# to represent an injection run.  its rings must not added to the
	# livetime, and it cannot provide background coincs, so it is just
	# skipped altogether.
	#

	if "sim_inspiral" in dbtables.get_table_names(connection):
		if options.verbose:
			print >>sys.stderr, "database contains sim_inspiral table, skipping ..."

		#
		# close the database
		#

		connection.close()
		dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)
		continue

	#
	# retrieve the veto segments
	#

	if options.veto_segments_name is not None:
		if options.verbose:
			print >>sys.stderr, "retrieving veto segments \"%s\" ..." % options.veto_segments_name
		veto_segments = db_thinca_rings.get_veto_segments(connection, options.veto_segments_name)
	else:
		veto_segments = segments.segmentlistdict()

	#
	# compute and record background livetime
	#

	background.add_livetime(connection, veto_segments, options.live_time_program, verbose = options.verbose)

	#
	# count background coincs by type and mass bin
	#

	for on_instruments, participating_instruments, mass, snr in connection.cursor().execute("""
SELECT
	coinc_event.instruments,
	coinc_inspiral.ifos,
	coinc_inspiral.mass,
	coinc_inspiral.snr
FROM
	coinc_event
	JOIN coinc_inspiral ON (
		coinc_inspiral.coinc_event_id == coinc_event.coinc_event_id
	)
WHERE
	-- require coinc to be background (= at least one of its time slide offsets is non-zero)
	EXISTS (
		SELECT
			*
		FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
	"""):
		#
		# add the coinc's SNR to the list of SNRs for the
		# appropriate coinc type
		#

		background.add_coinc(on_instruments, participating_instruments, mass, snr)

	#
	# close the database
	#

	connection.close()
	dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)


#
# iterate over database files assigning false-alarm rates to coincs
#


if options.verbose:
	print >>sys.stderr, "calculating and recording false alarm rates ..."


background.index()


for n, filename in enumerate(filenames):
	#
	# open the database
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)

	#
	# prepare the database
	#

	connection.create_function("background_rate", 4, background.rate)

	#
	# count background coincs by type and mass bin
	#

	connection.cursor().execute("""
UPDATE
	coinc_inspiral
SET
	false_alarm_rate = (
		SELECT
			background_rate(
				coinc_event.instruments,
				coinc_inspiral.ifos,
				coinc_inspiral.mass,
				coinc_inspiral.snr
			)
		FROM
			coinc_event
		WHERE
			coinc_event.coinc_event_id == coinc_inspiral.coinc_event_id
	)
	""")
	connection.commit()

	#
	# close the database
	#

	connection.close()
	dbtables.put_connection_filename(filename, working_filename, verbose = options.verbose)
