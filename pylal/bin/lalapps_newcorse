#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2008  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


import bisect
from optparse import OptionParser
try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3
import sys


from glue import iterutils
from glue import segments
from glue.ligolw import lsctables
from glue.ligolw import dbtables
from pylal import ligolw_thinca
from pylal import llwapp
from pylal import rate
from pylal.date import LIGOTimeGPS


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog [options] [file ...]",
		description = "%prog does blah blah blah."
	)
	parser.add_option("-i", "--instruments", metavar = "name[,name,...]", help = "Set the list of instruments.  Example H1,H2,L1.  Required.")
	parser.add_option("-b", "--mass-bins", metavar = "m0,m1[,m2,...]", help = "Set the boundaries of the mass bins.  The lowest and highest bounds must be explicitly listed.  Example 0,5,inf.  Required.")
	parser.add_option("-p", "--live-time-program", metavar = "name", help = "Set the name of the program whose entries in the search_summary table will set the search live time.  Required.")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	#
	# parse the instruments
	#

	if options.instruments is None:
		raise ValueError, "required option -i or --instruments missing"
	options.instruments = set(options.instruments.split(","))

	#
	# parse mass bins
	#

	if options.mass_bins is None:
		raise ValueError, "missing required option -b or --mass-bins"
	options.mass_bins = sorted(map(float, options.mass_bins.split(",")))
	if len(options.mass_bins) < 2:
		raise ValueError, "must supply at least two mass bin boundaries"
	options.mass_bins = rate.IrregularBins(options.mass_bins)

	#
	# other
	#

	if options.live_time_program is None:
		raise ValueError, "missing required option -p or --live-time-program"

	#
	# done
	#

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Book-Keeping
#
# =============================================================================
#


class Summaries(object):
	def __init__(self, instruments, mass_bins):
		self.mass_bins = mass_bins

		#
		# put the instruments in alphabetical order so that the
		# instrument combinations generated by choices() below come
		# out with the instruments sorted
		#

		instruments = sorted(instruments)

		#
		# iterate over instrument combinations creating bins for
		# the different categories of coinc
		#

		self.snrs = {}
		for combo in [combo for m in range(2, len(instruments) + 1) for combo in iterutils.choices(instruments, m)]:
			#
			# look up the inspiral coincidence type for this
			# instrument combo
			#

			coinc_type = ligolw_thinca.InspiralCoincTypes[combo].search_coinc_type

			#
			# if both LHO antennas provided a trigger for the
			# coinc --> one coinc type, with amplitude
			# consistency cut;  if one LHO antenna provided a
			# trigger for the coinc --> two coinc types, with
			# and without amplitude consistency cut; if neither
			# LHO antenna contributed a trigger for the coinc
			# --> one coinc type, without amplitude consistency
			# cut.
			#

			if ("H1" in combo) and ("H2" in combo):
				self.snrs[(coinc_type, True)] = tuple(list() for n in range(len(mass_bins)))
			elif ("H1" in combo) or ("H2" in combo):
				self.snrs[(coinc_type, True)] = tuple(list() for n in range(len(mass_bins)))
				self.snrs[(coinc_type, False)] = tuple(list() for n in range(len(mass_bins)))
			else:
				self.snrs[(coinc_type, False)] = tuple(list() for n in range(len(mass_bins)))

		#
		# initialize the live-time book-keeping
		#

		self.livetime = dict((category, segments.segmentlist()) for category in self.snrs)

	def add_livetime(self, seglists):
		# FIXME:  do this
		pass

	def add_coinc(self, coinc_type, w_lho_amp_cut, mchirp, snr):
		self.snrs[(coinc_type, w_lho_amp_cut)][self.mass_bins[mchirp]].append(snr)

	def count(self, coinc_type, w_lho_amp_cut, mchirp, snr):
		"""
		Return the number of coincs of type coinc_type that were
		constructed with the LHO amplitude cut if w_lho_amp_cut is
		True or without the LHO amplitude cut if w_lho_amp_cut is
		False, that are in the mass bin corresponding to mchirp,
		and have a combined SNR greater than or equal to snr.
		"""
		snrs = self.snrs[(coinc_type, w_lho_amp_cut)][self.mass_bins[mchirp]]
		return len([x for x in snrs if x >= snr])


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# command line
#


options, filenames = parse_command_line()


#
# initialize book-keeping
#


seglists = segments.segmentlistdict()
background = Summaries(options.instruments, options.mass_bins)


#
# iterate over database files accumulating background statistics
#


if options.verbose:
	print >>sys.stderr, "collecting background statistics ..."


for n, filename in enumerate(filenames):
	#
	# open the database
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)
	dbtables.DBTable_set_connection(connection)
	xmldoc = dbtables.get_xml(connection)

	#
	# retrieve the segment lists, and add to live time
	#

	seglists = llwapp.segmentlistdict_fromsearchsummary(xmldoc, options.live_time_program).coalesce()
	background.add_livetime(seglists)

	#
	# count background coincs by type and mass bin
	#

	for inspiral_coinc_type, lho_ampl_cut_applied, mchirp, snr in connection.cursor().execute("""
SELECT
	coinc_definer.search_coinc_type,
	-- true if both H1 and H2 were on at time of coinc
	EXISTS (
		SELECT
			*
		FROM
			time_slide AS offset_a
			JOIN time_slide AS offset_b ON (
				offset_a.time_slide_id == offset_b.time_slide_id
				AND offset_a.instrument == 'H1'
				AND offset_b.instrument == 'H2'
			)
		WHERE
			offset_a.time_slide_id == coinc_event.time_slide_id
	),
	coinc_inspiral.mchirp,
	coinc_inspiral.snr
FROM
	coinc_event
	JOIN coinc_definer ON (
		coinc_definer.coinc_def_id == coinc_event.coinc_def_id
	)
	JOIN coinc_inspiral ON (
		coinc_inspiral.coinc_event_id == coinc_event.coinc_event_id
	)
WHERE
	-- require coinc to be background (= at least one of its time slide offsets is non-zero)
	EXISTS (
		SELECT
			*
		FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
	"""):
		#
		# add the coinc's SNR to the list of SNRs for the
		# appropriate coinc type
		#

		background.add_coinc(inspiral_coinc_type, lho_ampl_cut_applied, mchirp, snr)

	#
	# close the database
	#

	connection.close()
	dbtables.discard_connection_filename(filename, working_filename, verbose = options.verbose)


#
# iterate over database files assigning false-alarm rates to coincs
#


if options.verbose:
	print >>sys.stderr, "calculating and recording false alarm rates ..."


for n, filename in enumerate(filenames):
	#
	# open the database
	#

	if options.verbose:
		print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
	working_filename = dbtables.get_connection_filename(filename, tmp_path = options.tmp_space, verbose = options.verbose)
	connection = sqlite3.connect(working_filename)
	dbtables.DBTable_set_connection(connection)

	#
	# prepare the database
	#

	connection.create_function("background_count", 4, background.count)

	#
	# count background coincs by type and mass bin
	#

	connection.cursor().execute("""
UPDATE
	coinc_inspiral
SET
	false_alarm_rate = (
		SELECT
			background_count(
				coinc_definer.search_coinc_type,
				-- true if both H1 and H2 were on at time of coinc
				EXISTS (
					SELECT
						*
					FROM
						time_slide AS offset_a
						JOIN time_slide AS offset_b ON (
							offset_a.time_slide_id == offset_b.time_slide_id
							AND offset_a.instrument == 'H1'
							AND offset_b.instrument == 'H2'
						)
					WHERE
						offset_a.time_slide_id == coinc_event.time_slide_id
				),
				coinc_inspiral.mchirp,
				coinc_inspiral.snr
			)
		FROM
			coinc_event
			JOIN coinc_definer ON (
				coinc_definer.coinc_def_id == coinc_event.coinc_def_id
			)
		WHERE
			coinc_event.coinc_event_id == coinc_inspiral.coinc_event_id
)
	""")
	connection.commit()

	#
	# close the database
	#

	connection.close()
	dbtables.put_connection_filename(filename, working_filename, verbose = options.verbose)
