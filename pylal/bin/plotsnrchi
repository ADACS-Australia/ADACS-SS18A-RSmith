#!/usr/bin/python
"""
Plots involving injections and background (for second stage only)
"""
__version__ = "$Revision$"
__date__ = "$Date$"
__name__ = "plotsnrchi"
__Id__ = "$Id$"
__title__ = "Inspiral Plots"



import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from glue import lal
from pylal import InspiralUtils

##############################################################################
def plotvarlines(snr_range, var):
  loglog(snr_range, 15*snr_range**4 / (snr_range**2 + 0  ), 'm-',linewidth=1)
  loglog(snr_range, 13*snr_range**4 / (snr_range**2 + 2*var ), 'b-',linewidth=1)
  loglog(snr_range, 11*snr_range**4 / (snr_range**2 + 4*var ), 'g-',linewidth=1)
  loglog(snr_range, 9 *snr_range**4 / (snr_range**2 + 6*var ), 'r-',linewidth=1)
  loglog(snr_range, 7 *snr_range**4 / (snr_range**2 + 8*var ), 'y-',linewidth=1)
  loglog(snr_range, 5*snr_range**4 / (snr_range**2 + 10*var ), 'c-',linewidth=1)
  loglog(snr_range, 3*snr_range**4 / (snr_range**2 + 12*var ), 'm-',linewidth=1)
  loglog(snr_range, 2*snr_range**4 / (snr_range**2 + 13*var ), 'b-',linewidth=1)
  loglog(snr_range, 1*snr_range**4 / (snr_range**2 + 14*var ), 'g-',linewidth=1)

##############################################################################
def plotconstlines(snr_range, const):
  loglog(snr_range, 15*snr_range**4 / (snr_range**2 + const ), \
      'm-',linewidth=1)
  loglog(snr_range, 13*snr_range**4 / (snr_range**2 + const ), \
      'b-',linewidth=1)
  loglog(snr_range, 11*snr_range**4 / (snr_range**2 + const ), \
      'g-',linewidth=1)
  loglog(snr_range, 9 *snr_range**4 / (snr_range**2 + const ), \
      'r-',linewidth=1)
  loglog(snr_range, 7 *snr_range**4 / (snr_range**2 + const ), \
      'y-',linewidth=1)
  loglog(snr_range, 5 *snr_range**4 / (snr_range**2 + const ), \
      'c-',linewidth=1)
  loglog(snr_range, 3 *snr_range**4 / (snr_range**2 + const ), \
      'm-',linewidth=1)
  loglog(snr_range, 2 *snr_range**4 / (snr_range**2 + const ), \
      'b-',linewidth=1)
  loglog(snr_range, 1 *snr_range**4 / (snr_range**2 + const ), \
      'g-',linewidth=1)



##############################################################################
def loghistval(trig_val,inj_val,nbins=20):

  figure(100)
  if len(inj_val):
    max_val = max(max(trig_val),max(inj_val))
    min_val = min(min(trig_val),min(inj_val))
  
  
  max_val = log10(max_val)
  min_val = log10(min_val)
  trig_val = log10(trig_val)
  if len(inj_val):
    inj_val = log10(inj_val)
    
  bins = arange(min_val, max_val , (max_val - min_val) /nbins )
  [trigs,bins,stuff] = hist(trig_val, bins, normed=True)
  if len(inj_val):
    [inj,bins,stuff] = hist(inj_val,bins, normed=True)
  close(100)

  bins = 10**bins
  trig_val = 10**trig_val
  inj_val = 10**inj_val
  leg = []
  if len(inj_val):
    semilogx(bins,inj, 'r-',markersize=12, markerfacecolor=None,\
        markeredgewidth=1, linewidth=1)
    leg.append('injection')
  semilogx(bins,trigs, 'k-',markersize=12, markerfacecolor=None,\
      markeredgewidth=1, linewidth=1)
  leg.append('triggers')
  legend(leg) 
  xlim(10**min_val, 10**max_val)
  
  print 'loudest noise trigger = ' + str(max(trig_val))
  num_above = sum(inj_val > max(trig_val)) 
  print 'total number of injections = ' + str(len(inj_val))
  print 'number of injections louder than all noise = ' + str(num_above)
  

##############################################################################
usage = """
prog [options] 

Plots snr vs chisq for a glob of triggers that are read in.  The code expects
a GLOB of input triggers.  It can also accept an INJGLOB containing triggers
associated with injections.  It makes various different plots

1) A plot of SNR vs chisq for the triggers.  Injections are also plotted if
specified.  Called with --snr-chisq

2) A plot of SNR vs chisq with contours.  Called with --trig-contour

3) A plot of the contours and curves meant to appoximate these contours.
Called with --contour-lines.

4) A plot of the triggers, contours and lines.  Called with
--trig-contour-lines.

5) A plot of triggers and lines.  Called with --trig-lines.

The function used to specify the lines is either:

a) chisq = A * snr^4 / (snr^2 + CONST)
   
   This statistic is chosen by specifying --denominator-constant.  The
   value of CONST must also be given.

b) chisq = A * snr^4 / (snr^2 + VAR * (15 - A) )

   This statistic is chonse by specifying --denominator-variable.  The value
   of VAR must also be given.


Additionally, various plots of the distribution of background and injection
triggers can be made.  Three such plots are available:

6) Histograms as a function of snr.  Called with --hist-snr

7) Histogramw as a function of snr/chi.  Called with --hist-snr-chi

8) Histograms as a function of the statistic given above.  Called with
   --hist-stat.

A plot of snr vs rsq can also be made for a glob of triggers that are read in.
If the --rsq-VETO-OPTIONS are used, it will show the triggers cut by that veto
in a different color than those kept by that veto. Injections are also plotted
if specified.
"""
def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")

  ## arguments for data reading
  parser.add_option("-g","--glob",action="store",type="string",\
      default=None, metavar=" GLOB",help="GLOB of trigger files to read" )
  parser.add_option("-I","--inj-glob",action="store",type="string",\
      default=None, metavar=" INJGLOB",
      help="GLOB of injection trigger files to read" )
  parser.add_option("", "--cache-file", metavar="CACHEFILE",\
      help="cache pointing to files of interest")
  # cache description. Note that because we are interesting in second
  # stage only, FOUND and SIRE tag should be followed by underscore
  parser.add_option("","--single-ifo",action="store",type="string",\
    default=None,metavar="IFOS", help="ifo" )

  parser.add_option("","--trig-pattern", action="store",type="string",\
      default=None, metavar="TRIGPTTRN", help="sieve pattern for trig-files" )
#  parser.add_option("","--coinc-pattern", action="store",type="string",\
#      default=None, metavar="COINCPTTRN", help="sieve pattern for coinc-files" )
#  parser.add_option("","--slide-pattern", action="store",type="string",\
#      default=None, metavar="SLIDEPTTRN", help="sieve pattern for trig-files" )
  parser.add_option("","--found-pattern",
      metavar="FOUNDPTTRN", help="sieve pattern for found injection files")

  ## arguments for plot creation
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-a","--snr-chisq",action="store_true",default=False,\
      help="make a plot of snr vs chisq" )
  parser.add_option("-c","--trig-contour",action="store_true",default=False,\
      help="make a contour plot of snr vs chisq" )
  parser.add_option("-C","--contour-lines",action="store_true",default=False,\
      help="make a contour plot of snr vs chisq, with fit lines" )
  parser.add_option("-b","--trig-contour-lines",action="store_true",\
      default=False,\
      help="make a contour plot of snr vs chisq with fitting lines" )
  parser.add_option("-A","--trig-lines",action="store_true",default=False,\
      help="plot triggers and lines" )
  parser.add_option("-B","--trig-inj-lines",action="store_true",default=False,\
      help="plot triggers, injections and lines" )
  parser.add_option("-K","--trig-inj-contour",action="store_true",default=False,\
      help="plot triggers, injections and contours" )
      
  parser.add_option("-E","--hist-snr",action="store_true",default=False,\
      help="histogram of the snr for triggers/injections" )
  parser.add_option("-e","--hist-snr-chi",action="store_true",default=False,\
      help="histogram of snr/chi for triggers/injections" )
  parser.add_option("-k","--hist-stat",action="store_true",default=False,\
      help="histogram of snr,chi statistic for triggers/injections" )
  parser.add_option("-D","--denominator-constant",action="store",type="float",\
      default=0,metavar=" CONST",\
      help="value for the denominator of the statistic")
  parser.add_option("-d","--denominator-variable",action="store",type="float",\
      default=0,metavar=" VAR",\
      help="value for the variable denominator form of the statistic")
  parser.add_option("-n","--nbins",action="store",type="int",default=20,\
      metavar=" NBINS", help="number of bins for the histogram plots" )
  
  parser.add_option("-r","--snr-rsq",action="store_true",default=False,\
      help="make a plot of snr vs rsq" )
  parser.add_option("","--rsq-threshold",action="store",type="float",\
      default=0,metavar="SEC",help="set rsq veto duration threshold to SEC" )
  parser.add_option("","--rsq-max-snr",action="store",type="float",\
      default=0,metavar="MAXSNR",help="set rsq veto maximum snr to MAXSNR" )
  parser.add_option("","--rsq-coeff",action="store",type="float",\
      default=10,metavar="COEFF",help="set rsq veto coefficient to COEFF" )
  parser.add_option("","--rsq-pow",action="store",type="float",\
      default=0,metavar="POW",help="set rsq veto power to POW" )
  
  # output related
  parser.add_option("-Z","--user-tag",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="a user tag for the output filenames" )
  parser.add_option("-o","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("", "--ifo-tag", action="store", type="string",\
      default=None,\
      metavar="IFOTAG", help="sets the IFO tag")
  parser.add_option("-i", "--ifo-times", action="store", type="string",\
      default=None,\
      metavar="IFOTIMES", help="sieve a cache file according to a particular ifo type")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  parser.add_option("", "--figure-resolution",action="store",type="int",\
      default=50, metavar="resolution of the thumbnails (50 by default)", \
      help="read a file of a particular description  from cache file" )

  (options,args) = parser.parse_args()

  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times must be provided in (H1, H2, L1, V1, G1)"


  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz



# ============================================================================
# Initialise
opts = InspiralUtils.initialise(opts, __name__, __version__)

# -- set the proper color code
colors = InspiralUtils.colors
figure_number = 0  # used for the figure label (showplot)
fnameList = []   # use for the cache file
tagList= []   # use for the cache file


# check at least one trig file was specified
if not opts.glob and  not opts.cache_file:
  print >>sys.stderr, "Must specify a GLOB of files to read or a cache input file"
  print >>sys.stderr, "Enter 'plotsnrchi --help' for usage"
  sys.exit(1)

## compile a list of trigger-files
if opts.glob:
  trigFiles = glob.glob(opts.glob)
  if not len(trigFiles):
    print >>sys.stderr, "The glob for " + opts.glob + " returned no files"
    sys.exit(1)

else:
  zerolagAllCache = lal.Cache.fromfile(open(opts.cache_file))
  if opts.verbose is True:
    print opts.ifo_times
  trigFiles = zerolagAllCache.sieve(ifos = opts.ifo_times, exact_match = True).sieve(description = opts.trig_pattern).pfnlist()
  if not len(trigFiles):
    print >>sys.stderr, opts.cache_file+ " contains no files with " + opts.trig_pattern + " description"
    sys.exit(1)

# compile a list of injection-files
if opts.inj_glob:
  injFiles = glob.glob(opts.inj_glob)
  if not len(injFiles):
    print >>sys.stderr, "The glob for " + opts.inj_glob + " returned no files"
    sys.exit(1)
elif opts.cache_file:
  injCache = lal.Cache.fromfile(open(opts.cache_file))
  injFiles = injCache.sieve(ifos = opts.single_ifo, exact_match = True).sieve(description = opts.found_pattern).pfnlist()
  if not len(injFiles):
    print >>sys.stderr, opts.cache_file + " contains no files with " + opts.found_pattern + " description"
    sys.exit(1)

 
if not opts.denominator_constant and not opts.denominator_variable:
  print >>sys.stderr, "One of --denominator-constant CONST or"
  print >>sys.stderr, "--denominator-variable VAR must be specified"
  sys.exit(1)

if (opts.hist_stat or opts.hist_snr or opts.hist_snr_chi) and not \
    (opts.inj_glob or opts.cache_file):
  print >>sys.stderr, "Must specify an INJ_GLOB if you want to do one of"
  print >>sys.stderr, "--hist-snr, --hist-snr-chi --hist-stat"
  sys.exit(1)

if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

   
###################################
# input triggers
inspTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(trigFiles, verbose=True)
rsq = inspTriggers.get_column('rsqveto_duration')
for i in range(len(rsq)):
  rsq[i] += 0.00001
max_rsq = max(rsq)
# input injections:
inj_snr = None
inj_chisq = None
if opts.inj_glob or opts.cache_file:
  injTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(injFiles, verbose=True)
  inj_snr = injTriggers.get_column('snr')
  inj_chisq = injTriggers.get_column('chisq')
  inj_rsq = injTriggers.get_column('rsqveto_duration')
  for i in range(len(inj_rsq)):
    inj_rsq[i] += 0.00001
  max_rsq = max(max_rsq,max(inj_rsq))

print 'Read '+str(len(rsq))+ ' from inspiral files'
print 'Read '+str(len(inj_rsq))+ ' from inspiral injection files'
###################################
# Set up snr arrays
nevents = len(inspTriggers)
snr = inspTriggers.get_column('snr')

if opts.inj_glob or opts.cache_file:
  max_snr = max(inj_snr)
else:
  max_snr = max(snr)
min_snr = min(snr)

log_min = log10(min_snr)
log_max = 1.1*log10(max_snr)

snr_range = arange( log_min, log_max , (log_max - log_min)/20)
snr_range = 10**snr_range

###################################
# Set up chisq arrays
chisq = inspTriggers.get_column('chisq')

max_chisq = max(chisq)
min_chisq = min(chisq)

log_min = log10(min_chisq)
log_max = 1.1*log10(max_chisq)

chisq_range = arange( log_min, log_max, (log_max - log_min)/20)
chisq_range = 10**chisq_range

###################################
# work out different behaviour of snr/chi
high_snr_cut = 15
high_snr = []
high_chisq = []
for i in range(len(snr)):
  if snr[i] > high_snr_cut:
    high_snr.append(snr[i])
    high_chisq.append(chisq[i])

high_snr = array(high_snr)
high_chisq = array(high_chisq)
ratio = high_chisq/high_snr**2
# print 'number of triggers = ' + str(nevents)
# print 'number of high snr triggers = ' + str(len(high_snr))
# print 'high snr, mean of chisq/snrsq = ' + str(mean(ratio))
# print 'high snr, std  of chisq/snrsq = ' + str(std(ratio))

snr_cut = 7.5
low_snr = []
low_chisq = []
for i in range(len(snr)):
  if snr[i] < snr_cut:
    low_snr.append(snr[i])
    low_chisq.append(chisq[i])
    
low_snr = array(low_snr)
low_chisq = array(low_chisq)
# print 'number of triggers = ' + str(nevents)
# print 'number of high snr triggers = ' + str(len(high_snr))
# print 'low snr, mean of snr   = ' + str(mean(low_snr))
# print 'low snr, mean of chisq = ' + str(mean(low_chisq))
# print 'low snr, std  of chisq = ' + str(std(low_chisq))

###################################
# calculate the contours
if opts.trig_contour or opts.trig_contour_lines or opts.contour_lines \
  or opts.trig_inj_lines:
  cont = reshape(zeros(20*20), (20,20))
  for i in range(20):  
    for j in range(20):
      cont[i][j] = sum( asarray(snr > snr_range[j]) * \
          asarray(chisq < chisq_range[i]) )

  v = arange(0,log10(nevents),log10(nevents)/20)
  v = 10**v
  v = concatenate( (v,zeros(1)) )

###################################
# calculate rsq cut line amd sort triggers
if opts.snr_rsq and (opts.rsq_threshold and opts.rsq_max_snr):
  if opts.rsq_coeff and opts.rsq_pow:
    rsq_cut_line_x = [min_snr, opts.rsq_max_snr, opts.rsq_max_snr, max_snr]
    rsq_cut_line_y = [opts.rsq_threshold, opts.rsq_threshold,\
                      opts.rsq_coeff*(opts.rsq_max_snr)**opts.rsq_pow,\
                      opts.rsq_coeff*(max_snr)**opts.rsq_pow]
  else:
    rsq_cut_line_x = [min_snr, opts.rsq_max_snr, opts.rsq_max_snr]
    rsq_cut_line_y = [opts.rsq_threshold, opts.rsq_threshold,max_rsq]

  snr_cut = []
  rsq_cut = []
  snr_kept = []
  rsq_kept = []
  for i in range(len(snr)):
    if snr[i] < opts.rsq_max_snr:
      if rsq[i] > opts.rsq_threshold:
        snr_cut.append(snr[i])
        rsq_cut.append(rsq[i])
      else:
        snr_kept.append(snr[i])
        rsq_kept.append(rsq[i])
    elif opts.rsq_coeff and opts.rsq_pow:
      if rsq[i] > opts.rsq_coeff*(snr[i])**opts.rsq_pow:
        snr_cut.append(snr[i])
        rsq_cut.append(rsq[i])
      else:
        snr_kept.append(snr[i])
        rsq_kept.append(rsq[i])
    else:
      snr_kept.append(snr[i])
      rsq_kept.append(rsq[i])

  if opts.inj_glob or opts.cache_file:
    inj_snr_cut = []
    inj_rsq_cut = []
    inj_snr_kept = []
    inj_rsq_kept = []
    for i in range(len(inj_snr)):
      if inj_snr[i] < opts.rsq_max_snr:
        if inj_rsq[i] > opts.rsq_threshold:
          inj_snr_cut.append(inj_snr[i])
          inj_rsq_cut.append(inj_rsq[i])
        else:
          inj_snr_kept.append(inj_snr[i])
          inj_rsq_kept.append(inj_rsq[i])
      elif opts.rsq_coeff and opts.rsq_pow:
        if inj_rsq[i] > opts.rsq_coeff*(inj_snr[i])**opts.rsq_pow:
          inj_snr_cut.append(inj_snr[i])
          inj_rsq_cut.append(inj_rsq[i])
        else:
          inj_snr_kept.append(inj_snr[i])
          inj_rsq_kept.append(inj_rsq[i])
      else:
        inj_snr_kept.append(inj_snr[i])
        inj_rsq_kept.append(inj_rsq[i])

print len(rsq_kept)
print len(rsq_cut)



fig_num = 0
###################################
# plot of snr vs chisq
if opts.snr_chisq:
  fig_num +=1
  figure(fig_num)
  
  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
  hold(True)
  if injTriggers:
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')

  xlim(min_snr, max_snr)
  ylim(min_chisq, max_chisq)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_vs_chisq")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotsnrchi")


###################################
# plot of snr vs chisq with contours
if opts.trig_contour:
  fig_num +=1
  figure(fig_num)
  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx',opts.figure_name)
  contour(snr_range,chisq_range,cont,v)

  xlim(min_snr, max_snr)
  ylim(min_chisq, max_chisq)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_chisq_contour")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotsnrchi")


###################################
# plot of snr vs chisq with contours and lines
if opts.contour_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    plotconstlines(snr_range, opts.denominator_constant)
    contour(snr_range,chisq_range,cont,v)

    xlabel('snr', size='x-large')
    ylabel('chisq', size='x-large')
    title(inspTriggers[0].ifo)
    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "contour_const_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    plotvarlines(snr_range, opts.denominator_variable)
    contour(snr_range,chisq_range,cont,v)

    xlabel('snr', size='x-large')
    ylabel('chisq', size='x-large')
    title(inspTriggers[0].ifo)
    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "contour_var_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

###################################
# plot of snr vs chisq with lines
if opts.trig_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_const_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_var_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

###################################
# plot of snr vs chisq with injections and lines
if opts.trig_inj_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_inj_const_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_inj_var_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

###################################
# plot of snr vs chisq with injections and contours
if opts.trig_inj_contour:
  fig_num +=1
  figure(fig_num)

  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
  viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
  contour(snr_range,chisq_range,cont,v)
 
  xlim(min_snr,max_snr)
  ylim(min_chisq,max_chisq)  
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_chisq_inj_contour")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotsnrchi")

###################################
# plot of snr vs chisq with contours and lines
if opts.trig_contour_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    contour(snr_range,chisq_range,cont,v)
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_contour_const_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    contour(snr_range,chisq_range,cont,v)
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "snr_chisq_contour_var_lines")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotsnrchi")


###################################
# histogram of snrs
if opts.hist_snr:
  fig_num +=1
  figure(fig_num)
  print 'Statistic is snr'
  loghistval(snr,inj_snr,opts.nbins)
  xlabel('snr', size='x-large')
  ylabel('pdf', size='x-large')
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_efficiency")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotsnrchi")
  
###################################
# histogram of snr/chi
if opts.hist_snr_chi:
  fig_num +=1
  figure(fig_num)

  print 'Statistic is snr/chi'
  loghistval(snr/sqrt(chisq),inj_snr/sqrt(inj_chisq),opts.nbins)
  xlabel('snr/chi', size='x-large')
  ylabel('pdf', size='x-large')
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_chi_efficiency")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("snr_chi_efficiency")


###################################
# histogram of funky snr chi
if opts.hist_stat:
  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    B = opts.denominator_variable
    p = 15
    stat = (snr**4 + B * chisq) / (chisq * ( snr**2 + p * B)) 
    inj_stat = (inj_snr**4 + B*inj_chisq) / (inj_chisq * ( inj_snr**2 + p*B))

    print 'Statistic is variable denominator snr chi'
    loghistval(stat,inj_stat,opts.nbins)
    title(inspTriggers[0].ifo, size='x-large')
    xlabel('variable den. statistic', size='x-large')
    ylabel('pdf', size='x-large')
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "var_den_efficiency")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("var_den_efficiency")

 
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    C = opts.denominator_constant
    stat = (snr**4) / (chisq * ( snr**2 + C)) 
    inj_stat = (inj_snr**4) / (inj_chisq * ( inj_snr**2 + C))

    print 'Statistic is constant denominator snr chi'
    loghistval(stat,inj_stat,opts.nbins)
    title(inspTriggers[0].ifo + ' statistic', size='x-large')
    xlabel(r'$\rho^4 / (\chi^2 [\rho^2 +250])$', size='x-large')
    ylabel('pdf', size='x-large')
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "const_den_efficiency")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("const_den_efficiency")


###################################
# plot of snr vs rsq
if opts.snr_rsq and (opts.rsq_threshold and opts.rsq_max_snr):
  fig_num +=1
  figure(fig_num)
  loglog(snr_kept,rsq_kept,'bx',snr_cut,rsq_cut,'bo')
  hold(True)
  if opts.inj_glob or opts.cache_file:
    loglog(inj_snr_kept,inj_rsq_kept,'ro',inj_snr_cut,inj_rsq_cut,'ko')
  loglog(rsq_cut_line_x,rsq_cut_line_y,'k',linewidth=2)

  xlim(min_snr, max_snr)
  #ylim(1e-5, 10)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_vs_rsq")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("SNR versus RSQ")

elif opts.snr_rsq:
  fig_num +=1
  figure(fig_num)

  loglog(snr,rsq,'bx')
  hold(True)
  if opts.inj_glob or opts.cache_file:
    loglog(inj_snr,inj_rsq,'ro', 'marker')

  xlim(min_snr, max_snr)
  #ylim(1e-5, 10)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "snr_vs>rsp")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("SNR versus RSQ")



# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.write_html_output(opts, args, fnameList, tagList)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)




if opts.show_plot:
  show()

