#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz


##############################################################################
def plotvarlines(snr_range, var):
  loglog(snr_range, 15*snr_range**4 / (snr_range**2 + 0  ), 'm-',linewidth=1)
  loglog(snr_range, 13*snr_range**4 / (snr_range**2 + 2*var ), 'b-',linewidth=1)
  loglog(snr_range, 11*snr_range**4 / (snr_range**2 + 4*var ), 'g-',linewidth=1)
  loglog(snr_range, 9 *snr_range**4 / (snr_range**2 + 6*var ), 'r-',linewidth=1)
  loglog(snr_range, 7 *snr_range**4 / (snr_range**2 + 8*var ), 'y-',linewidth=1)
  loglog(snr_range, 5*snr_range**4 / (snr_range**2 + 10*var ), 'c-',linewidth=1)
  loglog(snr_range, 3*snr_range**4 / (snr_range**2 + 12*var ), 'm-',linewidth=1)
  loglog(snr_range, 2*snr_range**4 / (snr_range**2 + 13*var ), 'b-',linewidth=1)
  loglog(snr_range, 1*snr_range**4 / (snr_range**2 + 14*var ), 'g-',linewidth=1)

##############################################################################
def plotconstlines(snr_range, const):
  loglog(snr_range, 15*snr_range**4 / (snr_range**2 + const ), \
      'm-',linewidth=1)
  loglog(snr_range, 13*snr_range**4 / (snr_range**2 + const ), \
      'b-',linewidth=1)
  loglog(snr_range, 11*snr_range**4 / (snr_range**2 + const ), \
      'g-',linewidth=1)
  loglog(snr_range, 9 *snr_range**4 / (snr_range**2 + const ), \
      'r-',linewidth=1)
  loglog(snr_range, 7 *snr_range**4 / (snr_range**2 + const ), \
      'y-',linewidth=1)
  loglog(snr_range, 5 *snr_range**4 / (snr_range**2 + const ), \
      'c-',linewidth=1)
  loglog(snr_range, 3 *snr_range**4 / (snr_range**2 + const ), \
      'm-',linewidth=1)
  loglog(snr_range, 2 *snr_range**4 / (snr_range**2 + const ), \
      'b-',linewidth=1)
  loglog(snr_range, 1 *snr_range**4 / (snr_range**2 + const ), \
      'g-',linewidth=1)



##############################################################################
def loghistval(trig_val,inj_val,nbins=20):

  figure(100)
  if len(inj_val):
    max_val = max(max(trig_val),max(inj_val))
    min_val = min(min(trig_val),min(inj_val))
  
  
  max_val = log10(max_val)
  min_val = log10(min_val)
  trig_val = log10(trig_val)
  if len(inj_val):
    inj_val = log10(inj_val)
    
  bins = arange(min_val, max_val , (max_val - min_val) /nbins )
  [trigs,bins,stuff] = hist(trig_val, bins, normed=True)
  if len(inj_val):
    [inj,bins,stuff] = hist(inj_val,bins, normed=True)
  close(100)

  bins = 10**bins
  trig_val = 10**trig_val
  inj_val = 10**inj_val
  leg = []
  if len(inj_val):
    semilogx(bins,inj, 'r-',markersize=12, markerfacecolor=None,\
        markeredgewidth=1, linewidth=1)
    leg.append('injection')
  semilogx(bins,trigs, 'k-',markersize=12, markerfacecolor=None,\
      markeredgewidth=1, linewidth=1)
  leg.append('triggers')
  legend(leg) 
  xlim(10**min_val, 10**max_val)
  
  print 'loudest noise trigger = ' + str(max(trig_val))
  num_above = sum(inj_val > max(trig_val)) 
  print 'total number of injections = ' + str(len(inj_val))
  print 'number of injections louder than all noise = ' + str(num_above)
  

##############################################################################
usage = """
prog [options] 

Plots snr vs chisq for a glob of triggers that are read in.  The code expects
a GLOB of input triggers.  It can also accept an INJGLOB containing triggers
associated with injections.  It makes various different plots

1) A plot of SNR vs chisq for the triggers.  Injections are also plotted if
specified.  Called with --snr-chisq

2) A plot of SNR vs chisq with contours.  Called with --trig-contour

3) A plot of the contours and curves meant to appoximate these contours.
Called with --contour-lines.

4) A plot of the triggers, contours and lines.  Called with
--trig-contour-lines.

5) A plot of triggers and lines.  Called with --trig-lines.

The function used to specify the lines is either:

a) chisq = A * snr^4 / (snr^2 + CONST)
   
   This statistic is chosen by specifying --denominator-constant.  The
   value of CONST must also be given.

b) chisq = A * snr^4 / (snr^2 + VAR * (15 - A) )

   This statistic is chonse by specifying --denominator-variable.  The value
   of VAR must also be given.


Additionally, various plots of the distribution of background and injection
triggers can be made.  Three such plots are available:

6) Histograms as a function of snr.  Called with --hist-snr

7) Histogramw as a function of snr/chi.  Called with --hist-snr-chi

8) Histograms as a function of the statistic given above.  Called with
   --hist-stat.
"""

parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png")
parser.add_option("-g","--glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of trigger files to read" )
parser.add_option("-i","--inj-glob",action="store",type="string",\
    default=None, metavar=" INJGLOB",
    help="GLOB of injection trigger files to read" )
parser.add_option("-t","--title",action="store",type="string",default=None,\
    metavar=" STRING",help="title string for plots")
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-a","--snr-chisq",action="store_true",default=False,\
    help="make a plot of snr vs chisq" )
parser.add_option("-c","--trig-contour",action="store_true",default=False,\
    help="make a contour plot of snr vs chisq" )
parser.add_option("-C","--contour-lines",action="store_true",default=False,\
    help="make a contour plot of snr vs chisq, with fit lines" )
parser.add_option("-b","--trig-contour-lines",action="store_true",\
    default=False,\
    help="make a contour plot of snr vs chisq with fitting lines" )
parser.add_option("-A","--trig-lines",action="store_true",default=False,\
    help="plot triggers and lines" )
parser.add_option("-B","--trig-inj-lines",action="store_true",default=False,\
    help="plot triggers, injections and lines" )
parser.add_option("-K","--trig-inj-contour",action="store_true",default=False,\
    help="plot triggers, injections and contours" )
    
parser.add_option("-E","--hist-snr",action="store_true",default=False,\
    help="histogram of the snr for triggers/injections" )
parser.add_option("-e","--hist-snr-chi",action="store_true",default=False,\
    help="histogram of snr/chi for triggers/injections" )
parser.add_option("-k","--hist-stat",action="store_true",default=False,\
    help="histogram of snr,chi statistic for triggers/injections" )
parser.add_option("-D","--denominator-constant",action="store",type="float",\
    default=0,metavar=" CONST",\
    help="value for the denominator of the statistic")
parser.add_option("-d","--denominator-variable",action="store",type="float",\
    default=0,metavar=" VAR",\
    help="value for the variable denominator form of the statistic")
parser.add_option("-n","--nbins",action="store",type="int",default=20,\
    metavar=" NBINS", help="number of bins for the histogram plots" )

(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)

# check at least one trig file was specified
if not opts.glob:
  print >>sys.stderr, "Must specify a GLOB of files to read"
  print >>sys.stderr, "Enter 'plotsnrchi --help' for usage"
  sys.exit(1)

trigFiles = glob.glob(opts.glob)
if not len(trigFiles):
  print >>sys.stderr, "The glob for " + opts.glob + " returned no files"
  sys.exit(1)

if opts.inj_glob:
  injFiles = glob.glob(opts.inj_glob)
  if not len(injFiles):
    print >>sys.stderr, "The glob for " + opts.inj_glob + " returned no files"
    sys.exit(1)
 
if not opts.denominator_constant and not opts.denominator_variable:
  print >>sys.stderr, "One of --denominator-constant CONST or"
  print >>sys.stderr, "--denominator-variable VAR must be specified"
  sys.exit(1)

if (opts.hist_stat or opts.hist_snr or opts.hist_snr_chi) and not \
    opts.inj_glob:
  print >>sys.stderr, "Must specify an INJ_GLOB if you want to do one of"
  print >>sys.stderr, "--hist-snr, --hist-snr-chi --hist-stat"
  sys.exit(1)
   
###################################
# input triggers
inspTriggers=readMeta.metaDataTable(trigFiles,'sngl_inspiral')
# input injections:
inj_snr = None
inj_chisq = None
if opts.inj_glob:
  injTriggers=readMeta.metaDataTable(injFiles,'sngl_inspiral')
  inj_snr = injTriggers.mkarray('snr')
  inj_chisq = injTriggers.mkarray('chisq')


###################################
# Set up snr arrays
nevents = inspTriggers.nevents()
snr = inspTriggers.mkarray('snr')

if opts.inj_glob:
  max_snr = max(inj_snr)
else:
  max_snr = max(snr)
min_snr = min(snr)

log_min = log10(min_snr)
log_max = 1.1*log10(max_snr)

snr_range = arange( log_min, log_max , (log_max - log_min)/20)
snr_range = 10**snr_range

###################################
# Set up chisq arrays
chisq = inspTriggers.mkarray('chisq')

max_chisq = max(chisq)
min_chisq = min(chisq)

log_min = log10(min_chisq)
log_max = 1.1*log10(max_chisq)

chisq_range = arange( log_min, log_max, (log_max - log_min)/20)
chisq_range = 10**chisq_range

###################################
# work out different behaviour of snr/chi
high_snr_cut = 15
high_snr = []
high_chisq = []
for i in range(len(snr)):
  if snr[i] > high_snr_cut:
    high_snr.append(snr[i])
    high_chisq.append(chisq[i])

high_snr = array(high_snr)
high_chisq = array(high_chisq)
ratio = high_chisq/high_snr**2
# print 'number of triggers = ' + str(nevents)
# print 'number of high snr triggers = ' + str(len(high_snr))
# print 'high snr, mean of chisq/snrsq = ' + str(mean(ratio))
# print 'high snr, std  of chisq/snrsq = ' + str(std(ratio))

snr_cut = 7.5
low_snr = []
low_chisq = []
for i in range(len(snr)):
  if snr[i] < snr_cut:
    low_snr.append(snr[i])
    low_chisq.append(chisq[i])
    
low_snr = array(low_snr)
low_chisq = array(low_chisq)
# print 'number of triggers = ' + str(nevents)
# print 'number of high snr triggers = ' + str(len(high_snr))
# print 'low snr, mean of snr   = ' + str(mean(low_snr))
# print 'low snr, mean of chisq = ' + str(mean(low_chisq))
# print 'low snr, std  of chisq = ' + str(std(low_chisq))

###################################
# calculate the contours
if opts.trig_contour or opts.trig_contour_lines or opts.contour_lines \
  or opts.trig_inj_lines:
  
  cont = reshape(zeros(20*20), (20,20))
  for i in range(20):  
    for j in range(20):
      cont[i][j] = sum( (snr > snr_range[j]) *  (chisq < chisq_range[i]) )

  v = arange(0,log10(nevents),log10(nevents)/20)
  v = 10**v
  v = concatenate( (v,zeros(1)) )
  print v

fig_num = 0
###################################
# plot of snr vs chisq
if opts.snr_chisq:
  fig_num +=1
  figure(fig_num)
  
  if opts.inj_glob: 
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
  hold(True)
  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')

  xlim(min_snr, max_snr)
  ylim(min_chisq, max_chisq)
  if opts.figure_name:
    savefig(opts.figure_name + '_snr_chisq.png')


###################################
# plot of snr vs chisq with contours
if opts.trig_contour:
  fig_num +=1
  figure(fig_num)
  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx',opts.figure_name)
  contour(snr_range,chisq_range,cont,v)

  xlim(min_snr, max_snr)
  ylim(min_chisq, max_chisq)
  if opts.figure_name:
    savefig(opts.figure_name + '_snr_chisq_contour.png')


###################################
# plot of snr vs chisq with contours and lines
if opts.contour_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    plotconstlines(snr_range, opts.denominator_constant)
    contour(snr_range,chisq_range,cont,v)

    xlabel('snr', size='x-large')
    ylabel('chisq', size='x-large')
    title(inspTriggers.table[0]['ifo'])
    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.figure_name:
      savefig(opts.figure_name + '_contour_const_lines.png')

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    plotvarlines(snr_range, opts.denominator_variable)
    contour(snr_range,chisq_range,cont,v)

    xlabel('snr', size='x-large')
    ylabel('chisq', size='x-large')
    title(inspTriggers.table[0]['ifo'])
    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.figure_name:
      savefig(opts.figure_name + '_contour_var_lines.png')

###################################
# plot of snr vs chisq with lines
if opts.trig_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_const_lines.png')

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_var_lines.png')

###################################
# plot of snr vs chisq with injections and lines
if opts.trig_inj_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_inj_const_lines.png')

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_inj_var_lines.png')

###################################
# plot of snr vs chisq with injections and contours
if opts.trig_inj_contour:
  fig_num +=1
  figure(fig_num)

  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
  viz.plot_a_v_b(injTriggers,'snr','chisq','loglog','r+')
  contour(snr_range,chisq_range,cont,v)
 
  xlim(min_snr,max_snr)
  ylim(min_chisq,max_chisq)  
  if opts.figure_name:
    savefig(opts.figure_name + '_snr_chisq_inj_contour.png')

###################################
# plot of snr vs chisq with contours and lines
if opts.trig_contour_lines:
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    contour(snr_range,chisq_range,cont,v)
    plotconstlines(snr_range, opts.denominator_constant)

    xlim(min_snr,max_snr)
    ylim(min_chisq,max_chisq)  
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_contour_const_lines.png')

  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx')
    contour(snr_range,chisq_range,cont,v)
    plotvarlines(snr_range, opts.denominator_variable)

    xlim(min_snr, max_snr)
    ylim(min_chisq, max_chisq)
    if opts.figure_name:
      savefig(opts.figure_name + '_snr_chisq_contour_var_lines.png')


###################################
# histogram of snrs
if opts.hist_snr:
  fig_num +=1
  figure(fig_num)
  print 'Statistic is snr'
  loghistval(snr,inj_snr,opts.nbins)
  xlabel('snr', size='x-large')
  ylabel('pdf', size='x-large')
  if opts.figure_name:
    savefig(opts.figure_name + '_snr_efficiency.png')
  
###################################
# histogram of snr/chi
if opts.hist_snr_chi:
  fig_num +=1
  figure(fig_num)

  print 'Statistic is snr/chi'
  loghistval(snr/sqrt(chisq),inj_snr/sqrt(inj_chisq),opts.nbins)
  xlabel('snr/chi', size='x-large')
  ylabel('pdf', size='x-large')
  if opts.figure_name:
    savefig(opts.figure_name + '_snr_chi_efficiency.png')

###################################
# histogram of funky snr chi
if opts.hist_stat:
  if opts.denominator_variable:
    fig_num +=1
    figure(fig_num)

    B = opts.denominator_variable
    p = 15
    stat = (snr**4 + B * chisq) / (chisq * ( snr**2 + p * B)) 
    inj_stat = (inj_snr**4 + B*inj_chisq) / (inj_chisq * ( inj_snr**2 + p*B))

    print 'Statistic is variable denominator snr chi'
    loghistval(stat,inj_stat,opts.nbins)
    title(inspTriggers.table[0]['ifo'], size='x-large')
    xlabel('variable den. statistic', size='x-large')
    ylabel('pdf', size='x-large')
    if opts.figure_name:
      savefig(opts.figure_name + '_var_den_efficiency.png')
 
  if opts.denominator_constant:
    fig_num +=1
    figure(fig_num)

    C = opts.denominator_constant
    stat = (snr**4) / (chisq * ( snr**2 + C)) 
    inj_stat = (inj_snr**4) / (inj_chisq * ( inj_snr**2 + C))

    print 'Statistic is constant denominator snr chi'
    loghistval(stat,inj_stat,opts.nbins)
    title(inspTriggers.table[0]['ifo'] + ' statistic', size='x-large')
    xlabel(r'$\rho^4 / (\chi^2 [\rho^2 +250])$', size='x-large')
    ylabel('pdf', size='x-large')
    if opts.figure_name:
      savefig(opts.figure_name + '_const_den_efficiency.png')


if opts.show_plot:
  show()
