#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz
from glue import segments
from glue import segmentsUtils

##############################################################################
usage = """
usage: %prog [options] 

Inspiral Plotting Functions

The function reads in triggers from a glob of files and produces several 
different figures.

The plots are

1)  SNR v time.

1)  SNR v CHISQ, linear scale  (requres that the chisq was calculated)

2)  SNR v CHISQ, log scale on both axes

   The chisq threshold can be added to the above plots if the 
     --chisq-threshold, --chisq-delta and --chisq-bins are given

3)  Cumulative Histogram of SNR values
    
4)  Histogram of SNR values

5)  "Normalized" cumulative histogram of SNR values
    The normalization is determined by the maximum total number of triggers,
    calculated from the --maximization-interval and --analyzed-time
    
6)  Histogram of CHISQ values  

7)  Cumulative Histogram of snr/chi values
"""

parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png")
parser.add_option("-g","--glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of trigger files to read" )
parser.add_option("-t","--title",action="store",type="string",default=None,\
    metavar=" STRING",help="title string for plots")
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-z","--snr-time",action="store_true",default=False,\
    help="make a plot of snr vs time" )
parser.add_option("-y","--add-vertical-line",action="store",default=None,\
    metavar=" GPS_TIME",type="int",\
    help="add a vertical line at GPS_TIME to the snr vs time plot" )
parser.add_option("-a","--snr-chisq",action="store_true",default=False,\
    help="make a plot of snr vs chisq" )
parser.add_option("-b","--log-snr-chisq",action="store_true",default=False,\
    help="make a log plot of snr vs chisq" )
parser.add_option("-C","--chisq-threshold",action="store",type="float",\
    metavar=" CHISQ_THRESH",\
    help="specify the chisq threshold (so we can add to plot)" )
parser.add_option("-D","--chisq-delta",action="store",type="float",\
    metavar=" CHISQ_DELTA", help="specify the delta param for the chisq " )
parser.add_option("-B","--chisq-bins",action="store",type="int",\
    metavar=" CHISQ_BINS", help="specify the number of chisq bins")
parser.add_option("-c","--cum-hist-snr",action="store_true",default=False,\
    help="cumulative histogram of the snr" )
parser.add_option("-d","--hist-snr",action="store_true",default=False,\
    help="histogram of the snr" )
parser.add_option("-e","--norm-hist-snr",action="store_true",default=False,\
    help="normalized cumulative histogram of the snr" )
parser.add_option("-j","--hist-chisq",action="store_true",default=False,\
    help="histogram of the chisq values" )
parser.add_option("-k","--cum-hist-snr-chi",action="store_true",default=False,\
    help="cumulative histogram of snr/chi" )
parser.add_option("-l","--hist-snr-chi",action="store_true",default=False,\
    help="histogram of snr/chi" )
parser.add_option("-n","--nbins",action="store",type="int",default=10,\
    metavar=" NBINS", help="number of bins for the histogram plots" )
parser.add_option("-m","--maximization-interval",action="store",\
    type="int",default=10,\
    metavar=" MAX_INT", help="maximization interval used (in ms)" )
parser.add_option("-T","--analyzed-time",action="store",type="int",\
    metavar=" SECONDS", help="amount of time analyzed" )
parser.add_option("-V","--veto-file",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="read in segments from FNAME (assumed segwizard format)")
parser.add_option("-A","--funky-threshold",action="store",type="float",\
    metavar=" FUNKY_THRESH",\
    help="specify the funky stat threshold (so we can add to plot)" )
parser.add_option("-F","--funky-offset",action="store",type="float",\
    metavar=" FUNKY_OFFSET", help="specify the offset in funky stat " )
parser.add_option("-p","--template-bank",action="store",type="string",\
    default=None, metavar=" FILE",help="name of a template bank file")
parser.add_option("-x","--x-min",action="store",type="float",\
    default=None, metavar="XMIN",help="set plot xmin to XMIN")
parser.add_option("-X","--x-max",action="store",type="float",\
    default=None, metavar="XMAX",help="set plot xmax to XMAX")

(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)

# check at least one trig file was specified
if not opts.glob:
  print >>sys.stderr, "Must specify a GLOB of files to read"
  print >>sys.stderr, "Enter 'plotinspiral --help' for usage"
  sys.exit(1)

if opts.norm_hist_snr and not opts.analyzed_time:
  print >>sys.stderr, "to make the normalized cumulative histogram"
  print >>sys.stderr, "the --analyzed-time must be specified"
  sys.exit(1)

trigFiles = glob.glob(opts.glob)
if not len(trigFiles):
  print >>sys.stderr, "The glob for " + opts.glob + " returned no files"
  sys.exit(1)

# an instance of the snglInspiralTable
inspTriggers=readMeta.metaDataTable(trigFiles, "sngl_inspiral")
plotsymbols= ['r+','bx','ko']

# read in the template bank if supplied
if opts.template_bank:
  tmpltbank=readMeta.metaDataTable([ opts.template_bank ], "sngl_inspiral")

# apply veto if there is one
if opts.veto_file:
  file = open( opts.veto_file , "r")
  seglist = segmentsUtils.fromsegwizard(file)
  file.close()
  
  vetoed = readMeta.metaDataTable( None, "sngl_inspiral")
  keep = readMeta.metaDataTable( None, "sngl_inspiral")
  for event in inspTriggers.table:
    end_time = event["end_time"]
    if seglist.__contains__(end_time):
      vetoed.table.append(event)
    else:
      keep.table.append(event)
        
  inspTriggers = keep

max_snr = max(inspTriggers.mkarray('snr'))
min_snr = min(inspTriggers.mkarray('snr'))
snr_range = arange( min_snr, max_snr, (max_snr - min_snr)/100  )

if opts.chisq_threshold:
  if not ( opts.chisq_bins and opts.chisq_delta):
    print >>sys.stderr, "when --chisq-threshold is specified, must also give"
    print >>sys.stderr, "the --chisq-bins and --chisq-delta"
    sys.exit(1)
  
  chisq_thresh = opts.chisq_threshold * ( opts.chisq_bins + \
    opts.chisq_delta * snr_range * snr_range )

if opts.funky_threshold:
  if not ( opts.funky_offset):
    print >>sys.stderr, "when --funky-threshold is specified, must also give"
    print >>sys.stderr, "the --funky-offset"
    sys.exit(1)
  
  s3_snr_chi_stat = opts.funky_threshold * ( snr_range * snr_range * \
      snr_range *snr_range ) / ( opts.funky_offset + (snr_range * \
      snr_range) ) 

fig_num = 0
###################################
# plot of snr vs time
if opts.snr_time:
  fig_num += 1
  figure(fig_num)
  if opts.add_vertical_line:
    axvline(0,linewidth=1, color='r')
    for idx in range(len(inspTriggers.table)):
      inspTriggers.table[idx]['end_time'] = inspTriggers.table[idx]['end_time'] - opts.add_vertical_line
    viz.plot_a_v_b(inspTriggers,'end_time','snr','seconds','kx',output_name = opts.figure_name)
  else:
    viz.plot_a_v_b(inspTriggers,'end_time','snr','linear','kx',output_name = opts.figure_name)
  ylim(min_snr, max_snr)
  if opts.x_min:
    xlim(xmin=opts.x_min)
  if opts.x_max:
    xlim(xmax=opts.x_max)

###################################
# plot of snr vs chisq
if opts.snr_chisq:
  fig_num += 1
  figure(fig_num)
  if opts.chisq_threshold:
    plot(snr_range, chisq_thresh)
    hold(True)
  if opts.funky_threshold:
    plot(snr_range, s3_snr_chi_stat, 'r-')
    hold(True)
    
  viz.plot_a_v_b(inspTriggers,'snr','chisq','linear','kx',output_name = opts.figure_name)
  xlim(min_snr, max_snr)

###################################
# plot of snr vs chisq
if opts.log_snr_chisq:
  fig_num += 1
  figure(fig_num)
  if opts.chisq_threshold:
    loglog(snr_range, chisq_thresh)
    hold(True)
  if opts.funky_threshold:
    loglog(snr_range, s3_snr_chi_stat, 'r-')
    hold(True)
    
  viz.plot_a_v_b(inspTriggers,'snr','chisq','loglog','kx',output_name = opts.figure_name)
  xlim(min_snr, max_snr)

###################################
# cumulative histogram of snr
if opts.cum_hist_snr:
  fig_num += 1
  figure(fig_num)
  viz.cumhistcol(inspTriggers,'snr',output_name = opts.figure_name)

###################################
# histogram of snr
if opts.hist_snr:
  fig_num += 1
  figure(fig_num)
  viz.histcol(inspTriggers,'snr',opts.nbins,None,opts.figure_name)

###################################
# normalized histogram of snr
if opts.norm_hist_snr:
  max_poss_trigs = (1000 / float (opts.maximization_interval)) * \
    opts.analyzed_time
  fig_num += 1
  figure(fig_num)
  viz.cumhistcol(inspTriggers,'snr',normalization = max_poss_trigs,\
      output_name = opts.figure_name)
  
###################################
# histogram of chisq values
if opts.hist_chisq:
  fig_num += 1
  figure(fig_num)
  viz.histcol(inspTriggers,'chisq',opts.nbins,None,opts.figure_name)

###################################
# cumulative histogram of snr
if opts.cum_hist_snr_chi:
  fig_num += 1
  figure(fig_num)
  viz.cumhistcol(inspTriggers,'snr_chi',output_name = opts.figure_name)

###################################
# histogram of snr
if opts.hist_snr_chi:
  fig_num += 1
  figure(fig_num)
  viz.histcol(inspTriggers,'snr_chi',opts.nbins,None,opts.figure_name)

###################################
# plot the template bank and overlay the triggers
if opts.template_bank:
  fig_num += 1
  figure(fig_num)
  viz.plot_a_v_b(tmpltbank,'mass1','mass2','linear',plot_sym = 'rx')
  viz.plot_a_v_b(inspTriggers,'mass1','mass2','linear',plot_sym = 'ro',\
      output_name = opts.figure_name)

if opts.show_plot:
  show()
