#!/usr/bin/python

# Copyright (C) 2013 Michael Coughlin
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

"""Seismic summary information generator.

This script generates a nested web page and content for
reviewing seismicity at the sites and earthquake status.

Comments should be e-mailed to michael.coughlin@ligo.org.

"""


import os, sys, glob, optparse, shutil, warnings

if not os.getenv("DISPLAY", None):
    import matplotlib
    matplotlib.use("agg", warn=False)

from collections import namedtuple
from pylal.xlal.datatypes.ligotimegps import LIGOTimeGPS
from pylal.xlal.date import XLALGPSToUTC
import pylal.pylal_seismon_psd, pylal.pylal_seismon_utils
import pylal.pylal_seismon_html, pylal.pylal_seismon_omicron
import pylal.pylal_seismon_eqmon, pylal.pylal_seismon_eqmon_plot

__author__ = "Michael Coughlin <michael.coughlin@ligo.org>"
__version__ = 1.0
__date__    = "9/22/2013"

# =============================================================================
#
#                               DEFINITIONS
#
# =============================================================================

def parse_commandline():
    """@Parse the options given on the command-line.
    """
    parser = optparse.OptionParser(usage=__doc__,version=__version__)

    parser.add_option("-p", "--paramsFile", help="Seismon params file.", 
                      default ="/home/mcoughlin/Seismon/seismon/input/seismon_params_HIFOY.txt")

    parser.add_option("-s", "--gpsStart", help="GPS Start Time.", default=1054028959,type=int)
    parser.add_option("-e", "--gpsEnd", help="GPS End Time.", default=1054029209,type=int)
    parser.add_option("-f", "--fftDuration", help="FFT duration.", default=64,type=int)

    parser.add_option("-c", "--channel", help="Run on a specific channel.", default=None)
    parser.add_option("-r", "--referenceChannel", help="Channel for PSD comparison.", default=None)

    parser.add_option("--gpsSpectraStart", help="GPS spectra Start Time.", type=int)
    parser.add_option("--gpsSpectraEnd", help="GPS spectra End Time.", type=int)

    parser.add_option("--segmentDatabase", help="Segment database", default="https://segdb2.ligo.caltech.edu")
    parser.add_option("--segmentFlag", help="Segment flag", default="H1:ODC-PSL_SUMMARY:1")
    parser.add_option("--segmentsTextFile", help="Segments text file.", default=None)

    parser.add_option("--fmin", help="fmin.", default=1.0/64.0,type=float)
    parser.add_option("--fmax", help="fmax.", default=64.0,type=float)

    parser.add_option("--eventfilesType", help="Event files type.", default="public")

    parser.add_option("--doPlots",  action="store_true", default=False)
    parser.add_option("--doEarthquakes",  action="store_true", default=False)
    parser.add_option("--doEarthquakesAnalysis",  action="store_true", default=False)
    parser.add_option("--doEarthquakesMonitor",  action="store_true", default=False)
    parser.add_option("--doOmicron",  action="store_true", default=False)
    parser.add_option("--doFreqAnalysis",  action="store_true", default=False)
    parser.add_option("--doAnalysis",  action="store_true", default=False)
    parser.add_option("--doHTML",  action="store_true", default=False)
    parser.add_option("--doSegmentsDatabase",  action="store_true", default=False)
    parser.add_option("--doSegmentsTextFile",  action="store_true", default=False)
    parser.add_option("--doSkipPSD",  action="store_true", default=False)    

    parser.add_option("--doKML",  action="store_true", default=False)
    parser.add_option("--doBokeh",  action="store_true", default=False)

    parser.add_option("-v", "--verbose", action="store_true", default=False,
                      help="Run verbosely. (Default: False)")

    opts, args = parser.parse_args()

    # show parameters
    if opts.verbose:
        print >> sys.stderr, ""
        print >> sys.stderr, "running pylal_seismon_run..."
        print >> sys.stderr, "version: %s"%__version__
        print >> sys.stderr, ""
        print >> sys.stderr, "***************** PARAMETERS ********************"
        for o in opts.__dict__.items():
          print >> sys.stderr, o[0]+":"
          print >> sys.stderr, o[1]
        print >> sys.stderr, ""

    return opts

def params_struct(opts):
    """@Creates seismon params structure
    @param opts
        seismon command line options
    """

    params = pylal.pylal_seismon_utils.readParamsFromFile(opts.paramsFile)
    params["gpsStart"] = opts.gpsStart
    params["gpsEnd"] = opts.gpsEnd
    params["fftDuration"] = opts.fftDuration
    if opts.channel == None:
        params["channel"] = opts.channel
    else:
        params["channel"] = [x for x in opts.channel.split(",")]
    params["referenceChannel"] = opts.referenceChannel

    if opts.gpsSpectraStart == None:
        params["gpsSpectraStart"] = opts.gpsStart - 24*60*60
    else:
        params["gpsSpectraStart"] = opts.gpsSpectraStart

    if opts.gpsSpectraEnd == None:
        params["gpsSpectraEnd"] = opts.gpsEnd 
    else:
        params["gpsSpectraEnd"] = opts.gpsSpectraEnd

    params["segmentDatabase"] = opts.segmentDatabase
    params["segmentFlag"] = opts.segmentFlag
    params["segmentsTextFile"] = opts.segmentsTextFile

    params["eventfilesType"] = opts.eventfilesType

    params["fmin"] = opts.fmin
    params["fmax"] = opts.fmax
    params["doPlots"] = opts.doPlots
    params["doEarthquakes"] = opts.doEarthquakes
    params["doEarthquakesAnalysis"] = opts.doEarthquakesAnalysis
    params["doEarthquakesMonitor"] = opts.doEarthquakesMonitor
    params["doOmicron"] = opts.doOmicron
    params["doAnalysis"] = opts.doAnalysis
    params["doFreqAnalysis"] = opts.doFreqAnalysis
    params["doHTML"] = opts.doHTML
    params["doSegmentsDatabase"] = opts.doSegmentsDatabase
    params["doSegmentsTextFile"] = opts.doSegmentsTextFile
    params["doSkipPSD"] = opts.doSkipPSD

    params["doKML"] = opts.doKML
    params["doBokeh"] = opts.doBokeh

    params["date"] = XLALGPSToUTC(LIGOTimeGPS(params["gpsStart"]))
    params["dateString"] = "%d-%d-%d %d:%d:%d"%(params["date"][0],params["date"][1],params["date"][2],params["date"][3],params["date"][4],params["date"][5])

    if params["doEarthquakesAnalysis"]:
       params["earthquakesMinMag"] = 5
    else:
       params["earthquakesMinMag"] = 0

    return params

# =============================================================================
#
#                                    MAIN
#
# =============================================================================

warnings.filterwarnings("ignore")

# Parse command line
opts = parse_commandline()
params = params_struct(opts)

if params["doEarthquakesMonitor"]: 
    channelList = params["codePath"] + "/seismon/input/seismon-" + params["ifo"] + "-" + params["frameType"] + "-channel_list_EarthquakesAnalysis.txt"
elif params["doEarthquakesAnalysis"]:
    channelList = params["codePath"] + "/seismon/input/seismon-" + params["ifo"] + "-" + params["frameType"] + "-channel_list.txt"
else:
    channelList = params["codePath"] + "/seismon/input/seismon-" + params["ifo"] + "-" + params["frameType"] + "-channel_list.txt"
params = pylal.pylal_seismon_utils.channel_struct(params,channelList)

params = pylal.pylal_seismon_utils.segment_struct(params)
params = pylal.pylal_seismon_utils.frame_struct(params)
params = pylal.pylal_seismon_utils.setPath(params,[params["gpsStart"],params["gpsEnd"]])
print params["path"]

if params["doEarthquakesMonitor"]:
    segmentlist = pylal.pylal_seismon_eqmon.run_earthquakes(params,[params["gpsStart"],params["gpsEnd"]])
    sys.exit()
if params["doEarthquakesAnalysis"]:
    params["segments"] = pylal.pylal_seismon_eqmon.run_earthquakes(params,[params["gpsStart"],params["gpsEnd"]])

if params["doEarthquakes"]:
    print "Finding earthquakes"
    for segment in params["segments"]:
        params = pylal.pylal_seismon_utils.setPath(params,segment)
        segments = pylal.pylal_seismon_eqmon.run_earthquakes(params,segment)

if params["doOmicron"]:
    print "Generating Omicron triggers"
    pylal.pylal_seismon_omicron.generate_triggers(params)

if params["doBokeh"]:

    import pylal.pylal_seismon_bokeh

    for channel in params["channels"]:
        print "Generating bokeh page for %s"%channel.station
        pylal.pylal_seismon_bokeh.channel_page(params,channel)
    sys.exit()

for channel in params["channels"]:
    print "Generating PSD for %s"%channel.station
    for segment in params["segments"]:
        print "Segment: %d-%d"%(segment[0],segment[1])
        params = pylal.pylal_seismon_utils.setPath(params,segment)
        if not params["doSkipPSD"]:
            pylal.pylal_seismon_psd.spectra(params,channel,segment)
    if params["doAnalysis"]:
        print "Analyzing PSD significance for %s"%channel.station
        pylal.pylal_seismon_psd.analysis(params,channel)

    for segment in params["segments"]:
        if params["doOmicron"]:
            print "Plotting Omicron triggers for %s"%channel.station
            params = pylal.pylal_seismon_utils.setPath(params,segment)
            pylal.pylal_seismon_omicron.plot_triggers(params,channel,segment)

for segment in params["segments"]:
    print "Running summary for Segment: %d-%d"%(segment[0],segment[1])
    params = pylal.pylal_seismon_utils.setPath(params,segment)
    #pylal.pylal_seismon_psd.channel_summary(params, segment)
print "Summaries complete!"

if params["doEarthquakesAnalysis"]:
    print "Running earthquake analysis"
    params = pylal.pylal_seismon_utils.setPath(params,[params["gpsStart"],params["gpsEnd"]])
    pylal.pylal_seismon_eqmon.run_earthquakes_analysis(params,[params["gpsStart"],params["gpsEnd"]])

if params["doHTML"]:
    htmlPage = pylal.pylal_seismon_html.summary_page(params)
    if htmlPage is not None:
        f = open(os.path.join(params["path"],"summary.html"),"w")
        f.write(htmlPage)
        f.close()

    # Public HTML output path
    params["outputPath"] = os.path.join(params["publicPath"],params["ifo"]);
    pylal.pylal_seismon_utils.mkdir(params["outputPath"])

    #os.system("rm -r %s/%s"%(params["outputPath"],params["runName"]))
    #os.system("cp -r %s %s/%s"%(params["path"],params["outputPath"],params["runName"]))

