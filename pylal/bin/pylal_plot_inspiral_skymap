#!/usr/bin/python

from math import *
from numpy import *
import matplotlib
matplotlib.use('Agg')
import pylab
import sys
from optparse import *
from pylal import webUtils

def sinc(x):
  if x !=0:
    return sin(pi*x)/pi/x 
  else: return 1.0

def nearestneighbor(RAint,DECint,colorMat,ra_dec_tuple):
  ravec = [-1,0,1]
  decvec = [-1,0,1]
  distvec = []
  pairVec = []
  RAval = ra_dec_tuple[0]*RAint/2.0/pi
  DECval =  ra_dec_tuple[1]*DECint/pi + pi/2.0
  
  for i in ravec:
    for j in decvec:
      RAdist = RAval+i*2.0*pi/RAint - floor(RAval)
      DECdist = DECval+j*pi/RAint - floor(DECval)
      distvec.append(RAdist**2+DECdist**2)
      pairVec.append([i,j])
  minIndex = distvec.index(min(distvec))
  RAindex = floor(RAval) + pairVec[minIndex][0]
  DECindex = floor(DECval) + pairVec[minIndex][1]
  return RAindex,DECindex

def interpRADEC(RAint,DECint,colorMat,ra_dec_tuple):
  ravec = [-1,0,1]
  decvec = [-1,0,1]
  distvec = []
  sincVec = []
  # Assume the pixel is centered
  RAval = ra_dec_tuple[0]*float(RAint)/2.0/pi + pi/RAint
  DECval =  (ra_dec_tuple[1]+pi/2.0)*float(DECint)/pi + pi/2.0/DECint 
  RAindex = floor(RAval)
  DECindex = floor(DECval)
  for i in ravec:
    for j in decvec:
      RAdist = RAval - RAindex + i*2.0*pi/RAint
      DECdist = DECval - DECindex + j*pi/DECint
      sincVec.append(ra_dec_tuple[2]*sinc(RAdist)*sinc(DECdist)*sinc(RAdist/3)*sinc(DECdist/3))
      if (RAindex+i) >=0 and (RAindex+i) < RAint and (DECindex+j) >=0 and (DECindex+j) < DECint:
        colorMat[RAindex+i][DECindex+j] += sincVec[-1]
      else:
        pass #print (RAindex+i), (DECindex+j)
      

  


def skymapbin(RAint,DECint,colorMat,ra_dec_tuple):
  #RAindex = floor( ra_dec_tuple[0]*float(RAint)/2.0/pi + pi/RAint)
  #DECindex = floor((ra_dec_tuple[1]+pi/2.0)*float(DECint)/pi + pi/2.0/DECint)
  #RAindex = ceil(ra_dec_tuple[0]*RAint/2/pi)
  #DECindex = ceil(ra_dec_tuple[1]*DECint/pi + pi/2)
  #RAindex,DECindex = nearestneighbor(RAint,DECint,colorMat,ra_dec_tuple)
  #print RAindex,DECindex
  #if (RAindex) >=0 and (RAindex) < RAint and (DECindex) >=0 and (DECindex) < DECint:
    #if colorMat[RAindex][DECindex] != 0: print "adding twice"
    #colorMat[RAindex][DECindex] = ra_dec_tuple[2]
  interpRADEC(RAint,DECint,colorMat,ra_dec_tuple)


def RA_DEC_PROB_tuple(file,RAint,DECint,colorMat,divisorMat):
  outfile = open(file,"r")
  for line in outfile.readlines():
    ra = float(line.split()[0])
    dec = float(line.split()[1])
    prob = float(line.split()[2])
    ra_dec_tuple = tuple((ra,dec,prob)) 
    skymapbin(RAint,DECint,colorMat,ra_dec_tuple)

def plotSkyMap(file,RAint,DECint,dir,figname,injRA,injDEC):
  colorMat = zeros((RAint,DECint),dtype='float64')
  divisorMat = ones((RAint,DECint),dtype='float64')*1e-16
  map = RA_DEC_PROB_tuple(file,RAint,DECint,colorMat,divisorMat)
  RAvec = linspace(0,2*pi,RAint)
  DECvec = linspace(-pi/2,pi/2,DECint)
  X,Y = pylab.meshgrid(RAvec,DECvec)
  pylab.figure(1)
#cmap=pylab.cm.get_cmap(name='Blues')
  pylab.pcolor(X,Y,colorMat.transpose(),shading='flat',norm=matplotlib.colors.Normalize())
#  print(size(RAvec))
#  print(size(DECvec))
#  print(size(colorMat))
#  pylab.scatter(RAvec,DECvec,colorMat)
  pylab.xlabel('RA')
  pylab.ylabel('DEC')
  pylab.title('Inspiral sky location probability')
  pylab.colorbar()
  if injRA and injDEC:
    pylab.plot([injRA],[injDEC],'o',markersize=16,markeredgecolor='red',markerfacecolor='None', markeredgewidth=2,antialiased=True)
  pylab.xlim((0,2*pi))
  pylab.ylim((-pi/2,pi/2))
  pylab.savefig(dir + '/'+ figname)
  thumb = 'thumb-'+figname
  pylab.savefig(dir + '/'+ thumb,dpi=20)
  pylab.close()



# MAIN PROGRAM


usage = """ %prog [options]
"""

parser = OptionParser( usage )

parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information and exit")

parser.add_option("-f","--map-data-file",action="store",type="string",\
    metavar=" FILE",help="use map file FILE")

parser.add_option("-e","--event-id",action="store",type="string",\
    metavar=" ID",help="The id of the event (should be unique)")

parser.add_option("-r","--ra-res",action="store",type="int",\
    metavar=" RA_RES",help="use gps time GPS")

parser.add_option("-d","--dec-res",action="store",type="int",\
    metavar=" DEC_RES",help="use DEC_RES pixels to display declination")

parser.add_option("-o","--output-path",action="store",type="string",\
    metavar=" PATH",help="use output path PATH for snr and chisq plots")

parser.add_option("-O","--page-rel-path",action="store",type="string",\
    metavar=" PATH",help="use output path relative to page")

parser.add_option("-c","--output-web-file", action="store",type="string", \
    metavar=" XML",help="file to append html tables to")

parser.add_option("-p","--page",action="store",type="string",\
    default="investigations/s5/people/followups/",metavar=" PAGE",\
    help="web page path (default 'investigations/s5/people/followups/'")

parser.add_option("-R","--injection-right-ascension",action="store",type="float",\
    metavar=" RA_INJ",help="injection has right asencion RA_INJ")

parser.add_option("-D","--injection-declination",action="store",type="float",\
    metavar=" DEC_INJ",help="injection has declination DEC_INJ")

command_line = sys.argv[1:]
(opts,args) = parser.parse_args()

if not opts.page or not opts.output_web_file or not opts.page_rel_path or not opts.dec_res or not opts.ra_res or not opts.event_id or not opts.map_data_file:
  print >> sys.stderr, "invalid command line try --help for usage"
  sys.exit(0)


webPage = webUtils.WebPage("Inspiral Source Localization for " + opts.event_id,opts.output_web_file,opts.page+"/"+opts.page_rel_path+"/")
talkBack = webUtils.talkBack(opts.output_web_file)

figname = 'inspiral_sky_map_'+ opts.event_id

plotSkyMap(opts.map_data_file,opts.ra_res,opts.dec_res,opts.page_rel_path,figname,opts.injection_right_ascension,opts.injection_declination)

webPage.appendSection("Sky Map of Inspiral Event")
webPage.lastSection.image(figname+'.png',opts.page+'/'+opts.page_rel_path+'/'+figname+'.png')
talkBack.addSummaryPlot(opts.page_rel_path+'/'+figname,'Inspiral Sky Map')
webPage.cleanWrite('IUL')
talkBack.write()
