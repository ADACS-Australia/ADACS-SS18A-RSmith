#!/usr/bin/python

__prog__ = "plot_inspiral_skymap"
__version__ = "$Revision$"


import matplotlib
matplotlib.use('Agg')
import pylab
import math
from pylal import rate
import numpy
from optparse import *
from pylal import webUtils
from pylal import InspiralUtils
import sys

def get_2d_RA_DEC_bins(RAbins=1024, DECbins=512, minRA=0, maxRA=2.0 * math.pi, minDEC = -math.pi/2.0, maxDEC = math.pi/2.0):
  """
  Given the component mass range low, high of the search it will
  return 2D bins with size bins in each direction
  """
  RAbin = rate.LinearBins(minRA, maxRA, RAbins)
  DECbin = rate.LinearBins(minDEC, maxDEC, DECbins)
  twoDRADECBin = rate.NDBins( (RAbin, DECbin) )
  return RAbin, DECbin, twoDRADECBin

def injection(RAbin, DECbin, probs, injRA=1, injDEC=1):
  RAix = RAbin[injRA]
  DECix = DECbin[injDEC]
  prob = probs[RAix, DECix]
  ix_above_prob = (probs>prob).nonzero()
  # FIXME Check that this is correct, use cos when dec convention changes
  RAint = RAbin.delta * numpy.ones(len(ix_above_prob[1]))
  DECint = DECbin.delta * numpy.ones(len(ix_above_prob[0]))
  sinTerm = numpy.cos(DECbin.centres()[ix_above_prob[0]])
  
  return (RAint * DECint * sinTerm).sum() / (4.0 * math.pi)

def plotSkyMap(map_data_file,ra_res,dec_res,figname,injRA=None,injDEC=None, stat_value=None):

  M = pylab.load(map_data_file)
  RA = M[:,0]; DEC = M[:,1]; PROB = M[:,2]
  maxIX = PROB.argmax()
  RAbin, DECbin, twoDRADECBin = get_2d_RA_DEC_bins(RAbins=ra_res, DECbins=dec_res, minRA=min(RA), maxRA=max(RA), minDEC = min(DEC), maxDEC = max(DEC))
  Z = pylab.griddata(RA, DEC, PROB, RAbin.centres(), DECbin.centres())
  pylab.figure(1)
  pylab.contourf(RAbin.centres(), DECbin.centres(), Z, 250)
  #pylab.colorbar()
  pylab.xlabel('RA')
  pylab.ylabel('DEC')
  ofile = open(figname.replace(".png",".txt"),'w')
  if injRA and injDEC:
    injRank = injection(RAbin, DECbin, Z)
    pylab.plot([injRA],[injDEC],'o',markersize=16,markeredgecolor='red',markerfacecolor='None', markeredgewidth=2,antialiased=True)
  print >>ofile, '#Prob', 'RA', 'DEC', 'injRA', 'injDEC', 'areaRank', 'stat'
  print >>ofile,  max(PROB), RA[maxIX], DEC[maxIX], injRA, injDEC, injRank, stat_value
  ofile.close() 
  pylab.xlim((min(RA),max(RA)))
  pylab.ylim((min(DEC),max(DEC)))
  pylab.gca().set_aspect(1)
  InspiralUtils.savefig_pylal(figname)
  pylab.close()

# MAIN PROGRAM


usage = """ %prog [options]
"""
parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information and exit")
parser.add_option("-f","--map-data-file",action="store",type="string",\
    metavar=" FILE",help="use map file FILE")
parser.add_option("-r","--ra-res",action="store",type="int",\
    metavar=" RA_RES",help="use gps time GPS")
parser.add_option("-d","--dec-res",action="store",type="int",\
    metavar=" DEC_RES",help="use DEC_RES pixels to display declination")
parser.add_option("-o","--output-path",action="store",type="string",\
    default="", metavar=" PATH",\
    help="path where the figures would be stored")
parser.add_option("-O","--enable-output",action="store_true",\
    default="false",  metavar="OUTPUT",\
    help="enable the generation of the html and cache documents")
parser.add_option("-T","--user-tag", action="store",type="string", \
    default=None, metavar=" USERTAG",help="user tag for the output file name")
parser.add_option("","--ifo-times",action="store",\
    type="string", default=None, metavar=" IFOTIMES",\
    help="provide ifo times for naming figure")
parser.add_option("","--ifo-tag",action="store",\
    type="string",  metavar=" IFOTAG",\
    help="ifo tag gives the information about ifo times and stage")
parser.add_option("","--gps-start-time", action="store",type="float", \
    metavar=" GPSSTARTTIME",help="gps start time (for naming figure and \
    output files)")
parser.add_option("","--gps-end-time", action="store",type="float", \
    metavar=" GPSENDTIME",help="gps end time (for naming figure and \
    output files)")
parser.add_option("-R","--injection-right-ascension",action="store",type="float",\
    metavar=" RA_INJ",help="injection has right asencion RA_INJ")
parser.add_option("-D","--injection-declination",action="store",type="float",\
    metavar=" DEC_INJ",help="injection has declination DEC_INJ")
parser.add_option("-S","--stat-value",action="store",type="float",default=0.0,\
    metavar=" STAT",help="injection has found stat value STAT")

command_line = sys.argv[1:]
(opts,args) = parser.parse_args()

if not opts.output_path or not opts.dec_res or not opts.ra_res or not opts.map_data_file:
  print >> sys.stderr, "invalid command line try --help for usage"
  sys.exit(0)

opts = InspiralUtils.initialise(opts, __prog__, __version__)
fnameList = []
tagList = []

figname = InspiralUtils.set_figure_name(opts,"skylocation")

plotSkyMap(opts.map_data_file,opts.ra_res,opts.dec_res,figname,opts.injection_right_ascension,opts.injection_declination, opts.stat_value)

fnameList.append(figname)
tagList.append("Inspiral sky location probability")

if opts.enable_output:
  html_filename = InspiralUtils.write_html_output(opts, args, fnameList, \
    tagList)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)
