#!/usr/bin/python

import sys
import exceptions 
from optparse import *
import glob
import re

from glue import lal
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from pylal.tools import XLALCalculateEThincaParameter

from pylab import*
import pylal.itertools
import numpy
################################################################################
usage= """
usage: %prog [options]

Calculate likelihood ratio and assign ranking based on it to each 
candidate trigger.
"""
###############################################################################
# Options to read in Input
###############################################################################
parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
parser.add_option("-z","--zerolag-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB zero lag  thinca files to read" )
parser.add_option("-s","--slides-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB time slides thinca files to read" )
parser.add_option("-i","--inj-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB thinca files with injections to read" )

parser.add_option("-c","--zerolag-cache-file",action="store",type="string",\
    default=None, metavar="ZEROLAGCACHEFILE",help="name of the cache file including the path" )
parser.add_option("-I","--injection-cache-file",action="store",type="string",\
    default=None, metavar="INJECTIONCACHEFILE",help="name of the injection cache files including the path given as a string with comma delimeters" )

# Options to select ifo types.

parser.add_option("-B", "--h1-triggers",action="store_true", default=False,\
    help="input files contain triggers from H1")

parser.add_option("-C", "--h2-triggers",action="store_true", default=False,\
    help="input files contain triggers from H2")

parser.add_option("-D", "--l1-triggers",action="store_true", default=False,\
    help="input files contain triggers from L1")

parser.add_option("-E", "--g1-triggers",action="store_true", default=False,\
    help="input files contain triggers from G1")


# Options to select paramters for calculation of p(c|0), p(c|h) and likelihood ratio. 

parser.add_option("-S","--statistic",action="store",default='snr',\
    type="string",\
    help="choice of statistic used in making plots, valid arguments are: "             "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr, " 
    "bitten_l, bitten_lsq")

parser.add_option("-e","--epsilon",action="store",type="float",\
    default=0.3, metavar=" EPSILON", help="radius of the hypersphere in the parameter space that defines closeness of events" )

parser.add_option("-N","--numslides", action="store",type="int",\
    default = 0, metavar="NUMSLIDES", help="number of time slides performed, must match the corresponding parameter from the .ini file" )

parser.add_option("-k","--kappa", action="store",type="float",\
    default = 0, metavar="KAPPA", help="The value of kappa to be supplied to perform distance cut" )

# Plotting options

parser.add_option("-P","--plot-simethinca",action="store_true",\
    default=False, help ="Shows the plot of simple ethinca param for different coincs")


parser.add_option("-p","--plot-distcut",action="store_true",\
    default=False, help ="Shows the plot of effective distance difference based on distance cut")


parser.add_option("-M","--plot-mchirp",action="store_true",\
    default=False, help ="Shows the plot of chirp mass difference based on distance cut")



parser.add_option("-L","--likelihood",action="store_true",\
    default=False, help ="Calculates the Likelihood for different IFOs and writes them in a file.")


parser.add_option("-V","--verbose",action="store_true",default=False,\
    help="print additional information when running" )

parser.add_option("-F","--figure-name",action="store", type = "string",\
    default = None, metavar = "NAME", help="saves figure with NAME.png" )

parser.add_option("-o","--show",action="store_true",default=False,\
    help="Display the plots on the screen" )

parser.add_option("-b","--slide-bins",action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the histogram of background")

parser.add_option("-j","--injection-bins",action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the histogram of injections")


(opts,args) = parser.parse_args()

######################################################################
# Construct IFO pairs


ifo_list = [ifo for ifo in ("G1", "H1", "H2", "L1") \
            if getattr(opts, "%s_triggers" % ifo.lower())]

ifo_combos = CoincInspiralUtils.get_ifo_combos(ifo_list)

########################################################################
# Class to hold slides and triggers and generate relevant plots.
########################################################################
def distcut(coinc_a,coinc_b):
    
  dist_cut_array=(coinc_b -  coinc_a)*2.0/(coinc_a +  coinc_b)
  return dist_cut_array

def normalized_hist(Unormalised_array, bins=None):
  if bins:
    (y_param, x_param, patches) = hist(Unormalised_array, bins)
  else:
    (y_param, x_param, patches) = hist(Unormalised_array)
  clf()
  y_norm = y_param*1.0/sum(y_param)
  return (y_norm, x_param)


class plotdata:

  """ Class to do plotting of time slides and injections for
    range of parameters. """


  def plotroutine(self, ifos, coinc_slides, coinc_inj, param, slide_bins, inj_bins):
    """ 
    Function that makes histograms of a given parameter for injections and timeslides
    @params: ifos a list whose elements are the lists of ifos such as ['H1', 'H2']
    @params: coinc_a, coinc_b are instances of CoincInspiralUtils.CoincInspiralTable() class that contain
    time slide and injection triggers respectively
    @params: param is a name of the parameter to be plotted
    if param is 'simethinca' the histograms of its value are produced for each pair of interferometers
    otherwise the histogram of (param(ifo2)-param(ifo1))*2/(param(ifo2) + param(ifo1)) are produced
    @params: slide_bins and inj_bins are number of bins in the histogram for time slides and injections respectively
    """ 
        
    for ifolist in ifos:
      for i in range(len(ifolist)):
        for j in range(len(ifolist)):
          if i < j:
            hist_check_slides = 1
            hist_check_inj = 1
	    if param == 'simethinca':
              coinc_slides_sim = coinc_slides.coinctype(ifolist).getSimpleEThincaValues([ifolist[i], ifolist[j]])
	      coinc_inj_sim = coinc_inj.coinctype(ifolist).getSimpleEThincaValues([ifolist[i], ifolist[j]])

              if len(coinc_slides_sim) > 1:  
	        (y_slide, x_slide) = normalized_hist(coinc_slides_sim, slide_bins)
              else:
                hist_check_slides = 0

              if len(coinc_inj_sim) > 1:  
	        (y_inj, x_inj) = normalized_hist(coinc_inj_sim, inj_bins)
              else:
                hist_check_inj = 0

	    else:
	      coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
	      coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
	      coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
              coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
              dist_cut_slide = distcut(coinc_slides_fir, coinc_slides_sec)
	      dist_cut_inj = distcut(coinc_inj_fir, coinc_inj_sec)
  
	      if len(dist_cut_slide) > 1:
	        (y_slide, x_slide) = normalized_hist(dist_cut_slide, slide_bins)
              else:
                hist_check_slides = 0 
 
	      if len(dist_cut_inj) > 1:
	        (y_inj, x_inj) = normalized_hist(dist_cut_inj, inj_bins)
              else:
                hist_check_inj = 0  
            
            if (hist_check_slides == 1) and (hist_check_inj == 1): 
              slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]),color="k")
	      hold(True)
              inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]),color="r")
	      legend([inj_val[0],slide_val[0]],["Injections","Background"],loc=0)
              coinc_label=''
	      for ifo in ifolist:
	        coinc_label+=ifo
              if param == 'simethinca':
	        xlabel(coinc_label + ':' + ' ' + str(param) + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
	        savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
              else:
	        xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
	        savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
	      figure()
            else:
              if hist_check_slides == 1:
                slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]),color="k")
                legend([slide_val[0]],["Background"],loc=0)
                coinc_label=''
                for ifo in ifolist:
                  coinc_label+=ifo
                if param == 'simethinca':
                  xlabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifolist[i]) + '-' + str(ifolist[j]))
                  savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
                else:
                  xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
                  savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
                figure()
              else:
                if hist_check_inj == 1:
                  inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]),color="r")
                  legend([inj_val[0]],["Injections"],loc=0)
                  coinc_label=''
                  for ifo in ifolist:
                    coinc_label+=ifo
                  if param == 'simethinca':
                    xlabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifolist[i]) + '-' + str(ifolist[j]))
                    savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
                  else:
                    xlabel(coinc_label + ':' + ' ' + str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
                    savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
                  figure()
 

###############################################################################################
# read in the zero lag  and time slides cache file
if opts.zerolag_cache_file:
  trigCache = lal.Cache().read(opts.zerolag_cache_file)
  slides_cache = trigCache.sieve(description = 'COIRE_SLIDE')
  zero_lag_cache = trigCache.sieve(description = 'COIRE_H')
  # zero lag files
  zerolagfiles = []
  zerolagfiles = zero_lag_cache.pfnlist()
  print zerolagfiles
  if len(zerolagfiles) < 1:
    print >>sys.stderr, "The " +  opts.zerolag_cache_file +  " contains no files zero lag files"
    sys.exit(1)

  # time slides files  
  slidesfiles = []
  slidesfiles =  slides_cache.pfnlist()
  print slidesfiles
  if len(zerolagfiles) < 1:
    print >>sys.stderr, "The " + opts.zerolag_cache_file  + " contains no time slides files "
    sys.exit(1)
# read in the injections cache file

if opts.injection_cache_file:
  list_cache_files=opts.injection_cache_file.split(",")
  injfiles = []
  for cache_file in list_cache_files:
    trigCache = lal.Cache().read(cache_file)
    entrylist = trigCache.sieve(description = 'COIRE').pfnlist()
    for entry in entrylist:
      if re.search('FOUND', entry):
        injfiles.append(entry) 
    
  print injfiles
  if len(injfiles) < 1:
    print >>sys.stderr, "The " + opts.injection_cache_file  + " contain(s) no injection files "
    sys.exit(1)
 

   
    











####################################################################
#glob the list of files to read in

# Zero lag  Files
if opts.zerolag_glob:
  zerolagfiles = []      
  zerolagfiles = glob.glob(opts.zerolag_glob)  
  if len(zerolagfiles) < 1:    
    print >>sys.stderr, "The glob for " + opts.zerolag_glob + " returned no files"
    sys.exit(1)  

# Time slides Files
if opts.slides_glob:      
  slidesfiles = []  
  slidesfiles = glob.glob(opts.slides_glob)  
  if len(slidesfiles) < 1:    
    print >>sys.stderr, "The glob for " + opts.slides_glob + " returned no files" 
    sys.exit(1)    
   
 
# Injection Files
if opts.inj_glob:
  injfiles = []
  injfiles = glob.glob(opts.inj_glob)
  if len(injfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.inj_glob + "returned no files " 
    sys.exit(1)

# check that statistic is OK:
if opts.statistic not in ('snr', 'snr_over_chi', 's3_snr_chi_stat', 'effective_snr', 'bitten_lsq', 'bitten_l'):
  print >>sys.stderr, "--statistic must be one of"  
  print >>sys.stderr, "(snr|snr_over_chi|s3_snr_chi_stat|effective_snr|bitten_l)"
  sys.exit(1)

# check if number of slides is given
if opts.numslides == 0:
  print >> sys.stderr, "--numslides must be specified"
  sys.exit(1)


statistic = CoincInspiralUtils.coincStatistic( opts.statistic) 


###############################################################################
# read in zero lag coinc triggers

zerolagTriggers = None

zerolagTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(zerolagfiles,mangle_event_id=False)

# construct the zero lag coincs 
zerolagCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic)

# construct zero lag coincs of type:

#zerolagCoincType = CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic).coinctype(["H1","L1"])
#print zerolagCoincType


# read in time slides triggers 

slidesTriggers = None

slidesTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(slidesfiles,mangle_event_id=True)

# construct the time slides coincs
slidesCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic)

# read in injections sngl and sim inspirals

injectionTriggers = None

injectionTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(injfiles,mangle_event_id=True)

simTriggers = None

simTriggers = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)   


#construct injection coincs and add sim inspirals

injectionCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic)

injectionCoincTriggers.add_sim_inspirals(simTriggers)





######################################
#Experimental area

#counter=0
#file=open('slidestriggers', 'w')
#for trigger in slidesCoincTriggers:
#  ifo, ifolist = trigger.get_ifos()
#  file.write(str(ifo) + '\n')
#  counter+=1
#print str(counter)
#file.close()

#for candidate in slidesCoincTriggers:
  #  ethinca=XLALCalculateEThincaParameter(candidate.H1, candidate.L1)
  #c_ifo, ifolist = candidate.get_ifos()
  #if c_ifo=='H1L1':
  #  simethinca = CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.L1)
  #  if simethinca > 100.0:
  #    CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.L1)
  #    print simethinca

  #  d_tmp1=1.0 - simethinca**2
  #  d_tmp2=1.0 - simethinca**2/4.0
  #  d_tmp3=simethinca**2/4.0
  #print simethinca




###################################################################################
# calculate the likelihood ratio for each of zerolagCoincTriggers
####################################################################################


if opts.likelihood:

  BackgroundFractionFile=open('BackgroundFraction', 'w')
  LikelihoodFile=open('Likelihood', 'w')
  Nslides=opts.numslides
  for candidate in zerolagCoincTriggers:
    c_ifos,ifolist=candidate.get_ifos()
    # calculating the false alarm probability
    slide_array=numpy.zeros(2*Nslides)
    slides_within_epsilon = slidesCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon)

    for slide in range(1, Nslides+1):
      #slideTrigger_forward = CoincInspiralUtils.coincInspiralTable()
      #slideTriggers_backward = CoincInspiralUtils.coincInspiralTable()
      slideTriggers_forward = slides_within_epsilon.getslide(slide)
      slideTriggers_backward = slides_within_epsilon.getslide(-slide)
      if len(slideTriggers_forward) >= 1:
        slide_array[slide - 1] = 1.0
      if len(slideTriggers_backward) >= 1:
        slide_array[Nslides-1+slide] = 1.0

    FalseAlarmProb = sum(slide_array)/float(2*Nslides)

    # calculating the detection probability for each of zerolagTriggers
    Ntotal_inj=0
    for trigger in injectionCoincTriggers:
      trig_ifos,trig_ifolist = trigger.get_ifos()
      if c_ifos == trig_ifos:
        Ntotal_inj += 1

    injections_within_epsilon = injectionCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon)
  
    nevents_inj = len(injections_within_epsilon)

    if Ntotal_inj > 0:
      DetectionProb = float(nevents_inj) / float(Ntotal_inj)
    else:
      DetectionProb = 0.0

    # Calculating likelihood ratio
    if FalseAlarmProb > 0: 
      Likelihood = DetectionProb / FalseAlarmProb
    else:
      Likelihood = -1.0 

    if opts.verbose:
      print str(Likelihood)

    #calculating BackgroundFraction - the fraction of background triggers within epsilon distance from the given candidate
    #of all background triggers in all of the timeslides
    Ntotal_noise=0
    for trigger in slidesCoincTriggers:
      trig_ifos,trig_ifolist=trigger.get_ifos()
      if c_ifos==trig_ifos:
        Ntotal_noise+=1

    slides_within_epsilon =CoincInspiralUtils.coincInspiralTable()
    slides_within_epsilon=slidesCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon)

    nevents_noise = len(slides_within_epsilon)

    if Ntotal_noise > 0:
       BackgroundFraction = float(nevents_noise)/float(Ntotal_noise)
    else:
       BackgroundFraction = -1.0

    # Calculating the ratio of DetectionProb to BackgroundFraction
    if BackgroundFraction > 0:
      DetectionBackgroundRatio= DetectionProb/BackgroundFraction
    else:
      DetectionBackgroundRatio = -1.0

    if opts.verbose:
      print str(DetectionBackgroundRatio)

    # writing the false alarm probability, the detection probability and the likelihood ration into file
    LikelihoodFile.write('%d\t%s\t%e\t%e\t%e\n' % (candidate.event_id, c_ifos, FalseAlarmProb, DetectionProb, Likelihood))

    # writing the BackgroundFraction, DetectionProb and DetectionBackgroundRatio  into file
    
    BackgroundFractionFile.write('%d\t%s\t%e\t%e\t%e\n' % (candidate.event_id, c_ifos, BackgroundFraction, DetectionProb,\
    DetectionBackgroundRatio))
   


 
  LikelihoodFile.close()
  BackgroundFractionFile.close()
###################################################################################
# Plot the various parameters for time slides and injections
###################################################################################


if opts.plot_simethinca:
  plotdata().plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'simethinca', opts.slide_bins, opts.injection_bins)

if opts.plot_distcut:
  plotdata().plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'eff_distance', opts.slide_bins, opts.injection_bins)

if opts.plot_mchirp:
  plotdata().plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'mchirp', opts.slide_bins, opts.injection_bins)
   
    
if opts.show:
  show()










