#!/usr/bin/python

import sys
import exceptions 
from optparse import *
import glob

from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from pylal.tools import XLALCalculateEThincaParameter

from pylab import*
import pylal.itertools
import numpy
################################################################################
usage= """
usage: %prog [options]

Calculate likelihood ratio and assign ranking based on it to each 
candidate trigger.
"""
###############################################################################
# Options to read in Input
###############################################################################
parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
parser.add_option("-z","--zerolag-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB zero lag  thinca files to read" )
parser.add_option("-s","--slides-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB time slides thinca files to read" )
parser.add_option("-i","--inj-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB thinca files with injections to read" )


# Options to select ifo types.

parser.add_option("-B", "--h1-triggers",action="store_true", default=False,\
  help="input files contain triggers from H1")

parser.add_option("-C", "--h2-triggers",action="store_true", default=False,\
  help="input files contain triggers from H2")

parser.add_option("-D", "--l1-triggers",action="store_true", default=False,\
  help="input files contain triggers from L1")

parser.add_option("-E", "--g1-triggers",action="store_true", default=False,\
  help="input files contain triggers from G1")


# Options to select paramters for calculation of p(c|0), p(c|h) and likelihood ratio. 

parser.add_option("-S","--statistic",action="store",default='snr',\
    type="string",\
    help="choice of statistic used in making plots, valid arguments are: "             "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr, " 
    "bitten_l, bitten_lsq")

parser.add_option("-e","--epsilon",action="store",type="float",\
    default=0.3, metavar=" EPSILON", help="radius of the hypersphere in the parameter space that defines closeness of events" )

parser.add_option("-N","--numslides", action="store",type="int",\
    default = 0, metavar="NUMSLIDES", help="number of time slides performed, must match the corresponding parameter from the .ini file" )

parser.add_option("-k","--kappa", action="store",type="float",\
    default = 0, metavar="KAPPA", help="The value of kappa to be supplied to perform distance cut" )

# Plotting options

parser.add_option("-P","--plot-simethinca",action="store_true",\
    default=False, help ="Shows the plot of simple ethinca param for different coincs")


parser.add_option("-p","--plot-distcut",action="store_true",\
    default=False, help ="Shows the plot of effective distance difference based on distance cut")


parser.add_option("-M","--plot-mchirp",action="store_true",\
    default=False, help ="Shows the plot of chirp mass difference based on distance cut")


parser.add_option("-V","--verbose",action="store_true",default=False,\
    help="print additional information when running" )

parser.add_option("-F","--figure-name",action="store", type = "string",\
    default = None, metavar = "NAME", help="saves figure with NAME.png" )

parser.add_option("-o","--show",action="store_true",default=False,\
    help="Display the plots on the screen" )




(opts,args) = parser.parse_args()

######################################################################
# Construct IFO pairs

statistic = CoincInspiralUtils.coincStatistic(opts.statistic)

ifo_list = [ifo for ifo in ("G1", "H1", "H2", "L1") \
            if getattr(opts, "%s_triggers" % ifo.lower())]

ifo_combos = []
for num_ifos in range(2, len(ifo_list) + 1):
  ifo_combos.extend(list(pylal.itertools.choices(ifo_list, num_ifos)))


####################################################################
# Define Distance cut

def distcut(coinc_a, coinc_b):
  dist_cut_array = []
  dist_cut_array.append((coinc_a -  coinc_b)*2.0/(coinc_a +  coinc_b))
  return dist_cut_array


###################################################################
# Define Normalisation

def normalized_hist(Unormalised_array, bins=None):
  if bins:
    (y_param, x_param, patches) = hist(Unormalised_array,bins)
  else:
    (y_param, x_param, patches) = hist(Unormalised_array)
  clf()
  y_norm = y_param*1.0/sum(y_param)
  return (y_norm, x_param)

####################################################################
#glob the list of files to read in

# Zero lag  Files
if opts.zerolag_glob:  
  zerolagfiles = []      
  zerolagfiles = glob.glob(opts.zerolag_glob)  
  if len(zerolagfiles) < 1:    
    print >>sys.stderr, "The glob for " + opts.zerolag_glob + " returned no files"
    sys.exit(1)  

# Time slides Files
if opts.slides_glob:      
  slidesfiles = []  
  slidesfiles = glob.glob(opts.slides_glob)  
  if len(slidesfiles) < 1:    
    print >>sys.stderr, "The glob for " + opts.slides_glob + " returned no files" 
    sys.exit(1)    
   
 
# Injection Files
if opts.inj_glob:
  injfiles = []
  injfiles = glob.glob(opts.inj_glob)
  if len(injfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.inj_glob + "returned no files " 
    sys.exit(1)

# check that statistic is OK:
if (opts.statistic != 'snr') and (opts.statistic != 'snr_over_chi') \
    and (opts.statistic != 's3_snr_chi_stat') \
    and (opts.statistic != 'effective_snr')\
    and (opts.statistic != 'bitten_lsq')\
    and (opts.statistic != 'bitten_l'):  
  print >>sys.stderr, "--statistic must be one of"  
  print >>sys.stderr, "(snr|snr_over_chi|s3_snr_chi_stat|effective_snr|bitten_l)"
  sys.exit(1)

# check if number of slides is given
if opts.numslides == 0:
  print >> sys.stderr, "--numslides must be specified"
  sys.exit(1)


statistic = CoincInspiralUtils.coincStatistic( opts.statistic) 


###############################################################################
# read in zero lag coinc triggers

zerolagTriggers = None

zerolagTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(zerolagfiles,mangle_event_id=False)

# construct the zero lag coincs 
zerolagCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic)

# construct zero lag coincs of type:

#zerolagCoincType = CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic).coinctype(["H1","L1"])
#print zerolagCoincType


# read in time slides triggers 

slidesTriggers = None

slidesTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(slidesfiles,mangle_event_id=True)

# construct the time slides coincs
slidesCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic)

# read in injections sngl and sim inspirals

injectionTriggers = None

injectionTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(injfiles,mangle_event_id=True)

simTriggers = None

simTriggers = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)   


#construct injection coincs and add sim inspirals

injectionCoincTriggers= \
CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic)

injectionCoincTriggers.add_sim_inspirals(simTriggers)





######################################
#Experimental area

#counter=0
#file=open('slidestriggers', 'w')
#for trigger in slidesCoincTriggers:
#  ifo, ifolist = trigger.get_ifos()
#  file.write(str(ifo) + '\n')
#  counter+=1
#print str(counter)
#file.close()

#for candidate in zerolagCoincTriggers:
#  ethinca=XLALCalculateEThincaParameter(candidate.H1, candidate.L1)
#  simethinca=CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.L1)
#  d_tmp1=1.0 - simethinca**2
#  d_tmp2=1.0 - simethinca**2/4.0
#  d_tmp3=simethinca**2/4.0
#  print ethinca, simethinca, d_tmp1, d_tmp2, d_tmp3 




###################################################################################
# calculate the likelihood ratio for each of zerolagCoincTriggers
####################################################################################
FalseProbFile=open('FalseProbFile', 'w')
DetectionProbFile=open('DetectionProbFile', 'w')
LikelihoodFile=open('Likelihood', 'w')

for candidate in zerolagCoincTriggers:
  c_ifos,ifolist=candidate.get_ifos()
  #calculating the false alarm probability
  Ntotal_noise=0
  Ntotal_inj=0
  for trigger in slidesCoincTriggers:
    trig_ifos,trig_ifolist=trigger.get_ifos()
    if c_ifos==trig_ifos:
      Ntotal_noise+=1
    
  slides_within_epsilon =CoincInspiralUtils.coincInspiralTable()   
  slides_within_epsilon=slidesCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon) 
 
  nevents_noise = len(slides_within_epsilon) 
  
  if Ntotal_noise > 0:
     FalseProb = float(nevents_noise)/float(Ntotal_noise)
  else:
     FalseProb = -1.0
  # writing the false alarm probability into the file
  if opts.verbose:
    print str(candidate.event_id)
  FalseProbFile.write(str(candidate.event_id) + ' ')
  if opts.verbose:
    print str(c_ifos)
  FalseProbFile.write(str(c_ifos) + ' ')
  if opts.verbose:
    print str(FalseProb), nevents_noise, Ntotal_noise
  FalseProbFile.write(str(FalseProb) + '\n')

  # calculating the detection probability for each of zerolagTriggers
  Ntotal_inj=0
  for trigger in injectionCoincTriggers:
    trig_ifos,trig_ifolist=trigger.get_ifos()
    if c_ifos==trig_ifos:
      Ntotal_inj+=1

  injections_within_epsilon =CoincInspiralUtils.coincInspiralTable()
  injections_within_epsilon=injectionCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon)

  nevents_inj = len(injections_within_epsilon)

  if Ntotal_inj > 0:
     DetectionProb = float(nevents_inj)/float(Ntotal_inj)
  else:
     DetectionProb = 0.0

  #writing the detection alarm probability into  the file
  DetectionProbFile.write(str(candidate.event_id) + ' ')
  DetectionProbFile.write(str(c_ifos) + ' ')
  if opts.verbose:
    print str(DetectionProb), nevents_inj, Ntotal_inj
  DetectionProbFile.write(str(DetectionProb) + '\n')

  # Calculating likelihood ration
  if FalseProb > 0: 
    Likelihood = DetectionProb/FalseProb
  else:
    Likelihood = -1.0 
  # writing the likelihood ration into the file
  LikelihoodFile.write(str(candidate.event_id) + ' ')
  LikelihoodFile.write(str(c_ifos) + ' ')
  if opts.verbose:
    print str(Likelihood)
  LikelihoodFile.write(str(Likelihood) + '\n')


FalseProbFile.close()
DetectionProbFile.close()
LikelihoodFile.close()


###########################################################################################################
# Calculate the False alarm probability treating each time slide as a separate trial
##########################################################################################################
FalseAlarmProbFile=open('FalseAlarmProbFile', 'w')
Nslides=opts.numslides

for candidate in zerolagCoincTriggers:
  slide_array=numpy.zeros(2*Nslides)
  slides_within_epsilon = CoincInspiralUtils.coincInspiralTable()
  slides_within_epsilon = slidesCoincTriggers.getTriggersWithinEpsilon(candidate, opts.epsilon)

  for slide in range(1, Nslides+1):
    #slideTrigger_forward = CoincInspiralUtils.coincInspiralTable()
    #slideTriggers_backward = CoincInspiralUtils.coincInspiralTable()
    slideTrigger_forward = None
    slideTriggers_backward = None
    slideTriggers_forward = slides_within_epsilon.getslide(slide)
    slideTriggers_backward = slides_within_epsilon.getslide(-slide)
    if len(slideTriggers_forward) >= 1:
      slide_array[slide - 1]=1.0
    if len(slideTriggers_backward) >= 1:
      slide_array[Nslides-1+slide]=1.0

  FalseAlarmProb = sum(slide_array)/float(2*Nslides)
  
  # writing the false alarm probability into the file
  if opts.verbose:
    print str(candidate.event_id)
  FalseAlarmProbFile.write(str(candidate.event_id) + ' ')
  c_ifos,ifolist = candidate.get_ifos()
  if opts.verbose:
    print str(c_ifos)
  FalseAlarmProbFile.write(str(c_ifos) + ' ')
  if opts.verbose:
    print str(FalseAlarmProb), sum(slide_array), 2*Nslides
  FalseAlarmProbFile.write(str(FalseAlarmProb) + '\n')
    
      
FalseProbFile.close()

if opts.plot_simethinca:
  for ifo in ifo_combos:
    if len(ifo) >  2:
      pass

    else:
      slides_simethinca = CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(ifo).\
      getSimpleEThincaValues(ifo)
  
      inj_simethinca  = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(ifo).\
      getSimpleEThincaValues(ifo)

      print "Plot will be generated for the following ifos", ifo
    
      if len(slides_simethinca):
        (y_slide, x_slide) = normalized_hist(slides_simethinca)
            
      if len(inj_simethinca):
        (y_inj, x_inj) = normalized_hist(inj_simethinca)
      
   
      slide_val = bar(x_slide,y_slide,width=0.05,color="r")
      hold(True) 
      inj_val = bar(x_inj,y_inj,width=0.05,color="k")
      legend([slide_val[0],inj_val[0]],['Backgorund','Injections'],loc = 0)
      xlabel('Simple Ethinca for' + '_' + str(ifo[0]) + '_' + str(ifo[1]) + '_' + 'injections')
      ylabel('Probability (density)')
      if opts.figure_name:
        savefig(opts.figure_name + "_" + str(ifo[0]) + '_' + str(ifo[1]) + '.png')
      figure()

if opts.plot_distcut:
   
  for ifo in ifo_combos:
    if len(ifo) > 2:
      pass
    else:
      slides_dist_a =  CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[0]).get_column('eff_distance')
      slides_dist_b =  CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[1]).get_column('eff_distance')      
      inj_dist_a = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[0]).get_column('eff_distance')
      inj_dist_b = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[1]).get_column('eff_distance')
      
      print "Plots generated for following", ifo


      slides_dist_cut = distcut( slides_dist_a, slides_dist_b)

      inj_dist_cut = distcut( inj_dist_a, inj_dist_b)

    
      if len(slides_dist_cut):
        (y_slide, x_slide) = normalized_hist(slides_dist_cut)

      if len(inj_dist_cut ):
        (y_inj, x_inj) = normalized_hist(inj_dist_cut)

    
      slide_val = bar(x_slide,y_slide,width=0.05,color="r")
      hold(True)
      inj_val =  bar(x_inj,y_inj,width=0.05,color="k")
      legend([slide_val[0],inj_val[0]],["Injections","Background"],loc=0)
      xlabel('eff_dist_difference' + '_' + str(ifo[0]) + "_" + str(ifo[1]) + '_' + 'injections' + '.png')
      ylabel('Probability (density)')
      if opts.figure_name:
        savefig(opts.figure_name + "_" + str(ifo[0]) + "_" + str(ifo[1]) )
      figure()

 

if opts.plot_mchirp:

  for ifo in ifo_combos:
    if len(ifo) > 2:
      pass
    else:
      slides_dist_a =  CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[0]).get_column('mchirp')
      slides_dist_b =  CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[1]).get_column('mchirp')
      inj_dist_a = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[0]).get_column('mchirp')
      inj_dist_b = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(ifo).\
                        getsngls(ifo[1]).get_column('mchirp')

      print "Plots generated for following", ifo


      slides_dist_cut = distcut( slides_dist_a, slides_dist_b)

      inj_dist_cut = distcut( inj_dist_a, inj_dist_b)


      if len(slides_dist_cut):
        (y_slide, x_slide) = normalized_hist(slides_dist_cut)

      if len(inj_dist_cut ):
        (y_inj, x_inj) = normalized_hist(inj_dist_cut)


      slide_val = bar(x_slide,y_slide,width=0.05,color="r")
      hold(True)
      inj_val =  bar(x_inj,y_inj,width=0.05,color="k")
      legend([slide_val[0],inj_val[0]],["Injections","Background"],loc=0)
      xlabel('chirp_mass_difference' + '_' + str(ifo[0]) + "_" + str(ifo[1]) + '_' + 'injections' + '.png')
      ylabel('Probability (density)')
      if opts.figure_name:
        savefig(opts.figure_name + "_" + str(ifo[0]) + "_" + str(ifo[1]) )
      figure()




if opts.show:
  show()










