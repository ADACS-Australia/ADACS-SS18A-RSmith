#!/usr/bin/env python

# Demonstrates use of the pylal.bayespputils module for producing stats/plots based on results of
# parameter estimation codes.

import sys
import os

from math import ceil,floor
import cPickle as pickle

from optparse import OptionParser
from ConfigParser import ConfigParser
from time import strftime

import numpy as np
from numpy import array,exp,cos,sin,arcsin,arccos,sqrt,size,mean,column_stack

import matplotlib
matplotlib.use("Agg")
from matplotlib import pyplot as plt

from pylal import SimInspiralUtils
from pylal import bayespputils as bppu
from pylal import git_version



__author__="Ben Aylott <benjamin.aylott@ligo.org>, John Veitch <john.veitch@ligo.org>"
__version__= "git id %s"%git_version.id
__date__= git_version.date


def pickle_to_file(obj,fname):
    """
    Pickle/serialize 'obj' into 'fname'.
    """
    filed=open(fname,'w')
    pickle.dump(obj,filed)
    filed.close()
#

def oneD_dict_to_file(dict,fname):
    filed=open(fname,'w')
    for key,value in dict.items():
        filed.write("%s %s\n"%(str(key),str(value)) )


def cbcBayesPostProc(outdir,data,oneDMenu,twoDGreedyMenu,GreedyRes,confidence_levels,twoDplots,injfile=None,eventnum=None,skyres=None,bayesfactornoise=None,bayesfactorcoherent=None):
    """
    This is a demonstration script for using the functionality/data structures
    contained in pylal.bayespputils . It will produce a webpage from a file containing
    posterior samples generated by the parameter estimation codes with 1D/2D plots
    and stats from the marginal posteriors for each parameter/set of parameters.
    """

    if eventnum is not None and injfile is None:
        print "You specified an event number but no injection file. Ignoring!"

    if data is None:
        print 'You must specify an input data file'
        exit(1)
    #
    if outdir is None:
        print "You must specify an output directory."
        exit(1)

    if not os.path.isdir(outdir):
        os.makedirs(outdir)
    #
    
    commonOutputFileObj=open(data[0])

    #Select injections using tc +/- 0.1s if it exists or eventnum from the injection file
    if injfile:
        import itertools
        injections = SimInspiralUtils.ReadSimInspiralFromFiles([injfile])
        if(eventnum is not None):
            if(len(injections)<eventnum):
                print "Error: You asked for event %d, but %s contains only %d injections" %(eventnum,injfile,len(injections))
                sys.exit(1)
            else:
                injection=injections[eventnum]
        else:
            if(len(injections)<1):
                print 'Warning: Cannot find injection with end time %f' %(means[2])
            else:
                injection = itertools.ifilter(lambda a: abs(a.get_end() - means[2]) < 0.1, injections).next()

    #Create an instance of the posterior class using the posterior values loaded
    #from the file and any injection information (if given).
    pos = bppu.Posterior(commonOutputFileObj,SimInspiralTableEntry=injection)

    ##Print some summary stats for the user...##
    #Number of samples
    print "Number of posterior samples: %i"%len(pos)    
    # Means
    print 'Means:'
    print str(pos.means())
    #Median
    print 'Median:'
    print str(pos.medians())
    #maxL
    print 'maxL'
    print str(pos.maxL())
    
    ## Load Bayes factors ##
    # Add Bayes factor information to summary file #
    if bayesfactornoise is not None:
        bfile=open(bayesfactornoise,'r')
        BSN=bfile.read()
        bfile.close()
        print 'BSN: %s'%BSN
    if bayesfactorcoherent is not None:
        bfile=open(bayesfactorcoherent,'r')
        BCI=bfile.read()
        bfile.close()
        print 'BCI: %s'%BCI

    
    ## Generate plot/stats of skymap ##
    #If sky resolution parameter has been specified try and create sky map...
    skyreses=None
    sky_injection_cl=None
    if skyres is not None and 'ra' in pos.names() and 'dec' in pos.names():
        #Greedy bin sky samples (ra,dec) into a grid on the sky which preserves
        #?
        top_ranked_sky_pixels,sky_injection_cl,skyreses,injection_area=bppu.greedy_bin_sky(pos,skyres,confidence_levels)
        print "BCI for sky area:"
        print skyreses
        #Create sky map in outdir
        bppu.plot_sky_map(top_ranked_sky_pixels,outdir)


    ## Generate plots/stats for 2D marginal posteriors ##
    #Loop over parameter pairs in twoDGreedyMenu and bin the sample pairs
    #using a greedy algorithm . The ranked pixels (toppoints) are used
    #to plot 2D histograms and evaluate Bayesian confidence intervals.

    margdir=os.path.join(outdir,'2D')
    if not os.path.isdir(margdir):
        os.makedirs(margdir)

    twoDKdePaths=[]
    BCItablelines=[]
    for par1_name,par2_name in twoDGreedyMenu:
        par1_name=par1_name.lower()
        par2_name=par2_name.lower()
        print "Binning %s-%s to determine confidence levels ..."%(par1_name,par2_name)
        try:
            pos[par1_name.lower()]
        except KeyError:
            print "No input chain for %s, skipping binning."%par1_name
            continue
        try:
            pos[par2_name.lower()]
        except KeyError:
            print "No input chain for %s, skipping binning."%par2_name
            continue
        #Bin sizes
        try:
            par1_bin=GreedyRes[par1_name]
        except KeyError:
            print "Bin size is not set for %s, skipping %s/%s binning."%(par1_name,par1_name,par2_name)
            continue
        try:
            par2_bin=GreedyRes[par2_name]
        except KeyError:
            print "Bin size is not set for %s, skipping %s/%s binning."%(par2_name,par1_name,par2_name)
            continue

        #Form greedy binning input structure
        greedy2Params={par1_name:par1_bin,par2_name:par2_bin}
    
        #Greedy bin the posterior samples    
        toppoints,injection_cl,reses,injection_area=\
        bppu.greedy_bin_two_param(pos,greedy2Params,confidence_levels)
        
        print "BCI %s-%s:"%(par1_name,par2_name)
        print reses
        
        par1_injvalue=pos[par1_name].injval()
        par2_injvalue=pos[par2_name].injval()
        
        #Plot 2D histograms of greedily binned points 
        if injection is not None and par1_injvalue is not None and par2_injvalue is not None:
            bppu.plot_two_param_greedy_bins(np.array(toppoints),(par1_bin,par2_bin),outdir,par_names=(par1_name,par2_name),injpoint=[par1_injvalue,par2_injvalue])
        else:
            bppu.plot_two_param_greedy_bins(np.array(toppoints),(par1_bin,par2_bin),outdir,par_names=(par1_name,par2_name))
    #
        BCItableline='<tr><td>%s-%s</td>'%(par1_name,par2_name)
        cls=reses.keys()
        cls.sort()
        
        for cl in cls:
            BCItableline+='<td>%f</td>'%reses[cl]
        BCItableline+='</tr>'
        
        BCItablelines.append(BCItableline)
        #Generate 2D kde plots
        print 'Generating %s-%s plot'%(par1_name,par2_name)

        par1_pos=pos[par1_name].samples()
        par2_pos=pos[par2_name].samples()
        
        if (size(np.unique(par1_pos))<2 or size(np.unique(par2_pos))<2):
            continue
        
        plot2DkdeParams={par1_name:50,par2_name:50}
        myfig=bppu.plot_two_param_kde(pos,plot2DkdeParams)
        
        twoDKdePath=os.path.join(margdir,par1_name+'-'+par2_name+'_2Dkernel.png')
        twoDKdePaths.append(twoDKdePath)

        myfig.savefig(twoDKdePath)

    #= Generate plots/stats for 1D marginal posteriors =#    
    #Loop over each parameter and determine the contigious and greedy
    #confidence levels and some statistics.
    oneDplotPaths=[]
    for par_name in oneDMenu:
        par_name=par_name.lower()
        print "Binning %s to determine confidence levels ..."%par_name
        try:
            pos[par_name.lower()]
        except KeyError:
            print "No input chain for %s, skipping binning."%par_name
            continue
        try:
            par_bin=GreedyRes[par_name]
        except KeyError:
            print "Bin size is not set for %s, skipping binning."%par_name
            continue

        binParams={par_name:par_bin}

        toppoints,injectionconfidence,reses,injection_area=bppu.greedy_bin_one_param(pos,binParams,confidence_levels)
        
        oneDContCL,oneDContInj = bppu.contigious_interval_one_param(pos,binParams,confidence_levels)

        #Generate 1D histogram/kde plots 
        
        print "Generating 1D plot for %s."%par_name
        oneDPDFParams={par_name:50}
        rbins,plotFig=bppu.plot_one_param_pdf(pos,oneDPDFParams)
        
        figname=par_name+'.png'
        oneDplotPath=os.path.join(outdir,figname)
        
        plotFig.savefig(os.path.join(outdir,par_name+'.png'))
        if rbins:
            print "r of injected value of %s (bins) = %f"%(par_name, rbins)

        ##Produce plot of raw samples
        myfig=plt.figure(figsize=(4,3.5),dpi=80)
        pos_samps=pos[par_name].samples()
        plt.plot(pos_samps,'.',figure=myfig)
        injpar=pos[par_name].injval()
        
        if injpar:
            if min(pos_samps)<injpar and max(pos_samps)>injpar:
                plt.plot([0,len(pos_samps)],[injpar,injpar],'r-.')
        myfig.savefig(os.path.join(outdir,figname.replace('.png','_samps.png')))
    
        oneDplotPaths.append(figname)

    ##Create results web page## 
    
    htmlfile=bppu.htmlPage('Posterior PDFs')
    
    #Add HTML
    htmlfile.h1('Posterior PDFs')
    htmlfile.p('Produced from '+str(len(pos))+' posterior samples.')
    htmlfile.p('Samples read from %s'%(data[0]))
    
    if bayesfactornoise is not None:
        htmlfile.h3('Model slection')
        htmlfile.p('log Bayes factor ( coherent vs gaussian noise) = %s, Bayes factor=%f'%(BSN,exp(float(BSN))))
    if bayesfactorcoherent is not None:
        htmlfile.p('log Bayes factor ( coherent vs incoherent OR noise ) = %s, Bayes factor=%f'%(BCI,exp(float(BCI))))
    
    htmlfile.h3('Summary statistics')
    htmlfile.write(str(pos))
    htmlfile.h3('Sky localization')
    if injection:
        if sky_injection_cl:
            htmlfile.p('Injection found at confidence interval %f in sky location'%(sky_injection_cl))
        else:
            htmlfile.p('Injection not found in posterior bins in sky location!')
    htmlfile.write('<img width="20%" src="skymap.png"/>')
    if(skyres is not None):
        htmlfile_write='<table border="1"><tr><th>Confidence region</th><th>size (sq. deg)</th></tr>'
        
        for frac,skysize in skyreses.items():
            htmlfile_write+=('<tr><td>%f</td><td>%f</td></tr>'%(frac,skysize))
        htmlfile_write+=('</table>')
        print htmlfile_write
        htmlfile.write(htmlfile_write)
        
    htmlfile.h3('2D confidence intervals (greedy binning)')
    htmlfile_write='<table width="100%" border="1"><tr><th/>'
    confidence_levels.sort()
    for cl in confidence_levels:
        htmlfile_write+='<th>%f</th>'%cl
    htmlfile_write+='</tr>'
    for line in BCItablelines:
        htmlfile_write+=line
    htmlfile_write+='</table>'
    htmlfile.write(htmlfile_write)
    
    htmlfile.h3('2D Marginal PDFs')
    htmlfile.br()
    
    htmlfile_write='<table border="1" width="100%">'
    

    row_switch=0
    for par1,par2 in twoDplots:

        if row_switch==3:
            row_switch=0

        plot_path=None
        if os.path.isfile(os.path.join(outdir,'2D',par1+'-'+par2+'_2Dkernel.png')):
            plot_path='2D/'+par1+'-'+par2+'_2Dkernel.png'

        elif os.path.isfile(os.path.join(outdir,'2D',par2+'-'+par1+'_2Dkernel.png')):
            plot_path='2D/'+par2+'-'+par1+'_2Dkernel.png'

        if plot_path:
            if row_switch==0:
                htmlfile_write+='<tr>'

            htmlfile_write+='<td width="30%"><img width="100%" src="'+plot_path+'"/></td>'
            if row_switch==2:
                htmlfile_write+='</tr>'
            row_switch+=1
    #
    if row_switch==2:
        htmlfile_write+='<td></td></tr>'
    elif row_switch==1:
        htmlfile_write+='<td></td><td></td></tr>'
    htmlfile_write+='</table>'
    htmlfile.write(htmlfile_write)
    
    htmlfile.br()
    htmlfile.a("2D/",'All 2D Marginal PDFs')
    htmlfile.hr()
    htmlfile.h3('1D marginal posterior PDFs')
    htmlfile.br()

    htmlfile_write= '<table><tr><th>Histogram and Kernel Density Estimate</th><th>Samples used</th></tr>'
    for plotPath in oneDplotPaths:
        htmlfile_write+='<tr><td><img src="'+plotPath+'"/></td><td><img src="'+plotPath.replace('.png','_samps.png')+'"/></td></tr>'
    htmlfile_write+='</table>'
    
    htmlfile.write(htmlfile_write)
    
    htmlfile.hr()
    htmlfile.br()
    htmlfile.p('Produced using cbcBayesPostProc.py at '+strftime("%Y-%m-%d %H:%M:%S")+' .')
    htmlfile.p(git_version.verbose_msg)
    
    #Save results page
    resultspage=open(os.path.join(outdir,'posplots.html'),'w')
    resultspage.write(str(htmlfile))
    
    # Save posterior samples too...
    posfilename=os.path.join(outdir,'posterior_samples.dat')
    posfile=open(posfilename,'w')
    input_file=open(data[0])
    posfile.write(input_file.read())
    #

    #Close files
    input_file.close()
    posfile.close()
    resultspage.close()

if __name__=='__main__':

    parser=OptionParser()
    parser.add_option("-o","--outpath", dest="outpath",help="make page and plots in DIR", metavar="DIR")
    parser.add_option("-d","--data",dest="data",action="append",help="datafile")
    parser.add_option("-i","--inj",dest="injfile",help="SimInsipral injection file",metavar="INJ.XML",default=None)
    parser.add_option("--skyres",dest="skyres",help="Sky resolution to use to calculate sky box size",default=None)
    parser.add_option("--eventnum",dest="eventnum",action="store",default=None,help="event number in SimInspiral file of this signal",type="int",metavar="NUM")
    parser.add_option("--bsn",action="store",default=None,help="Optional file containing the bayes factor signal against noise",type="string")
    parser.add_option("--bci",action="store",default=None,help="Optional file containing the bayes factor coherent against incoherent models",type="string")

    (opts,args)=parser.parse_args()

    #List of parameters to plot/bin . Need to match (converted) column names.
    oneDMenu=['mtotal','m1','m2','mchirp','mc','distance','distMPC','dist','iota','psi','eta','ra','dec','a1','a2','phi1','theta1','phi2','theta2']
    #List of parameter pairs to bin . Need to match (converted) column names.
    twoDGreedyMenu=[['mc','eta'],['mchirp','eta'],['m1','m2'],['mtotal','eta'],['distance','iota'],['dist','iota'],['dist','m1'],['ra','dec']]
    #Bin size/resolution for binning. Need to match (converted) column names.
    greedyBinSizes={'mc':0.025,'m1':0.1,'m2':0.1,'mtotal':0.1,'eta':0.001,'iota':0.01,'time':1e-4,'distance':1.0,'dist':1.0,'mchirp':0.025,'a1':0.02,'a2':0.02,'phi1':0.05,'phi2':0.05,'theta1':0.05,'theta2':0.05,'ra':0.05,'dec':0.05}
    #Confidence levels
    confidenceLevels=[0.67,0.9,0.95,0.99]
    #2D plots list
    twoDplots=[['mc','eta'],['mchirp','eta'],['m1','m2'],['mtotal','eta'],['distance','iota'],['dist','iota'],['RA','dec'],['m1','dist'],['m2','dist'],['psi','iota'],['psi','distance'],['psi','dist'],['psi','phi0']]

    
    cbcBayesPostProc(opts.outpath,opts.data,oneDMenu,twoDGreedyMenu,greedyBinSizes,confidenceLevels,twoDplots,injfile=opts.injfile,eventnum=opts.eventnum,skyres=opts.skyres,bayesfactornoise=opts.bsn,bayesfactorcoherent=opts.bci)
#
