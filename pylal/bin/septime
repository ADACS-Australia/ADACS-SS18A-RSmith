#!/usr/bin/python

# $Id$

__author__ = "Drew Keppel <drew.keppel@ligo.org>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__="septimes"
__Id__ = "$Id$"

import copy
import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table as tab
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue import iterutils
from pylal import SnglInspiralUtils
from pylal import SearchSummaryUtils
from pylal import InspiralUtils
from pylal import llwapp
from pylal import date

import matplotlib
matplotlib.use('Agg')
from pylab import *
rc('text', usetex=True)

##############################################################################
usage = """
usage: %prog [options] 

"""

def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )

  # options related to input and output
  parser.add_option("","--thinca",action="store",type="string",\
      default=None, metavar=" FILE",help="thinca file to read" )

  parser.add_option("","--g1-triggers",action="store_true",default=False,\
      help="input files contain triggers from G1" )
  parser.add_option("","--h1-triggers",action="store_true",default=False,\
      help="input files contain triggers from H1" )
  parser.add_option("","--h2-triggers",action="store_true",default=False,\
      help="input files contain triggers from H2" )
  parser.add_option("","--l1-triggers",action="store_true",default=False,\
      help="input files contain triggers from L1" )
  parser.add_option("","--t1-triggers",action="store_true",default=False,\
      help="input files contain triggers from T1" )
  parser.add_option("","--v1-triggers",action="store_true",default=False,\
      help="input files contain triggers from V1" )

  parser.add_option("","--g1-slide",action="store",type="float",default=-1,\
      metavar=" g1_slide",help="Slide G1 data by multiples of g1_slide" )
  parser.add_option("","--h1-slide",action="store",type="float",default=-1,\
      metavar=" h1_slide",help="Slide H1 data by multiples of h1_slide" )
  parser.add_option("","--h2-slide",action="store",type="float",default=-1,\
      metavar=" h2_slide",help="Slide H2 data by multiples of h2_slide" )
  parser.add_option("","--l1-slide",action="store",type="float",default=-1,\
      metavar=" l1_slide",help="Slide L1 data by multiples of l1_slide" )
  parser.add_option("","--t1-slide",action="store",type="float",default=-1,\
      metavar=" t1_slide",help="Slide T1 data by multiples of t1_slide" )
  parser.add_option("","--v1-slide",action="store",type="float",default=-1,\
      metavar=" v1_slide",help="Slide V1 data by multiples of v1_slide" )

  parser.add_option("","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="veto file for all IFOS (format ligolw_segments)")
  parser.add_option("","--segment-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="segment file for COINC times = U(--IFO-triggers)" + \
      " (format ligolw_segments)")

  parser.add_option("","--gps-start-time",action="store", type="int",
      metavar="GPSSTARTTIME",\
      help="gps start time used in the figure and output file names")
  parser.add_option("","--gps-end-time",action="store", type= "int",
      metavar="GPSENDTIME",\
      help="gps end time used in the figure and output file names")

  parser.add_option("","--num-slides",action="store",type="int",default=0,\
      metavar=" NUM_SLIDES",help="number of time slides performed" )

  parser.add_option("","--comment",action="store",type="string",\
      default=None,metavar=" COMMENT",\
      help="comment stored in process table")
  parser.add_option("","--user-tag",action="store",type="string",\
      default=None,metavar=" TAG",\
      help="user tag used in output file")

  parser.add_option("","--verbose",action="store_true",\
      default=False,help="print information" )

  (options,args) = parser.parse_args()


  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

if not opts.thinca:
  print >>sys.stderr, "Must specify a file in --thinca to read"
  print >>sys.stderr, "Enter 'septimes --help' for usage"
  sys.exit(1)


####################################################################
# determine IFOs and IFO combos in play

ifo_list = [ifo for ifo in ("G1", "H1", "H2", "L1", "T1", "V1") \
            if getattr(opts, "%s_triggers" % ifo.lower())]
ifo_list.sort()

slideVector = {}
for ifo in ifo_list:
  if ifo == "G1":  slideVector[ifo] = opts.g1_slide
  if ifo == "H1":  slideVector[ifo] = opts.h1_slide
  if ifo == "H2":  slideVector[ifo] = opts.h2_slide
  if ifo == "L1":  slideVector[ifo] = opts.l1_slide
  if ifo == "T1":  slideVector[ifo] = opts.t1_slide
  if ifo == "V1":  slideVector[ifo] = opts.v1_slide

ifo_coincs = []
for num_ifos in range(2, len(ifo_list) + 1):
  ifo_coincs.extend(list(iterutils.choices(ifo_list, num_ifos)))

ifos = set(ifo_list)

types = {}
for coinc in ifo_coincs:
  types[coinc] = ''
  for ifo in coinc:
    types[coinc] += ifo

###################################
# glob the list of files to read in
if opts.thinca is not None:
  allfiles = []
  for gl in opts.thinca.split(" "):
    allfiles.extend(glob.glob(gl))
  if len(allfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.thinca + " returned no files" 
    sys.exit(1)
  if len(allfiles) > 1:
    print >>sys.stderr, "The glob for " + opts.thinca + " returned more than one file"
    sys.exit(1)

  slidefiles = []
  coincfiles = []

  for file in [opts.thinca]:
    if 'SLIDE' in file:
      slidefiles.append(file)
    else:
      coincfiles.append(file)

  # check if the file lists are not empty
  if not (coincfiles or slidefiles):
    print >>sys.stdout, "No files match your description."
    sys.exit(0) 

########################
# read in the veto files

xmldoc = utils.load_filename(opts.veto_file, gz=opts.veto_file.endswith("gz"))
vetoes = llwapp.segmenttable_get_by_name(xmldoc, name="vetoes")
vetoes.coalesce()

########################
# extract the veto time appropriate to this segment

seg = segments.segmentlist(
    [segments.segment(date.LIGOTimeGPS(opts.gps_start_time),
                      date.LIGOTimeGPS(opts.gps_end_time))])
for key in vetoes.keys():
  vetoes[key] &= seg

########################
# read in zero-lag triggers
inspTriggers = None

if coincfiles:
  inspTriggers = SnglInspiralUtils.\
                 ReadSnglInspiralFromFiles(coincfiles,
                                           mangle_event_id = False,
                                           verbose=opts.verbose)

  # perform the veto
  inspTriggers = inspTriggers.vetoed(seg)
  inspTriggers = inspTriggers.veto_seglistdict(vetoes)

  if opts.verbose:
    print ('0 ' + str(len(inspTriggers)))

########################
# read in slide triggers
slideTriggers = None

if slidefiles:
  inspSlide = SnglInspiralUtils.\
              ReadSnglInspiralFromFiles(slidefiles,
                                        mangle_event_id = False,
                                        verbose=opts.verbose)
  
  # perform the veto
  inspSlide = inspSlide.vetoed(seg)
  inspSlide = inspSlide.veto_seglistdict(vetoes)
 
  slide_num = range(1 , opts.num_slides + 1)
  slide_num.extend(range(-opts.num_slides, 0))

  slideTriggers = {}
  for slide in slide_num:
    slideTriggers[slide] = {}
    slideTriggers[slide]["slide_num"] = slide
    try:
      slideTriggers[slide]["sngl_trigs"] = inspSlide.getslide(slide)
    except:
      slideTriggers[slide]["sngl_trigs"] = []

    if opts.verbose:
      print (str(slide) + ' ' + str(len(slideTriggers[slide]["sngl_trigs"])))

#########################
# calculate the different times during this zero-lag segment
segs = segments.segmentlistdict()

for coinc in ifo_coincs:
  segs[coinc] = seg & (~vetoes).intersection(coinc)
  if (ifos - set(coinc)):
    segs[coinc] &= vetoes.intersection(ifos - set(coinc))

inspSepTimesTriggers = {}

if inspTriggers:
  for coinc in ifo_coincs:
    inspSepTimesTriggers[coinc] = inspTriggers.vetoed(segs[coinc])

    if opts.verbose and segs[coinc].duration():
      print (str(len(inspSepTimesTriggers[coinc])) + ' triggers in ' + \
          str(segs[coinc].duration()) + ' sec analyzed ' + \
          types[coinc] + ' time')

#######################################################################
# calculate the different times during the time slides for this segment
if slideTriggers:
  for slide in slide_num:
    thisSlide = {}
    thisSlide["slide_num"] = slide
    thisSlide["segs"] = segments.segmentlistdict()
    thisSlide["sngl_trigs"] = {}

    slides = slideVector.copy()
    for key in slides.keys():
      slides[key] *= slide

    slidVetoes = slideSegListDictOnRing(seg[0], vetoes, slides)

    SnglInspiralUtils.slideTriggersOnRings(slideTriggers[slide]["sngl_trigs"],
        seg, slides)

    for coinc in ifo_coincs:
      thisSlide["segs"][coinc] = seg & (~slidVetoes).intersection(coinc)
      if (ifos - set(coinc)):
        thisSlide["segs"][coinc] &= slidVetoes.\
            intersection(ifos - set(coinc))

      thisSlide["sngl_trigs"][coinc] = slideTriggers[slide]["sngl_trigs"].\
          vetoed(thisSlide["segs"][coinc])

      if opts.verbose and thisSlide["segs"][coinc].duration():
        print (str(len(thisSlide["sngl_trigs"][coinc])) + ' triggers in ' + \
            str(thisSlide["segs"][coinc].duration()) + ' sec analyzed ' + \
            types[coinc] + ' time, slide ' + str(slide))

      for row in thisSlide["sngl_trigs"][coinc]:
        if coinc in inspSepTimesTriggers.keys():
          inspSepTimesTriggers[coinc].append(row)
        else:
          inspSepTimesTriggers[coinc] = tab.new_from_template(inspSlide)
          inspSepTimesTriggers[coinc].append(row)

    SnglInspiralUtils.unslideTriggersOnRings(\
        slideTriggers[slide]["sngl_trigs"], seg, slides)

  for coinc in ifo_coincs:
    if coinc not in inspSepTimesTriggers.keys():
      inspSepTimesTriggers[coinc] = lsctables.SnglInspiralTable()

  if opts.verbose:
    for coinc in ifo_coincs:
      print (str(len(inspSepTimesTriggers[coinc])) + ' triggers in ' + \
          types[coinc] + ' times')

##############################################################################
# write triggers to file
##############################################################################
#############################
# open example xml file
xmldoc = utils.load_filename(opts.thinca, gz=opts.thinca.endswith("gz"))

#############################
# set process end time
process = llwapp.append_process(xmldoc, program = __name__, version = __version__, cvs_repository = "lscsoft", cvs_entry_time = __date__, comment = opts.comment, domain = "pylal")

llwapp.set_process_end_time(process)

##############################
# replace process params table
params = []
idx = 0
while idx < len(args):
  if idx+1 >= len(args):
    params.append((args[idx], "lstring", ""))
    idx += 1
  elif args[idx][:2] == '--'  and not args[idx+1][:2] == '--':
    params.append((args[idx], "lstring", args[idx+1]))
    idx += 2
  elif args[idx][:2] == '--' and args[idx+1][:2] == '--':
    params.append((args[idx], "lstring", ""))
    idx += 1

processparams = llwapp.append_process_params(xmldoc, process, params)

##############################
# replace search_summary and sngl_inspiral tables

searchsummary = tab.get_table(xmldoc, lsctables.SearchSummaryTable.tableName)
llelem = searchsummary.parentNode
exampleSearchSummaryRow = searchsummary[0]

for coinc in ifo_coincs:
  time = ''
  for ifo in ifo_list:
    time += ifo

  fileName = types[coinc] + '-SEPTIME_'
  if slidefiles:
    fileName += 'SLIDE_'
  if opts.user_tag:
    fileName += opts.user_tag + '_'
  fileName += time + '-' + str(opts.gps_start_time)
  fileName += '-' + str(opts.gps_end_time - opts.gps_start_time)
  fileName += '.xml'
  if opts.thinca.endswith("gz"):
    fileName += '.gz'

  if coincfiles:
    del searchsummary[:]
    for seg in segs[coinc]:
      row = copy.copy(exampleSearchSummaryRow)
      row.set_in(seg)
      row.set_out(seg)
      row.ifos = types[coinc]
      searchsummary.append(row)

  try:
    oldsnglinspiral = tab.get_table(xmldoc,
        lsctables.SnglInspiralTable.tableName)
    llelem.removeChild(oldsnglinspiral)
  except:
    pass
  if len(inspSepTimesTriggers[coinc]):
    llelem.appendChild(inspSepTimesTriggers[coinc])

#############################
# write file
  if (segs[coinc] and inspTriggers) or inspSepTimesTriggers[coinc]:
    utils.write_filename(xmldoc, fileName, verbose=opts.verbose,
      gz=opts.veto_file.endswith("gz"))


