#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import sys

from glue.ligolw import utils
from pylal import ligolw_bucluster

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$")
	parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
	parser.add_option("-c", "--cluster-algorithm", metavar = "[excesspower]", help = "set clustering method (required)")
	parser.add_option("-p", "--program", metavar = "name", default = "power", help = "set the name of the program that generated the events as it appears in the process table (default = power)")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if options.cluster_algorithm is None:
		raise Exception, "missing required command line argument --cluster"
	if options.cluster_algorithm == "excesspower":
		options.prefunc = ligolw_bucluster.ExcessPowerPreFunc
		options.postfunc = ligolw_bucluster.ExcessPowerPostFunc
		options.testfunc = ligolw_bucluster.ExcessPowerTestFunc
		options.bailoutfunc = ligolw_bucluster.ExcessPowerBailoutFunc
		options.clusterfunc = ligolw_bucluster.ExcessPowerClusterFunc
	else:
		raise Exception, "unrecognized cluster method %s" % options.cluster_algorithm

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


for filename in filenames:
	xmldoc = utils.load_filename(filename, options.verbose, gz = (filename or "stdin")[-3:] == ".gz")
	ligolw_bucluster.add_ms_columns(xmldoc)
	ligolw_bucluster.ligolw_bucluster(xmldoc, **options.__dict__)
	utils.write_filename(xmldoc, filename, options.verbose, gz = (filename or "stdout")[-3:] == ".gz")
	xmldoc.unlink()
