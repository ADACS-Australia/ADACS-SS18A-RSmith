#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import sys

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from pylal import llwapp
from pylal import SnglBurstUtils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

parser = OptionParser(version = "%prog CVS $Id$")
parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
parser.add_option("-i", "--input", metavar = "filename", help = "read from filename (default = stdin)")
parser.add_option("-o", "--output", metavar = "filename", help = "write to filename (default = stdout)")
parser.add_option("-m", "--cluster", metavar = "[bypeaktimeandfreq|bytimeandfreq]", help = "set clustering method (required)")
parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
options, args = parser.parse_args()
del parser, args

if options.cluster == None:
	print >>sys.stderr, "error: missing required command line argument --cluster"
	sys.exit(1)
if options.cluster == "bypeaktimeandfreq":
	testfunc = SnglBurstUtils.CompareSnglBurstByPeakTimeAndFreq
	clusterfunc = SnglBurstUtils.SnglBurstCluster
	bailoutfunc = SnglBurstUtils.CompareSnglBurstByPeakTime
elif options.cluster == "bytimeandfreq":
	testfunc = SnglBurstUtils.CompareSnglBurst
	clusterfunc = SnglBurstUtils.SnglBurstCluster
	bailoutfunc = None
else:
	print >>sys.stderr, "error: unrecognized cluster method %s" % options.cluster
	sys.exit(1)


#
# =============================================================================
#
#                                    Input
#
# =============================================================================
#

doc = ligolw.Document()
if options.input:
	ligolw.make_parser(lsctables.LIGOLWContentHandler(doc)).parse(file(options.input))
else:
	ligolw.make_parser(lsctables.LIGOLWContentHandler(doc)).parse(sys.stdin)


#
# =============================================================================
#
#                                 Preparation
#
# =============================================================================
#

try:
	searchsummtable = llwapp.get_table(doc, lsctables.SearchSummaryTable.tableName)
	snglbursttable = llwapp.get_table(doc, lsctables.SnglBurstTable.tableName)
except Exception, e:
	print >>sys.stderr, "error: %s" % str(e)
	sys.exit(1)


#
# =============================================================================
#
#                           Add Process Information
#
# =============================================================================
#

process = llwapp.append_process_info(doc, program = "ligolw_bucluster", version = __version__, cvs_repository = "lscsoft", cvs_entry_time = __date__, comment = options.comment)

params = [("--cluster", "lstring", options.cluster)]
if options.input != None:
	params += [("--input", "lstring", options.input)]
if options.output != None:
	params += [("--output", "lstring", options.output)]
llwapp.append_process_params(doc, process, params)


#
# =============================================================================
#
#                                Do Clustering
#
# =============================================================================
#

SnglBurstUtils.ClusterSnglBurstTable(snglbursttable.rows, testfunc, clusterfunc, bailoutfunc)


#
# =============================================================================
#
#                        Add Search Summary Information
#
# =============================================================================
#

llwapp.append_search_summary(doc, process, inseg = searchsummtable.get_inlist().extent(), outseg = searchsummtable.get_outlist().extent(), nevents = len(snglbursttable.rows))


#
# =============================================================================
#
#                                    Output
#
# =============================================================================
#

set_process_end_time(process)

if options.output:
	doc.write(file(options.output, "w"))
else:
	doc.write(sys.stdout)
