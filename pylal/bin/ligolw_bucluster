#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser


from glue.lal import CacheEntry
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import ligolw_bucluster


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog [options] [file ...]",
		description = "Run a single-instrument burst clustering algorithm on the sngl_burst events contained in LIGO Light Weight XML files.  Files can be listed on the command line and/or in one or more LAL cache files.  If no files are named, then input is read from stdin and written to stdout.  Any file whose name ends in \".gz\" is assumed to be gzip-compressed."
	)
	parser.add_option("--comment", metavar = "text", default = "", help = "Set the comment string to be recorded in the process table (default = \"\").")
	parser.add_option("-c", "--cluster-algorithm", metavar = "[excesspower]", help = "Set clustering method (required).")
	parser.add_option("-i", "--input-cache", metavar = "filename", action = "append", default = [], help = "Process the files listed in this LAL cache.")
	parser.add_option("-p", "--program", metavar = "name", default = "lalapps_power", help = "Set the name of the program that generated the events as it appears in the process table (default = \"lalapps_power\").")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	if options.cluster_algorithm is None:
		raise ValueError, "missing required argument --cluster-algorithm"
	if options.cluster_algorithm == "excesspower":
		options.prefunc = ligolw_bucluster.ExcessPowerPreFunc
		options.postfunc = ligolw_bucluster.ExcessPowerPostFunc
		options.testfunc = ligolw_bucluster.ExcessPowerTestFunc
		options.sortfunc = ligolw_bucluster.ExcessPowerSortFunc
		options.bailoutfunc = ligolw_bucluster.ExcessPowerBailoutFunc
		options.clusterfunc = ligolw_bucluster.ExcessPowerClusterFunc
	else:
		raise ValueError, "unrecognized --cluster-algorithm %s" % options.cluster_algorithm

	for cache in options.input_cache:
		filenames += [CacheEntry(line).path() for line in file(cache)]

	return options, (filenames or [None])


#
# =============================================================================
#
#                                    Input
#
# =============================================================================
#


#
# Use interning row builder to save memory.
#


lsctables.table.RowBuilder = lsctables.table.InterningRowBuilder


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


for filename in filenames:
	xmldoc = utils.load_filename(filename, options.verbose, gz = (filename or "stdin").endswith(".gz"))
	lsctables.table.InterningRowBuilder.strings.clear()
	xmldoc, changed = ligolw_bucluster.ligolw_bucluster(xmldoc, **options.__dict__)
	if changed:
		utils.write_filename(xmldoc, filename, options.verbose, gz = (filename or "stdout").endswith(".gz"))
	xmldoc.unlink()
