#!/usr/bin/python

# $Id$
__author__ = "Stephen Fairhurst <sfairhurs@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils

from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from pylal import CoincInspiralUtils

##############################################################################
usage = """usage: %prog [options] file1 file2 

Inspiral Injection Plotting Functions

Generate histograms of parameter accuracy.  Specifically, it generates plots
of (ifo 1 error) - (ifo 2 error) for various parameters.  Here (ifo error) is
defined by (ifo detected value) - (ifo injected value).  The script expects
two input files, one from each of the ifos to be compared.  These should
contain sngl and sim_inspiral tables all of which are the same length.  The
plots can be turned on by selecting them.  If the AXIS is set, this sets the
width of the histograms, otherwise it is autoscaled.

Example 1: ...
Example 2: ...
"""
parser = OptionParser( usage=usage, version="%prog CVS $Id$"  )
parser.add_option("-b","--hist-mchirp",action="store_true",default=False,\
    help="histogram of the chirp mass accuracy" )
parser.add_option("-d","--hist-timing",action="store_true",default=False,\
    help="histogram of the timing accuracy" )
parser.add_option("-C","--chirp-axis",action="store",type="float",\
    default=0, metavar=" M_SUN",help="width of chirp mass accuracy in plots" )
parser.add_option("-E","--time-axis",action="store",type="float",\
    default=0, metavar=" SEC",help="width of timing accuracy in plots" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-n","--nbins",action="store",type="int",default=10,\
    metavar=" NBINS", help="number of bins for the histogram plots" )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" ) 

(opts,args) = parser.parse_args()

# Change to Agg back-end if show() will not be called
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "a trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspdiff --help' for usage"
  sys.exit(1)

injFiles = args        

      
# read in tables into dictionaries of paired sets
injSets = []

if len(injFiles) != 2:
  print >>sys.stderr, "an even number of trigger files must be specified"
  print >>sys.stderr, "Enter 'plotinspdiff --help' for usage"
  sys.exit(1)

for i in range(len(injFiles)):
  injDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sngl_inspiral"] = SnglInspiralUtils.ReadSnglInspiralFromFiles(flist)
  injDict["sim_inspiral"]  = SimInspiralUtils.ReadSimInspiralFromFiles(flist)
  #
  # test sire clustering
  if len(injDict['sngl_inspiral']) != len(injDict['sim_inspiral']):
    print >>sys.stderr,"number of triggers and found injections must be equal"
    sys.exit(1)
  #
  injSets.append(injDict)


###############################  
# histogram of chirp mass error
if opts.hist_mchirp:
  figure(1)
  sym = 0
  viz.histdiffdiff(injSets[0]['sngl_inspiral'], injSets[1]['sngl_inspiral'],\
                 injSets[0]['sim_inspiral'], 'mchirp', sym,'M_sun', \
                 opts.nbins, opts.chirp_axis, opts.figure_name)

###############################  
# histogram of timing error
if opts.hist_timing:
  figure(2)
  sym = 0
  viz.histdiffdiff(injSets[0]['sngl_inspiral'], injSets[1]['sngl_inspiral'],\
                 injSets[0]['sim_inspiral'], 'end_time', sym,'seconds', \
                 opts.nbins, opts.time_axis, opts.figure_name)

 
if opts.show_plot:
  show()
