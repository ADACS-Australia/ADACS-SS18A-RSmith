#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz

##############################################################################
usage = """
usage: %prog [options] 

Thinca Triggers Plotting Function

Generate a set of summary plots from a list of thinca files.  The plots which
can be generated are

1)  A plot of H1 vs H2 snr for the coincident Hanford only triggers.
    Generated by specifying: --h1-h2-snr

2)  A plot of the L1 vs H snr for the coincidenct L-H triggers.
    The H snr is taken as the sum of H1 and H2 (if both non-zero). 
    Generated by specifying: --hl-snr

3)  A plot of the G1 vs H snr for the coincidenct G-H triggers.
    The H snr is taken as the sum of H1 and H2 (if both non-zero). 
    Generated by specifying: --gh-snr

4)  A plot of the G1 vs L1 snr for the coincidenct G-L triggers.
    Generated by specifying: --gl-snr
    

The above plots can be made with time slide triggers by specifying: 
   --slide-snr

3)  A plot of the snr of coincident triggers (for each ifo) vs time.
    Generated by specifying: --snr-time

4)    
"""

parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-g","--glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of thinca files to read" )
parser.add_option("-G","--slide-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of thinca_slide files to read" )
parser.add_option("-C","--cluster-window",action="store",type="int",default=0,\
    metavar=" SEC", help="length of time over which to cluster triggers" )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" )
parser.add_option("-x","--min-snr",action="store",type="float",\
    default=0, metavar=" MIN_SNR",help="minimum value of snr on plot" )
parser.add_option("-X","--max-snr",action="store",type="float",\
    default=0, metavar=" MAX_SNR",help="maximum value of snr on plot" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-a","--h1-h2-snr",action="store_true",default=False,\
    help="plot the snr of coinc h1-h2 triggers" )
parser.add_option("-b","--hl-snr",action="store_true",default=False,\
    help="plot the snr of coinc hanford livingston triggers" )
parser.add_option("-A","--gh-snr",action="store_true",default=False,\
    help="plot the snr of coinc geo hanford triggers" )
parser.add_option("-B","--gl-snr",action="store_true",default=False,\
    help="plot the snr of coinc geo livingston triggers" )
parser.add_option("-c","--snr-time",action="store_true",default=False,\
    help="plot the snr vs time of coinc triggers" )
parser.add_option("-d","--slide-snr",action="store_true",default=False,\
    help="make snr vs snr plots of time slide triggers" )
parser.add_option("-i","--hist-slides",action="store_true",default=False,\
    help="plot histograms of number of triggers in time slides")
parser.add_option("-j","--plot-slides",action="store_true",default=False,\
    help="plot of number of triggers vs slide number")
parser.add_option("-z","--add-zero-lag",action="store_true",default=False,\
    help="add the zero lag info to slide plots")
parser.add_option("-k","--snr-dist",action="store_true",default=False,\
    help="plot distribution of snr" )
parser.add_option("-n","--nbins",action="store",type="int",default=10,\
    metavar=" NBINS", help="number of bins for the histogram plots" )
parser.add_option("-N","--num-slides",action="store",type="int",default=0,\
    metavar=" NUM_SLIDES",help="number of time slides performed" )
parser.add_option("-t","--plot-type",action="store",type="string",\
    default="linear",metavar=" PLOT_TYPE", \
    help="make either linear or log or plots" )
(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)
  
if opts.plot_type not in ['log', 'linear']:
  print >>sys.stderr, "plot-type must be either \"log\" or \"linear\""
  sys.exit(1)

# if doing any foreground plots:
if opts.h1_h2_snr or opts.hl_snr or opts.snr_time or opts.add_zero_lag:
  if not opts.glob:
    print >>sys.stderr, "Must specify a GLOB of files to read"
    print >>sys.stderr, "Enter 'plotthinca --help' for usage"
    sys.exit(1)

# if doing any slide plots:
if opts.hist_slides:
  if not opts.slide_glob:
    print >>sys.stderr, "--slide-glob must be specified if --plot-slides is"
    sys.exit(1)
  if not opts.num_slides:
    print >>sys.stderr, "--num-slides must be specified if --plot-slides is"
    sys.exit(1)

plotsymbols= ['g1','r+','bx','ko']

f_name = opts.figure_name
if opts.cluster_window and f_name:
  f_name += '_clust_' + str(opts.cluster_window) + 'sec'

###################################
# glob the list of files to read in
if opts.glob:  
  myfiles = glob.glob(opts.glob)

  inspTriggers = readMeta.metaDataTable(myfiles,"sngl_inspiral")
  coincTriggers = readMeta.coincInspiralTable(inspTriggers)

  if opts.cluster_window:
    coincTriggers = coincTriggers.cluster(opts.cluster_window)

  if not opts.max_snr:
    xhigh = max( inspTriggers.mkarray('snr') )
  else:
    xhigh = opts.max_snr + 1

  if not opts.min_snr:
    xlow = min( inspTriggers.mkarray('snr') )
  else:
    xlow = opts.min_snr

########################
# read in slide triggers
if opts.slide_glob:
  slidefiles = glob.glob(opts.slide_glob)
  inspSlide = readMeta.metaDataTable(slidefiles,"sngl_inspiral")
  coincSlide = readMeta.coincInspiralTable(inspSlide)

  slide_num = range(1 , opts.num_slides + 1)
  slide_num.extend(range(-opts.num_slides, 0))

  slideTriggers = []
  for slide in slide_num:
    this_slide = {}
    this_slide["slide_num"] = slide
    if slide > 0:
      this_slide["triggers"] = coincSlide.getslide(slide)
    else:
      this_slide["triggers"] = coincSlide.getslide(5000 - slide)
    slideTriggers.append(this_slide)


  if opts.cluster_window:
    for this_slide in slideTriggers:
      this_slide["triggers"] = \
        this_slide["triggers"].cluster(opts.cluster_window)

  slide_high = max( inspSlide.mkarray('snr') )
  slide_low = min( inspSlide.mkarray('snr') )

fig_num = 1
################################
# plot of h1 vs h2 snr

if opts.h1_h2_snr or opts.slide_snr:
  figure(fig_num)
  fig_num += 1
  hold(True)
  if opts.slide_snr:
    for slide in slideTriggers:
      viz.plotcoincval(slide["triggers"], 'snr', 'H1', 'H2', 'kx',\
        opts.plot_type)
    xlow = min(xlow,slide_low)
    xhigh = max(xhigh,slide_high)
  if opts.h1_h2_snr:
    viz.plotcoincval(coincTriggers, 'snr', 'H1', 'H2', 'r+',opts.plot_type)
  # axis([xlow, xhigh, xlow, xhigh])

  xlabel('SNR H1', size='x-large')
  ylabel('SNR H2', size='x-large')
  title('H1 vs H2 coincident event SNR')
  grid(True)
  if f_name:
    savefig(f_name + "_h1_vs_h2_snr.png")


################################
# plot of h vs l snr

if opts.hl_snr or opts.slide_snr:
  figure(fig_num)
  fig_num += 1
  hold(True)
  if opts.slide_snr:
    for slide in slideTriggers:
      viz.plotcoincval(slide["triggers"], 'snr', 'H1', 'L1', 'kx',\
        opts.plot_type)
      viz.plotcoincval(slide["triggers"], 'snr', 'H2', 'L1', 'kx',\
        opts.plot_type)
      viz.plotcoinchanford(slide["triggers"], 'snr', 'L1', 'sum', 'kx',\
        opts.plot_type)
     
  if opts.hl_snr:
    sym = 0
    viz.plotcoincval(coincTriggers, 'snr', 'H1', 'L1', plotsymbols[sym],\
      opts.plot_type)
    if not opts.slide_snr: sym += 1
    viz.plotcoincval(coincTriggers, 'snr', 'H2', 'L1', plotsymbols[sym],\
      opts.plot_type)
    if not opts.slide_snr: sym += 1 
    viz.plotcoinchanford(coincTriggers, 'snr', 'L1', 'sum', plotsymbols[sym],\
      opts.plot_type)
  # axis([xlow, xhigh, xlow, xhigh])

  if not opts.slide_snr:
    legend(['H1L1','H2L1','H1H2L1'])
  xlabel('SNR Hanford', size='x-large')
  ylabel('SNR Livingston', size='x-large')
  title('Hanford vs Livingston coincident event SNR')
  grid(True)
  if f_name:
    savefig(f_name + "_h_vs_l_snr.png")


################################
# plot of h vs g snr

if opts.gh_snr or opts.slide_snr:
  figure(fig_num)
  fig_num += 1
  hold(True)
  if opts.slide_snr:
    for slide in slideTriggers:
      viz.plotcoincval(slide["triggers"], 'snr', 'H1', 'G1', 'kx',\
        opts.plot_type)
      viz.plotcoincval(slide["triggers"], 'snr', 'H2', 'G1', 'kx',\
        opts.plot_type)
      viz.plotcoinchanford(slide["triggers"], 'snr', 'G1', 'sum', 'kx',\
        opts.plot_type)
     
  if opts.gh_snr:
    sym = 0
    viz.plotcoincval(coincTriggers, 'snr', 'H1', 'G1', plotsymbols[sym],\
      opts.plot_type)
    if not opts.slide_snr: sym += 1
    viz.plotcoincval(coincTriggers, 'snr', 'H2', 'G1', plotsymbols[sym],\
      opts.plot_type)
    if not opts.slide_snr: sym += 1 
    viz.plotcoinchanford(coincTriggers, 'snr', 'G1', 'sum', plotsymbols[sym],\
      opts.plot_type)
  # axis([xlow, xhigh, xlow, xhigh])

  if not opts.slide_snr:
    legend(['H1G1','H2G1','H1H2G1'])
  xlabel('SNR Hanford', size='x-large')
  ylabel('SNR GEO', size='x-large')
  title('Hanford vs GEO coincident event SNR')
  grid(True)
  if f_name:
    savefig(f_name + "_h_vs_g_snr.png")


################################
# plot of l vs g snr

if opts.gl_snr or opts.slide_snr:
  figure(fig_num)
  fig_num += 1
  hold(True)
  if opts.slide_snr:
    for slide in slideTriggers:
      viz.plotcoincval(slide["triggers"], 'snr', 'L1', 'G1', 'kx',\
        opts.plot_type)
     
  if opts.gl_snr:
    sym = 0
    viz.plotcoincval(coincTriggers, 'snr', 'L1', 'G1', plotsymbols[sym],\
      opts.plot_type)
  # axis([xlow, xhigh, xlow, xhigh])

  if not opts.slide_snr:
    legend(['L1G1'])
  xlabel('SNR Livingston', size='x-large')
  ylabel('SNR GEO', size='x-large')
  title('Livingston vs GEO coincident event SNR')
  grid(True)
  if f_name:
    savefig(f_name + "_l_vs_g_snr.png")


####################################
# plot of snr vs time (for each ifo)
if opts.snr_time:
  figure(fig_num)
  fig_num += 1
  hold(True)
  sym = 0
  for ifo in ["G1","H1","H2","L1"]:
    ifoTrigs = coincTriggers.getsngls(ifo)
    if opts.plot_type == 'linear':
      plot_type = 'linear'
    elif opts.plot_type == 'log':
      plot_type = 'logy'
      
    viz.plot_a_v_b(ifoTrigs, 'end_time', 'snr', plot_type, plotsymbols[sym])
    legend(['G1','H1','H2','L1'],2)
    title( 'snr vs end_time' )
    xlabel('end time (days into run)',size='x-large')
    ylabel('snr',size='x-large')
    grid(True)
    sym += 1
    
  if f_name:
    savefig(f_name + "_snr_vs_time.png")

################################################
# make plot/hist of number of triggers per slide
if opts.hist_slides or opts.plot_slides:
  if opts.add_zero_lag:
    coincTrigs = coincTriggers
  else:
    coincTrigs = None
    
  if opts.hist_slides:
    figure(fig_num)
    fig_num += 1
    viz.histslides(slideTriggers,coincTrigs)
    if f_name:
      savefig(f_name + "_hist_slide_trigs.png")
      
  if opts.plot_slides:
    figure(fig_num)
    fig_num += 1
    viz.plotslides(slideTriggers,coincTrigs)
    if f_name:
      savefig(f_name + "_plot_slide_trigs.png")
     
  for ifos in [['H1','H2'],['H1','L1'],['H2','L1']]:
     if opts.hist_slides:
       figure(fig_num)
       fig_num += 1
       viz.histslides(slideTriggers,coincTrigs,ifos)
       if f_name:
         savefig(f_name + '_' +ifos[0] + '_' + ifos[1] + \
           "_hist_slide_trigs.png")

     if opts.plot_slides:
       figure(fig_num)
       fig_num += 1
       viz.plotslides(slideTriggers,coincTrigs,ifos)
       if f_name:
         savefig(f_name + '_' + ifos[0] + '_' + ifos[1] + \
           "_plot_slide_trigs.png")


################################################
# make histogram of snr distribution
if opts.snr_dist:
  figure(fig_num) 
  fig_num += 1
  viz.cumhistsnr(coincTriggers, slideTriggers, None, opts.min_snr, 
    opts.max_snr, opts.nbins)
  if f_name:  
    savefig(f_name + "_cum_hist_snr.png")

  

  for ifos in [['H1','H2'],['H1','L1'],['H2','L1']]:
    figure(fig_num) 
    fig_num += 1
    viz.cumhistsnr(coincTriggers, slideTriggers, ifos, opts.min_snr, 
    opts.max_snr, opts.nbins)
    if f_name:
      savefig(f_name + '_' +ifos[0] + '_' + ifos[1] + \
        "_cum_hist_snr.png")



if opts.show_plot:
  show()

  
