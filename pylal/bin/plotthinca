#!/usr/bin/python

# $Id$
__author__ = "Stephen Fairhurst <sfairhur@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz
from glue import segments
from glue import segmentsUtils

##############################################################################
# helper functions
def square_axis():
  tmpv = asarray(axis())
  xmax = max([tmpv[1], tmpv[3]])
  xmin = min([tmpv[0], tmpv[2]])
  axis([xmin, xmax, xmin, xmax])

##############################################################################
usage = """
usage: %prog [options] 

Thinca Triggers Plotting Function

Generate a set of summary plots from a list of thinca files.  First, specify
which ifos the triggers come from using:
--g1-triggers, --h1-triggers, --h2-triggers, --l1-triggers.


The plots which can be generated are:

1)  A plot of the snr of coincident triggers (for each ifo) vs time.
    Generated by specifying: --snr-time

2)  Plots of snr vs snr for various ifo combinations.
    Generated by specifying: --snr-snr
    Note: specifying --snr-chi causes these to be plotted for snr/chi
    Note: specifying --s3-snr-chi-stat causes them to be plotted for
          stat = chisq * (snr^2 + 250) / snr^4.

These plots can be made with time slide triggers by specifying: 
  --slide-snr

3)  Plots of effective distance vs effective distance for various ifo comb.
    Generated by specifying: --dist-dist

These plots can be made with time slide triggers by specifying: 
  --slide-dist
  
4)  For each combination of two or more ifos, plot the number of triggers per 
    time slide.  Generated by specifying: --plot-slides

5)  For each combination of two or more ifos, make a histogram of the number 
    of triggers per time slide.  Generated by specifying: --hist-slides

The zero lag number of triggers can be added to the above by specifying:
  --add-zero-lag

If the zero lag data only contains playground, the number of triggers in the
  background can be scaled by a factor or 600/6370 by specifying
  --zero-lag-playground

6)  For each combination of two or more ifos, make a cumulativehistogram of
    the number of events as a function of the combined snr.
    Generated by specifying: --snr-dist
"""

parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )
parser.add_option("-g","--glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of thinca files to read" )
parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
    metavar=" SEC", help="length of time over which to cluster triggers" )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" )
parser.add_option("-x","--min-snr",action="store",type="float",\
    default=0, metavar=" MIN_SNR",help="minimum value of snr on plot" )
parser.add_option("-X","--max-snr",action="store",type="float",\
    default=0, metavar=" MAX_SNR",help="maximum value of snr on plot" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-A","--g1-triggers",action="store_true",default=False,\
    help="input files contain triggers from G1" )
parser.add_option("-B","--h1-triggers",action="store_true",default=False,\
    help="input files contain triggers from H1" )
parser.add_option("-C","--h2-triggers",action="store_true",default=False,\
    help="input files contain triggers from H2" )
parser.add_option("-D","--l1-triggers",action="store_true",default=False,\
    help="input files contain triggers from L1" )
parser.add_option("-a","--snr-time",action="store_true",default=False,\
    help="plot the snr vs time of coinc triggers" )
parser.add_option("-b","--snr-snr",action="store_true",default=False,\
    help="make snr vs snr plots of coinc triggers" )
parser.add_option("-S","--statistic",action="store",default='snr',\
    type="string",\
    help="choice of statistic used in making plots, valid arguments are: "
         "snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr")
parser.add_option("-d","--slide-snr",action="store_true",default=False,\
    help="make snr vs snr plots of time slide triggers" )
parser.add_option("-e","--dist-dist",action="store_true",default=False,\
    help="make dist vs dist plots of coinc triggers" )
parser.add_option("-l","--slide-dist",action="store_true",default=False,\
    help="make dist vs dist plots of time slide triggers" )
parser.add_option("-i","--hist-slides",action="store_true",default=False,\
    help="plot histograms of number of triggers in time slides")
parser.add_option("-j","--plot-slides",action="store_true",default=False,\
    help="plot of number of triggers vs slide number")
parser.add_option("-z","--add-zero-lag",action="store_true",default=False,\
    help="add the zero lag info to slide plots")
parser.add_option("-Z","--zero-lag-playground",action="store_true",default=False,\
    help="scale number of bkg triggers in slide plots by 600/6370")
parser.add_option("-k","--snr-dist",action="store_true",default=False,\
    help="plot distribution of snr" )
parser.add_option("-n","--nbins",action="store",type="int",default=20,\
    metavar=" NBINS", help="number of bins for the histogram plots" )
parser.add_option("-N","--num-slides",action="store",type="int",default=0,\
    metavar=" NUM_SLIDES",help="number of time slides performed" )
parser.add_option("-t","--plot-type",action="store",type="string",\
    default="linear",metavar=" PLOT_TYPE", \
    help="make either linear or log or plots" )
parser.add_option("-V","--veto-file",action="store",type="string",\
    default=None,metavar=" FNAME",\
    help="read in segments from FNAME (assumed segwizard format)")
(opts,args) = parser.parse_args()

if opts.plot_type not in ['log', 'linear']:
  print >>sys.stderr, "plot-type must be either \"log\" or \"linear\""
  sys.exit(1)

if not opts.glob:
  print >>sys.stderr, "Must specify a GLOB of files to read"
  print >>sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

# if doing any slide plots:
if opts.hist_slides or opts.slide_snr:
  if not opts.num_slides:
    print >>sys.stderr, "--num-slides must be specified if"
    print >>sys.stderr, "--hist-slides or --slide-snr are"
    sys.exit(1)

# check that statistic is OK:
if (opts.statistic != 'snr') and (opts.statistic != 'snr_over_chi') \
    and (opts.statistic != 's3_snr_chi_stat') \
    and (opts.statistic != 'effective_snr'):
  print >>sys.stderr, "--statistic must be one of"
  print >>sys.stderr, "(snr|snr_over_chi|s3_snr_chi_stat|effective_snr)"
  sys.exit(1)
    
plotsymbols = ['r+','bx','ko','g1']
hanfordsym = ['b+','bx','r1']
addsym = ['k+','kx','k1']

xlow = 20
xhigh = 0
f_name = opts.figure_name
if opts.cluster_window and f_name:
  f_name += '_clust_' + str(opts.cluster_window) + 'sec'

ifo_list = []
ifo_non_h = []
if opts.g1_triggers:
  ifo_list.append('G1')
  ifo_non_h.append('G1')
if opts.h1_triggers:
  ifo_list.append('H1')
if opts.h2_triggers:
  ifo_list.append('H2')
if opts.l1_triggers:
  ifo_list.append('L1')
  ifo_non_h.append('L1')

ifo_coincs = []
# two ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    if ifo1 < ifo2:
      ifo_coincs.append([ifo1, ifo2])
      
# three ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    for ifo3 in ifo_list:
      if ifo1 < ifo2 and ifo2 < ifo3:
        ifo_coincs.append([ifo1, ifo2, ifo3])
        
# four ifo
for ifo1 in ifo_list:
  for ifo2 in ifo_list:
    for ifo3 in ifo_list:
      for ifo4 in ifo_list:
        if ifo1 < ifo2 and ifo2 < ifo3 and ifo3 < ifo4:
          ifo_coincs.append([ifo1, ifo2, ifo3, ifo4])


###################################
# glob the list of files to read in
if opts.glob:  
  allfiles = []
  gl_pats = opts.glob.split(" ")
  for gl in gl_pats:
    allfiles += glob.glob(gl)

  if len(allfiles) < 1:
    print >>sys.stderr, "The glob for " + opts.glob + " returned no files"
    sys.exit(1)

  slidefiles = []
  coincfiles = []

  for file in allfiles:
    if 'SLIDE' in file:
      slidefiles.append(file)
    else:
      coincfiles.append(file)

########################
# read in coinc triggers

if coincfiles:
  inspTriggers = readMeta.snglInspiralTable(coincfiles,"sngl_inspiral")
  inspTriggers.addcol(opts.statistic)

  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    inspTriggers = inspTriggers.veto(seglist,"end_time")


  coincTriggers = readMeta.coincInspiralTable(inspTriggers,opts.statistic)

  # cluster them
  if opts.cluster_window:
    coincTriggers = coincTriggers.cluster(opts.cluster_window)

  if not opts.max_snr:
    if inspTriggers.nevents():
      xhigh = max( inspTriggers.mkarray(opts.statistic) )
    else:
      xhigh = 50.0
  else:
    xhigh = opts.max_snr + 1

  if not opts.min_snr:
    if inspTriggers.nevents():
      xlow = min( inspTriggers.mkarray(opts.statistic) )
    else:
      xlow = 1.0
  else:
    xlow = opts.min_snr
else:
  coincTriggers = None
  
########################
# read in slide triggers
slideTriggers = []
if slidefiles:
  inspSlide = readMeta.snglInspiralTable(slidefiles,"sngl_inspiral")
  inspSlide.addcol(opts.statistic)
  
  if opts.veto_file:
    file = open( opts.veto_file , "r")
    seglist = segmentsUtils.fromsegwizard(file)
    file.close()
    inspSlide = inspSlide.veto(seglist,"end_time")

  slide_num = range(1 , opts.num_slides + 1)
  slide_num.extend(range(-opts.num_slides, 0))

  for slide in slide_num:
    this_slide = {}
    this_slide["slide_num"] = slide
    if slide > 0:
      this_slide["sngl_trigs"] = inspSlide.getslide(slide)
    else:
      this_slide["sngl_trigs"] = inspSlide.getslide(5000 - slide)

    # make coincs
    this_slide["coinc_trigs"] = \
        readMeta.coincInspiralTable(this_slide["sngl_trigs"],opts.statistic )

    # cluster triggers
    if opts.cluster_window:
      this_slide["coinc_trigs"] = \
        this_slide["coinc_trigs"].cluster(opts.cluster_window)  
    
    # add slide to list
    slideTriggers.append(this_slide)

  if inspSlide.nevents():
    slide_high = max( inspSlide.mkarray(opts.statistic) )
    slide_low = min( inspSlide.mkarray(opts.statistic) )
  else:
    slide_high = 50.0
    slide_low = 1.0

fig_num = 1

#################################
# check we have required triggers
if (opts.snr_time or opts.snr_snr or opts.add_zero_lag) and not coincTriggers:
  print >>sys.stderr, \
     "there must be non time slide files in the glob"
  sys.exit(1)
  
if (opts.slide_snr or opts.slide_dist or opts.plot_slides or opts.hist_slides)\
    and not slideTriggers:
  print >>sys.stderr, \
     "there must be time slide files whose name includes SLIDE in the glob"
  sys.exit(1)




################################
# plot of h1 vs h2 stat

if opts.snr_snr or opts.slide_snr:
  if 'H1' in ifo_list and 'H2' in ifo_list:
    figure(fig_num)
    fig_num += 1
    hold(True)
    if opts.slide_snr:
      for slide in slideTriggers:
        viz.plotcoincval(slide["coinc_trigs"], opts.statistic, 'H1', 'H2', \
          'k+',opts.plot_type)
    if opts.snr_snr:
      viz.plotcoincval(coincTriggers, opts.statistic, 'H1', 'H2', \
          'r+',opts.plot_type)

    xlabel(opts.statistic + ' H1', size='x-large')
    ylabel(opts.statistic + ' H2', size='x-large')
    title('H1 vs H2 coincident event SNR')
    grid(True)
    if opts.min_snr:
      xlim(xmin=opts.min_snr)
      ylim(ymin=opts.min_snr)
    if opts.max_snr:
      xlim(xmax=opts.max_snr)
      ylim(ymax=opts.max_snr)
    else:
      square_axis()
    if f_name:
      savefig(f_name + "_H1_vs_H2_" + opts.statistic + ".png")


################################
# plot of hanford vs other snr

if opts.snr_snr or opts.slide_snr:
  if 'H1' in ifo_list or 'H2' in ifo_list:
    for ifo in ifo_non_h:
      figure(fig_num)
      fig_num += 1
      hold(True)
      if opts.slide_snr:
        for slide in slideTriggers:
          if 'H1' in ifo_list:
            viz.plotcoincval(slide["coinc_trigs"], opts.statistic, 'H1', ifo, \
              'kx', opts.plot_type)
          if 'H2' in ifo_list:
            viz.plotcoincval(slide["coinc_trigs"], opts.statistic, 'H2', ifo, \
              'k+', opts.plot_type)
          if 'H1' in ifo_list and 'H2' in ifo_list:
            viz.plotcoinchanford(slide["coinc_trigs"], opts.statistic, ifo, \
              'sqrtsqr', 'k1', opts.plot_type)
      
      if opts.snr_snr:
        sym = 0
        legend_text = []
        if 'H1' in ifo_list:
          viz.plotcoincval(coincTriggers, opts.statistic, 'H1', ifo, \
              hanfordsym[sym], opts.plot_type)
          legend_text.append('H1' + ifo)
          for add_ifo in ifo_non_h:
            if add_ifo != ifo:
              viz.plotcoincval(coincTriggers, opts.statistic, 'H1', ifo, \
                  addsym[sym], opts.plot_type, add_ifo)
              legend_text.append('H1' + ifo + '(also in ' + add_ifo + ')')
              
        if not opts.slide_snr: sym += 1
        if 'H2' in ifo_list:
          viz.plotcoincval(coincTriggers, opts.statistic, 'H2', ifo, \
              hanfordsym[sym], opts.plot_type)
          legend_text.append('H2' + ifo)
          for add_ifo in ifo_non_h:
            if add_ifo != ifo:
              viz.plotcoincval(coincTriggers, opts.statistic, 'H2', ifo, \
                  addsym[sym], opts.plot_type, add_ifo)
              legend_text.append('H2' + ifo + '(also in ' + add_ifo + ')')
              
        if not opts.slide_snr: sym += 1
        if 'H1' in ifo_list and 'H2' in ifo_list:       
          viz.plotcoinchanford(coincTriggers, opts.statistic, ifo, 'sqrtsqr', \
              hanfordsym[sym], opts.plot_type)
          legend_text.append('H1H2' + ifo)
          for add_ifo in ifo_non_h:
            if add_ifo != ifo:
              viz.plotcoinchanford(coincTriggers, opts.statistic, ifo, \
                  'sqrtsqr', addsym[sym],opts.plot_type, add_ifo)
              legend_text.append('H1H2' + ifo + '(also in ' + add_ifo + ')')


      if not opts.slide_snr:
        legend(legend_text,2)
      xlabel(opts.statistic + ' Hanford', size='x-large')
      ylabel(opts.statistic + ' '+ ifo, size='x-large')
      title('Hanford vs ' + ifo + ' coincident event SNR')
      grid(True)
      if opts.min_snr:
        xlim(xmin=opts.min_snr)
        ylim(ymin=opts.min_snr)
      if opts.max_snr:
        xlim(xmax=opts.max_snr)
        ylim(ymax=opts.max_snr)
      else:
        square_axis()
      if f_name:
        savefig(f_name + "_H_vs_" + ifo + "_" + opts.statistic + ".png")


################################
# plot of non hanford snr

if opts.snr_snr or opts.slide_snr:
  if len(ifo_non_h) >= 2:
    figure(fig_num)
    fig_num += 1
    hold(True)
    if opts.slide_snr:
      for slide in slideTriggers:
        viz.plotcoincval(slide["coinc_trigs"], opts.statistic, ifo_non_h[0], 
            ifo_non_h[1], 'kx',opts.plot_type)
    if opts.snr_snr:
      viz.plotcoincval(coincTriggers, opts.statistic, ifo_non_h[0], 
          ifo_non_h[1], 'r+',opts.plot_type)

    xlabel(snr + ' ' + ifo_non_h[0], size='x-large')
    ylabel(snr + ' ' + ifo_non_h[1], size='x-large')
    title(ifo_non_h[0] + ' vs ' + ifo_non_h[1] + ' coincident event SNR')
    grid(True)
    if opts.min_snr:
      xlim(xmin=opts.min_snr)
      ylim(ymin=opts.min_snr)
    if opts.max_snr:
      xlim(xmax=opts.max_snr)
      ylim(ymax=opts.max_snr)
    else:
      square_axis()
    if f_name:
      savefig(f_name + "_" + ifo_non_h[0] + "_vs_" + ifo_non_h[1] + "_" +\
          opts.statistic + ".png")


################################
# plot of h1 vs h2 eff dist
if opts.dist_dist:
  if 'H1' in ifo_list and 'H2' in ifo_list:
    figure(fig_num)
    fig_num += 1
    hold(True)
    if opts.slide_dist:
      for slide in slideTriggers:
        viz.plotcoincval(slide["coinc_trigs"], 'eff_distance', 'H1', 'H2', \
          'kx', opts.plot_type)
      
    if opts.dist_dist:
      viz.plotcoincval(coincTriggers, 'eff_distance', 'H1', 'H2', 'r+', \
          opts.plot_type)

    xlabel('eff distance H1 (Mpc)', size='x-large')
    ylabel('eff distance H2 (Mpc)', size='x-large')
    title('H1 vs H2 coincident event effective distance')
    grid(True)
    if opts.min_snr:
      xlim(xmin=opts.min_snr)
      ylim(ymin=opts.min_snr)
    if opts.max_snr:
      xlim(xmax=opts.max_snr)
      ylim(ymax=opts.max_snr)
    else:
      square_axis()
    if f_name:
      savefig(f_name + "_H1_vs_H2_dist.png")


####################################
# plot of statistic vs time (for each ifo)
if opts.snr_time:
  figure(fig_num)
  fig_num += 1
  hold(True)
  sym = 0
  for ifo in ifo_list:
    ifoTrigs = coincTriggers.getsngls(ifo)
    if opts.plot_type == 'linear':
      plot_type = 'linear'
    elif opts.plot_type == 'log':
      plot_type = 'logy'
      
    viz.plot_a_v_b(ifoTrigs, 'end_time', opts.statistic, plot_type, \
        plotsymbols[sym])
    legend(ifo_list,2)
    title( opts.statistic + ' vs end_time' )
    xlabel('end time (days into run)',size='x-large')
    ylabel(opts.statistic,size='x-large')
    grid(True)
    sym += 1
    if opts.min_snr:
      ylim(ymin=opts.min_snr)
    if opts.max_snr:
      ylim(ymax=opts.max_snr)
    
  if f_name:
    savefig(f_name + '_' + opts.statistic + "_vs_time.png")

################################################
# make plot/hist of number of triggers per slide
if opts.hist_slides or opts.plot_slides:
  if opts.add_zero_lag:
    coincTrigs = coincTriggers
  else:
    coincTrigs = None
    
  if opts.hist_slides:
    figure(fig_num)
    fig_num += 1
    viz.histslides(slideTriggers,coincTrigs,scalebkg=opts.zero_lag_playground)
    if f_name:
      savefig(f_name + "_hist_slide_trigs.png")
      
  if opts.plot_slides:
    figure(fig_num)
    fig_num += 1
    viz.plotslides(slideTriggers,coincTrigs,scalebkg=opts.zero_lag_playground)
    if f_name:
      savefig(f_name + "_plot_slide_trigs.png")
     
  for ifos in ifo_coincs:
    if opts.hist_slides:
      figure(fig_num)
      fig_num += 1
      viz.histslides(slideTriggers,coincTrigs,ifos)
      if f_name:
        output_name = f_name + '_'
        for ifo in ifos:
          output_name += ifo 
        output_name += "_hist_slide_trigs.png"
        savefig(output_name)

    if opts.plot_slides:
      figure(fig_num)
      fig_num += 1
      viz.plotslides(slideTriggers,coincTrigs,ifos)
      if f_name:
        output_name = f_name + '_'
        for ifo in ifos:
          output_name += ifo
        output_name += "_plot_slide_trigs.png"
        savefig(output_name)


################################################
# make histogram of stat distribution
if opts.snr_dist:
  figure(fig_num) 
  fig_num += 1

  viz.cumhiststat(coincTriggers, slideTriggers, None, opts.min_snr, \
        opts.max_snr, opts.nbins, opts.statistic)
  ylim(ymin=1.0e-01)
  ylim(ymax=2.0e+01)
  if f_name:  
    savefig(f_name + "_cum_hist_" + opts.statistic + ".png")

  

  for ifos in ifo_coincs:
    figure(fig_num) 
    fig_num += 1
    viz.cumhiststat(coincTriggers, slideTriggers, ifos, opts.min_snr, \
        opts.max_snr, opts.nbins, opts.statistic)
    if f_name:
      output_name = f_name + '_'
      for ifo in ifos:
        output_name += ifo
      output_name += "_cum_hist_" + opts.statistic + ".png"
      savefig(output_name)


if opts.show_plot:
  show()
