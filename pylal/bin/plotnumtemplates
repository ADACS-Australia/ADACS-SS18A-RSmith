#!/usr/bin/python
"""
Rate of triggers TMPLTBANK files

Example:

>>>   

todo
  - documentation
"""



__version__ = "$Revision$"
__date__ = "$Date$"
__name__ = "plotnumtemplates"
__Id__ = "$Id$"
__title__ = "Template Bank Size Plots"


# $Source$

import sys
import glob
import gzip
from optparse import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue import lal
from pylal import InspiralUtils

# ============================================================================
def plotnumtemplates_tmpltbank_size(opts):
  """

  """
  global figure_number 
  
  prefix, suffix = InspiralUtils.create_output_name(opts, __name__)
  # iterate figure number 
  figure_number = figure_number + 1
  figure(figure_number)
  
  for ifo in tmpltSumm.keys():
    numTemplates = tmpltSumm[ifo].getColumnByName('nevents').asarray()
    startTime = viz.timeindays(tmpltSumm[ifo].getColumnByName('out_start_time').asarray())
    style = colors[ifo] + 'x'
    plot(startTime, numTemplates, style, label=ifo+' tmplt',\
        markersize=12, markeredgewidth=1)
    if opts.print_numbers:
      print "Number of templates for :" +ifo+ str(startTime) +" " + str(numTemplates)

  for ifo in trigSumm.keys():
    numTrigs = trigSumm[ifo].getColumnByName('nevents').asarray()
    startTime = viz.timeindays(trigSumm[ifo].getColumnByName('out_start_time').asarray())
    style = colors[ifo] + 'o'
    plot(startTime, numTrigs, style, label=ifo+' trig',\
        markersize=12, markeredgewidth=1)
    if opts.print_numbers:
      print "Number templates for :" +ifo+ str(startTime) +" " + str(numTrigs)
      
  xlabel('Days after start of run', size='x-large')
  ylabel('Number of templates', size='x-large')
  legend()
  grid("on")

  if opts.enable_output is True:
    fname = prefix +  suffix + ".png"
    savefig(fname)
  else:
    fname = []
  
  return fname

# ============================================================================
# function to read in a list of files
def isSearchSumm(name, attrs):
  return lsctables.IsTableProperties(lsctables.SearchSummaryTable, name, attrs)

def isProcess(name, attrs):
  return lsctables.IsTableProperties(lsctables.ProcessTable, name, attrs)

def readFiles(fList):
  """
  read in the SimInspiralTables from a list of files
  @param fList:       list of input files
  """
  output = {}
  if not fList:
    return output
  count = 0
  for thisFile in fList:
    fileobj = file(thisFile)
    count = count+1
    if opts.verbose is True:
      print '...reading ' +  str(count)+'/'+str(len(fList))
    if thisFile.endswith(".gz"):
      fileobj = gzip.GzipFile(mode = "rb", fileobj=fileobj)
    else:
      fileobj = thisFile
 
    doc = ligolw.Document()
    # read in ifo from process, as not stored in SearchSumm
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
	isProcess)).parse(fileobj)
    ifo = doc.childNodes[0].getColumnByName('ifos')[0]
    if thisFile.endswith(".gz"):
       fileobj.seek(0)
    else: pass
  
    # read in SearchSummary
    doc = ligolw.Document()
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
        isSearchSumm)).parse(fileobj)
    searchSummTable = doc.childNodes[0]
    if output.has_key(ifo):
      output[ifo].extend(searchSummTable)
    else:
      output[ifo] = searchSummTable
  return output


#################################################################
# help message
usage = """\
%prog [options]
------------------------------------------------------------------------------
  SUMMARY: Makes a plot of the number of templates against time.  The code
           will read in either TMPLTBANK files or TRIGBANK files or both, 
           for as many ifo's as you like.  It will then plot the number of 
           templates vs time for each ifo and each type of bank (TMPLT and 
           TRIG).
------------------------------------------------------------------------------
"""

##############################################################################
def parse_command_line():
  """
  Parser function dedicated 
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")
  parser.add_option("-t","--tmpltbank-glob",action="store",type="string",\
      default=None,metavar="TMPLT",\
      help="glob for files containing the string TMPLT")
  parser.add_option("-T","--trigbank-glob",action="store",type="string",\
      default=None,metavar="TRIG",\
      help="glob for files containing the string TRIG")
  parser.add_option("-c","--cache-file",action="store",type="string",\
      default=None,metavar="INPUT",\
      help="supply a bunch of TMPLT files or TRIG files")
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-p","--print-numbers",action="store_true",default=False,\
      help="prints each number on the screen" )
  parser.add_option("-u","--user-tag",action="store",type="string",\
      default=None, metavar=" USERTAG",\
      help="" )
  parser.add_option("-P","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-v","--verbose",action="store_true",\
      default=False,help="print information" )
  parser.add_option("","--ifo-type",action="store",\
      type="string", default=None,  metavar="IFO_TYPE",\
      help="sieve a cache file according to a particular ifo type")
  parser.add_option("-i", "--ifo-times", action="store", type="string",\
      metavar="IFOTIMES", help="ifo times is used as a prefix for the output files" )



  command_line = sys.argv[1:]
  (options,args) = parser.parse_args()

  # test the input options
  if not options.ifo_times:
    raise ValueError, "--ifo-times (which ifos were analysed) must be provided"

  if options.cache_file and (options.inspiral_glob or options.tmpltbank_glob):
    raise ValueError, """
Use either the glob options(inspiral-glob, tmpltbank-glob 
OR the cachefile options (--cache-file), not both at the same time.
"""

  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
# -- some initialisation
figure_number = 0  # used for the figure label (showplot)
output_cachefile_name = []   # use for the cache file

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz


# ============================================================================
# -- identify the template bank files
if opts.tmpltbank_glob:
  tmpltbankFiles = glob.glob(opts.tmpltbank_glob)
  if not tmpltbankFiles:
    print >>sys.stderr, "The glob for " + opts.tmpltbank_glob + \
        " returned no files"
    sys.exit(1)
else:
  tmpltbankFiles = None

# identify the trigbank files
if opts.trigbank_glob:
  trigbankFiles = glob.glob(opts.trigbank_glob)
  if not trigbankFiles:
    print >>sys.stderr, "The glob for " + opts.trigbank_glob + \
        " returned no files"
    sys.exit(1)
else:
  trigbankFiles = None
 
if opts.cache_file:
  trig = lal.Cache().fromfile(open(opts.cache_file))
  if not trig:
    print >>sys.stderr, "Must supply a list of input files"
    sys.exit(1) 
  else:
    tmpltbankFiles = trig.sieve(description = "TMPLTBANK").checkfilesexist()[0].pfnlist()
    trigbankFiles = trig.sieve(description = "TRIGBANK").checkfilesexist()[0].pfnlist()


# ============================================================================
# Initialise 
prefix, suffix = InspiralUtils.create_output_name(opts, __name__)

if opts.enable_output is True:
  # -- initialise the web page calling init_page
  page, extra = InspiralUtils.init_markup_page(opts)
  # -- filename 
  html_filename = prefix[0:len(prefix)-1] + suffix +".html"
  html_file = file(html_filename, "w")
  # -- set output_cache properly: make sure there is a slash 
  if len(opts.output_path)>1 :
    opts.output_path = opts.output_path +'/'


#######################################################################
# Read in the search summaries from the template banks

print 'Reading files...' + str(len(tmpltbankFiles))
tmpltSumm = readFiles(tmpltbankFiles)
print 'Reading files...' + str(len(trigbankFiles))
trigSumm  = readFiles(trigbankFiles)
print 'done'

# -- set the proper color code
colors = InspiralUtils.colors


# ============================================================================
# Make plot of tmpltbank size 
# create a text for the alt and title of html document
text ="Inspiral horizon distance for a (1.4,1.4)"+\
    " solar mass system with SNR=8"
# -- the plot itself --
fname =  plotnumtemplates_tmpltbank_size(opts)

# -- save results in output files --
if opts.enable_output is True:
  # -- create a link and image html tag
  page.a(extra.img(src=[opts.output_path +fname], width=400, \
      alt=text, border="2"), title=text, href=[opts.output_path + fname])
   # -- keep track of this filename 
  output_cachefile_name.append(fname)

  

# ============================================================================
# final step: html, cahe file generation
if opts.enable_output:
  text = InspiralUtils.writeProcessParams( __name__, __version__, args)
  page.add(text)
  html_file.write(page(False))
  html_file.close()

if opts.enable_output is True:
  output_cache_name = prefix[0:len(prefix)-1] + suffix +'.cache'
  this = open(output_cache_name, 'w')
  if opts.enable_output is True: 
    this.write(html_filename + '\n')
  for fname in output_cachefile_name:
    this.write(fname + '\n')
  this.close()
  
# ============================================================================

if opts.show_plot:
  show()  
