#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

import math
from optparse import OptionParser
import numarray
from pysqlite2 import dbapi2 as sqlite
import sys

from glue import segments
from pylal import llwapp
from pylal import rate
from pylal import SnglBurstUtils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("--made-only", action = "store_true", default = False, help = "plot only injections that were made")
	parser.add_option("-b", "--base", metavar = "base", default = "plotbinj_", help = "set the prefix for output filenames (default = plotbinj_)")
	parser.add_option("-f", "--format", metavar = "format", default = "png", help = "set the output image format (default = png)")
	parser.add_option("--plot", metavar = "number", action = "append", default = None, help = "generate the given plot number")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if options.plot:
		options.plot = map(int, options.plot)
	else:
		options.plot = range(6)


	return options, (filenames or [None])

try:
	options, filenames = parse_command_line()
except ValueError, e:
	print >>sys.stderr, "error: %s" % str(e)
	sys.exit(1)


#
# =============================================================================
#
#                              Frequency vs. Time
#
# =============================================================================
#

class FreqVsTime(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument):
		SnglBurstUtils.BurstPlot.__init__(self, "GPS Time (s)", "Frequency (Hz)")
		self.axes.semilogy()
		self.instrument = instrument
		self.num_injections = 0
		self.injected_x = []
		self.injected_y = []
		self.missed_x = []
		self.missed_y = []
		self.seglist = segments.segmentlist()

	def add_contents(self, contents):
		self.num_injections += len(contents.sim_burst_table)
		self.seglist |= contents.seglists[self.instrument]
		for sim in contents.sim_burst_table:
			self.injected_x.append(float(sim.get_geocent_peak()))
			self.injected_y.append(sim.freq)
		for sim in map(contents.sim_burst_table.__getitem__, contents.missed_injections[self.instrument]):
			self.missed_x.append(float(sim.get_geocent_peak()))
			self.missed_y.append(sim.freq)

	def finish(self):
		self.axes.plot(self.injected_x, self.injected_y, "k+")
		if not options.made_only:
			self.axes.plot(self.missed_x, self.missed_y, "ro")
		for seg in ~self.seglist & segments.segmentlist([segments.segment(self.axes.get_xlim())]):
			self.axes.axvspan(seg[0], seg[1], facecolor = "k", alpha = 0.2)
		self.axes.set_ylim([min(self.injected_y), max(self.injected_y)])
		self.axes.set_title("Injection Locations\n(%d Injections)" % self.num_injections)


#
# =============================================================================
#
#                           Amplitude vs. Frequency
#
# =============================================================================
#

class AmplVsFreqScatter(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument):
		SnglBurstUtils.BurstPlot.__init__(self, "Frequency (Hz)", r"$h_{\textrm{rss}}$")
		self.axes.loglog()
		self.instrument = instrument
		self.num_injections = 0
		self.injected_x = []
		self.injected_y = []
		self.missed_x = []
		self.missed_y = []

	def add_contents(self, contents):
		self.num_injections += len(contents.sim_burst_table)
		for sim in contents.sim_burst_table:
			self.injected_x.append(sim.freq)
			self.injected_y.append(sim.hrss)
		for sim in map(contents.sim_burst_table.__getitem__, contents.missed_injections[self.instrument]):
			self.missed_x.append(sim.freq)
			self.missed_y.append(sim.hrss)

	def finish(self):
		self.axes.plot(self.injected_x, self.injected_y, "k+")
		if not options.made_only:
			self.axes.plot(self.missed_x, self.missed_y, "ro")
		self.axes.set_xlim([min(self.injected_x), max(self.injected_x)])
		self.axes.set_ylim([min(self.injected_y), max(self.injected_y)])
		self.axes.set_title("Injection Amplitude vs. Frequency\n(%d Injections)" % self.num_injections)


class AmplVsFreqContour(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument, error):
		SnglBurstUtils.BurstPlot.__init__(self, "Frequency (Hz)", r"$h_{\textrm{rss}}$")
		self.axes.loglog()
		self.instrument = instrument
		self.error = error
		self.num_injections = 0
		self.injected_x = []
		self.injected_y = []
		self.found_x = []
		self.found_y = []

	def add_contents(self, contents):
		self.num_injections += len(contents.sim_burst_table)
		for sim in contents.sim_burst_table:
			self.injected_x.append(sim.freq)
			self.injected_y.append(sim.hrss)
		for sim in map(contents.sim_burst_table.__getitem__, contents.missed_injections[self.instrument]):
			self.found_x.append(sim.freq)
			self.found_y.append(sim.hrss)

	def finish(self):
		efficiency = rate.BinnedRatios(rate.Bins(min(self.injected_x), max(self.injected_x), 1024, min(self.injected_y), max(self.injected_y), 512, spacing = ["log", "log"]))
		map(efficiency.incdenominator, zip(self.injected_x, self.injected_y))
		map(efficiency.incnumerator, zip(self.found_x, self.found_y))

		bins_per_inj = efficiency.used() / float(self.num_injections)
		#bins_per_inj = efficiency.numerator.shape[0] * efficiency.numerator.shape[1] / float(self.num_injections)
		window_size = (bins_per_inj / self.error**2)**0.5
		if window_size > 100:
			raise SnglBurstUtils.BurstPlotError, "smoothing filter too large (not enough injections)"
		efficiency.regularize()
		xcoords, ycoords = efficiency.centres()
		if options.made_only:
			zvals = efficiency.denominator
			rate.filter_array(zvals, rate.gaussian_window2d(window_size, window_size))
			cset = self.axes.contour(xcoords, ycoords, numarray.transpose(zvals))
		else:
			zvals = efficiency.ratio()
			rate.filter_array(zvals, rate.gaussian_window2d(window_size, window_size))
			cset = self.axes.contour(xcoords, ycoords, numarray.transpose(zvals), [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9])
		self.axes.set_title("Injection Detection Efficiency\n(%d Injections, Contours at 10%% Intervals, %g%% Uncertainty)" % (self.num_injections, 100 * self.error))


#
# =============================================================================
#
#                           Trigger Count Histogram
#
# =============================================================================
#

class TriggerCountHistogram(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument):
		SnglBurstUtils.BurstPlot.__init__(self, "Number of Triggers Coincident with Injection", "Count")
		self.axes.semilogy()
		self.instrument = instrument
		self.found = 0
		self.bins = []

	def add_count(self, n):
		while n + 1 >= len(self.bins):
			self.bins.append(0)
		self.bins[n] += 1

	def add_contents(self, contents):
		for coinc in contents.coinc_table.selectByDefID(contents.sb_definer_id):
			self.found += 1
			self.add_count(coinc.nevents)

	def finish(self):
		self.axes.plot(range(len(self.bins)), self.bins, "ko-")
		self.axes.set_title("Triggers per Found Injection\n(%d Found Injections)" % self.found)


#
# =============================================================================
#
#                       Recovered vs. Injected Amplitude
#
# =============================================================================
#

class RecoveredVsInjectedAmplitude(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument):
		SnglBurstUtils.BurstPlot.__init__(self, r"Injected $h_{\textrm{rss}}$", "Recovered Confidence")
		self.axes.loglog()
		self.fig.set_figsize_inches(16, 16)
		self.instrument = instrument
		self.found = 0
		self.recovered = []
		self.injected = []

	def add_contents(self, contents):
		for coinc in contents.coinc_table.selectByDefID(contents.sb_definer_id):
			self.found += 1
			confidence = max([-burst.confidence for burst in coinc.sngl_bursts()])
			for sim in coinc.sim_bursts():
				self.injected.append(sim.hrss)
				self.recovered.append(confidence)

	def finish(self):
		self.axes.plot(self.injected, self.recovered, "k+")
		self.axes.set_title("Recovered Amplitude vs. Injected Amplitude\n(%d Found Injections)" % self.found)


#
# =============================================================================
#
#                            Recovered Time Offset
#
# =============================================================================
#

class RecoveredTimeOffset(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument, interval, width):
		SnglBurstUtils.BurstPlot.__init__(self, "Offset (s)", "Triggers per Unit Offset")
		self.instrument = instrument
		self.found = 0
		self.offsets = rate.Rate(interval, width)
		self.best = rate.Rate(interval, width)

	def add_contents(self, contents):
		for coinc in contents.coinc_table.selectByDefID(contents.sb_definer_id):
			self.found += 1
			best_conf = 0.0
			best_dt = None
			sim = list(coinc.sim_bursts())[0]
			for burst in coinc.sngl_bursts():
				dt = burst.get_peak() - sim.get_peak(burst.ifo)
				self.offsets[dt] = 1.0
				if -burst.confidence > best_conf:
					best_conf = -burst.confidence
					best_dt = dt
			if best_dt != None:
				self.best[best_dt] = 1.0

	def finish(self):
		self.axes.set_title("Trigger Peak Time - Injection Peak Time\n(%d Found Injections)" % self.found)
		self.axes.plot(self.offsets.xvals(), self.offsets.filtered(), "k")
		self.axes.plot(self.best.xvals(), self.best.filtered(), "r")


#
# =============================================================================
#
#                                     Plot
#
# =============================================================================
#

def new_plots(instrument, plots):
	l = [
		FreqVsTime(instrument),
		AmplVsFreqScatter(instrument),
		AmplVsFreqContour(instrument, 0.1),
		TriggerCountHistogram(instrument),
		RecoveredVsInjectedAmplitude(instrument),
		RecoveredTimeOffset(instrument, segments.segment(-0.25, +0.25), 0.005)
	]
	return [l[i] for i in plots]

plots = {}
for n, filename in enumerate(llwapp.sort_files_by_size(filenames, options.verbose, reverse = True)):
	if options.verbose:
		print >>sys.stderr, "%d/%d:" % (n + 1, len(filenames)),
	database = SnglBurstUtils.CoincDatabase(sqlite.connect(":memory:"))
	xmldoc = llwapp.load_filename(filename, options.verbose, gz = filename[-3:] == ".gz")
	database.summarize(xmldoc, "power", options.verbose)
	for instrument in database.instruments:
		if instrument not in plots:
			plots[instrument] = new_plots(instrument, options.plot)
		for n, plot in zip(options.plot, plots[instrument]):
			if options.verbose:
				print >>sys.stderr, "adding to %s plot %d..." % (instrument, n)
			plot.add_contents(database)
	xmldoc.unlink()


# delete the plots as we go to save memory
for instrument in plots:
	n = 0
	format = "%%s%s_%%0%dd.%%s" % (instrument, int(math.log10(max(options.plot) - 1)) + 1)
	while len(plots[instrument]):
		filename = format % (options.base, options.plot[n], options.format)
		if options.verbose:
			print >>sys.stderr, "finishing %s plot %d..." % (instrument, options.plot[n])
		try:
			plots[instrument][0].finish()
		except SnglBurstUtils.BurstPlotError, e:
			print >>sys.stderr, "can't finish %s plot %d: %s" % (instrument, options.plot[n], str(e))
		else:
			if options.verbose:
				print >>sys.stderr, "writing %s..." % filename
			plots[instrument][0].fig.savefig(filename)
		del plots[instrument][0]
		n += 1
