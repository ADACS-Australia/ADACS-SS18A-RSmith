#!/usr/bin/python
__author__ = "David McKechan"
__title__ = "Track the SNR of found triggers"
__name__ = "plotinspfound"
###############################################################################
import sys, os, re, glob, exceptions
from optparse import *
from matplotlib.ticker import FormatStrFormatter
from glue import segments
from glue import segmentsUtils
from glue import lal
from glue.ligolw import lsctables
from pylal import SnglInspiralUtils
from pylal import CoincInspiralUtils
from pylal import InspiralUtils
from pylal import SimInspiralUtils
import numpy
import matplotlib
matplotlib.use('Agg')
from pylab import *


###############################################################################
usage =  """Usage: %prog [options]

plotinspfound --cache-file triggers.cache --bbhinj --core-first --h1-triggers

"""


def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage) 
  parser.add_option("-c", "--cache-file", help="LAL cache of relevant files")
  parser.add_option("-t", "--threshold", action="store", type="float", \
                    default=0.,help="actual loss in  SNR to flag.")
  parser.add_option("-d", "--display", action="store_true",\
                     default=False, help="print snr loss information" )
  parser.add_option("-v", "--verbose",action="store_true",\
                     default=False,help="print all information" )
  parser.add_option("-m", "--plot-mchirp",action="store_true",\
                     default=False,help="plot snr loss against mchirp" )
  parser.add_option("-e", "--plot-end-time",action="store_true",\
                     default=False,help="plot snr loss agains end_time" )
  parser.add_option("-s", "--plot-snr",action="store_true",\
                     default=False,help="plot snr loss agains snr" )
  parser.add_option("-b", "--bbhinj",action="store_true",\
                     default=False,help="use bbhinj trigger files" )
  parser.add_option("-n", "--nsbhinj",action="store_true",\
                     default=False,help="use nsbhinj trigger files" )
  parser.add_option("-l", "--bnsinj",action="store_true",\
                     default=False,help="use bnsinj trigger files" )
  parser.add_option("-S", "--spininj",action="store_true",\
                     default=False,help="use spininj trigger files" )
  parser.add_option("-f", "--coire-first",action="store_true",\
                     default=False,help="check snr at first coincidence stage" )
  parser.add_option("-r", "--sire-second",action="store_true",\
                     default=False,help="check snr at second inspiral stage" )
  parser.add_option("-H", "--h1-triggers",action="store_true",\
                     default=False,help="use H1 triggers" )
  parser.add_option("-w", "--h2-triggers",action="store_true",\
                     default=False,help="use H2 triggers" )
  parser.add_option("-L", "--l1-triggers",action="store_true",\
                     default=False,help="use L1 triggers" )
  parser.add_option("-W", "--summary-file",action="store_true", \
                     default=False,help="write trigger informtion to file")
  parser.add_option("-o","--output-path",action="store", type="string", \
                     default=None,help="specify output path")

  command_line = sys.argv[1:]
  (options,args) = parser.parse_args()

  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
if opts.verbose:
  opts.display = True
comments = ""

if opts.cache_file:
  cache = lal.Cache.fromfile(open(opts.cache_file))

else:
  print "--cache-file must be specified!"
  sys.exit()

injPattern=[]
if opts.bbhinj:
  injPattern.append( "BBHINJ" )
if opts.bnsinj:
  injPattern.append( "BNSINJ" )
if opts.nsbhinj:
  injPattern.append( "NSBHINJ" )
if opts.spininj:
  injPattern.append( "SPININJ" )
if len( injPattern ) == 0:
  print "ERROR! must specify one of --bbhinj, --bnsinj, --nsbhinj or --spininj"
  sys.exit()

ifos=[]
if opts.h1_triggers:
  ifos.append( "H1" )
if opts.h2_triggers:
  ifos.append( "H2" )
if opts.l1_triggers:
  ifos.append( "L1" )
if len( ifos ) == 0:
  print "ERROR! must specify one of --h1-triggers, --h2-triggers or ", \
        "--l1-triggers"
  sys.exit()

snrPlots=[]
if opts.plot_snr:
  snrPlots.append("snr")
if opts.plot_mchirp:
  snrPlots.append("mchirp")
if opts.plot_end_time:
  snrPlots.append("end_time")

if opts.summary_file:
  if opts.output_path:
    outfile = opts.output_path
  else:
    outfile = "pinspfound_log.txt"
else:
  if opts.output_path:
    print "Error! cannot specify --output-path without using --summary-file"
    sys.exit()


##############################################################################
def get_sngl_triggers(opts, observatory, pattern):
 
  trigcache = cache.sieve(ifos = observatory, description = pattern)
  trigFiles = trigcache.checkfilesexist()[0].pfnlist()
  if opts.verbose:
    print "\n reading the following trigger files..."
    for file in trigFiles:
      print file
    print "\n"

  triggers  = SnglInspiralUtils.ReadSnglInspiralFromFiles(trigFiles)
  
  return triggers


##############################################################################
def get_coinc_triggers(opts, observatory, pattern):

  trigcache = cache.sieve(ifos = observatory, description = pattern)
  trigFiles = trigcache.checkfilesexist()[0].pfnlist()
  if opts.verbose:
    print "\n reading the following trigger files..."
    for file in trigFiles:
      print file
    print "\n"

  inspTriggers  = SnglInspiralUtils.ReadSnglInspiralFromFiles(trigFiles)
  coincTriggers = CoincInspiralUtils.coincInspiralTable(inspTriggers, \
                             CoincInspiralUtils.coincStatistic( "snr") )
  
  triggers = coincTriggers.getsngls(observatory)

  return triggers


##############################################################################
def get_injections(opts,  pattern):
  pattern = 'INJECTIONS*' +pattern
   
  injcache = cache.sieve(ifos = "HL", description = pattern)
  injFiles = injcache.checkfilesexist()[0].pfnlist()

  if opts.verbose:
    print "\n reading the following injection files..."
    for file in injFiles:
      print file
    print "\n"

  injections = SimInspiralUtils.ReadSimInspiralFromFiles(injFiles)

  return injections


##############################################################################
def check_snr_loss(opts, observatory, triggersBefore, triggersAfter, \
                                                  injPattern, stages):
  """
  Checks the snrs and end times between different stages of the pipeline.
  """
  loss = []
  aboveBefore = lsctables.SnglInspiralTable()
  aboveAfter  = lsctables.SnglInspiralTable()

#  above = [[],[]]
#  below = [[],[]]
  
  # Convert endTimesBefore to a list so we can use list.index
  endTimesBefore = list( triggersBefore.get_column("end_time") )
  snrsBefore = triggersBefore.get_column("snr")
  
  endTimesAfter  = triggersAfter.get_column("end_time")
  snrsAfter  = triggersAfter.get_column("snr") 
  
  for i in xrange( len(endTimesAfter) ):
   
    if endTimesAfter[i] in endTimesBefore:
      j = endTimesBefore.index( endTimesAfter[i] )
      
      loss.append( snrsBefore[j] - snrsAfter[i])
 
      if loss[i] >= opts.threshold:
        aboveBefore.append( triggersBefore[j] )
        aboveAfter.append( triggersAfter[i] )

#        below[0].append( endTimesAfter[i] )
#        below[1].append( loss[i] )
        if opts.display:
          lossPrint = '%3.2f' % (loss[i])
          snr1Print = '%3.2f' % (snrsBefore[j])
          snr2Print = '%3.2f' % (snrsAfter[i])

          print " Warning!", lossPrint, "loss in SNR for trigger in \n", \
                "         ", observatory, ",", injPattern, ",", stages
          print " end_time = ", endTimesBefore[j], " snr = ", snr1Print 
          print " end_time = ", endTimesAfter[i],  " snr = ", snr2Print 
        if opts.summary_file:
          outstring = observatory + ' ' + injPattern + ' '
          outstring = outstring + str(endTimesAfter[i]) + ' '
          outstring = outstring + str(snrsBefore[j]) + ' '
          outstring = outstring + str(snrsAfter[i]) + ' '
          outstring = outstring + str(loss[i]) + ' ' + stages + '\n'
 
          fout.write(outstring)

#      else:
#       above[0].append( endTimesAfter[i] )
#       above[1].append( loss[i] )

    else:
      if opts.verbose:
        print "ERROR! Can't find original trigger, check cache file."
        print "       Setting loss=0 for this trigger, end_time = ", \
                                                 endTimesAfter[i]
      loss.append( 0 )  
      
  return loss, aboveBefore, aboveAfter #, above, below


##############################################################################
def track_column(opts, observatory, triggersBefore, triggersAfter, column):

  change=[]

  # Convert endTimesBEfore to a list so we can use list.index
  endTimesBefore = list( triggersBefore.get_column("end_time") )
  columnBefore = triggersBefore.get_column(column)
  
  endTimesAfter  = triggersAfter.get_column("end_time")
  columnAfter  = triggersAfter.get_column(column) 

  for i in xrange( len(endTimesAfter) ):
   
    if endTimesAfter[i] in endTimesBefore:
      j = endTimesBefore.index( endTimesAfter[i] )
      
      change.append( columnBefore[j] - columnAfter[i])

      if opts.verbose:
        print "ERROR! Can't find original trigger, check cache file."
        print "       Setting change=0 for this trigger, end_time = ", \
                                                 endTimesAfter[i]
    else:
      change.append( 0 )  
      
  return change


##############################################################################
def plot_snr_loss(opts, observatory, injPattern, snrPlots, triggersAfter, \
                                                         stages, snrLoss):
  # y-axis is always the same
  graph_ylabel = 'SNR loss'
  delta = 0.05*(max(snrLoss) - min(snrLoss))
  ymin = min(snrLoss) - delta
  ymax = max(snrLoss) + delta
  
  for i in xrange( len(snrPlots) ): 
    if snrPlots[i] == "end_time":
      endTimesAfter  = triggersAfter.get_column("end_time")

      plot(endTimesAfter, snrLoss, 'ro');
  
      graph_title  = observatory +' end_time ' +injPattern +'\n' +stages
      graph_xlabel = 'GPS end time'
      title(graph_title)
      xlabel(graph_xlabel)
      ylabel(graph_ylabel)

      delta = 0.05*(max(endTimesAfter) - min(endTimesAfter))
      xmin = min(endTimesAfter) - delta
      xmax = max(endTimesAfter) + delta
      axis([xmin, xmax, ymin, ymax])

      name = observatory + '_' +injPattern +'_end_time_' +stages
      savefig(name)
      close()
 
 
    elif snrPlots[i] == "snr":
      snrsAfter  = triggersAfter.get_column("snr")
      semilogx(snrsAfter, snrLoss, 'ro');

      graph_title = observatory +' SNR ' +injPattern +'\n' +stages
      graph_xlabel = 'SNR (after loss)'
      title(graph_title)
      xlabel(graph_xlabel)
      ylabel(graph_ylabel)

      xmin = 4
      xmax = 1.4*max(snrsAfter)
      axis([xmin, xmax, ymin, ymax])

      name = observatory + '_' +injPattern +'_SNR_' +stages
      savefig(name)
      close()
 
 
    else:
      values = triggersAfter.get_column( snrPlots[i] )
      plot(values, snrLoss, 'ro');
      
      graph_title = observatory +' ' +snrPlots[i] +' ' +injPattern +'\n' \
			              +stages
      graph_xlabel = snrPlots[i]
      title(graph_title)
      xlabel(graph_xlabel)
      ylabel(graph_ylabel)

      delta = 0.05*(max(values) - min(values))
      xmin = min(values) - delta
      xmax = max(values) + delta
      axis([xmin, xmax, ymin, ymax])
      
      name = observatory +'_' +injPattern +'_' +snrPlots[i] +'_' +stages
      savefig(name)
      close()
		


##############################################################################
def plot_changes(opts, before, after, stages, injPattern):
 print 'hi'


##############################################################################
def do_everything(opts, ifos, injPattern, snrPlots):

  for i in xrange( len(ifos) ):
    observatory = ifos[i]

    for j in xrange( len(injPattern) ):
      pattern = 'SIRE*FOUND*FIRST*' +injPattern[j]
      sireFirst   = get_sngl_triggers(opts, observatory, pattern)

      pattern = 'COIRE*FOUND*SECOND*' +injPattern[j]
      coireSecond  = get_coinc_triggers(opts, observatory, pattern)
       
      if opts.coire_first:
        pattern = 'COIRE*FOUND*FIRST*' +injPattern[j]
        coireFirst  = get_coinc_triggers(opts, observatory, pattern)

        stages = "SIRE_FIRST_to_COIRE_FIRST"
        loss = check_snr_loss(opts, observatory, sireFirst, coireFirst, \
                                                 injPattern[j], stages)
        if len( snrPlots ) > 0:
          plot_snr_loss(opts, observatory, injPattern[j], snrPlots, \
                                          coireFirst, stages, loss[0])

        stages = "COIRE_FIRST_to_COIRE_SECOND"
        loss  = check_snr_loss(opts, observatory, coireFirst, coireSecond, \
                                                    injPattern[j], stages)
        if len( snrPlots ) > 0 :
          plot_snr_loss(opts, observatory, injPattern[j], snrPlots, \
                                         coireSecond, stages, loss[0])

      else:
        stages = "SIRE_FIRST_to_COIRE_SECOND"
        loss = check_snr_loss(opts, observatory, sireFirst, coireSecond, \
                                                 injPattern[j], stages)
        if len( snrPlots ) > 0 :
          plot_snr_loss(opts, observatory, injPattern[j], snrPlots, \
                                         coireSecond, stages, loss[0])
        



##############################################################################
if opts.summary_file:
  fout = open(outfile, "w")
  outstring = " ifo, injPattern, end_time, snrBefore, snrAfter,"
  outstring = outstring + ',snrLoss, stages' + '\n'
  fout.write(outstring)

  do_everything(opts, ifos, injPattern, snrPlots)

if opts.summary_file:
  fout.close()
