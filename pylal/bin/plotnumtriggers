#!/usr/bin/python

__version__ = "$Revision$"
__name__ = "plotnumtriggers"
__Id__ = "$Id$"

import sys
import glob
import gzip
from optparse import *
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue import lal

##############################################################################

##############################################################################
# function to read in a list of files
def isSearchSumm(name, attrs):
  return lsctables.IsTableProperties(lsctables.SearchSummaryTable, name, attrs)

def isProcess(name, attrs):
  return lsctables.IsTableProperties(lsctables.ProcessTable, name, attrs)

def writeProcessParams(page, command_line):
  """
  function to write out the process params that the code was called with
  """
  text = "Figures produced with "+ __name__+", "+__version__[1:len(__version__)-1]+", invoked with arguments:\n\n"+ __name__

  for arg in command_line:
    text += " " +  arg
  page.pre( text )
  return page

def readFiles(fList):
  """
  read in the SimInspiralTables from a list of files
  @param fList:       list of input files
  """
  output = {}
  if not fList:
    return output
  count = 0
  for thisFile in fList:
    fileobj = file(thisFile)
    count = count+1
    if opts.verbose is True :
      print '...reading ' +  str(count)+'/'+str(len(fList)) + " " + thisFile
    if thisFile.endswith(".gz"):
      fileobj = gzip.GzipFile(mode = "rb", fileobj=fileobj)
    else:
      fileobj = thisFile
 
    doc = ligolw.Document()
    # read in ifo from process, as not stored in SearchSumm
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
	isProcess)).parse(fileobj)
    ifo = doc.childNodes[0].getColumnByName('ifos')[0]
    if thisFile.endswith(".gz"):
       fileobj.seek(0)
    else: pass
  
    # read in SearchSummary
    doc = ligolw.Document()
    ligolw.make_parser(ligolw.PartialLIGOLWContentHandler(doc, \
        isSearchSumm)).parse(fileobj)
    searchSummTable = doc.childNodes[0]
    if output.has_key(ifo):
      output[ifo].extend(searchSummTable)
    else:
      output[ifo] = searchSummTable
  return output


#################################################################
# help message
usage = """\
Usage: plotnumtriggers [options]

  SUMMARY: Makes a plot of the number of triggers against time.  The code
           will read in INSPIRAL  files, for as many ifo's as you like.  
	   It will then plot the number of triggers vs time for each ifo.

"""

##############################################################################
parser = OptionParser( usage=usage, \
    version= "%prog CVS\n" +
    "$Id$\n" +
    "$Name$\n")


 
parser.add_option("-t","--glob-inspiral",action="store",type="string",\
    default=None,metavar="INSPIRAL",\
    help="glob for files containing the string INSPIRAL")

parser.add_option("-T","--glob-inspiral-second",action="store",type="string",\
    default=None,metavar="INSPIRALSECOND",\
    help="glob for files containing the string INSPIRAL")
    
parser.add_option("-c","--cache-file",action="store",type="string",\
    default=None,metavar="INPUT",\
    help="supply a bunch of INSPIRAL files")

parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )

parser.add_option("-f","--figure-name",action="store",type="string",\
    default="", metavar=" FNAME",\
    help="generate png figures with name FNAME.png" )

parser.add_option("-p","--print-numbers",action="store_true",default=False,\
    help="prints each number on the screen" )

parser.add_option("-W","--html-output",action="store_true",\
    default=False, metavar=" HTML",\
    help="generate a html page containing the plots")

parser.add_option("-v","--verbose",action="store_true",default=False,\
    help="prints verbose information" )

parser.add_option("-L", "--log-y", action="store_true", default=False,
    help="set the y axis to have a log scale")


command_line = sys.argv[1:]

(opts,args) = parser.parse_args()

# check at least one inspiral file was specified
if opts.glob_inspiral is None and opts.cache_file is None and opts.inspiral_second is None:
  print >>sys.stderr, "Must specify a GLOB of files to read or a LAL cache"
  print >>sys.stderr, "Enter '"+__name__+" --help' for usage"
  sys.exit(1)

if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz


#identify the inspiral files
if opts.glob_inspiral is not None:
  inspiralFiles =  glob.glob(opts.glob_inspiral)
  if not inspiralFiles:
    print >>sys.stderr, "The glob for " + opts.inspiral_glob + \
        " returned no files"
    sys.exit(1)
else:
  inspiralFiles = None

# identify the trig inspiral files
if opts.glob_inspiral_second is not None:
  inspiralSecondFiles = glob.glob(opts.glob_inspiral_second)
  if not inspiralSecondFiles:
    print >>sys.stderr, "The glob for " + opts.glob_inspiral_second + \
        " returned no files"
    sys.exit(1)
else:
  inspiralSecondFiles = None


if opts.cache_file:
  trig = lal.Cache().fromfile(open(opts.cache_file))
  if not trig:
    print >>sys.stderr, "Must supply a list of input files"
    sys.exit(1)
  else:
    inspiralSecondfiles = trig.sieve(description = "INSPIRAL_").checkfilesexist()[0].pfnlist()
    inspiralFiles = trig.sieve(description = "INSPIRAL-").checkfilesexist()[0].pfnlist()


#######################################################################
# Read in the search summaries from the inspiral summary 

print 'Reading files...' + str(len(inspiralFiles))
inspiralSumm = readFiles(inspiralFiles)
print 'Reading files...' + str(len(inspiralSecondFiles))
inspiralSecondSumm  = readFiles(inspiralSecondFiles)
print 'done'
colors = {'G1':'k','H1':'r','H2':'b','L1':'g'}

for ifo in inspiralSumm.keys():
  numTriggers = inspiralSumm[ifo].getColumnByName('nevents').asarray()
  startTime = viz.timeindays(inspiralSumm[ifo].getColumnByName('out_start_time').asarray())
  style = colors[ifo] + 'x'
  
  if opts.log_y is True:
    semilogy(startTime, numTriggers, style, label=ifo+' inspiral',\
        markersize=12, markeredgewidth=1)
  else:
    plot(startTime, numTriggers, style, label=ifo+' inspiral',\
        markersize=12, markeredgewidth=1)

  if opts.print_numbers:
    print "Number of triggers for :" +ifo+ str(startTime) +" " + str(numTemplates)


for ifo in inspiralSecondSumm.keys():
  numTrigs = inspiralSecondSumm[ifo].getColumnByName('nevents').asarray()
  startTime = viz.timeindays(inspiralSecondSumm[ifo].getColumnByName('out_start_time').asarray())
  style = colors[ifo] + 'o'
  if opts.log_y is True:
    semilogy(startTime, numTrigs, style, label=ifo+' inspiral second',\
        markersize=12, markeredgewidth=1)
  else:
    plot(startTime, numTrigs, style, label=ifo+' inspiral second',\
        markersize=12, markeredgewidth=1)

  if opts.print_numbers:
    print "Number of trigges (second stage) for :" +ifo+ str(startTime) +" " + str(numTrigs)

xlabel('Days after start of run', size='x-large')
ylabel('Number of triggers', size='x-large')
legend()
grid("on")


if opts.figure_name:
  fname=__name__+"_"+opts.figure_name+".png" 
  savefig(fname)
  savefig(__name__+"_"+opts.figure_name + ".eps")

if opts.html_output is True:
  try:
    import markup
    from markup import oneliner as e
  except:
    raise ImportError("Require markup.py to generate the html page")

  html_file = file(__name__+"_"+opts.figure_name+".html", "w")
  page = markup.page()
  title = "Number of inspiral triggers"
  page.init(title=title)

  if len(fname)>0:
    page.img(src=fname, width="400", border="2", \
        alt="Inspiral trigger rate")

  page = writeProcessParams(page, command_line)
  html_file.write(page(False))
  html_file.close()



if opts.show_plot:
  show()  
