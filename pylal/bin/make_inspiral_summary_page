#!/usr/bin/env /usr/bin/python

import shutil
import os
import sys
import glob
import ConfigParser
import subprocess
from optparse import OptionParser

class wiki(object):
  def __init__(self,open_box=False,fname="wiki.txt"):
    if open_box: fname = "open_box_" + fname
    self.fname = fname
    self.file = open(fname,"w")
    self.hfile = open(fname.replace('.txt','.html'),"w")

  def image_link(self,path,webserver,webserver_dir, html=False):
    thumb = "thumb_" + path
    command = 'convert ' + path + ' -resize 300x300 -antialias ' + thumb
    print command
    popen = subprocess.Popen(command.split())
    popen.communicate()
    status = popen.returncode
    shutil.copy(path, webserver_dir)
    shutil.copy(thumb, webserver_dir)
    if not html:
      s = '[[ImageLink('+webserver+'/'+thumb+','+webserver+'/'+path+',width=300][,alt=none])]]'
      self.file.write(s)
    else: 
      s = '<a href='+webserver+'/'+path+'><img width=300 src=' +webserver+'/'+thumb+'></img></a>'
      self.hfile.write(s)

  def image_table(self,image_list, webserver, html=False):
    if not image_list: return
   
    if not html:
      for j, i in enumerate(image_list):
        if not (j) % 3: self.file.write("\n\n||")
        self.image_link(i, webserver)
        self.file.write("||")
      self.file.write("\n\n")
    else: 
      self.hfile.write('\n<table>\n')
      for j, i in enumerate(image_list):
        if j == 0: self.hfile.write("\n<tr>")
        if j !=0 and not (j % 3): self.hfile.write("\n</tr><tr>")
        self.hfile.write('<td>')
        self.image_link(i, webserver, html=True)
        self.hfile.write("</td>")
      self.hfile.write('\n</table>\n')

  
  def read_table(self, table, html=False):
    if not html:
      try:
        for l in open(base_name+"playground_summary_table.txt").readlines(): self.file.write(l)
      except: print >>sys.stderr, "WARNING: couldn't find playground summary, continuing"

    else:
      try:
        #self.section(" ".join(table.strip('.txt').split('_')))
        self.hfile.write('\n<table>\n')
        for l in open(table).readlines():
          if "=" in l:
            self.hfile.write('\n</table>\n')
            self.section(l.replace('=',''),html=True)
            self.hfile.write('\n<table>\n')
            continue
          self.hfile.write('<tr>')
          for i, c in enumerate(l.split('||')):
            self.hfile.write('<td>' + c + '</td>')
          self.hfile.write('</tr>')
        self.hfile.write('\n</table>\n')
      except:
        self.hfile.write('\n</table>')
        print >>sys.stderr, "WARNING: couldn't find " + table + ", continuing"


  def read_range_summary(self, summary, base_name, html=False):

    if not html:
      try:
        filenames = page.image_glob(summary)
        files = [open(f).readlines() for f in filenames]
        for f in filenames:
          self.file.write("|| '''!%s''' || || || || ||" % (f.replace('range_summary.txt','').replace(base_name, "").replace('_','').replace('-',''),) )
        self.file.write("\n")
        for i in range(len(files[0])):
          for f in files:
            self.file.write(f[i].strip())
          self.file.write("\n")
        self.file.write("\n")
      except: print >>sys.stderr, "WARNING: couldn't find Range summary , continuing"
    else:
      try:
        filenames = page.image_glob(summary)
        files = [open(f).readlines() for f in filenames]
        self.hfile.write("<tr>")
        for f in filenames:
          self.hfile.write("<td> '''!%s''' </td><td> </td><td> </td><td> </td><td> </td>" % (f.replace('range_summary.txt','').replace(base_name, "").replace('_','').replace('-',''),) )
        self.hfile.write("</tr>\n")
        for i in range(len(files[0])):
          self.hfile.write("<tr>")
          for f in files:
            self.hfile.write("<td> " + " </td><td> ".join(f[i].strip().strip("||").split("||")) + " </td>")
          self.hfile.write("</tr>\n")
        self.hfile.write("\n")
      except: print >>sys.stderr, "WARNING: couldn't find Range summary , continuing"


  def image_glob(self, pat):
    image_list = []
    for image in glob.glob(pat):
      if 'thumb' in image: continue
      else: image_list.append(image)
    image_list.sort()
    return image_list

  def section(self,title):
    s = "=== "+title.strip()+" ===\n"
    self.file.write(s)

    s = "\n<h3>"+title.strip()+"</h3>\n<hr>\n"
    self.hfile.write(s)

  def write(self,val, html=False):
    if not html: self.file.write(val)
    else: self.hfile.write(val)

  def finish(self):
    self.file.close()  
    self.hfile.close()

def parse_command_line():
  parser = OptionParser(version = "%prog CVS $Id$", usage = "%prog [options] [file ...]", description = "%prog computes mass/mass upperlimit")
  parser.add_option("--webserver", help = "Set the webserver path.  Required.  Example https://ldas-jobs.ligo.caltech.edu/~channa/highmass_months_23-24_summary_page")
  parser.add_option("--webserver-dir", help = "Set the directory for the webserver.  Required.  Example /archive/home/channa/public_html/highmass_months_23-24_summary_page")
  parser.add_option("--open-box", action = "store_true", help = "Produce open box page")
  parser.add_option("--output-name-tag", default = "", metavar = "name", help = "Set the basename for image search")
  opts, filenames = parser.parse_args()

  if not opts.webserver:
    print >>sys.stderr, "must specify a webserver"
    sys.exit(1)
  return opts, filenames

###########################################################
# MAIN
###########################################################

opts, filenames = parse_command_line()

webserver = opts.webserver
webserver_dir = opts.webserver_dir

open_box = opts.open_box
base_name = opts.output_name_tag

if open_box: print >>sys.stderr, "WARNING: OPENING THE BOX"

page = wiki(open_box, fname=base_name+"wiki.txt")

page.section("Injection Parameters")

image_list = page.image_glob(base_name+'6_sim_dist*.png') 
page.image_table(image_list,webserver, webserver_dir)

page.section("Found / Missed")
image_list = page.image_glob(base_name+'1_deff_vs_mchirp_*.png')
page.image_table(image_list,webserver, webserver_dir)
image_list = page.image_glob(base_name+'1_deff_vs_t_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Parameter Accuracy")
image_list = page.image_glob(base_name+'2_mchirp_acc_frac_*.png')
page.image_table(image_list,webserver, webserver_dir)
image_list = page.image_glob(base_name+'2_eta_acc_frac_*.png')
page.image_table(image_list,webserver, webserver_dir)
image_list = page.image_glob(base_name+'2_t_acc_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Playground Chi-squared")
image_list = page.image_glob(base_name+'3_playground_chi2_vs_rho_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Playground Effective SNR scatter")
image_list = page.image_glob(base_name+'4_playground_rho_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Time slide plots")
image_list = page.image_glob(base_name + '7_playground_plot_slides_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Playground SNR")
image_list = page.image_glob(base_name+'5_playground_count_vs_snr_*.png')
page.image_table(image_list,webserver, webserver_dir)

page.section("Playground Ifar")
image_list = page.image_glob(base_name+'5_playground_count_vs_ifar*.png')
page.image_table(image_list,webserver, webserver_dir)

page.read_table(base_name+'playground_summary_table.txt')
page.read_table(base_name+'playground_summary_table.txt',html=True)

if open_box:
    print >>sys.stderr, "WARNING: OPENING THE BOX"

    page.section("Full Data Chi-squared")
    image_list = page.image_glob(base_name+'3_chi2_vs_rho_*.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Full Data Effective SNR scatter")
    image_list = page.image_glob(base_name+'4_rho_*.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Time slide plots")
    image_list = page.image_glob(base_name + '7_plot_slides_*.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Full Data SNR")
    image_list = page.image_glob(base_name+'5_count_vs_snr_*.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Full Data Ifar")
    image_list = page.image_glob(base_name+'5_count_vs_ifar_*.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.read_table(basename+'summary_table.txt')
    page.read_table(basename+'summary_table.txt',html=True)

    # UPPER LIMIT PLOTS
    #ifos_list = [f.replace('volume_time.png','') for f in page.image_glob('*volume_time.png')]
    #ifos_string = ",".join(ifos_list)
    page.section("Volume x time ")

    page.read_range_summary(base_name+'-*_range_summary.txt', basename)
    page.read_range_summary(base_name+'-*_range_summary.txt', basename, html=True)

    image_list = page.image_glob(base_name+'-*_volume_time.png') 
    page.image_table(image_list,webserver, webserver_dir)

    page.section("error on Volume x time ")
    image_list = page.image_glob(base_name+'-*_fractional_error.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("lambda ")
    image_list = page.image_glob(base_name+'-*_lambda.png')
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Selected posteriors ")
    image_list = page.image_glob(base_name+'-*_posterior.png') 
    page.image_table(image_list,webserver, webserver_dir)

    page.section("upper limit ")
    image_list = page.image_glob(base_name+'-*_upper_limit.png') 
    page.image_table(image_list,webserver, webserver_dir)

    page.section("Combined upper limit")
    image_list = [base_name+'upper_limit.png', base_name+'posterior.png']
    page.image_table(image_list,webserver, webserver_dir)

try: 
  for l in open(base_name+"plotsummary.txt").readlines(): page.write(l)
except: print >>sys.stderr, "WARNING couldn't find plotsummary.txt"

page.finish()
