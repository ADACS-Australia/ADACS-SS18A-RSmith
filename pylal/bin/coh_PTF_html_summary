#!/usr/bin/python

# =============================================================================
# Preamble
# =============================================================================

from __future__ import division

import os,sys,datetime,re,glob,shutil
from optparse import OptionParser
from glue import markup
from pylal import grbsummary,date,rate,antenna
from pylal.xlal.datatypes.ligotimegps import LIGOTimeGPS
#from pylal.coh_PTF_pyutils import *

def initialize_page( title, style, script, header=None ):

  """
    A function that returns a markup.py page object with the required html
    header.
  """

  page         = markup.page(mode="strict_html")
  page._escape = False
  page.init( title=title, css=style, script=script, header=header )

  return page

def write_banner( title, text='&nbsp;' ):

  """
    Write html <title> tag into markup.page object
  """

  page = markup.page( mode="strict_html" )
  page._escape = False

  page.div( id="header" )
  page.h1()
  page.add( title )
  page.h1.close()
  page.h3()
  page.add( text )
  page.h3.close()

  page.hr( class_="short" )
  page.hr( class_="long" )

  page.div.close()

  page.div( id="container" )

  return page

def write_table( page, headers, data, cl='' ):

  """
    Write table in html
  """

  page.table( class_=cl )

  # list
  if cl=='list':
    for i in range( len( headers ) ):

      page.tr()
      page.th()
      page.add( '%s' % headers[i] )
      page.th.close()
      page.td()
      page.add( '%s' % data[i] )
      page.td.close()
      page.tr.close()

  else:
    page.tr()
    for n in headers:
      page.th()
      page.add( '%s' % n )
      page.th.close()
    page.tr.close()

    if data and not re.search( 'list',str( type( data[0] ) ) ):
      data = [data]

    for row in data:
      page.tr()
      for item in row:
        page.td()
        page.add( '%s' % item )
        page.td.close()
      page.tr.close()

  page.table.close()

  return page

def write_summary( page, ExtTrigger, ifos ):

  """
    Write summary of information to markup.page object page
  """

  gps,ra,dec = ExtTrigger.start_time,ExtTrigger.event_ra,ExtTrigger.event_dec
  grbdate = datetime.datetime( *date.XLALGPSToUTC( LIGOTimeGPS(gps) )[:6] )\
                .strftime( "%B %d %Y, %H:%M:%S %ZUTC" )

  page.h3()
  page.add( 'Basic information' )
  page.h3.close()

  th = [ 'GPS', 'Date', 'RA', 'DEC', 'IFOs' ]
  td = [ gps, grbdate, ra, dec, ifos ]

  page = write_table( page, th, td )

  return page

def write_antenna( page, ExtTrigger, ifos ):

  """
    Write antenna factors to merkup.page object page
  """

  page.h3()
  page.add( 'Antenna factors' )
  page.h3.close()

  th = []
  td = []

  for ifo in ifos:
    th.append( ifo )
    _, _, _, f_q = antenna.response( ExtTrigger.start_time,
                                     ExtTrigger.event_ra, ExtTrigger.event_dec,\
                                     0.0, 0.0, 'degree',ifo )
    td.append( round( f_q, 3 ) )

  page = write_table( page, th, td )

  return page

def write_offsource( page, ifos, grbtag, onsource=False ):

  """
    Write offsource SNR versus time plots to markup.page object page
  """

  th = ['BestNR 8', 'Coherent SNR']

  if onsource:
    dir = 'ALL_TIMES'
  else:
    dir = 'OFFSOURCE'

  plot = markup.page()
  p = "%s/plots_clustered/GRB%s_bestnr_vs_time_noinj.png" % ( dir, grbtag )
  plot.a( href=p, title="Coherent SNR versus time" )
  plot.img( src=p )
  plot.a.close()
  td = [ plot() ]

  plot = markup.page()
  p = "%s/plots/GRB%s_triggers_vs_time_noinj.png" % ( dir, grbtag )
  plot.a( href=p, title="Coherent SNR versus time" )
  plot.img( src=p )
  plot.a.close()
  td.append( plot() )

  for ifo in ifos:
    th.append('%s SNR' % ifo )
    plot = markup.page()
    p = "%s/plots/GRB%s_%s_triggers_vs_time_noinj.png" % ( dir, grbtag, ifo )
    plot.a( href=p, title="%s SNR versus time" % ifo )
    plot.img( src=p )
    plot.a.close()
    td.append( plot() )

  page = write_table( page, th, td )

  return page

def write_chisq( page, injList, grbtag ):

  """
    Write injection chisq plots to markup.page object page
  """

  th = ['']+injList
  td = []

  plots = ['bank_veto','auto_veto','chi_square']

  for test in plots:
    pTag = test.replace('_',' ').title()
    d = [pTag]
    for inj in injList:
      plot = markup.page()
      p = "%s/plots_clustered/GRB%s_%s_vs_snr_zoom.png" % ( inj, grbtag, test )
      plot.a( href=p, title="%s %s versus SNR" % ( inj, pTag ) )
      plot.img( src=p )
      plot.a.close()
      d.append( plot() )
    td.append(d)

  page = write_table( page, th, td )

  return page

def write_inj_snrs( page, ifos, injList, grbtag ):

  """
    Write injection chisq plots to markup.page object page
  """

  th = ['']+injList
  td = []

  plots = ['null_stat2']+['%s_snr' % ifo for ifo in ifos]

  for row in plots:
    pTag = row.replace('_',' ').title()
    d = [pTag]
    for inj in injList:
      plot = markup.page()
      p = "%s/plots_clustered/GRB%s_%s_vs_snr_zoom.png" % ( inj, grbtag, row )
      plot.a( href=p, title="%s %s versus SNR" % ( inj, pTag ) )
      plot.img( src=p )
      plot.a.close()
      d.append( plot() )
    td.append(d)

  page = write_table( page, th, td )

  return page

def write_found_missed( page, ifos, injList ):

  """
    Write injection found/missed plots to markup.page object page
  """

  th = ['']+injList
  td = []

  plots = []
  text  = {}
  for ifo in ifos:
    plots.extend(['effdist_%s' % ifo[0].lower(),\
                  'effdist_time_%s' % ifo[0].lower()])
    text['effdist_%s' % ifo[0].lower()]      = 'Eff. dist. %s vs Mchirp' % ifo
    text['effdist_time_%s' % ifo[0].lower()] = 'Eff. dist %s vs Time' % ifo

  for row in plots:
    pTag = text[row]
    d = [pTag]
    for inj in injList:
      plot = markup.page()
      p = "%s/efficiency/found_missed_injections_%s.png" % ( inj, row )
      plot.a( href=p, title=pTag )
      plot.img( src=p )
      plot.a.close()
      d.append( plot() )
    td.append(d)

  td.append(['Close injections without FAP = 0']+\
            ['<a href="%s/efficiency/quiet_found_triggers.html">here</a>' % inj\
            for inj in injList])

  page = write_table( page, th, td )

  return page

def write_recovery( page, injList ):

  """
    Write injection recovery plots to markup.page object page
  """

  th = ['']+injList
  td = []

  plots = ['sky_error_time','sky_error_mchirp','sky_error_distance']
  text = { 'sky_error_time':'Sky error vs time',\
           'sky_error_mchirp':'Sky error vs mchirp',\
           'sky_error_distance':'Sky error vs distance' }

  for row in plots:
    pTag = text[row]
    d = [pTag]
    for inj in injList:
      plot = markup.page()
      plot = markup.page()
      p = "%s/efficiency/found_%s.png" % ( inj, row )
      plot.a( href=p, title=pTag )
      plot.img( src=p )
      plot.a.close()
      d.append( plot() )
    td.append(d)

  page = write_table( page, th, td )

  return page

def write_loudest_events( page, bins, onsource=False ):

  """
    Write injection chisq plots to markup.page object page
  """

  th = ['']+['Mchirp %s - %s' % tuple(bin) for bin in bins]
  td = []

  plots = ['BestNR','SNR']

  if onsource:
    trial = 'ONSOURCE'
  else:
    trial = 'OFFTRIAL_1'

  for pTag in plots:
    row = pTag.lower()
    d = [pTag]
    for bin in bins:
      b = '%s_%s' % tuple(bin)
      plot = markup.page()
      p = "%s/efficiency/%s_vs_fap_%s.png" % ( trial, row, b )
      plot.a( href=p, title="FAP versus %s" % pTag )
      plot.img( src=p )
      plot.a.close()
      d.append( plot() )
    td.append(d)

  page = write_table( page, th, td )

  return page

# =============================================================================
# Parse command line
# =============================================================================

def parse_command_line():

  usage = """usage: %prog [options] 
  
coh_PTF_injfinder will find and record found and missed injections for the given injection run

--grb-name
--ifo-tag
--num-files
--inj-name
--time-window
"""

  parser = OptionParser( usage )

  parser.add_option( "-g", "--grb-xml", action="store", type="string",\
                     default=None, help="location of the GRB xml file" )

  parser.add_option( "-f", "--config-file", action="store", type="string",\
                     default=None, help="location of the run ini file" )

  parser.add_option( "-i", "--ifo-tag", action="store", type="string",\
                     default=None,\
                     help="The ifo tag, H1L1 or H1L1V1 for instance" )

  parser.add_option( "-o", "--output-path", action="store", type="string",\
                     default=os.getcwd(), help="output directory, "+\
                                               "default: %default" )

  parser.add_option( "-O", "--open-box", action="store_true", default=False,
                     dest="open_box", help ="Use to show onsource results" )

  (opts,args) = parser.parse_args()

  if not opts.grb_xml:
    parser.error( "must provide --grb-xml" )

  if not opts.config_file:
    parser.error( "must provide --config-file" )

  if not opts.ifo_tag:
    parser.error( "must provide --ifo-tag" )

  (opts,args) = parser.parse_args()

  return opts, args

# =============================================================================
# Main function
# =============================================================================

def main( grbxml, inifile, outdir, ifoTag, open_box=False ):

  # get entry information  
  ifos     = [ ifoTag[i*2:(i*2)+2] for i in range(int(len(ifoTag)/2)) ]
  extTrigs = grbsummary.load_external_triggers( grbxml )

  if len( extTrigs )>1:
    raise ValueError, 'Found more than one GRB in %s.' % grbfile

  grb = extTrigs[0]
  GRBnum = extTrigs[0].event_number_grb
  os.chdir( outdir )

  # get sections
  injList = glob.glob('injections*')
  do_off  = bool(os.path.isdir('OFFSOURCE'))
  trials  = sorted(glob.glob('OFFTRIAL_*'))

  # initialise page
  title   = 'Coherent PTF Inspiral search of GRB%s' % GRBnum
  banner  = write_banner( title )
  js = 'coh_PTF_html_summary.js'
  script = {js:'javascript'}
  css = 'coh_PTF_html_summary.css'
  webpage = initialize_page( title, css, script, header=banner() )
  
  # set divs
  webpage.div( id="maintab" )
  webpage.div( id="content" )

  # write summary section
  secname = 'Summary information'
  i = 0
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%s');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  webpage = write_summary( webpage, grb, ifoTag )
  webpage = write_antenna( webpage, grb, ifos )

  # add links
  grbsumlink = 'http://grblog.org/grblog.php?view=burst&GRB=%s' % GRBnum
  googlelink = '%s.kml' % GRBnum
  seglink    = 'plot_segments_grb%s.png' % GRBnum
  inilink    = os.path.basename(inifile)
  linktext = { grbsumlink:'Summary of this GRB',\
               googlelink:'Google sky kml file',\
               seglink:   'Segments availability',\
               inilink:   'ini-file used'}
  for link in [ grbsumlink, googlelink, seglink, inilink ]:
    webpage.add( linktext[link] )
    webpage.a( href=link )
    webpage.add( 'here' )
    webpage.a.close()
    webpage.br()

  webpage.div.close()

  # copy over these files
  ## plot segments is generated by dataquery
  segplot = '%s/%s/%s'\
            % ( os.path.split(grbxml)[0], os.path.pardir, seglink )
  if os.path.isfile(segplot):
    shutil.copy( segplot, outdir ) 
  else:
    print >>sys.stderr, 'WARNING: Cannot find segments availability plot.'
  ## inifile is simply copied
  if not os.path.isfile( '%s/%s' % (outdir, os.path.basename(inifile)) ) or\
     not os.path.samefile( inifile, '%s/%s'\
                                    % ( outdir, os.path.basename(inifile) ) ):
    shutil.copy( inifile, outdir )
  

  # add off source trig plots
  secname = 'Offsource triggers versus time'
  i += 1
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%s');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  webpage = write_offsource( webpage, ifos, GRBnum )

  webpage.div.close()

  # add signal consistency plots
  secname = 'Signal consistency plots'
  i += 1
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%s');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  webpage.h3()
  webpage.add('Chi squared tests')
  webpage.h3.close()
  webpage = write_chisq( webpage, injList, GRBnum )
  webpage.h3()
  webpage.add('Individual detector and null SNRs')
  webpage.h3.close()
  webpage = write_inj_snrs( webpage, ifos, injList, GRBnum )

  webpage.div.close()

  # add found/missed plots
  secname = 'Found/missed injections'
  i += 1
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%d');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  webpage.h3()
  webpage.add('A key for these plots')
  webpage.h3.close()
  webpage.add('Black cross indicates no trigger was found coincident with '+\
              'the injection')
  webpage.br()
  webpage.add('Red cross indicates a trigger was found coincident with the '+\
              'injection but it was vetoed')
  webpage.br()
  webpage.add('Green cross indicates that a trigger was found coincident '+\
              'with the injection and it was louder than all events in the '+\
              'offsource')
  webpage.br()
  webpage.add('Coloured circle indicates that a trigger was found coincident '+\
              'with the injection but it was not louder than all offsource '+\
              'events. The colour bar gives the FAP of the trigger.')

  webpage = write_found_missed( webpage, ifos, injList )

  webpage.div.close()

  # add injection recovery plots
  secname = 'Injection recovery'
  i += 1
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%d');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  webpage = write_recovery( webpage, injList )

  webpage.div.close()

  # add loudest off source events
  secname = 'Loudest offsource events'
  i += 1
  webpage.input( id="input_%s" % i, type="button", class_="h2",\
                 onclick="toggleVisible('%s');" % i, value=secname )
  webpage.div( id="div_%s" % i, style="display: none;" )

  massbins = [('0','3.48'),('3.48','6.0'),('6.0','20')]
  webpage = write_loudest_events( webpage, massbins )

  webpage.div.close()

  # write trial results
  for trial in trials:
    secname = 'Events in %s' % trial.replace('_',' ').title()
    i += 1
    webpage.input( id="input_%s" % i, type="button", class_="h2",\
                   onclick="toggleVisible('%s');" % i, value=secname )
    webpage.div( id="div_%s" % i, style="display: none;" )

    file = open( '%s/efficiency/loud_numbers.txt' % trial, 'r' )
    FAPS = []
    for line in file:
      line = line.replace('\n','')
      if float(line) == -2:
        FAPS.append('No event')
      else:
        FAPS.append(float(line))

    th = ['']+['Mchirp %s - %s' % tuple(bin) for bin in massbins]
    td = ['FAP']+FAPS
    webpage = write_table( webpage, th, td )
    webpage.add( 'For more details on the loudest events see')
    webpage.a( href='%s/efficiency/loudest_events.html' % trial )
    webpage.add('here.')
    webpage.a.close()
  
    webpage.div.close()

  if open_box:

    trial = 'ONSOURCE'

    webpage.hr( class_="long", style="margin-top: 20px;" )

    # add on source trig plots
    secname = 'Full data triggers versus time'
    i += 1
    webpage.input( id="input_%s" % i, type="button", class_="h2",\
                   onclick="toggleVisible('%s');" % i, value=secname )
    webpage.div( id="div_%s" % i, style="display: none;" )
  
    webpage = write_offsource( webpage, ifos, GRBnum, onsource=True )
    webpage.div.close()
  
    # write on source events
    trial = 'ONSOURCE'
    secname = 'Events in %s' % trial.replace('_',' ').title()
    i += 1
    webpage.input( id="input_%s" % i, type="button", class_="h2",\
                   onclick="toggleVisible('%s');" % i, value=secname )
    webpage.div( id="div_%s" % i, style="display: none;" )

    file = open( '%s/efficiency/loud_numbers.txt' % trial, 'r' )
    FAPS = []
    for line in file:
      line = line.replace('\n','')
      if float(line) == -2:
        FAPS.append('No event')
      else:
        FAPS.append(float(line))

    th = ['']+['Mchirp %s - %s' % tuple(bin) for bin in massbins]
    td = ['FAP']+FAPS
    webpage = write_table( webpage, th, td )
    webpage.add( 'For more details on the loudest events see')
    webpage.a( href='%s/efficiency/loudest_events.html' % trial )
    webpage.add('here.')
    webpage.a.close()

    webpage.div.close()

  webpage.div.close()
  webpage.div.close()
  webpage.div.close()
  webpage.body.close()
  webpage.html.close()

  file = open( '%s/summary.html' % outdir, 'w' )
  file.write( webpage() )
  file.close()
  
if __name__=='__main__':

  opts, args = parse_command_line()

  grbxml     = os.path.abspath( opts.grb_xml )
  inifile    = os.path.abspath( opts.config_file )
  outdir     = os.path.abspath( opts.output_path )
  ifoTag     = opts.ifo_tag
  
  main( grbxml, inifile, outdir, ifoTag, open_box=opts.open_box )

