#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import math
import matplotlib
matplotlib.use("Agg")
from matplotlib import figure
from matplotlib.backends.backend_agg import FigureCanvasAgg
import numarray

from pylal.xlal import inject

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("--declination", metavar = "radians", help = "set source declination")
	parser.add_option("--instrument", metavar = "name", action = "append", default = [], help = "plot response for this instrument")
	parser.add_option("--right-ascension", metavar = "radians", help = "set source right ascension")
	parser.add_option("--show-instruments", action = "store_true", help = "list known instruments")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if options.show_instruments:
		print inject.cached_detector.keys()
	if "all" in options.instrument:
		options.instrument = inject.cached_detector.keys()

	try:
		options.right_ascension = float(options.right_ascension)
		options.declination = float(options.declination)
	except:
		raise ValueError, "right ascension and/or declination missing or invalid"

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Plot
#
# =============================================================================
#

def makeplot(options):
	fig = figure.Figure()
	FigureCanvasAgg(fig)
	fig.set_figsize_inches(16, 8)
	axes = fig.gca()
	axes.grid(True)

	xvals = numarray.arange(0.0, 2.0 * math.pi + math.pi / 200, math.pi / 200, "Float64")
	for instrument in options.instrument:
		yvals = [plus**2.0 + cross**2.0 for (plus, cross) in map(lambda t: inject.XLALComputeDetAMResponse(inject.cached_detector[instrument].response(), options.right_ascension, options.declination, 0.0, t), xvals)]
		axes.plot(xvals, yvals)

	axes.set_xlim([0.0, 2.0 * math.pi])

	axes.set_xticks(numarray.arange(9) * math.pi / 4)
	axes.set_xticklabels([r"0", r"$\pi/4$", r"$\pi/2$", r"$3\pi/4$", r"$\pi$", r"$5\pi/4$", r"$3\pi/2$", r"$7\pi/4$", r"$2\pi$"])

	axes.legend(options.instrument)

	axes.set_xlabel("Greenwich Mean Sidereal Time (rad)")
	axes.set_ylabel(r"${F_{+}}^{2} + {F_{\times}}^{2}$")
	axes.set_title("Detector Response by Sidereal Time for Source at R.A. %g rad, Dec. %g rad" % (options.right_ascension, options.declination))

	return fig


#
# =============================================================================
#
#                                    Output
#
# =============================================================================
#

options, filenames = parse_command_line()
makeplot(options).savefig(filenames[0])
