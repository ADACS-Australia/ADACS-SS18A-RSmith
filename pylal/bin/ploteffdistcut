#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from pylal import readMeta
from pylal import viz

##############################################################################
def disterr(coinc_table, ifo_list, col,kappa,epsilon,plot_line=False):

  ifoa_dist = coinc_table.mkarray('eff_distance',ifo_list[0])
  ifob_dist = coinc_table.mkarray('eff_distance',ifo_list[1])
  ifoa_snr = coinc_table.mkarray('snr',ifo_list[0])
  ifob_snr = coinc_table.mkarray('snr',ifo_list[1])

  ifoa_sigma = coinc_table.mkarray('sigmasq',ifo_list[0])
  ifob_sigma = coinc_table.mkarray('sigmasq',ifo_list[1])
 
  ifoa_error = abs(ifoa_dist - ifob_dist) / ifob_dist 
  ifob_error = abs(ifob_dist - ifoa_dist) / ifoa_dist

  dist_error = ifoa_error
  small_snr = ifoa_snr
  
  for j in range(len(dist_error)):
    if ifoa_sigma[j] > ifob_sigma[j]:
      dist_error[j] = ifob_error[j]
      small_snr[j] = ifob_snr[j]

  semilogx(small_snr, dist_error, col)
  
  num_cut = 0
  total = len(dist_error)

  if kappa and epsilon:

    if plot_line:
      x = arange(int(min(small_snr)), int(max(small_snr)) + 2)
      semilogx(x, kappa + epsilon/x,'b')
      ylim(0,1)
      xlim(min(x),max(x))
    
    # see how many survive the cut
    num_cut = sum(dist_error > kappa + epsilon/small_snr)

  return([total,num_cut])
                                                

##############################################################################
usage = """
"""

parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-g","--inj-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of thinca files to read" )
parser.add_option("-G","--slide-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB of thinca files to read" )
parser.add_option("-L","--cluster-window",action="store",type="int",default=0,\
    metavar=" SEC", help="length of time over which to cluster triggers" )
parser.add_option("-f","--figure-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-A","--ifoa",action="store",default=None,\
    metavar=" IFOA",help="first ifo for which we have triggers" )
parser.add_option("-B","--ifob",action="store",default=None,\
    metavar=" IFOB",help="second ifo for which we have triggers" )
parser.add_option("-a","--dist-cut",action="store_true",default=False,\
    help="plot of potential distance cut" )
parser.add_option("-N","--num-slides",action="store",type="int",default=0,\
    metavar=" NUM_SLIDES",help="number of time slides performed" )
parser.add_option("-t","--plot-type",action="store",type="string",\
    default="linear",metavar=" PLOT_TYPE", \
    help="make either linear or log or plots" )
parser.add_option("-k","--kappa",action="store",type="float",default=0,\
    metavar=" KAPPA",help="value of kappa in dist cut" )
parser.add_option("-e","--epsilon",action="store",type="float",default=0,\
    metavar=" EPSILON",help="value of epsilon in dist cut" )
(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)

if not opts.inj_glob:
  print >>sys.stderr, "Must specify a GLOB of inj files to read"
  print >>sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

if not opts.kappa or not opts.epsilon:
  print >> sys.stderr, "Must specify a value of KAPPA and EPSILON"
  print >>sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

if not opts.ifoa or not opts.ifob:
  print >> sys.stderr, "Must specify two ifos, --ifoa and --ifob"
  print >> sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)

if opts.slide_glob and not opts.num_slides:
  print >> sys.stderr, "--num-slides must be set if --slide-glob is specified"
  print >> sys.stderr, "Enter 'plotthinca --help' for usage"
  sys.exit(1)
  
#####################################
# glob the input files
injFiles = glob.glob(opts.inj_glob)
inspTriggers = readMeta.metaDataTable(injFiles,"sngl_inspiral")
injTriggers = readMeta.coincInspiralTable(inspTriggers)
injTriggers = injTriggers.coinctype([opts.ifoa,opts.ifob])

if opts.cluster_window:
  injTriggers = injTriggers.cluster(opts.cluster_window)

if opts.slide_glob:
  slideFiles = glob.glob(opts.slide_glob)
  inspSlide = readMeta.metaDataTable(slideFiles,"sngl_inspiral")

  slide_num = range(1 , opts.num_slides + 1)
  slide_num.extend(range(-opts.num_slides, 0))

  slideTriggers = []
  for slide in slide_num:
    this_slide = {}
    this_slide["slide_num"] = slide
    if slide > 0:
      this_slide["sngl_trigs"] = inspSlide.getslide(slide)
    else:
      this_slide["sngl_trigs"] = inspSlide.getslide(5000 - slide)

    # make coincs
    this_slide["coinc_trigs"] = \
        readMeta.coincInspiralTable(this_slide["sngl_trigs"] )
    this_slide["coinc_trigs"] = \
        this_slide["coinc_trigs"].coinctype([opts.ifoa,opts.ifob])

    # cluster triggers
    if opts.cluster_window:
      this_slide["coinc_trigs"] = \
        this_slide["coinc_trigs"].cluster(opts.cluster_window)  
    
    # add slide to list
    slideTriggers.append(this_slide)

########################################3
# make the plot
if opts.dist_cut:
  figure(1)
  # plot the slides
  slide_trigs = 0
  slide_cut = 0
  if opts.slide_glob:
    for slide in slideTriggers:
      [trigs,cut] = disterr(slide["coinc_trigs"], [opts.ifoa,opts.ifob],'k+',\
          opts.kappa, opts.epsilon)
      slide_trigs += trigs
      slide_cut += cut
  # plot the injections
  plotLine = True
  [inj_trigs, inj_cut] = disterr(injTriggers, [opts.ifoa,opts.ifob],'rx', \
  opts.kappa,opts.epsilon,plotLine)

  print 'Number of time slide triggers ' + str(slide_trigs)
  print 'Number surviving distance cut ' + str(slide_trigs - slide_cut)
  print 'Number of injection triggers  ' + str(inj_trigs)
  print 'Number surviving distance cut ' + str(inj_trigs - inj_cut)
 
  show()



