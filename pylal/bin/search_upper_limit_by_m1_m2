#!/usr/bin/python
import sys, os
from optparse import OptionParser
from pylal import rate
from pylal import SimInspiralUtils
from pylal import InspiralUtils
import scipy
import numpy
import matplotlib
matplotlib.use('Agg')
import pylab
from math import *
import sys
import glob
import copy
from glue.ligolw.utils import ligolw_add
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw.utils import print_tables
from glue.ligolw import ligolw, utils
from glue import lal

from pylal import git_version
__author__ = "Chad Hanna <channa@ligo.caltech.edu>, Kipp Cannon <kipp.cannon@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date
__prog__ = "search_upper_limit_by_m2_m1"

# FIXME:  the plots should use LaTeX to generate the labels, but some don't
# work yet
matplotlib.rcParams.update({
	"text.usetex": False
})

# FIXME, I apparently don't know how to read XML as cleverly as I thought, how do I find the table
# without specifying the childnode number?

def get_combined_array(tablename, childnode, files):
	# FIXME assumes that all the xml files have the same binned array tables
	# Figure out the shape of the arrays in the file, make an array with one more
	# dimension, the number of files from sys.argv[1:]
	xmldoc = utils.load_filename(files[0], gz = (files[0] or "stdin").endswith(".gz"))
	xmldoc = xmldoc.childNodes[0]
	A  = rate.binned_array_from_xml(xmldoc.childNodes[childnode], tablename) 
	bins = rate.bins_from_xml(xmldoc.childNodes[childnode])
	out = numpy.zeros((len(files),)+A.array.shape,dtype="float")
	# Read the data
	for i, f in enumerate(files):
		xmldoc = utils.load_filename(f, gz = (f or "stdin").endswith(".gz"))
		xmldoc = xmldoc.childNodes[0]
		out[i] = rate.binned_array_from_xml(xmldoc.childNodes[childnode], tablename).array
	A.array = numpy.zeros(A.array.shape)
	return bins, out, A 


def istrue(arg):
	return True


def posterior(VT, sigmasq, Lambda):
	'''
	This function implements the analytic marginalization in 
	Biswas, Creighton, Brady, Fairhurst (25)
	Cause hey, why not?
	This takes arrays of VT, sigma and Lambda to combine.
	'''

	length = 100000
	#FIXME does this need to be an integer???
	K = VT**2 / sigmasq

	#FIXME, drew said this was cool?
	mu = numpy.arange(length) * 100.0 / VT.sum() / length

	post = numpy.ones(len(mu), dtype="float")

	for vt, k, lam in zip(VT, K, Lambda):
		# FIXME maybe this should be smarter?
		# a total lack of injections can screw this up.  If vt = 0 move on. 
		if vt <= 0 or k <= 0: continue
		post *= vt / (1.0 + lam) * ( (1.0 + mu * vt / k)**(-k-1) + (mu * vt * lam * (1.0 + 1.0/k) /(1.0 + mu * vt / k)**(k+2)) )

	return mu, post

def integrate_posterior(mu, post, conf):
	cumpost = post.cumsum()/post.sum()
	#if you can do it, maybe you can't cause the volume is zero
	try: val = [idx for idx in range(len(cumpost)) if cumpost[idx] >= conf][0]
	except: val = 0
	return mu[val]

def get_mass_ranges(bins, mbA):
	mass1 = []
	mass2 = []
	for i,m1 in enumerate(bins.lower()[0]):
		for j,m2 in enumerate(bins.lower()[1]):
			if not mbA[i][j]:
				mass1.append(m1)
				mass1.append(bins.upper()[0][i])	
				mass2.append(m2)
				mass2.append(bins.upper()[1][j])
	return [min(mass1), max(mass1)], [min(mass2), max(mass2)]


def savefig_pylal(plot_description, open_box, inspiral_utils_opts, fnameList, tagList):
	name = InspiralUtils.set_figure_tag( plot_description, open_box = opts.open_box)
	fname = InspiralUtils.set_figure_name(inspiral_utils_opts, name)
	fname_thumb = InspiralUtils.savefig_pylal( filename=fname )
	fnameList.append(fname)
	tagList.append(name)

class UpperLimitTable(table.Table):
	tableName = "upper_limit:table"
	validcolumns = {"mass1":"real_8","mass2":"real_8","range":"real_8",
			"time":"real_8","upper_limit":"real_8","fractional_error":"real_8"}

def parse_command_line():
	parser = OptionParser(
		version = "Name: %%prog\n%s" % git_version.verbose_msg
	)
	parser.add_option("","--input-cache", help="input cache containing only the xml files you want to run on")

	## Added to support WIP ##
	parser.add_option("-f", "--output-format", action = "store", type = "string",
			  default = "html", metavar = "wiki, html, OR xml",
			  help = "Format of output summary table. Choices are 'wiki', 'html', or 'xml'. Default is html.")
	parser.add_option("--output-path", default = "./", action = "store",
			  help="Choose directory to save output files.")
	parser.add_option("--open-box", default = False, action = "store_true",
			  help="Turn flag on to indicate that input data describes zero-lag coincident events.")
	##########################

	options, filenames = parser.parse_args()
	if not filenames: filenames = []
	if options.input_cache: filenames.extend([lal.CacheEntry(l).path() for l in open(options.input_cache).readlines()])

	options.gps_extent =  lal.Cache.fromfile(open(options.input_cache)).to_segmentlistdict().extent()
	options.enable_output = True

	return options, (filenames or []), sys.argv[1:]


opts, files, args = parse_command_line()



# bins are the same for each call and ulA is an empty binnedArray that has the right shape
# that can hold the upperlimit when we get around to computing it later, so it is okay
# that bins, and ulA are overwritten in each call. vA, vA2 and dvA are the important ones
bins, vA, ulA = get_combined_array("2DsearchvolumeFirstMoment", 0, files)
#FIXME Hack to give volume that is zero a value = 0.01
vA[vA==0] = 0.01

combined_ifos = opts.input_cache.split('-')[0] #FIXME super hack
bins, vA2, ulA = get_combined_array("2DsearchvolumeSecondMoment", 1, files)
bins, dvA, ulA = get_combined_array("2DsearchvolumeDerivative", 2, files)
bins, vAD, ulA = get_combined_array("2DsearchvolumeDistance", 3, files)
bins, ltA, tmp= get_combined_array("2DsearchvolumeLiveTime", 4, files)
numfiles = len(files)

# track livetime bins that are 0, they are outside of the search space
# this is a useful array for computing only meaningful things
mbA = numpy.zeros(ltA[0].shape)
mbA[ltA[0] == 0] = 1


m1range, m2range = get_mass_ranges(bins, mbA)

#bin edges Number of bins + 1 for pcolor
X = numpy.array( list(bins.lower()[0]) + [bins.upper()[0][-1]] )
Y = numpy.array( list(bins.lower()[1]) + [bins.upper()[1][-1]] )

f = pylab.figure(1)

###############################################################################
# loop over all the filenames and masses and compute the posteriors separately
###############################################################################

for i, f in enumerate(files):
	legend_str = []
	lines = []

	#FIXME we shouldn't get ifos from filenames, we should put it in the xml :(
	# The naming convention used in search_volume_by_m1_m2: name = 2Dsearchvolume-<tag>-<ifos>.xml
        output_tag = os.path.split(f)[1].split('-')[1]
	ifos = os.path.split(f)[1].split('-')[2].replace('.xml','')

	# Initialize inspiral utility plotting helper
	opts.ifo_times = ifos
	opts.gps_start_time = float(opts.gps_extent[ifos][0])
	opts.gps_end_time = float(opts.gps_extent[ifos][1])

	opts.user_tag = output_tag
	InspiralUtilsOpts = InspiralUtils.initialise( opts, __prog__, git_version.verbose_msg )
	fnameList = []
	tagList = []

	# Open file to put table of results
	summary_file = open(opts.output_path + ifos + '-' + output_tag + '_range_summary.'+opts.output_format,'w')
	summary_doc = ligolw.Document()
	summary_doc.appendChild(ligolw.LIGO_LW())
	ul_table = lsctables.New(UpperLimitTable)
	summary_doc.childNodes[0].appendChild(ul_table)

	# loop over mass bins and write results to wiki
	ulA.array *= 0
	for j, m1 in enumerate(bins.centres()[0]):
		for k, m2 in enumerate(bins.centres()[1]):
			masses = bins[m1,m2]
			if mbA[masses[0], masses[1]]: continue
			legend_str.append("%.1f, %.1f" % (m1, m2))
			mu,post = posterior(vA[i:i+1,masses[0],masses[1]], vA2[i:i+1,masses[0],masses[1]], dvA[i:i+1,masses[0],masses[1]])
			lines.append(pylab.loglog(mu,post/post.max()))
			ulA.array[j][k] = integrate_posterior(mu, post, 0.90)

			row = ul_table.RowType()
			row.mass1 = m1
			row.mass2 = m2
			row.range = vAD[i,masses[0],masses[1]]
			row.time = ltA[i, masses[0], masses[1]]
			row.upper_limit = ulA.array[j][k]
			row.fractional_error = vA2[i, masses[0], masses[1]]**0.5 / (vA[i, masses[0], masses[1]])
			ul_table.append(row)

	print_tables.print_tables(summary_doc,summary_file,opts.output_format,
				  tableList=['upper_limit'],
				  columnList = ['mass1','mass2','range','time','upper_limit','fractional_error'])
	summary_file.close()

	fudge = 0.01 * min (ulA.array[ulA.array !=0])
	log_vol = pylab.log10(vA[i])
	distance = vAD[i]
	#HACKS FOR LOG PLOT :(
	log_ul = pylab.log10(ulA.array + fudge)
	vol_error = vA2[i]**0.5 / (vA[i] + 0.0001)
	der = dvA[i]
	log_der = pylab.log10(dvA[i] + 0.000000001)
	# set points outside mass space to 1 (log(1) = 0)
	log_ul[mbA == 1] = 0
	log_der[mbA == 1] = -3

	##
	# Make posterior plots
	##

	#f = pylab.figure(i)
	pylab.title("%s \nposteriors for a few mass bins" % (ifos,),fontsize=14)
	leg = pylab.figlegend(lines, legend_str, 'lower right')
	leg.prop.set_size(6)
	leg.pad = 0
	pylab.ylabel("Prob (unnormalized)",fontsize=14)
	pylab.xlabel("Rate",fontsize=14)
	pylab.ylim([0.0001, 1])
	pylab.grid()
	#FIXME hardcoded rate limits are bad for advanced ligo
	pylab.xlim([1e-8, 1])
	savefig_pylal('posterior', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	##
	# Make log volume x time plot
	##

	#FIXME make it gray for pub?
	#pylab.gray()
	#FIXME setting these limits on the scale won't work in adv LIGO :)
	pylab.pcolor(X,Y, log_vol, vmin=0, vmax=10)
	pylab.colorbar()
	pylab.ylim(m1range)
	pylab.xlim(m2range)
	pylab.title(ifos + " \nLog10[< Volume * Time>] in Mpc^3 yr",fontsize=14)
	pylab.xlabel("Mass 2",fontsize=14)
	pylab.ylabel("Mass 1",fontsize=14)
	pylab.gca().set_aspect(1)
	pylab.grid()
	savefig_pylal('volume_time', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	##
	# Make log volume plot
	##

	#FIXME make it gray for pub?
	#pylab.gray()
	#FIXME setting these limits on the scale won't work in adv LIGO :)
	pylab.pcolor(X,Y, numpy.log10(distance) , vmin=0, vmax=3)
	pylab.colorbar()
	pylab.ylim(m1range)
	pylab.xlim(m2range)
	pylab.title(ifos + " \nlog10[< distance >] in Mpc",fontsize=14)
	pylab.xlabel("Mass 2",fontsize=14)
	pylab.ylabel("Mass 1",fontsize=14)
	pylab.gca().set_aspect(1)
	pylab.grid()
	savefig_pylal('distance', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	## 
	# Make vol error plot	
	##
	#FIXME we don't show errors greater than 100%
	pylab.pcolor(X,Y, vol_error, vmin=0, vmax=1)
	pylab.colorbar()
	pylab.ylim(m1range)
	pylab.xlim(m2range)
	pylab.title(ifos + " \nFractional Error on Volume * Time [std/mean]",fontsize=14)
	pylab.xlabel("Mass 2",fontsize=14)
	pylab.ylabel("Mass 1",fontsize=14)
	pylab.gca().set_aspect(1)
	pylab.grid()
	savefig_pylal('fractional_error', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	##
	# Make lambda plot
	##

	#FIXME hard limits
	pylab.pcolor(X,Y, log_der, vmin=-3, vmax=3)
	pylab.colorbar()
	pylab.ylim(m1range)
	pylab.xlim(m2range)
	pylab.title(ifos + " \nLog10[fg/bg likelihood ratio(Lambda)]",fontsize=14)
	pylab.xlabel("Mass 2",fontsize=14)
	pylab.ylabel("Mass 1",fontsize=14)
	pylab.gca().set_aspect(1)
	pylab.grid()
	savefig_pylal('lambda', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	##
	# Make UL plot
	##
	#FIXME hard limits at log(rate) of -7, 0
	pylab.pcolor(X,Y, log_ul, vmin=-7, vmax=0)
	pylab.colorbar()
	pylab.ylim(m1range)
	pylab.xlim(m2range)
	pylab.title(ifos + " \nLog10[90% upper limit] in mergers/Mpc^3/yr",fontsize=14)
	pylab.xlabel("Mass 2",fontsize=14)
	pylab.ylabel("Mass 1",fontsize=14)
	pylab.gca().set_aspect(1)
	pylab.grid()
	savefig_pylal('upper_limit_plot', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
	pylab.clf()

	plothtml = InspiralUtils.write_html_output( InspiralUtilsOpts, args, fnameList,
						    tagList, add_box_flag = False )
	InspiralUtils.write_cache_output( InspiralUtilsOpts, plothtml, fnameList )



###############################################################################
# now write out the special combined case
###############################################################################
lines = []
legend_str = []
ulA.array *= 0

for j, m1 in enumerate(bins.centres()[0]):
	for k, m2 in enumerate(bins.centres()[1]):
		masses = bins[m1,m2]
		if mbA[masses[0], masses[1]]: continue
		legend_str.append("%.1f, %.1f" % (m1, m2))
		mu,post = posterior(vA[...,masses[0],masses[1]], vA2[...,masses[0],masses[1]], dvA[...,masses[0],masses[1]])
		lines.append(pylab.loglog(mu,post/post.max()))
		ulA.array[j][k] = integrate_posterior(mu, post, 0.90)

#HACKS FOR LOG PLOT :(
# fudge is 1% effect
fudge = 0.01 * min (ulA.array[ulA.array !=0])
log_ul = pylab.log10(ulA.array + fudge)

# set points outside mass space to 1 (log(1) = 0)
log_ul[mbA == 1] = 0


# Initialize inspiral utility plotting helper
opts.ifo_times = combined_ifos
InspiralUtilsOpts = InspiralUtils.initialise( opts, __prog__, git_version.verbose_msg )
fnameList = []
tagList = []

# Make posterior plots
pylab.title("Combined posteriors for a few mass bins",fontsize=14)
leg = pylab.figlegend(lines, legend_str, 'lower right')
leg.prop.set_size(6)
leg.pad = 0
leg.ncol = 2
pylab.ylabel("Prob (unnormalized)",fontsize=14)
pylab.xlabel("Rate",fontsize=14)
pylab.ylim([0.0001, 1])
pylab.grid()
#FIXME hardcoded rate limits are bad for advanced ligo
pylab.xlim([1e-8, 1])
savefig_pylal('combined_posterior', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
pylab.clf()


##
# Make UL plot
##
#FIXME hard limits at log(rate) of -7, 0
pylab.pcolor(X,Y, log_ul, vmin=-7.0, vmax=0)
pylab.colorbar()
pylab.ylim(m1range)
pylab.xlim(m2range)
pylab.title("Combined Log10[90% upper limit] in mergers/Mpc^3/yr",fontsize=14)
pylab.xlabel("Mass 2",fontsize=14)
pylab.ylabel("Mass 1",fontsize=14)
pylab.gca().set_aspect(1)
pylab.grid()
savefig_pylal('combined_upper_limit', opts.open_box, InspiralUtilsOpts,fnameList,tagList)
pylab.clf()

plothtml = InspiralUtils.write_html_output( InspiralUtilsOpts, args, fnameList,
					    tagList, add_box_flag = False )
InspiralUtils.write_cache_output( InspiralUtilsOpts, plothtml, fnameList )


summary_file = open(opts.output_path + combined_ifos + '-' + output_tag + '_combined_upper_limit.'+opts.output_format,'w')
summary_doc = ligolw.Document()
summary_doc.appendChild(ligolw.LIGO_LW())
ul_table = lsctables.New(UpperLimitTable)
summary_doc.childNodes[0].appendChild(ul_table)

for i, m1 in enumerate(bins.centres()[0]):
	for j, m2 in enumerate(bins.centres()[1]):
		masses = bins[m1,m2]
		if mbA[masses[0], masses[1]]: continue
		row = ul_table.RowType()
		row.mass1 = m1
		row.mass2 = m2
		row.upper_limit = log_ul[i,j]
		ul_table.append(row)

print_tables.print_tables(summary_doc,summary_file,opts.output_format,
			  tableList=['upper_limit'],
			  columnList = ['mass1','mass2','upper_limit'])
summary_file.close()

print >> sys.stderr, "ALL FINNISH!"
sys.exit(0)
