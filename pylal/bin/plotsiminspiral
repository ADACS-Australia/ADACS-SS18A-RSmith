#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from glue import segmentsUtils
from pylal import SimInspiralUtils


##############################################################################
usage = """usage: %prog [options] file1 (file2 file3)

Inspiral Injection Plotting Functions

Generate a set of summary plots from triggers and found injections stored as
sngl_inspiral and sim_inspiral table in LIGO lightweight format
respectively.  The routine expects that there are equal numbers of triggers
and injections stored in the files.  

The various plots can be turned on by selecting them.  For plots and
histograms, the AXIS can be specified.  This gives the Y-axis scale for plots and the width for the histograms.

Available plots:

1) Chirp mass accuracy can be plotted as:
  a) a function of the injected chirp mass, using --plot-mchirp
  b) a histogram, using --hist-mchirp
  c) a function of the injected effective distance, using --chirp-dist
  d) a function of the detected SNR, using --chirp-snr
The width of all these plots is set using --chirp-axis

2) Eta accuracy can be plotted as:
  a) a function of the injected eta, using --plot-eta
  b) a histogram, using --hist-eta
The width of all these plots is set using --eta-axis

3) End time accuracy can be plotted as:
  a) a function of the injected end time, using --plot-time
  b) a histogram, using --hist-time
  c) a function of the injected effective distance, using --time-dist
  d) a function of the detected SNR, using --time-snr
The width of all these plots is set using --time-axis

4) Effective distance accuracy can be plotted as:
  a) a function of the injected eta, using --plot-dist
  b) a histogram, using --hist-dist
The width of these plots is set using --dist-axis
  c) injected vs detected distance can be plotted using --dist-dist 

"""
parser = OptionParser( usage )
parser.add_option("-1","--tag1",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for first input file" )
parser.add_option("-2","--tag2",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for second input file" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-f","--fig-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" ) 
parser.add_option("-F","--glob-found",action="store",type="string",\
    default=None, metavar=" GLOB",\
    help="glob for files containing found sim_inspiral" ) 
parser.add_option("-M","--glob-missed",action="store",type="string",\
    default=None, metavar=" GLOB",\
    help="glob for files containing missed sim_inspiral" ) 
parser.add_option("-x","--title-text",action="store",type="string",\
    default=None, metavar=" TEXT",\
    help="add TEXT at start of plot titles" ) 

(opts,args) = parser.parse_args()

# Change to Agg back-end if show() will not be called
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz

# glob the list of files to read in
missedfiles = glob.glob(opts.glob_missed);
foundfiles = glob.glob(opts.glob_found);

# an instance of the simInspiralTable
foundbinaries = SimInspiralUtils.ReadSimInspiralFromFiles(foundfiles)
missedbinaries= SimInspiralUtils.ReadSimInspiralFromFiles(missedfiles)

viz.plot_a_v_b(foundbinaries,"eff_dist_l","eff_dist_h",plot_sym = 'rx')
viz.plot_a_v_b(missedbinaries,"eff_dist_l","eff_dist_h",plot_sym = 'b+')
axis([0, 40, 0, 40])
grid(True)
show()

