#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import os
import socket
import sys
import time

from glue.ligolw import ligolw
from glue.ligolw import metaio
from glue.ligolw import lsctables
from pylal import llwapp
from pylal.date import XLALUTCToGPS

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

parser = OptionParser(version = "%prog CVS $Id$")
parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
parser.add_option("-o", "--output", metavar = "filename", help = "write to filename (default = stdout)")
parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
parser.add_option("-i", "--instrument", metavar = "name=first:last:step[,first:last:step[,...]]", action = "append", default = [], help = "construct time slides containing the named instrument, shifted by numbers seconds as described by the given range(s)")
options, args = parser.parse_args()
del parser, args


#
# =============================================================================
#
#                                 Preparation
#
# =============================================================================
#

doc = ligolw.Document()
doc.appendChild(ligolw.LIGO_LW())
proctable = lsctables.New(lsctables.ProcessTable)
doc.childNodes[0].appendChild(proctable)
procparamtable = lsctables.New(lsctables.ProcessParamsTable)
doc.childNodes[0].appendChild(procparamtable)
timeslidetable = lsctables.New(lsctables.TimeSlideTable)
doc.childNodes[0].appendChild(timeslidetable)


#
# =============================================================================
#
#                           Add Process Information
#
# =============================================================================
#

process = llwapp.append_process(doc, program = "ligolw_tisi", version = __version__, cvs_repository = "lscsoft", cvs_entry_time = __date__, comment = options.comment)

params = []
if options.output != None:
	params += [("--output", "lstring", options.output)]
for instrument in options.instrument:
	params += [("--instrument", "lstring", instrument)]
llwapp.append_process_params(docs, process, params)


#
# =============================================================================
#
#                      Parse Instrument Time Slide Ranges
#
# =============================================================================
#

def parse_slides(options):
	slides = {}
	for instrument in options.instrument:
		try:
			[inst, rangespecs] = instrument.split("=")
		except ValueError:
			print >>sys.stderr, "error: cannot parse time slide \"%s\"" % instrument
			sys.exit(1)
		if slides.has_key(inst):
			print >>sys.stderr, "error: duplicate instrument in time slide \"%s\"" % instrument
			sys.exit(1)
		slides[inst] = []
		for rangespec in rangespecs.split(","):
			try:
				[first, last, step] = rangespec.split(":")
				first, last, step = float(first), float(last), float(step)
			except ValueError:
				print >>sys.stderr, "error: malformed range spec \"%s\"" % rangespec
				sys.exit(1)
			if step == 0.0:
				if first != last:
					print >>sys.stderr, "error: divide by zero in range spec \"%s\"" % rangespec
					sys.exit(1)
				slides[inst].append(first)
			elif (last - first) / step < 0.0:
				print >>sys.stderr, "error: step has wrong sign in range spec \"%s\"" % rangespec
				sys.exit(1)
			else:
				i = 0
				while True:
					slides[inst].append(first + i * step)
					if slides[inst][-1] >= last:
						if slides[inst][-1] > last:
							del slides[inst][-1]
						break
					i += 1
	return slides


slides = parse_slides(options)


#
# =============================================================================
#
#                              Build Time Slides
#
# =============================================================================
#

class SlidesIter(object):
	def __init__(self, slides, instruments):
		self.instrument = []
		self.slides = []
		self.index = []
		for key, value in slides.iteritems():
			if key in instruments:
				self.instrument.append(key)
				self.slides.append(value)
				self.index.append(0)
		self.ids = lsctables.TimeSlideIDs()
		self.stop = False

	def __iter__(self):
		return self

	def next(self):
		if self.stop:
			raise StopIteration
		rows = []
		id = self.ids.next()
		for i in range(len(self.instrument)):
			row = lsctables.TimeSlide()
			row.process_id = process.process_id
			row.time_slide_id = id
			row.instrument = self.instrument[i]
			row.offset = self.slides[i][self.index[i]]
			rows.append(row)
		for i in range(len(self.instrument)):
			self.index[i] += 1
			if self.index[i] < len(self.slides[i]):
				break
			self.index[i] = 0
		else:
			self.stop = True
		return rows


for slide in SlidesIter(slides, slides.keys()):
	for row in slide:
		timeslidetable.append(row)


#
# =============================================================================
#
#                                    Output
#
# =============================================================================
#

llwapp.set_process_end_time(process)

if options.output:
	doc.write(file(options.output, "w"))
else:
	doc.write(sys.stdout)
