#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import sys


from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import ligolw_tisi
from pylal import llwapp


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version = "%prog CVS $Id$"
	)
	parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	parser.add_option("-i", "--instrument", metavar = "name=first:last:step[,first:last:step[,...]]", action = "append", default = [], help = "construct time slides containing the named instrument, shifted by numbers seconds as described by the given range(s)")
	options, filenames = parser.parse_args()

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Preparation
#
# =============================================================================
#


def new_doc():
	doc = ligolw.Document()
	doc.appendChild(ligolw.LIGO_LW())
	proctable = lsctables.New(lsctables.ProcessTable)
	doc.childNodes[0].appendChild(proctable)
	procparamtable = lsctables.New(lsctables.ProcessParamsTable)
	doc.childNodes[0].appendChild(procparamtable)
	timeslidetable = lsctables.New(lsctables.TimeSlideTable)
	doc.childNodes[0].appendChild(timeslidetable)

	return doc


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line.
#


options, filenames = parse_command_line()


#
# Make the time slides
#

offsetdicts = list(ligolw_tisi.SlidesIter(ligolw_tisi.parse_slides(options.instrument)))


#
# Make documents.
#


while offsetdicts:
	#
	# Create an empty document, populate the process information, and
	# start an ID generator for the time slides.
	#

	xmldoc = new_doc()
	timeslidetable = table.get_table(xmldoc, lsctables.TimeSlideTable.tableName)
	process = ligolw_tisi.append_process(xmldoc, **options.__dict__)
	ids = lsctables.TimeSlideIDs()

	#
	# How many slides will go into this file?
	#

	N = int(round(float(len(offsetdicts)) / len(filenames)))

	#
	# Put them in.
	#

	for offsetdict in offsetdicts[:N]:
		for row in ligolw_tisi.RowsFromOffsetDict(offsetdict, ids.next(), process):
			timeslidetable.append(row)
	del offsetdicts[:N]

	#
	# Finish off the document.
	#

	llwapp.set_process_end_time(process)

	#
	# Write.
	#

	filename = filenames.pop(0)
	utils.write_filename(xmldoc, filename, options.verbose, gz = (filename or "stdout")[-3:] == ".gz")
