#!/usr/bin/python

__author__ = "Drew Keppel <drew.keppel@ligo.org>"
__prog__="antime"

import copy
import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from glue import segments
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table as tab
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import segments as ligolw_segments
from glue import iterutils
from pylal import git_version
from pylal import SnglInspiralUtils
from pylal import SearchSummaryUtils
from pylal import InspiralUtils
from pylal import date

##############################################################################
usage = """
usage: %prog [options] 

"""

def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, version=git_version.verbose_msg )

  # options related to input and output
  parser.add_option("","--g1-triggers",action="store_true",default=False,\
      help="input files contain triggers from G1" )
  parser.add_option("","--h1-triggers",action="store_true",default=False,\
      help="input files contain triggers from H1" )
  parser.add_option("","--h2-triggers",action="store_true",default=False,\
      help="input files contain triggers from H2" )
  parser.add_option("","--l1-triggers",action="store_true",default=False,\
      help="input files contain triggers from L1" )
  parser.add_option("","--t1-triggers",action="store_true",default=False,\
      help="input files contain triggers from T1" )
  parser.add_option("","--v1-triggers",action="store_true",default=False,\
      help="input files contain triggers from V1" )

  parser.add_option("","--g1-slide",action="store",type="float",default=-1,\
      metavar=" g1_slide",help="Slide G1 data by multiples of g1_slide" )
  parser.add_option("","--h1-slide",action="store",type="float",default=-1,\
      metavar=" h1_slide",help="Slide H1 data by multiples of h1_slide" )
  parser.add_option("","--h2-slide",action="store",type="float",default=-1,\
      metavar=" h2_slide",help="Slide H2 data by multiples of h2_slide" )
  parser.add_option("","--l1-slide",action="store",type="float",default=-1,\
      metavar=" l1_slide",help="Slide L1 data by multiples of l1_slide" )
  parser.add_option("","--t1-slide",action="store",type="float",default=-1,\
      metavar=" t1_slide",help="Slide T1 data by multiples of t1_slide" )
  parser.add_option("","--v1-slide",action="store",type="float",default=-1,\
      metavar=" v1_slide",help="Slide V1 data by multiples of v1_slide" )

  parser.add_option("","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="veto file for all IFOS (format ligolw_segments)")
  parser.add_option("","--segment-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="segment file for COINC times = U(--IFO-triggers)" + \
      " (format segwizard)")

  parser.add_option("","--user-tag",action="store",type="string",\
      default=None,metavar=" USERTAG",\
      help="tag output file with USERTAG")

  parser.add_option("","--verbose",action="store_true",\
      default=False,help="print information" )

  parser.add_option("","--num-slides",action="store",type="int",default=0,\
      metavar=" NUM_SLIDES",help="number of time slides performed" )

  (options,args) = parser.parse_args()


  return options, sys.argv[1:]


# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

####################################################################
# determine IFOs and IFO combos in play

ifo_list = [ifo for ifo in ("G1", "H1", "H2", "L1", "T1", "V1") \
            if getattr(opts, "%s_triggers" % ifo.lower())]
ifo_list.sort()

slideVector = {}
for ifo in ifo_list:
  if ifo == "G1":  slideVector[ifo] = opts.g1_slide
  if ifo == "H1":  slideVector[ifo] = opts.h1_slide
  if ifo == "H2":  slideVector[ifo] = opts.h2_slide
  if ifo == "L1":  slideVector[ifo] = opts.l1_slide
  if ifo == "T1":  slideVector[ifo] = opts.t1_slide
  if ifo == "V1":  slideVector[ifo] = opts.v1_slide

ifo_coincs = []
for num_ifos in range(2, len(ifo_list) + 1):
  ifo_coincs.extend(list(iterutils.choices(ifo_list, num_ifos)))

ifos = set(ifo_list)

types = {}
for coinc in ifo_coincs:
  types[coinc] = ''
  for ifo in coinc:
    types[coinc] += ifo

time = ''
for ifo in ifo_list:
  time += ifo

########################
# read in the segment and veto files
xmldoc = utils.load_filename(opts.veto_file, gz=opts.veto_file.endswith("gz"))
vetoes = ligolw_segments.segmenttable_get_by_name(xmldoc, "vetoes")
vetoes.coalesce()

segs = segments.segmentlistdict()
segs[time] = segmentsUtils.fromsegwizard(open(opts.segment_file, "r"))

#######################################################################
# calculate the different times during the zero-lag and
# time-slides for all the segments
slide_num = range(0 , opts.num_slides + 1)
slide_num.extend(range(-opts.num_slides, 0))

analyzedTimes = {}
for slide in slide_num:
  if opts.verbose:
    print 'slide = ',slide

  analyzedTimes[slide] = {}
  for coinc in ifo_coincs:
    analyzedTimes[slide][coinc] = 0.

  slides = slideVector.copy()
  for key in slides.keys():
    slides[key] *= slide

  for seg in segs[time]:
    seg = segments.segmentlist([seg])
    theseVetoes = segments.segmentlistdict()
    for key in vetoes.keys():
      theseVetoes[key] = vetoes[key] & seg
 
    slidVetoes = SnglInspiralUtils.slideSegListDictOnRing(seg[0], theseVetoes,
        slides)

    for coinc in ifo_coincs:
      thisSlideSeg = seg & (~slidVetoes).intersection(coinc)
      if (ifos - set(coinc)):
        thisSlideSeg &= slidVetoes.\
            intersection(ifos - set(coinc))

      analyzedTimes[slide][coinc] += abs(thisSlideSeg)

  for coinc in ifo_coincs:
    print types[coinc],analyzedTimes[slide][coinc]

for coinc in ifo_coincs:
  outFileName = types[coinc] + '_in_' + time
  if opts.user_tag:
    outFileName += '_' + opts.user_tag
  outFileName += '.txt'
  outFile = open(outFileName, 'w')
  for slide in slide_num:
    outFile.write(str(slide) + ' ' + str(analyzedTimes[slide][coinc]) + '\n')
  outFile.close()

