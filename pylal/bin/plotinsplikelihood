#!/usr/bin/python

import sys
import exceptions 
from optparse import *
import glob

from glue import lal
from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import utils
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils
from pylal import SimInspiralUtils
from pylal.tools import XLALCalculateEThincaParameter
from glue.ligolw import ligolw
#from pylab import*
import glue.iterutils
import numpy
numpy.seterr("raise")
import cmath

#from ROOT import gROOT,gStyle,TCanvas,TFile
#from ROOT import TH3F, TNtuple
#from ROOT import TParallelCoord, TParallelCoordVar, TParallelCoordRange
#from ROOT import TLegend
#from ROOT import kRed,kGreen,kBlue,kYellow,kViolet,kOrange


#######################################################################################
# Definitions of some of the classes and functions that are used in the main program.
#######################################################################################
class InspiralLikelihoodTable(table.Table):
  tableName = "Inspiral_Likelihood:table"
  validcolumns = {
	"ifo": "lstring",
	"false_alarm_prob": "real_4",
	"detect_prob": "real_4",
	"likelihood": "real_4",
	"bg_frac": "real_4",
	"detect_bg_frac_ratio": "real_4",
	"event_id": "int_8s"
  }
  def get_column(self,column):
    return self.getColumnByName(column).asarray()
	
  def getslide(self,slide_num):
	  """
	  Return the triggers with a specific slide number.
	  @param slide_num: the slide number to recover (contained in the event_id)
	  """
	  slideTrigs = lsctables.New(InspiralLikelihoodTable)
	  if slide_num < 0:
		  slide_num = 5000 - slide_num
	  for row in self:
		  if ( (row.event_id % 1000000000) / 100000 ) == slide_num:
			  slideTrigs.append(row)
	  return slideTrigs
	  
  def coinctype(self, ifo):
	"""
	Return the events with the given IFO.
	@param ifo: parameter specifying the IFO ( e.g. "H1H2L1")  
	"""
	ifo_triggers=lsctables.New(InspiralLikelihoodTable)
	
	for row in self:
	  if row.ifo == ifo:
	    ifo_triggers.append(row)
	
	return ifo_triggers
			
class InspiralLikelihood(object):
  __slots__ = InspiralLikelihoodTable.validcolumns.keys()
  
InspiralLikelihoodTable.RowType = InspiralLikelihood


def ReadInspiralLikelihoodFromFiles(fileList):
  """
  Read the InspiralLikelihoodTables from a list of files
  @param fileList: list of input files
  """
  FullTable = lsctables.New(InspiralLikelihoodTable)
  for file in fileList:
    doc = utils.load_url(file, verbose = False, gz = file[-3:] == ".gz", xmldoc = ligolw.Document())
    try:
      SubTable = glue.ligolw.table.get_table(doc, InspiralLikelihoodTable.tableName)
    except:
      SubTable = None
    if SubTable:  
	  for row in SubTable:
	    FullTable.append(row)
  return FullTable

def generate_prefix_and_suffix(ifo_times="", program_name="", ifo_tag="", user_tag="", gps_start_time=0, gps_end_time=0):
  """
  Generates the string according to inspiral pipeline conventions, that can be used as a name of a file.
  """ 
  prefix = program_name
  if ifo_times:
    prefix = ifo_times + "-" + prefix
  if ifo_tag:
    prefix = prefix + "_" + ifo_tag
  if user_tag:
    prefix = prefix + "_" + user_tag
	
  if gps_start_time > 0 and gps_end_time > 0:
    suffix = "_" +str(gps_start_time) + "-" + str(gps_end_time - gps_start_time)
  else:
    suffix = ""
  return prefix, suffix

########################################################################
# Functions that are relevant to plots
########################################################################
def distcut(coinc_a,coinc_b):
  '''
  Return the numpy array -  the relative difference of two one-dimensional arrays, 
  presumably of the same length, weighted by their average.
  @param coinc_a, coincb: numpy arrays of equal length. 
  '''        
  dist_cut_array=(coinc_b -  coinc_a)*2.0/(coinc_a +  coinc_b)
  return dist_cut_array

def normalized_hist(Unormalised_array, bins=10):
  """
  Return normalized histogram; 
  y_norm is a numpy array containing normilized number of events in the corresponding bin;
  x_norm is a numpy array containing bins (namely left side, limit of each bin).
  @param Unormalized_array: numpy array containing the quatities for which the histogram will be generated.
  The length of the array defines the total number of the events - normalization.
  @param bins: either integer that sets the number of bins in the histogram or a numpy array containing bins.
  """
  
  (y_param, x_param, patches) = hist(Unormalised_array, bins)
  clf()
  y_norm = y_param*1.0/sum(y_param)
  return (y_norm, x_param)



def cum_hist(likelihood, bins):
  '''
  Function that generates the histogram of the cumulative (e.g. likelihood) statistic histogram.
  Return cumulative histogram; cumhist is a numpy array each entry of which is equal to the total number of the events
  contained in the bins to the right (in increasing order) of the current one;
  x_middle is a numpy array that defines the bins by their middle point.
  @param likelihood: the array to be binned that contains  statistic (e.g. likelihood) calculated for each coinc (event).
  @param bins: either integer that sets the number of bins in the histogram or a numpy array containing bins.
  '''
  
  # get rid of events with likelihood = -1
  likelihood_cleared = numpy.compress(numpy.greater(likelihood, -1.0), likelihood)

  (y, x, patches) = hist(likelihood_cleared, bins)
  clf()     
  x_middle = numpy.zeros(len(x))
  bin_size = x[1] - x[0]
  for i in range(len(x)):
    x_middle[i] = x[i] + 0.5*bin_size
  cumhist = y[::-1].cumsum()[::-1]
  return cumhist, x_middle

#######################################################################
# Plotting subroutines
#######################################################################
def plotparam(ifos, coinc_slides, coinc_inj, param, slide_bins, inj_bins):
  
  for ifolist in ifos:
	for ifo in ifolist:
	  hist_check_slides = 1
	  hist_check_inj = 1
	  coinc_slides_sim = coinc_slides.coinctype(ifolist).getsngls(ifo).get_column(param)
	  coinc_inj_sim = coinc_inj.coinctype(ifolist).getsngls(ifo).get_column(param)
	  if len(coinc_slides_sim) > 1:
		(y_slide, x_slide) = normalized_hist(coinc_slides_sim, slide_bins)
	  else:
		hist_check_slides = 0

	  if len(coinc_inj_sim) > 1:
		(y_inj, x_inj) = normalized_hist(coinc_inj_sim, inj_bins)
	  else:
		hist_check_inj = 0
	  if (hist_check_slides == 1) and (hist_check_inj == 1):
		slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]),color="k")
		hold(True)
		inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]),color="r")
		legend([inj_val[0],slide_val[0]],["Injections","Background"],loc=0)
		coinc_label=''
		for ifo1 in ifolist:
		  coinc_label+=ifo1
		xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifo))
		savefig(coinc_label + '-' + str(param) + "_" + str(ifo) )
		figure()
	  else:
		if hist_check_slides == 1:
		  slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]),color="k")
		  legend([slide_val[0]],["Background"],loc=0)
		  coinc_label=''
		  for ifo1 in ifolist:
			coinc_label+=ifo1
		  xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifo))
		  savefig(coinc_label + '-' + str(param) + "_" + str(ifo))
		  figure()
		else:
		  if hist_check_inj == 1:
			inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]),color="r")
			legend([inj_val[0]],["Injections"],loc=0)
			coinc_label=''
			for ifo1 in ifolist:
			  coinc_label+=ifo1
			xlabel(coinc_label + ':' + ' ' + str(param) + ' ' + str(ifo))
			savefig(coinc_label + '-' + str(param) + "_" + str(ifo))
			figure()

def plot_hist_param(ifos, coinc_slides, coinc_inj, param, slide_bins, inj_bins):
  """
  Function that plots the normalilzed histograms of a given parameter for coincident events found in time slides
  and injection runs respectively.
  """
  
  for ifolist in ifos:
	coinc_slides_type = coinc_slides.coinctype(ifolist)
	coinc_inj_type = coinc_inj.coinctype(ifolist)
	hist_check_slides = 1
	hist_check_inj = 1
	if param == "mchirp_diff":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  i = 0
	  for coinc in coinc_slides_type:
		mchirp_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  mchirp_diff_sq += (2.0*(getattr(coinc, ifo2).mchirp - getattr(coinc, ifo1).mchirp)/(getattr(coinc, ifo2).mchirp + getattr(coinc, ifo1).mchirp))**(2.0)
		param_slides[i] = mchirp_diff_sq**(0.5)
		i += 1
		
	  i = 0
	  for coinc in coinc_inj_type:
		mchirp_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  mchirp_diff_sq += (2.0*(getattr(coinc, ifo2).mchirp - getattr(coinc, ifo1).mchirp)/(getattr(coinc, ifo2).mchirp + getattr(coinc, ifo1).mchirp))**(2.0)
		param_inj[i] = mchirp_diff_sq**(0.5)
		i += 1 
		
	if param == "eff_dist_diff":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  i = 0
	  for coinc in coinc_slides_type:
		eff_dist_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  eff_dist_diff_sq += (2.0*(getattr(coinc, ifo2).eff_distance - getattr(coinc, ifo1).eff_distance)/(getattr(coinc, ifo2).eff_distance + getattr(coinc, ifo1).eff_distance))**(2.0)
		param_slides[i] = eff_dist_diff_sq**(0.5)
		i += 1
		
	  i = 0
	  for coinc in coinc_inj_type:
		eff_dist_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  eff_dist_diff_sq += (2.0*(getattr(coinc, ifo2).eff_distance - getattr(coinc, ifo1).eff_distance)/(getattr(coinc, ifo2).eff_distance + getattr(coinc, ifo1).eff_distance))**(2.0)
		param_inj[i] = eff_dist_diff_sq**(0.5)
		i += 1 

	if param == "combined_eff_snr":
	  param_slides = coinc_slides_type.getstat()
	  param_inj = coinc_inj_type.getstat()
	  
	if param == "average_ethinca":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  n_pairs = 0.0
	  for ifo1 in ifolist:
		for ifo2 in ifolist:
		  if ifo1 < ifo2:
			n_pairs += 1.0
			param_slides += coinc_slides_type.getSimpleEThincaValues([ifo1, ifo2])
			param_inj += coinc_inj_type.getSimpleEThincaValues([ifo1, ifo2])
	  param_slides = param_slides / n_pairs
	  param_inj = param_inj / n_pairs
	  
	if len(coinc_slides_type) > 1:  
	  (y_slide, x_slide) = normalized_hist(param_slides, slide_bins)
	else:
	  hist_check_slides = 0
	  
	if len(coinc_inj_type) > 1:
	  (y_inj, x_inj) = normalized_hist(param_inj, inj_bins)
	else:
	  hist_check_inj = 0
	  
	if (hist_check_slides == 1) and (hist_check_inj == 1):
	  slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]), color='k', edgecolor="k")
	  hold(True)
	  inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]), color='r', edgecolor="r")
	  legend([inj_val[0], slide_val[0]], ["Injections","Background"], loc=0)
	  coinc_label=''
	  for ifo in ifolist:
		coinc_label += ifo
	  xlabel(str(param) + " for " + coinc_label + " triggers")
	  savefig(coinc_label + '-' + str(param))
	  figure()
	elif hist_check_slides == 1:
	  slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]), color='k', edgecolor="k")
	  legend([slide_val[0]],["Background"],loc=0)
	  coinc_label=''
	  for ifo in ifolist:
		coinc_label+=ifo
	  xlabel(str(param) + " for " + coinc_label + " triggers")
	  savefig(coinc_label + '-' + str(param))
	  figure()
	elif hist_check_inj == 1:
	  inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]), color='r', edgecolor="r")
	  legend([inj_val[0]],["Injections"],loc=0)
	  coinc_label=''
	  for ifo in ifolist:
		coinc_label+=ifo
	  xlabel(str(param) + " for " + coinc_label + " triggers")
	  savefig(coinc_label + '-' + str(param))
	  figure()
	  
	  
def plot_param_vs_stat(ifos, coinc_slides, coinc_inj, param):
  """
  Makes a scatter plot of a coinc parameter vs effective snr
  """
  for ifolist in ifos:
	coinc_slides_type = coinc_slides.coinctype(ifolist)
	coinc_inj_type = coinc_inj.coinctype(ifolist)
	if param == "mchirp_diff":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  i = 0
	  for coinc in coinc_slides_type:
		mchirp_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  mchirp_diff_sq += (2.0*(getattr(coinc, ifo2).mchirp - getattr(coinc, ifo1).mchirp)/(getattr(coinc, ifo2).mchirp + getattr(coinc, ifo1).mchirp))**(2.0)
		param_slides[i] = mchirp_diff_sq**(0.5)
		i += 1
		
	  i = 0
	  for coinc in coinc_inj_type:
		mchirp_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  mchirp_diff_sq += (2.0*(getattr(coinc, ifo2).mchirp - getattr(coinc, ifo1).mchirp)/(getattr(coinc, ifo2).mchirp + getattr(coinc, ifo1).mchirp))**(2.0)
		param_inj[i] = mchirp_diff_sq**(0.5)
		i += 1 
		
	if param == "eff_dist_diff":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  i = 0
	  for coinc in coinc_slides_type:
		eff_dist_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  eff_dist_diff_sq += (2.0*(getattr(coinc, ifo2).eff_distance - getattr(coinc, ifo1).eff_distance)/(getattr(coinc, ifo2).eff_distance + getattr(coinc, ifo1).eff_distance))**(2.0)
		param_slides[i] = eff_dist_diff_sq**(0.5)
		i += 1
		
	  i = 0
	  for coinc in coinc_inj_type:
		eff_dist_diff_sq = 0.0
		for ifo1 in ifolist:
		  for ifo2 in ifolist:
			if ifo1 < ifo2:
			  eff_dist_diff_sq += (2.0*(getattr(coinc, ifo2).eff_distance - getattr(coinc, ifo1).eff_distance)/(getattr(coinc, ifo2).eff_distance + getattr(coinc, ifo1).eff_distance))**(2.0)
		param_inj[i] = eff_dist_diff_sq**(0.5)
		i += 1 

	if param == "combined_eff_snr":
	  param_slides = coinc_slides_type.getstat()
	  param_inj = coinc_inj_type.getstat()
	  
	if param == "average_ethinca":
	  param_slides = numpy.zeros(len(coinc_slides_type))
	  param_inj = numpy.zeros(len(coinc_inj_type))
	  n_pairs = 0.0
	  for ifo1 in ifolist:
		for ifo2 in ifolist:
		  if ifo1 < ifo2:
			n_pairs += 1.0
			param_slides += coinc_slides_type.getSimpleEThincaValues([ifo1, ifo2])
			param_inj += coinc_inj_type.getSimpleEThincaValues([ifo1, ifo2])
	  param_slides = param_slides / n_pairs
	  param_inj = param_inj / n_pairs
	  
	slides_stat = numpy.zeros(len(coinc_slides_type))
	inj_stat = numpy.zeros(len(coinc_inj_type))
	i = 0
	for coinc in coinc_slides_type:
	  slides_stat[i] = coinc.stat
	  i += 1
	i = 0  
	for coinc in coinc_inj_type:
	  inj_stat[i] = coinc.stat
	  i += 1
	l1 = plot(slides_stat, param_slides, marker='x', linestyle='None', color='k')
	hold(True)
	l2 = plot(inj_stat, param_inj, marker = 'x', linestyle="None", color='r')
	xlabel("effective snr")
	ylabel(param)
	legend((l1, l2), ('time slides', 'injections'))
	coinc_label=''
	for ifo in ifolist:
	  coinc_label += ifo
	savefig(coinc_label + "_" + param + "_vs_" + "eff_snr")
	figure()


def plotroutine(ifos, coinc_slides, coinc_inj, param, slide_bins, inj_bins):
  """ 
  Function that makes histograms of a relative difference of a given parameter (or of parameter itself in case of simple ethinca)
  in  each pair of ifos specified. It does it for both injections and timeslides.
  @param  ifos:  a list whose elements are the lists of ifos such as ['H1', 'H2'].
  @param  coinc_a, coinc_b:  are instances of CoincInspiralUtils.CoincInspiralTable() class that contain
  time slide and injection triggers respectively.
  @params param: is a name of the parameter to be plotted.
  if param is 'simethinca' histograms of its value are produced for each pair of interferometers
  otherwise histograms of (param(ifo2)-param(ifo1))*2/(param(ifo2) + param(ifo1)) are produced
  @param slide_bins, inj_bins:  are number of bins in the histogram for time slides and injections respectively
  """ 
	  
  for ifolist in ifos:
    for i in range(len(ifolist)):
	  for j in range(len(ifolist)):
	    if i < j:
	      hist_check_slides = 1
	      hist_check_inj = 1
	      if param == 'simethinca':
		    coinc_slides_sim = coinc_slides.coinctype(ifolist).getSimpleEThincaValues([ifolist[i], ifolist[j]])
		    coinc_inj_sim = coinc_inj.coinctype(ifolist).getSimpleEThincaValues([ifolist[i], ifolist[j]])
		    if len(coinc_slides_sim) > 1:  
			  (y_slide, x_slide) = normalized_hist(coinc_slides_sim, slide_bins)
		    else:
			  hist_check_slides = 0

		    if len(coinc_inj_sim) > 1:  
			  (y_inj, x_inj) = normalized_hist(coinc_inj_sim, inj_bins)
		    else:
			  hist_check_inj = 0

	      else:
		    coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		    coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		    coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		    coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		    dist_cut_slide = distcut(coinc_slides_fir, coinc_slides_sec)
		    dist_cut_inj = distcut(coinc_inj_fir, coinc_inj_sec)
		    if len(dist_cut_slide) > 1:
		      (y_slide, x_slide) = normalized_hist(dist_cut_slide, slide_bins)
		    else:
			  hist_check_slides = 0 

		    if len(dist_cut_inj) > 1:
		      (y_inj, x_inj) = normalized_hist(dist_cut_inj, inj_bins) 
		    else:
			  hist_check_inj = 0  
	      if (hist_check_slides == 1) and (hist_check_inj == 1): 
		    slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]), color='k', edgecolor="k")
		    hold(True)
		    inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]), color='r', edgecolor="r")
		    legend([inj_val[0],slide_val[0]],["Injections","Background"],loc=0)
		    coinc_label=''
		    for ifo in ifolist:
		      coinc_label+=ifo
		    if param == 'simethinca':
		      xlabel(coinc_label + ':' + ' ' + str(param) + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
		      savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
		    else:
		      xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
		      savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
		    figure()
	      else:
			if hist_check_slides == 1:
			  slide_val = bar(x_slide,y_slide,width=(x_slide[1]-x_slide[0]), color='k', edgecolor="k")
			  legend([slide_val[0]],["Background"],loc=0)
			  coinc_label=''
			  for ifo in ifolist:
				coinc_label+=ifo
			  if param == 'simethinca':
				xlabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifolist[i]) + '-' + str(ifolist[j]))
				savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
			  else:
				xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
				savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
			  figure()
			else:
			  if hist_check_inj == 1:
				inj_val = bar(x_inj,y_inj,width=(x_inj[1]-x_inj[0]), color='r', edgecolor="r")
				legend([inj_val[0]],["Injections"],loc=0)
				coinc_label=''
				for ifo in ifolist:
				  coinc_label+=ifo
				if param == 'simethinca':
				  xlabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifolist[i]) + '-' + str(ifolist[j]))
				  savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
				else:
				  xlabel(coinc_label + ':' + ' ' + str(param) + ' ' + 'difference' + ' ' + str(ifolist[i]) + '-' + str(ifolist[j]))
				  savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) )
				figure()

def scatter_plot_param_diff_2D_with_zerolag(ifos, coinc_slides, coinc_inj, coinc_zerolag, param, logscale=False):
  """
  Function that makes a scatter plot of ethinca values vs ethinca values for each distinct combination of ifo pairs
  """
  for ifolist in ifos:
	print ifolist
	ifopairs = list(glue.iterutils.choices(ifolist, 2))
	print ifopairs
	coinc_label = ''
	for ifo in ifolist:
	  coinc_label+=ifo
	for i in range(len(ifopairs)):
	  for j in range(len(ifopairs)):
		if i < j:
		  if param == 'simethinca':
			coinc_slides_x = coinc_slides.coinctype(ifolist).getSimpleEThincaValues([ifopairs[i][0], ifopairs[i][1]])
			coinc_inj_x = coinc_inj.coinctype(ifolist).getSimpleEThincaValues([ifopairs[i][0], ifopairs[i][1]])
			coinc_zerolag_x = coinc_zerolag.coinctype(ifolist).getSimpleEThincaValues([ifopairs[i][0], ifopairs[i][1]])
			coinc_slides_y = coinc_slides.coinctype(ifolist).getSimpleEThincaValues([ifopairs[j][0], ifopairs[j][1]])
			coinc_inj_y = coinc_inj.coinctype(ifolist).getSimpleEThincaValues([ifopairs[j][0], ifopairs[j][1]])
			coinc_zerolag_y = coinc_zerolag.coinctype(ifolist).getSimpleEThincaValues([ifopairs[j][0], ifopairs[j][1]])
			l1 = plot(coinc_slides_x, coinc_slides_y, marker='x', linestyle='None', color='k')
			hold(True)
			l2 = plot(coinc_inj_x, coinc_inj_y, marker='x', linestyle='None', color='r')
			hold(True)
			l3 = plot(coinc_zerolag_x, coinc_zerolag_y, marker='o', linestyle='None', color='g')
			xlabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifopairs[i][0]) + '-' + str(ifopairs[i][1]))
			ylabel(coinc_label + ':' + ' ' +  str(param)  + ' ' +  str(ifopairs[j][0]) + '-' + str(ifopairs[j][1]))
			legend((l3, l2, l1), ('zerolag candidates', 'found injections', 'background events'))
			savefig(coinc_label + '-' + str(param) + "_" + str(ifopairs[i][0]) + str(ifopairs[i][1]) + "_" +  str(ifopairs[j][0]) + str(ifopairs[j][1]) + "_scatter_plot")
			figure()


def triple_scatter_plot(p0_zerolag, pc_zerolag, p0_injections, pc_injections, p0_background, pc_background, y_label, ifo="All", prefix='False_Alarm_Probability', y_lower_limit=0.00001):
  """
  Function that makes scattering plot of zerolag candidate triggers, injections and background triggers in
  Detection probability (or Likelihood) , p(h|c), and False Alarm Probability, p(0|c), space. The coordinates of points plotted are {p(c|0), p(c|h)}. 
  """
  #v = [-0.1, 1.1, -0.1, 1.1]
  #axis(v)
  if y_lower_limit:
        for i in range(len(pc_zerolag)):
          if  pc_zerolag[i] == 0.0:
             pc_zerolag[i] = y_lower_limit
        for i in range(len(pc_injections)):
          if pc_injections[i] == 0.0:
            pc_injections[i] = y_lower_limit
        for i in range(len(pc_background)):
          if pc_background[i] == 0.0:
            pc_background[i] = y_lower_limit

  l3 = semilogy(p0_background, pc_background, marker='x', linestyle='None', color='k')
  hold(True)
  l2 = semilogy(p0_injections, pc_injections, marker='x', linestyle='None', color='r')
  hold(True)
  l1 = semilogy(p0_zerolag, pc_zerolag, marker='o', linestyle='None', color='g')
  hold(True)

  xlabel(prefix.replace("_", " ") + ', p(c|0)')
  ylabel(y_label.replace("_", " "))
  title(y_label.replace("_", " ") + " " + prefix.replace("_", " ") + " " + ifo.replace("_", ""))
  legend((l1, l2, l3), ('zerolag candidates', 'found injections', 'background events'))
  savefig(ifo.replace("_", "") + "_" + y_label +'_vs_' + prefix)
  figure()

def triple_scatter_plot_stat(zerolag_stat, p0_zerolag, injections_stat, p0_injections, background_stat, p0_background, new_statistic='FalseAlarmProbability', old_statistic='snr', ifo="All", y_lower_limit=0.00001):
  """
  Function that makes scattering plot of  new statistic (likelihood) vs old statistic (effective snr) 
  for zerolag candidate triggers, injections and background triggers. 
  """
  if y_lower_limit:
	for i in range(len(p0_background)):
	  if p0_background[i] == 0.0:
	    p0_background[i] = y_lower_limit
	for i in range(len(p0_injections)):
	  if p0_injections[i] == 0.0:
	    p0_injections[i] = y_lower_limit	
	for i in range(len(p0_zerolag)):
	  if p0_zerolag[i] == 0.0:
	    p0_zerolag[i] = y_lower_limit
		
  l3 = semilogy(background_stat, p0_background, marker='x', linestyle='None', color='k')
  hold(True)
  l2 = semilogy(injections_stat, p0_injections, marker='x', linestyle='None', color='r')
  hold(True)
  l1 = semilogy(zerolag_stat, p0_zerolag, marker='o', linestyle='None', color='g')
  hold(True)

  xlabel(old_statistic.replace("_", " "))
  ylabel(new_statistic.replace("_", " "))
  title(new_statistic.replace("_", " ") + " vs combined effective SNR " + ifo.replace("_","")) 
  legend((l1, l2, l3), ('zerolag candidates', 'found injections', 'background events'))
  savefig(ifo.replace("_","") + "_" + new_statistic + '_' + old_statistic)
  figure()

def scatter_plot(p0, pc, y_label, ifo="All", y_lower_limit=0.00001):
  """
  Makes a scatter plot of points {p(c|0), p(c|h)} or {p(c|0), Likelihood}.
  """
  
  #v = [-0.1, 1.1, -0.1, 1.1]
  #axis(v)
  if y_lower_limit:
    for i in range(len(p0)):
      if pc[i] == 0.0:
        pc[i] = y_lower_limit

  semilogy(p0, pc, marker='o', linestyle='None', color='g')
  xlabel('False Alarm Probability, p(c|0)')
  ylabel(y_label.replace("_", " "))
  title(y_label.replace("_", " ") + " vs False Alarm Probability" + " " +  ifo.replace("_", ""))
  savefig(ifo.replace("_", "") + "_" + y_label + '_vs_FalseAlarmProb')
  figure()

def scatter_plot_stat(stat_array, p0,  new_statistic='FalseAlarmProbability', old_statistic='snr', ifo="All", y_lower_limit=0.00001):
  """
  Makes a scatter plot of new statistic (likelihood) vs old statistic (effective snr)
  """
  
  if y_lower_limit:
	for i in range(len(p0)):
	  if p0[i] == 0.0:
	    p0[i] = y_lower_limit

  plot(stat_array, p0, marker='o', linestyle='None', color='g')
  ylabel(new_statistic.replace("_", " "))
  xlabel(old_statistic.replace("_", " "))
  title("Likelihood vs combined effective SNR" + " " + ifo) 
  savefig(ifo.replace("_","") + "_" + 'zerolag_' + new_statistic + '_' + old_statistic)
  figure()

def scatter_plot_param_2D(ifos, coinc_slides, coinc_inj, param, logscale=False):
  """
  Makes a scatter plot of single inspiral param  vs. single inspiral param  for each pair of the list of ifos
  """
  for ifolist in ifos:
   for i in range(len(ifolist)):
	 for j in range(len(ifolist)):
	   if i < j:
		 coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		 coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		 coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		 coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		 if not logscale:
		   l1 = plot(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		   hold(True)
		   l2 = plot(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		 else:
		   l1 = loglog(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		   hold(True)
		   l2 = loglog(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')

		 coinc_label=''
		 for ifo in ifolist:
		   coinc_label+=ifo
		 title(str(param) + " in " + ifolist[j] + " vs " + str(param) + " in " + ifolist[i] + " for " + coinc_label + " triggers") 
		 legend((l2, l1), ("Injections","Background"))
		 xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifolist[i]))
		 ylabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifolist[j]))
		 savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) + "_scatterplot")
		 figure()
		 
def scatter_plot_param_2D_with_zerolag(ifos, coinc_slides, coinc_inj, coinc_zerolag, param, logscale=False):
  """
  Makes a scatter plot of single inspiral param  vs. single inspiral param  for each pair in the ifos list
  """
  for ifolist in ifos:
   for i in range(len(ifolist)):
	 for j in range(len(ifolist)):
	   if i < j:
		 coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		 coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		 coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		 coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)
		 coinc_zerolag_fir = coinc_zerolag.coinctype(ifolist).getsngls(ifolist[i]).get_column(param)
		 coinc_zerolag_sec = coinc_zerolag.coinctype(ifolist).getsngls(ifolist[j]).get_column(param)

		 if not logscale:
		   l1 = plot(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		   hold(True) 
		   l2 = plot(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		   hold(True)
		   l3 = plot(coinc_zerolag_fir, coinc_zerolag_sec,  marker='o', linestyle='None', color='g')
		 else:
		   l1 = loglog(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		   hold(True)
		   l2 = loglog(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		   hold(True)
		   l3 = loglog(coinc_zerolag_fir, coinc_zerolag_sec,  marker='o', linestyle='None', color='g')

		 coinc_label=''
		 for ifo in ifolist:
		   coinc_label+=ifo
		 title(str(param) + " in " + ifolist[j] + " vs " + str(param) + " in " + ifolist[i] + " for " + coinc_label + " triggers")
		 legend((l3, l2, l1), ("candidate events", "Injections","Background"))
		 xlabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifolist[i]))
		 ylabel(coinc_label + ':' + ' ' +  str(param) + ' ' + str(ifolist[j]))
		 savefig(coinc_label + '-' + str(param) + "_" + str(ifolist[i]) + "_" +  str(ifolist[j]) +"_with_zerolag" + "_scatterplot")
		 figure()
			   
def scatter_plot_param1_vs_param2(ifos, coinc_slides, coinc_inj, param1, param2, logscale=False, ylogscale=False):
  """
  Makes a scatter plot of single inspiral param  vs. single inspiral param  for each ifo pairs  the list of ifos.
  """
  for ifolist in ifos:
	for i in range(len(ifolist)):
	  coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param1)
	  coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param2)
	  coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param1)
	  coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param2)
	  if not (logscale or ylogscale):
		l1 = plot(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = plot(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
	  elif logscale:
		l1 = loglog(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = loglog(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
	  elif ylogscale:
		l1 = semilogy(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = semilogy(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
	  coinc_label=''
	  for ifo in ifolist:
		coinc_label+=ifo
	  title(str(param2) + " in " + ifolist[i] + " vs " + str(param1) + " in " + ifolist[i] + " for " + coinc_label + " triggers")
	  legend((l2, l1), ("Injections","Background"))
	  xlabel(coinc_label + ':' + ' ' +  str(param1) + ' ' + str(ifolist[i]))
	  ylabel(coinc_label + ':' + ' ' +  str(param2) + ' ' + str(ifolist[i]))
	  savefig(coinc_label + '-' + str(param2) + "_" + "_vs_" + str(param1)+ "_" +  str(ifolist[i]) + "_scatterplot")
	  figure()
 
def scatter_plot_param1_vs_param2_with_zerolag(ifos, coinc_slides, coinc_inj, coinc_zerolag, param1, param2, logscale=False, ylogscale=False):
  """
  Makes a scatter plot of single inspiral param  vs. single inspiral param  for each pair of the list of ifos
  """
  for ifolist in ifos:
	for i in range(len(ifolist)):
	  coinc_slides_fir = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param1)
	  coinc_slides_sec = coinc_slides.coinctype(ifolist).getsngls(ifolist[i]).get_column(param2)
	  coinc_inj_fir = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param1)
	  coinc_inj_sec = coinc_inj.coinctype(ifolist).getsngls(ifolist[i]).get_column(param2)
	  coinc_zerolag_fir = coinc_zerolag.coinctype(ifolist).getsngls(ifolist[i]).get_column(param1)
	  coinc_zerolag_sec = coinc_zerolag.coinctype(ifolist).getsngls(ifolist[i]).get_column(param2)
	  if not (logscale or ylogscale):
		l1 = plot(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = plot(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		hold(True)
		l3 = plot(coinc_zerolag_fir, coinc_zerolag_sec,  marker='o', linestyle='None', color='g')
	  elif logscale:
		l1 = loglog(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = loglog(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		hold(True)
		l3 = loglog(coinc_zerolag_fir, coinc_zerolag_sec,  marker='o', linestyle='None', color='g')       
	  elif ylogscale:
		l1 = semilogy(coinc_slides_fir, coinc_slides_sec, marker='x', linestyle='None', color='k')
		hold(True)
		l2 = semilogy(coinc_inj_fir, coinc_inj_sec,  marker='x', linestyle='None', color='r')
		hold(True)
		l3 = semilogy(coinc_zerolag_fir, coinc_zerolag_sec,  marker='o', linestyle='None', color='g')
	  coinc_label=''
	  for ifo in ifolist:
		coinc_label+=ifo
	  title(str(param2) + " in " + ifolist[i] + " vs " + str(param1) + " in " + ifolist[i] + " for " + coinc_label + " triggers")
	  legend((l3, l2, l1), ("candidate events", "Injections", "Background"))
	  xlabel(coinc_label + ':' + ' ' +  str(param1) + ' ' + str(ifolist[i]))
	  ylabel(coinc_label + ':' + ' ' +  str(param2) + ' ' + str(ifolist[i]))
	  savefig(coinc_label + '-' + str(param2) + "_" + "_vs_" + str(param1)+ "_" +  str(ifolist[i]) + "_with_zerolag" + "_scatterplot")
	  figure()


def plot_cumhist(statistic_foreground, sigma, expect, x_middle, postfix, ifo="All", label_x='likelihood'):
  """ 
  Plots the cumulative histogram (cum_hist)  of foreground (injections or zerolag candidates)  and background 
  (time slides). The entries in the latter are  normalized by the number of time slides performed. In addition, 
  the one sigma variance of the cumulative histogram  of  the time slides is plotted.
  @param statistic_foreground: an array containing the cum_hist values of the foreground
  @param sigma: an array containing the variance of the cum_hist for time slides
  @param expect: an array containing the cum_hist values of the background (time slides)
  @param x_middle: an array containing the central positions of the bins used to generate given cum_hist histograms.
  @param postfix: a string that sets the ending of the figure name
  @poram label_x: a string to label x axes.
  """
  coord = gca()
  coord.set_yscale('log')
  l1 = plot(x_middle, statistic_foreground, marker='o', linestyle='None', color='g')
  hold(True)
  xerr = (x_middle[1] - x_middle[0]) / 2.0
  l2 = errorbar(x_middle, expect, sigma, xerr, marker='o', color='k',linestyle='None', ecolor='b')  
  grid(True)
  xlabel(label_x)
  ylabel('number of events')
  title('Combined statistic '+ postfix.replace("_", " ") + " " + ifo.replace("_", ""))
  legend((l1,l2),('foreground', 'background'))
  savefig(ifo.replace("_", "") + "_" + 'Combined_statistic' + postfix)
  figure()

def plot_likelihood(likelihood_foreground, bins, prefix, ifo="All",  label_x='likelihood'):
  """
  Plots a single cum_hist histogram.
  @param likelihood: an array that contains the statistic (e.g. likelihood) calculated for each event.
  @param bins: either integer that sets the number of bins in the histogram or a numpy array containing bins.
  @param prefix: a string that sets the begining of the figure name.
  @param label_x: a string to label x axes.
  """      
  likelihood_foreground_cleared = numpy.compress(numpy.greater(likelihood_foreground, -1.0), likelihood_foreground)
  (y_foreground, x_foreground, patches) = hist(likelihood_foreground_cleared, bins)
  clf()
  x_middle = numpy.zeros(len(x_foreground))
  bin_size = x_foreground[1] - x_foreground[0]
  for i in range(len(x_foreground)):
	x_middle[i] = x_foreground[i] + 0.5*bin_size 
  
  statistic_foreground = y_foreground[::-1].cumsum()[::-1]
  ylim(ymin=-1)
  l1 = semilogy(x_middle, statistic_foreground, marker='o', linestyle='None', color='g', label=prefix)
  grid(True)
  xlabel(label_x)
  ylabel('number of events')
  title("cumulative histogram " + ifo.replace("_", ""))
  legend()
  savefig(ifo.replace("_", "") + "_" + prefix+'_statistic')
  figure()

def inj_vs_slides_hist(likelihood_foreground, likelihood_background, bins, ifo="All", prefix='likelihood'):
  """ 
  Plots normilzed histograms of statistic for injections and time slides.
  @param likelihood_foreground: an array that contains the statistic (e.g. likelihood) calculated for each event of the foreground (injections).
  @param likelihood_foreground: an array that contains the statistic (e.g. likelihood) calculated for each event of the background (time slides).
  @param bins: either integer that sets the number of bins in the histogram or a numpy array containing bins.
  @param prefix: a string that sets the begining of the figure name and a label for x axes.
  """


  likelihood_foreground_cleared = numpy.compress(numpy.greater(likelihood_foreground, -1.0), likelihood_foreground)
  likelihood_background_cleared = numpy.compress(numpy.greater(likelihood_background, -1.0), likelihood_background)
  max_foreground = max(likelihood_foreground_cleared)
  max_background = max(likelihood_background_cleared)
  min_foreground = min(likelihood_foreground_cleared)
  min_background = min(likelihood_background_cleared)
  if max_foreground > max_background:
	max_global = max_foreground
  else:
	max_global = max_background
  if min_foreground < min_background:
	min_global = min_foreground
  else:
	min_global = min_background
	
  range_hist = max_global - min_global
  step = range_hist/bins 
  bin_array=numpy.arange(min_global, max_global, step)

  (y_foreground, x_foreground) = normalized_hist(likelihood_foreground, bin_array)
  (y_background, x_background) = normalized_hist(likelihood_background, bin_array)
  bar(x_foreground + step/2.0, y_foreground, width=step/2.0, color='r')
  hold(True)
  bar(x_background, y_background, width=step/2.0 , color='k')
  xlim(min_global, max_global)
  xlabel(prefix)
  title(prefix + " injections vs, time slides histogram " + ifo.replace("_", ""))
  savefig(ifo.replace("_", "") + "_" + prefix+'_inj_vs_slides_hist')
  figure()


def paraxis_add_range(para_coord, axes, min, max):
   para_axes = para_coord.GetVarList().FindObject(axes)
   para_axes.AddRange(TParallelCoordRange(para_axes, min, max))
   return para_coord




def parallel_axis_plot_double(coincTriggers, coincType, data_type, zerolag=None, show_epsilon_ball=False, zerolag_tag=''):
  """ 
  Generates files to be used under ROOT to make multi-dimensional plots with
  parallel axis
  """
  gROOT.SetBatch(1)
  #gStyle.SetPalette(1)
  #Rcolors = {'G1':kYellow,'H1':kRed,'H2':kBlue,'L1':kGreen,'V1':kViolet}

  coincs = coincTriggers.coinctype(coincType)
  coinc_name = ''
  for ifo in coincType:
	coinc_name += ifo
  if zerolag and not show_epsilon_ball:
    canvas_name = coinc_name + "_" + data_type + "_with_zerolag_" + zerolag_tag 
  elif zerolag and show_epsilon_ball:
    canvas_name = coinc_name + "_" + data_type + "_with_epsilon_ball_" + zerolag_tag
  else:
    canvas_name = coinc_name + "_" + data_type
  var_snr_eff1 = coincType[0] + "_SNR_eff"
  var_snr_eff2 = coincType[1] + "_SNR_eff"
  var_ethinca = coinc_name + "_ethinca"
  canvas_variables=var_snr_eff1 + ":" + var_snr_eff2 + ":" + "D_eff_rms:D_eff_theta:Mchirp_rms:Mchirp_theta:" + var_ethinca
  canParC = TCanvas(canvas_name, canvas_name + ': SNR_eff, D_eff_rms, D_eff_theta, Mchrip_rms, Mchirp_theta, e-thinca', 1024, 700)
  ntup = TNtuple(canvas_name, canvas_name + ': SNR_eff, D_eff_rms, D_eff_theta, Mchrip_rms, Mchirp_theta, e-thinca',\
  				canvas_variables)

  for coinc in coincs:
	c_ifo1 = getattr(coinc, coincType[0])
	c_ifo2 = getattr(coinc, coincType[1])
	c_eff_snr_ifo1 = c_ifo1.get_effective_snr()
	c_eff_snr_ifo2 = c_ifo2.get_effective_snr()
	c_D_eff_rms,c_eff_dist_theta = CoincInspiralUtils.convert_to_polar_coord(c_ifo1.eff_distance, c_ifo2.eff_distance)
	c_mchirp_rms, c_mchirp_theta = CoincInspiralUtils.convert_to_polar_coord(c_ifo1.mchirp, c_ifo2.mchirp)
	c_ethinca = CoincInspiralUtils.simpleEThinca(c_ifo1, c_ifo2)  
	ntup.Fill(c_eff_snr_ifo1, c_eff_snr_ifo2, c_D_eff_rms, c_eff_dist_theta, c_mchirp_rms, c_mchirp_theta, c_ethinca)
 			  
  if zerolag:
	ifos,ifolist = zerolag[0].get_ifos()
	if ifolist == coincType:
	  zerolag_ifo1 = getattr(zerolag[0], ifolist[0])
	  zerolag_ifo2 = getattr(zerolag[0], ifolist[1])
	  zerolag_eff_snr_ifo1 = zerolag_ifo1.get_effective_snr()
	  zerolag_eff_snr_ifo2 = zerolag_ifo2.get_effective_snr()
	  zerolag_D_eff_rms,zerolag_eff_dist_theta = CoincInspiralUtils.convert_to_polar_coord(zerolag_ifo1.eff_distance, zerolag_ifo2.eff_distance)
	  zerolag_mchirp_rms, zerolag_mchirp_theta = CoincInspiralUtils.convert_to_polar_coord(zerolag_ifo1.mchirp, zerolag_ifo2.mchirp)
	  zerolag_ethinca = CoincInspiralUtils.simpleEThinca(zerolag_ifo1, zerolag_ifo2)
	  ntup.Fill(zerolag_eff_snr_ifo1, zerolag_eff_snr_ifo2, zerolag_D_eff_rms, zerolag_eff_dist_theta, zerolag_mchirp_rms, zerolag_mchirp_theta, zerolag_ethinca)
	else:
	  print >> sys.stdout, "Warning: the zerolag candidate is of different type then injections/time slides triggers"
	  
  ntup.Draw(canvas_variables, '', 'para')
  
  if zerolag:
	if show_epsilon_ball:
	  epsilon = 0.2
          mchirp_epsilon = 0.5
	  ethinca_scale = 10.0
	  eff_dist_theta_scale = 2.0*cmath.pi/float(180)
	  eff_dist_phi_scale =  10.0*cmath.pi/float(180)
	  mchirp_theta_scale = 2.0*cmath.pi/float(180)
	  mchirp_phi_scale = 180.0*cmath.pi/float(180)
	else:
	  epsilon = 0.01
          mchirp_epsilon = 0.01
	  ethinca_scale = 0.01
	  eff_dist_theta_scale = 0.1*cmath.pi/float(180)
	  eff_dist_phi_scale =  0.1*cmath.pi/float(180)
	  mchirp_theta_scale = 0.1*cmath.pi/float(180)
	  mchirp_phi_scale = 0.1*cmath.pi/float(180)
	  
	para = canParC.GetListOfPrimitives().FindObject('ParaCoord')
        para.AddSelection("zerolag")
        para.GetCurrentSelection().SetLineColor(kBlue)

	para = paraxis_add_range(para, var_snr_eff1, zerolag_eff_snr_ifo1*(1.0 - epsilon), zerolag_eff_snr_ifo1*(1.0 + epsilon))
	para = paraxis_add_range(para, var_snr_eff2, zerolag_eff_snr_ifo2*(1.0 - epsilon), zerolag_eff_snr_ifo2*(1.0 + epsilon))
	para = paraxis_add_range(para, "D_eff_rms", zerolag_D_eff_rms*(1.0 - epsilon), zerolag_D_eff_rms*(1.0 + epsilon))
	para = paraxis_add_range(para, "D_eff_theta", (zerolag_eff_dist_theta - eff_dist_theta_scale) , (zerolag_eff_dist_theta + eff_dist_theta_scale))
	para = paraxis_add_range(para, "Mchirp_rms", zerolag_mchirp_rms*(1.0 - mchirp_epsilon), zerolag_mchirp_rms*(1.0 + mchirp_epsilon))
	para = paraxis_add_range(para, "Mchirp_theta", (zerolag_mchirp_theta - mchirp_theta_scale) , (zerolag_mchirp_theta + mchirp_theta_scale))
	#para = paraxis_add_range(para, var_ethinca, (zerolag_ethinca - ethinca_scale) , (zerolag_ethinca + ethinca_scale)) 

  canParC.SaveAs(canvas_name + '_parallel_axis.png')
  canParC.SaveAs(canvas_name + "_parallel_axis.C")
  canParC.Close()
  #para = canParC.GetListOfPrimitives().FindObject('ParaCoord')
  #snr1axis = para.GetVarList().FindObject('snr1')
  #snr2axis = para.GetVarList().FindObject('snr2')


def parallel_axis_plot_triple(coincTriggers, coincType, data_type, zerolag=None, show_epsilon_ball=False, zerolag_tag=''):
  """
  Generates files to be used under ROOT to make multi-dimensional plots with
  parallel axis
  """

  gROOT.SetBatch(1)
  coincs = coincTriggers.coinctype(coincType)

  coinc_name = ''
  for ifo in coincType:
        coinc_name += ifo
  if zerolag and not show_epsilon_ball:
    canvas_name = coinc_name + "_" + data_type + "_with_zerolag_" + zerolag_tag 
  elif zerolag and show_epsilon_ball:
    canvas_name = coinc_name + "_" + data_type + "_with_epsilon_ball_" + zerolag_tag
  else:
    canvas_name = coinc_name + "_" + data_type
  var_snr_eff1 = coincType[0] + "_SNR_eff"
  var_snr_eff2 = coincType[1] + "_SNR_eff"
  var_snr_eff3 = coincType[2] + "_SNR_eff"
  var_ethinca12 = coincType[0] + coincType[1] + "_ethinca"
  var_ethinca13 = coincType[0] + coincType[2] + "_ethinca"
  var_ethinca23 = coincType[1] + coincType[2] + "_ethinca"
  canvas_variables = var_snr_eff1 + ":" + var_snr_eff2 + ":" + var_snr_eff3 + ":" + "D_eff_rms:D_eff_theta:D_eff_phi:Mchirp_rms:Mchirp_theta:Mchirp_phi:" + var_ethinca12 + ":" + var_ethinca13 + ":" + var_ethinca23
  canParC = TCanvas(canvas_name, canvas_name + ': snr, chisq, eff_dist, M_chrip, e-thinca', 1024, 700)
  ntup = TNtuple(canvas_name, canvas_name + ': snr, chisq, eff_dist, M_chrip, e-thinca',\
                 canvas_variables)
  for coinc in coincs:
	c_ifo1 = getattr(coinc, coincType[0])
	c_ifo2 = getattr(coinc, coincType[1])
	c_ifo3 = getattr(coinc, coincType[2])
	c_eff_snr_ifo1 = c_ifo1.get_effective_snr()
	c_eff_snr_ifo2 = c_ifo2.get_effective_snr()
	c_eff_snr_ifo3 = c_ifo3.get_effective_snr()
	c_D_eff_rms, c_eff_dist_theta, c_eff_dist_phi = CoincInspiralUtils.convert_to_spherical_coord(c_ifo1.eff_distance, c_ifo2.eff_distance, c_ifo3.eff_distance)
	c_mchirp_rms, c_mchirp_theta, c_mchirp_phi = CoincInspiralUtils.convert_to_spherical_coord(c_ifo1.mchirp, c_ifo2.mchirp, c_ifo3.mchirp)
	c_ethinca_12 = CoincInspiralUtils.simpleEThinca(c_ifo1, c_ifo2)
	c_ethinca_13 = CoincInspiralUtils.simpleEThinca(c_ifo1, c_ifo3)
	c_ethinca_23 = CoincInspiralUtils.simpleEThinca(c_ifo2, c_ifo3)
	ntup.Fill(c_eff_snr_ifo1, c_eff_snr_ifo2, c_eff_snr_ifo3, c_D_eff_rms, c_eff_dist_theta, c_eff_dist_phi, c_mchirp_rms, c_mchirp_theta, c_mchirp_phi, c_ethinca_12, c_ethinca_13, c_ethinca_23)
		
  if zerolag:
	ifos,ifolist = zerolag[0].get_ifos()
	if ifolist == coincType:
	  zerolag_ifo1 = getattr(zerolag[0], coincType[0])
	  zerolag_ifo2 = getattr(zerolag[0], coincType[1])
	  zerolag_ifo3 = getattr(zerolag[0], coincType[2])
	  zerolag_eff_snr_ifo1 = zerolag_ifo1.get_effective_snr()
	  zerolag_eff_snr_ifo2 = zerolag_ifo2.get_effective_snr()
	  zerolag_eff_snr_ifo3 = zerolag_ifo3.get_effective_snr()
	  zerolag_D_eff_rms, zerolag_eff_dist_theta, zerolag_eff_dist_phi = CoincInspiralUtils.convert_to_spherical_coord(zerolag_ifo1.eff_distance, zerolag_ifo2.eff_distance, zerolag_ifo3.eff_distance)
	  zerolag_mchirp_rms, zerolag_mchirp_theta, zerolag_mchirp_phi = CoincInspiralUtils.convert_to_spherical_coord(zerolag_ifo1.mchirp, zerolag_ifo2.mchirp, zerolag_ifo3.mchirp)
	  zerolag_ethinca_12 = CoincInspiralUtils.simpleEThinca(zerolag_ifo1, zerolag_ifo2)
	  zerolag_ethinca_13 = CoincInspiralUtils.simpleEThinca(zerolag_ifo1, zerolag_ifo3)
	  zerolag_ethinca_23 = CoincInspiralUtils.simpleEThinca(zerolag_ifo2, zerolag_ifo3)
	  ntup.Fill(zerolag_eff_snr_ifo1, zerolag_eff_snr_ifo2, zerolag_eff_snr_ifo3, zerolag_D_eff_rms, zerolag_eff_dist_theta, zerolag_eff_dist_phi, zerolag_mchirp_rms, zerolag_mchirp_theta, zerolag_mchirp_phi, zerolag_ethinca_12, zerolag_ethinca_13, zerolag_ethinca_23)
	else:
	  print >> sys.stdout, "Warning: the zerolag candidate is of different type then injections/time slides triggers"

  ntup.Draw(canvas_variables, '', 'para')
  
  if zerolag:
	if show_epsilon_ball:
	  epsilon = 0.2
          mchirp_epsilon = 0.5
	  ethinca_scale = 10.0
	  eff_dist_theta_scale = 2.0*cmath.pi/float(180)
	  eff_dist_phi_scale =  10.0*cmath.pi/float(180)
	  mchirp_theta_scale = 2.0*cmath.pi/float(180)
	  mchirp_phi_scale = 180.0*cmath.pi/float(180)
	else:
	  epsilon = 0.01
          mchirp_epsilon = 0.5
	  ethinca_scale = 0.01
	  eff_dist_theta_scale = 0.1*cmath.pi/float(180)
	  eff_dist_phi_scale =  0.1*cmath.pi/float(180)
	  mchirp_theta_scale = 0.1*cmath.pi/float(180)
	  mchirp_phi_scale = 0.1*cmath.pi/float(180)
	  
	para = canParC.GetListOfPrimitives().FindObject('ParaCoord')
	para.AddSelection("zerolag")
	para.GetCurrentSelection().SetLineColor(kBlue)

	para = paraxis_add_range(para, var_eff_snr1, zerolag_eff_snr_ifo1*(1.0 - epsilon), zerolag_eff_snr_ifo1*(1.0 + epsilon))
	para = paraxis_add_range(para, var_eff_snr2, zerolag_eff_snr_ifo2*(1.0 - epsilon), zerolag_eff_snr_ifo2*(1.0 + epsilon))
	para = paraxis_add_range(para, var_eff_snr3, zerolag_eff_snr_ifo3*(1.0 - epsilon), zerolag_eff_snr_ifo3*(1.0 + epsilon))
	para = paraxis_add_range(para, "D_eff_rms", zerolag_D_eff_rms*(1.0 - epsilon), zerolag_D_eff_rms*(1.0 + epsilon))
	para = paraxis_add_range(para, "D_eff_theta", (zerolag_eff_dist_theta - eff_dist_theta_scale) , (zerolag_eff_dist_theta + eff_dist_theta_scale))
	para = paraxis_add_range(para, "D_eff_phi", (zerolag_eff_dist_phi - eff_dist_phi_scale) , (zerolag_eff_dist_phi + eff_dist_phi_scale))
	para = paraxis_add_range(para, "Mchirp_rms", zerolag_mchirp_rms*(1.0 - mchirp_epsilon), zerolag_mchirp_rms*(1.0 + mchirp_epsilon))
	para = paraxis_add_range(para, "Mchirp_theta", (zerolag_mchirp_theta - mchirp_theta_scale) , (zerolag_mchirp_theta + mchirp_theta_scale))
	para = paraxis_add_range(para, "Mchirp_phi", (zerolag_mchirp_phi - mchirp_phi_scale) , (zerolag_mchirp_phi + mchirp_phi_scale))
	#para = paraxis_add_range(para, var_ethinca12, (zerolag_ethinca_12 - ethinca_scale) , (zerolag_ethinca_12 + ethinca_scale))
	#para = paraxis_add_range(para, var_ethinca13, (zerolag_ethinca_13 - ethinca_scale) , (zerolag_ethinca_13 + ethinca_scale))
	#para = paraxis_add_range(para, var_ethinca23, (zerolag_ethinca_23 - ethinca_scale) , (zerolag_ethinca_23 + ethinca_scale)) 


  canParC.SaveAs(canvas_name + '_parallel_axis.png')
  canParC.SaveAs(canvas_name + '_parallel_axis.C')
  canParC.Close()



################################################################################
# Main program
################################################################################
usage= """
usage: %prog [options]

Reads in COIRE(THINCA) files with coincident events and files containing InspiralLikelihood Tables corresponding to these events, makes various plots and histograms.
"""
###############################################################################
# Options to read in Input
###############################################################################
parser = OptionParser( usage=usage, version="%prog CVS $Id$ " )

parser.add_option("-L","--input-data-type",action="store", type="string",\
    default=None, help ="Must be sngl-inspiral-table-only or inspiral-likelihood-table-only or all-data")

parser.add_option("","--zerolag-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB zero lag  thinca files to read" )
	
parser.add_option("","--slides-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB time slides thinca files to read" )
	
parser.add_option("","--inj-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB thinca files with injections to read" )
	
parser.add_option("","--likelihood-zerolag-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB zero lag  thinca files to read" )
	
parser.add_option("","--likelihood-slides-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB time slides thinca files to read" )
	
parser.add_option("","--likelihood-inj-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB thinca files with injections to read" )
	
parser.add_option("","--input-cache-file",action="store",type="string",\
    default=None, metavar="ZEROLAGCACHEFILE",help="name of the cache file including the path" )
	
parser.add_option("","--zerolag-pattern",\
    default="", metavar="ZEROLAGPATTERN", help="zero lag files pattern the cache file, specified by --input-cache-file option, will be seived with.")
	
parser.add_option("","--slides-pattern",\
    default="", metavar="SLIDESPATTERN", help="the time slides files pattern the cache file, specified by --input-cache-file option, will be seived with.")
	
parser.add_option("","--inj-pattern",\
    default="", metavar="INJSPATTERN", help="the injections files pattern the cache file, specified by --input-cache-file option, will be seived with.")
			
parser.add_option("","--likelihood-cache-file",action="store",type="string",\
    default=None, metavar="INJECTIONCACHEFILE",help="name of the injection cache files including the path given as a string with comma delimeters" )
	
parser.add_option("","--likelihood-zerolag-pattern",\
    default="", metavar="ZEROLAGPATTERN", help="zero lag files pattern the cache file, specified by --likelihood-cache-file option, will be seived with.")
	
parser.add_option("","--likelihood-slides-pattern",\
    default="", metavar="SLIDESPATTERN", help="the time slides files pattern the cache file, specified by --likelihood-cache-file option, will be seived with.")
	
parser.add_option("","--likelihood-inj-pattern",\
    default="", metavar="INJSPATTERN", help="the injections files pattern the cache file, specified by --likelihood-cache-file option, will be seived with.")
			
parser.add_option("","--paraxis-zerolag-glob",action="store",type="string",\
    default=None, metavar=" GLOB",help="GLOB zero lag  thinca files to read. The file should contain only one coincident trigger that will be overlayed with the pupulation of injections or time slides" )
###################################################################################
# Options for output
###################################################################################
parser.add_option("-u","--user-tag",action="store",type="string",\
	default="", metavar=" USERTAG",\
	help="The user tag used in the name of the name of the output file " )
	
parser.add_option("","--ifo-tag",action="store",type="string",\
	default="", metavar=" IFOTAG",\
	help="The ifo tag used in the name of the output file (e.g. SECOND_H1H2L1)")      
	
parser.add_option("","--gps-start-time",action="store", type="int", default=0, metavar="GPSSTARTTIME",\
	help="gps start time used in the name of the output file")
	
parser.add_option("","--gps-end-time",action="store", type= "int", default=0, metavar="GPSENDTIME",\
	help="gps end time used in the name of the output file")
	
parser.add_option("","--ifo-times",action="store",type="string",\
    default="", metavar="IFOS",\
	help="sets ifo times for which plots will be made (e.g. H1H2L1)" )
	
parser.add_option("-v","--verbose",action="store_true",\
	default=False,help="print information" )
	
parser.add_option("-o","--show",action="store_true",default=False,\
    help="Display the plots on the screen" )

parser.add_option("","--dump",action="store_true",default=False,\
    help="dumps data t into Likelihood_intermediate file" )


###################################################################################
# Options for plots and histogram
###################################################################################
# Options to select ifo types.

parser.add_option("-B", "--h1-triggers",action="store_true", default=False,\
    help="input files contain triggers from H1")

parser.add_option("-C", "--h2-triggers",action="store_true", default=False,\
    help="input files contain triggers from H2")

parser.add_option("-D", "--l1-triggers",action="store_true", default=False,\
    help="input files contain triggers from L1")

parser.add_option("-E", "--g1-triggers",action="store_true", default=False,\
    help="input files contain triggers from G1")

parser.add_option("", "--v1-triggers",action="store_true", default=False,\
    help="input files contain triggers from V1")

# Options to select paramters for calculation of p(c|0), p(c|h) and likelihood ratio. 

parser.add_option("-S","--statistic",action="store",default='snr',\
    type="string",\
    help="choice of statistic used in making plots, valid arguments are: snr (DEFAULT), snr_over_chi, s3_snr_chi_stat, effective_snr, bitten_l, bitten_lsq")

parser.add_option("-N","--num-slides", action="store",type="int",\
    default = 0, metavar="num_slides", help="number of time slides performed, must match the corresponding parameter from the .ini file" )


# Plotting options 

# plots that use data from Single Inspiral Tables only
parser.add_option("","--plot-combined-eff-snr",action="store_true",\
    default=False, help ="Shows plots of combined effective snr")

parser.add_option("","--plot-mchirp-diff",action="store_true",\
    default=False, help ="Shows plots of combined fractional difference in mchirp")
	
parser.add_option("","--plot-average-ethinca",action="store_true",\
    default=False, help ="Shows plots of average ethinca param")
	
parser.add_option("","--plot-eff-dist-diff",action="store_true",\
    default=False, help ="Shows plots of combined fractional difference in effective distance")

parser.add_option("-P","--plot-simethinca",action="store_true",\
    default=False, help ="Shows the plot of simple ethinca param for different coincs")

parser.add_option("-p","--plot-distcut",action="store_true",\
    default=False, help ="Shows the plot of effective distance difference based on distance cut")

parser.add_option("-M","--plot-mchirp",action="store_true",\
    default=False, help ="Shows the plot of chirp mass difference based on distance cut")

parser.add_option("-m","--plot-chisq",action="store_true",\
    default=False, help ="Shows the plot of chi squared  difference based on distance cut")
parser.add_option("","--plot-snr",action="store_true",\
    default=False, help ="Shows the plot of snr  difference based on distance cut")

parser.add_option("","--plot-snr-vs-chisq",action="store_true",\
    default=False, help ="Shows the plot of snr vs chisq for timeslides and injections")

parser.add_option("","--plot-snr-vs-mchirp",action="store_true",\
    default=False, help ="Shows the plot of snr vs mchirp for timeslides and injections")

parser.add_option("","--add-zerolag",action="store_true",\
    default=False, help ="add zerolag triggers to scatter plots")

parser.add_option("","--parallel-axis-plots",action="store_true",\
    default=False, help ="Generates input files for ROOT package that makes plots with parallel axis")

parser.add_option("","--show-epsilon-ball",action="store_true",\
    default=False, help ="show epsilon ball on the parallel axis plot")
	
# plots that use data from Inspiral Likelihood Table only
parser.add_option("","--falsealarm-vs-detectprob-zerolag",action="store_true",\
    default=False, help ="Shows the scatter plot Detection probability vs. False alarm probability of zero lag candidates only ")
	
parser.add_option("","--falsealarm-vs-detectprob-all",action="store_true",\
    default=False, help ="Shows the scatter plot Detection probability vs. False alarm probability of zero lag, time slides and injections.")

parser.add_option("","--falsealarm-vs-likelihood-zerolag",action="store_true",\
    default=False, help ="Shows the scatter plot Likelihood vs. False alarm probability of zero lag candidates only ")
	
parser.add_option("","--falsealarm-vs-likelihood-all",action="store_true",\
    default=False, help ="Shows the scatter plot Likelihood vs. False alarm probability of zero lag, time slides and injections.")


parser.add_option("-Y","--inj-vs-slides-hist",action="store_true",\
    default=False, help ="Shows the injections vs. time slides likelihood histogram")

parser.add_option("-b","--slide-bins",action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the histogram of background")

parser.add_option("-j","--injection-bins",action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the histogram of injections")

parser.add_option("-x","--bins-cumhist", action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the combined statistic histogram of foreground vs. background")

parser.add_option("-y","--bins-inj-vs-slides", action="store",type="int",\
    default=10, metavar="BINS", help="Number of bins in the injections vs. time slides likelihood histogram")
	
parser.add_option("","--cum-hist-zerolag-only",action="store_true",\
    default=False, help ="Make cumulative likelihood histogram of zero lag triggers only")
	
parser.add_option("","--cum-hist-zerolag-vs-timeslides",action="store_true",\
    default=False, help ="Make cumulative likelihood histogram of zero lag and time slides triggers ")
	
parser.add_option("","--cum-hist-injections-vs-timeslides",action="store_true",\
    default=False, help ="Make cumulative likelihood histogram of injections and time slides triggers ")

parser.add_option("","--slides-norm-factor",action="store",type="float",\
    default=1.0, metavar="SLIDESNORMFACTOR", help="Normalization factor  for time slides = duration (time slides used) / duration(full time slides)")


# plots that use data from both Single Inspiral and Inspiral Likelihood tables
parser.add_option("-t","--scatter-plot",action="store_true",\
    default=False, help ="Shows the scatter plot of new statitsic (likelihood) vs old statistic (effective snr) of zero lag candidates only ")

parser.add_option("-a","--scatter-all-plot",action="store_true",\
    default=False, help ="Shows the scatter plot of new statitsic (likelihood) vs old statistic (effective snr) of all coincidences")

parser.add_option("","--plot-only-ifo",action="store",type="string",\
    default="", metavar="", help="makes plots only with events whose IFO matches the one specified by the option. (e.g. H1_H2_L1). Note that different detector are separated by the underscore. It is required for unambiguous identification")

parser.add_option("","--print-loudest-candidates",action="store",type="int",\
    default=0, help="set the number of the loudest candidates to be printed into a separate file")
	


(opts,args) = parser.parse_args()

######################################################################
# Construct IFO pairs


ifo_list = [ifo for ifo in ("G1", "H1", "H2", "L1", "V1") \
            if getattr(opts, "%s_triggers" % ifo.lower())]

ifo_combos = CoincInspiralUtils.get_ifo_combos(ifo_list)



###############################################################################################

if not opts.show:
  import matplotlib
  matplotlib.use('Agg')
from pylab import*
#from pylal import viz
####################################################################

statistic = CoincInspiralUtils.coincStatistic(opts.statistic) 

#################################################################################################
#Experimental area

#counter=0
#file=open('slidestriggers', 'w')
#for trigger in slidesCoincTriggers:
#  ifo, ifolist = trigger.get_ifos()
#  file.write(str(ifo) + '\n')
#  counter+=1
#print str(counter)
#file.close()

#for candidate in injectionTestCoincTriggers:
  #  ethinca=XLALCalculateEThincaParameter(candidate.H1, candidate.L1)
  #c_ifo, ifolist = candidate.get_ifos()
  #if c_ifo=='H1H2L1':
    #print candidate.event_id
    #simethinca = CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.L1)
    #ethinca=XLALCalculateEThincaParameter(candidate.H1, candidate.L1)
    #print 'H1L1', ethinca, simethinca
    #simethinca = CoincInspiralUtils.simpleEThinca(candidate.H2, candidate.L1)
    #ethinca=XLALCalculateEThincaParameter(candidate.H2, candidate.L1)
    #print 'H2L1', ethinca, simethinca
    #simethinca = CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.H2)
    #ethinca=XLALCalculateEThincaParameter(candidate.H1, candidate.H2)
    #print 'H1H2', ethinca, simethinca
 
  #  if simethinca > 100.0:
  #    CoincInspiralUtils.simpleEThinca(candidate.H1, candidate.L1)
  #    print simethinca

  #  d_tmp1=1.0 - simethinca**2
  #  d_tmp2=1.0 - simethinca**2/4.0
  #  d_tmp3=simethinca**2/4.0
  #print simethinca
###############################################################################################




############ ########### ############# ############# ############### ###########	
# plots that make use of single inspiral tables only
############ ########### ############# ############# ############### ###########	

if opts.input_data_type == 'sngl-inspiral-table-only':
  if not (opts.input_cache_file or (opts.slides_glob and opts.inj_glob) or (opts.add_zerolag and opts.zerolag_glob and opts.slides_glob and opts.inj_glob)):
    print >>sys.stderr, "Some of the options specifying the input files containing in single inspiral tables are missing. Either (--input-cache-file option) or (--slides-glob and --inj-glob options) or(all three --zerolag-glob, --slides-glob and --inj-glob options, in case -add-zerolag is also given) must be specified."
    sys.exit(1)
	
  # contsructing lists of data files containing zero lag, time slides and injections triggers respectively
  ########################################################################################################	
  if opts.input_cache_file:
	zerolagfiles = []
	slidesfiles = []
	injfiles = []
	SnglInspiralCache = lal.Cache.fromfile(open(opts.input_cache_file))
	if opts.add_zerolag:
	  zerolagfiles = SnglInspiralCache.sieve(description = opts.zerolag_pattern).checkfilesexist()[0].pfnlist()
	slidesfiles = SnglInspiralCache.sieve(description = opts.slides_pattern).checkfilesexist()[0].pfnlist()
	injfiles = SnglInspiralCache.sieve(description = opts.inj_pattern).checkfilesexist()[0].pfnlist()
  else:
	zerolagfiles = []
	slidesfiles = []
	injfiles = []
	if opts.add_zerolag:
	  zerolagfiles = glob.glob(opts.zerolag_glob)
	slidesfiles = glob.glob(opts.slides_glob)
	injfiles = glob.glob(opts.inj_glob)
	
  # read in single inspiral tables from the data files
  ####################################################
  # read in zero lag coinc triggers
  if opts.add_zerolag:
    zerolagTriggers = None
    zerolagTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(zerolagfiles,mangle_event_id=False)
    # construct the zero lag coincs 
    zerolagCoincTriggers = CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic)
  # read in time slides triggers 
  slidesTriggers = None
  slidesTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(slidesfiles,mangle_event_id= False)
  # construct the time slides coincs
  slidesCoincTriggers = CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic)
  # read in injections sngl and sim inspirals
  injectionTriggers = None
  injectionTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(injfiles,mangle_event_id=False)
  #simTriggers = None
  #simTriggers = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)   
  #construct injection coincs and add sim inspirals
  injectionCoincTriggers = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic)
  #injectionCoincTriggers.add_sim_inspirals(simTriggers)

  # generation of plots
  #####################
  # plots of combined effective snr
  if opts.plot_combined_eff_snr:
	plot_hist_param(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'combined_eff_snr', opts.slide_bins, opts.injection_bins)
  # plots of average ethinca
  if opts.plot_average_ethinca:
	plot_hist_param(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'average_ethinca', opts.slide_bins, opts.injection_bins)
	plot_param_vs_stat(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'average_ethinca')
  
  # plots of combined fractional difference in mchirp
  if opts.plot_mchirp_diff:
	plot_hist_param(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'mchirp_diff', opts.slide_bins, opts.injection_bins)
	plot_param_vs_stat(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'mchirp_diff')
	
  # plots of combined fractional difference in mchirp
  if opts.plot_eff_dist_diff:
	plot_hist_param(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'eff_dist_diff', opts.slide_bins, opts.injection_bins)
	plot_param_vs_stat(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'eff_dist_diff')

  # plots of simple e-thinca 
  if opts.plot_simethinca:
    plotroutine(ifo_combos, slidesCoincTriggers, injectionCoincTriggers,'simethinca', opts.slide_bins, opts.injection_bins)
    scatter_plot_param_diff_2D_with_zerolag(ifo_combos, slidesCoincTriggers,injectionCoincTriggers, zerolagCoincTriggers, "simethinca")
	
  # plots of effective distance
  if opts.plot_distcut:
	plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'eff_distance', opts.slide_bins, opts.injection_bins)
	plotparam(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'eff_distance', opts.slide_bins, opts.injection_bins)  
	scatter_plot_param_2D(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'eff_distance')
	if opts.add_zerolag:
	  scatter_plot_param_2D_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'eff_distance')
  
  # plots of chirp mass
  if opts.plot_mchirp:
	plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'mchirp', opts.slide_bins, opts.injection_bins)
	plotparam(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'mchirp', opts.slide_bins, opts.injection_bins)
	scatter_plot_param_2D(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'mchirp')
	if opts.add_zerolag:
	  scatter_plot_param_2D_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'mchirp')

  # plots of chisq 
  if opts.plot_chisq:
	plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'chisq', opts.slide_bins, opts.injection_bins)
	plotparam(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'chisq', opts.slide_bins, opts.injection_bins) 
	scatter_plot_param_2D(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'chisq', logscale=True)
	if opts.add_zerolag:
	  scatter_plot_param_2D_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'chisq', logscale=True)
  # plots of snr
  if opts.plot_snr:
	plotroutine(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'snr', opts.slide_bins, opts.injection_bins)
	plotparam(ifo_combos,slidesCoincTriggers,injectionCoincTriggers,'snr', opts.slide_bins, opts.injection_bins)   
	scatter_plot_param_2D(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'snr', logscale=True)
	if opts.add_zerolag:
	  scatter_plot_param_2D_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'snr', logscale=True) 
  
  # plots of snr vs. chisq
  if opts.plot_snr_vs_chisq:
	scatter_plot_param1_vs_param2(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'snr', 'chisq', logscale=True)
	if opts.add_zerolag:
	  scatter_plot_param1_vs_param2_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'snr', 'chisq', logscale=True) 
  
  # plots of snr vs mchirp
  if opts.plot_snr_vs_mchirp:
	scatter_plot_param1_vs_param2(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, 'mchirp', 'snr', ylogscale=True)
	if opts.add_zerolag:
	  scatter_plot_param1_vs_param2_with_zerolag(ifo_combos, slidesCoincTriggers, injectionCoincTriggers, zerolagCoincTriggers, 'mchirp', 'snr', ylogscale=True)


if opts.parallel_axis_plots:
  from ROOT import gROOT,gStyle,TCanvas,TFile
  from ROOT import TH3F, TNtuple
  from ROOT import TParallelCoord, TParallelCoordVar, TParallelCoordRange
  from ROOT import TLegend
  from ROOT import kRed,kGreen,kBlue,kYellow,kViolet,kOrange

  if opts.paraxis_zerolag_glob:
	zerolagCandidateFile = glob.glob(opts.paraxis_zerolag_glob)
	zerolagCandidateTriggers = None
	zerolagCandidateTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(zerolagCandidateFile,mangle_event_id=False)
	# construct the zero lag coincs
	zerolagCandidate = CoincInspiralUtils.coincInspiralTable(zerolagCandidateTriggers, statistic)
	#parallel_axis_plot_double(injectionCoincTriggers, coincType = ['H1','H2'], data_type='injections', zerolag=zerolagCandidate, show_epsilon_ball=opts.show_epsilon_ball, zerolag_tag="H1H2_loudest_event")
        parallel_axis_plot_double(slidesCoincTriggers, coincType = ['H1','H2'], data_type='time_slides', zerolag=zerolagCandidate, show_epsilon_ball=opts.show_epsilon_ball, zerolag_tag="H1H2_loudest_event")
	#parallel_axis_plot_triple(injectionCoincTriggers, coincType = ['H1','H2', 'L1'], data_type='injections', zerolag=zerolagCandidate, show_epsilon_ball=opts.show_epsilon_ball, zerolag_tag="found_injection")
	#parallel_axis_plot_triple(slidesCoincTriggers, coincType = ['H1','H2', 'L1'], data_type='time_slides', zerolag=zerolagCandidate, show_epsilon_ball=opts.show_epsilon_ball, zerolag_tag="full_s5_version2_eps_0_2")
  else:
	parallel_axis_plot_double(injectionCoincTriggers, coincType = ['H1','L1'], data_type='injections')
	#parallel_axis_plot_double(slidesCoincTriggers, coincType = ['H2','L1'], data_type='time_slides')
	#parallel_axis_plot_triple(injectionCoincTriggers, coincType = ['H1','H2', 'L1'], data_type='injections')
	#parallel_axis_plot_triple(slidesCoincTriggers, coincType = ['H1','H2', 'L1'], data_type='time_slides')
	
############ ########### ############# ############# ############### ###########	
# plots that make use of inspiral likelihood tables only
############ ########### ############# ############# ############### ###########	

if opts.input_data_type == "inspiral-likelihood-table-only":
  if not (opts.likelihood_cache_file or (opts.likelihood_zerolag_glob and opts.likelihood_slides_glob and opts.likelihood_inj_glob)):
	print >>sys.stderr, "Some of the options specifying the input files containing  inspiral likelihood tables are missing. Either --likelihood-cache-file option or all three --likelihood-zerolag-glob, --likelihood-slides-glob and --likelihood-inj-glob must be used."
	sys.exit(1)
	
  # contsructing lists of data files containing zero lag, time slides and injections triggers respectively
  ########################################################################################################	
  if opts.likelihood_cache_file:
	LikelihoodZerolagFiles = []
	LikelihoodSlidesFiles = []
	LikelihoodInjFiles = []
	SnglInspiralCache = lal.Cache.fromfile(open(opts.likelihood_cache_file))
	LikelihoodZerolagFiles = SnglInspiralCache.sieve(description = opts.likelihood_zerolag_pattern).checkfilesexist()[0].pfnlist()
	LikelihoodSlidesFiles = SnglInspiralCache.sieve(description = opts.likelihood_slides_pattern).checkfilesexist()[0].pfnlist()
	LikelihoodInjFiles = SnglInspiralCache.sieve(description = opts.likelihood_inj_pattern).checkfilesexist()[0].pfnlist()
  else:
	LikelihoodZerolagFiles = []
	LikelihoodSlidesFiles = []
	LikelihoodInjFiles = []
	LikelihoodZerolagFiles = glob.glob(opts.likelihood_zerolag_glob)
	LikelihoodSlidesFiles = glob.glob(opts.likelihood_slides_glob)
	LikelihoodInjFiles = glob.glob(opts.likelihood_inj_glob)	
	
  # read in inspiral likelihood tables from the data files
  ########################################################

  if opts.plot_only_ifo:
    coinc_IFO=opts.plot_only_ifo.replace("_", "")
    # read in zero lag coinc triggers
    zerolagLikelihoodTriggers = None
    zerolagLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodZerolagFiles).coinctype(coinc_IFO)
    # read in time slides triggers 
    slidesLikelihoodTriggers = None
    slidesLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodSlidesFiles).coinctype(coinc_IFO
)
    # read in injections sngl and sim inspirals
    injectionLikelihoodTriggers = None
    injectionLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodInjFiles).coinctype(coinc_IFO
)
  else:
    # read in zero lag coinc triggers
    zerolagLikelihoodTriggers = None
    zerolagLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodZerolagFiles)
    # read in time slides triggers 
    slidesLikelihoodTriggers = None
    slidesLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodSlidesFiles)
    # read in injections sngl and sim inspirals
    injectionLikelihoodTriggers = None
    injectionLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodInjFiles)
	
  # generation of plots
  #####################
  
  # scatter plot of false alarm vs. detection probabilities for zero lag triggers 
  if opts.falsealarm_vs_detectprob_zerolag:
    scatter_plot(zerolagLikelihoodTriggers.get_column("false_alarm_prob"), zerolagLikelihoodTriggers.get_column("detect_prob"), y_label="Detection_probability", ifo=opts.plot_only_ifo)
  # scatter plot of false alarm vs. detection probabilities for zero lag, injections and time slides triggers 		
  if opts.falsealarm_vs_detectprob_all:
    triple_scatter_plot(zerolagLikelihoodTriggers.get_column("false_alarm_prob"), zerolagLikelihoodTriggers.get_column("detect_prob"), injectionLikelihoodTriggers.get_column("false_alarm_prob"), injectionLikelihoodTriggers.get_column("detect_prob"), slidesLikelihoodTriggers.get_column("false_alarm_prob"), slidesLikelihoodTriggers.get_column("detect_prob"), y_label="Detection_probability", ifo=opts.plot_only_ifo)
    #triple_scatter_plot(zerolagLikelihoodTriggers.get_column("bg_frac"), zerolagLikelihoodTriggers.get_column("detect_prob"), injectionLikelihoodTriggers.get_column("bg_frac"), injectionLikelihoodTriggers.get_column("detect_prob"), slidesLikelihoodTriggers.get_column("bg_frac"), slidesLikelihoodTriggers.get_column("detect_prob"), y_label="Detection_probability", ifo=opts.plot_only_ifo, prefix="BackgroundFraction")

  # cumulative histograms of zero lag triggers only
  if opts.cum_hist_zerolag_only:	
    plot_likelihood(zerolagLikelihoodTriggers.get_column("likelihood"), opts.bins_cumhist, ifo=opts.plot_only_ifo, prefix='likelihood_zerolag')
    #plot_likelihood(zerolagLikelihoodTriggers.get_column("detect_bg_frac_ratio"), opts.bins_cumhist, ifo=opts.plot_only_ifo, prefix='DBR_zerolag', label_x='DBR')
  
  # histograms of of injections vs. time slides	    
  if opts.inj_vs_slides_hist:
    inj_vs_slides_hist(injectionLikelihoodTriggers.get_column("likelihood"), slidesLikelihoodTriggers.get_column("likelihood"), opts.bins_inj_vs_slides, ifo=opts.plot_only_ifo)
    #inj_vs_slides_hist(injectionLikelihoodTriggers.get_column("detect_bg_frac_ratio"), slidesLikelihoodTriggers.get_column("detect_bg_frac_ratio"), opts.bins_inj_vs_slides,ifo=opts.plot_only_ifo,  prefix='DBR')

  # scatter plot of false alarm vs. likelihood for zero lag triggers 
  if opts.falsealarm_vs_likelihood_zerolag:
    scatter_plot(zerolagLikelihoodTriggers.get_column("false_alarm_prob"), zerolagLikelihoodTriggers.get_column("likelihood"), y_label="Likelihood", ifo=opts.plot_only_ifo)
  
  # scatter plot of false alarm vs. likelihood for zero lag, injections and time slides triggers 		
  if opts.falsealarm_vs_likelihood_all:
    triple_scatter_plot(zerolagLikelihoodTriggers.get_column("false_alarm_prob"), zerolagLikelihoodTriggers.get_column("likelihood"), injectionLikelihoodTriggers.get_column("false_alarm_prob"), injectionLikelihoodTriggers.get_column("likelihood"), slidesLikelihoodTriggers.get_column("false_alarm_prob"), slidesLikelihoodTriggers.get_column("likelihood"), y_label="Likelihood", ifo=opts.plot_only_ifo)
    #triple_scatter_plot(zerolagLikelihoodTriggers.get_column("bg_frac"), zerolagLikelihoodTriggers.get_column("likelihood"), injectionLikelihoodTriggers.get_column("bg_frac"), injectionLikelihoodTriggers.get_column("likelihood"), slidesLikelihoodTriggers.get_column("bg_frac"), slidesLikelihoodTriggers.get_column("likelihood"), y_label="Likelihood", ifo=opts.plot_only_ifo, prefix="BackgroundFraction")



  # cumulative histogram of zero lag triggers vs time sldies triggers
  if opts.cum_hist_zerolag_vs_timeslides:
	(statistic_foreground_zerolag_LKH, x_middle_foreground_zerolag_LKH) = cum_hist(zerolagLikelihoodTriggers.get_column("likelihood"), opts.bins_cumhist)
	(statistic_foreground_zerolag_DBR, x_middle_foreground_zerolag_DBR) = cum_hist(zerolagLikelihoodTriggers.get_column("detect_bg_frac_ratio"), opts.bins_cumhist)
	bins_slide = x_middle_foreground_zerolag_LKH - (x_middle_foreground_zerolag_LKH[1]-x_middle_foreground_zerolag_LKH[0])
	bins_DBR = x_middle_foreground_zerolag_DBR - (x_middle_foreground_zerolag_DBR[1]-x_middle_foreground_zerolag_DBR[0])
	
	average_likelihood = numpy.zeros(opts.bins_cumhist)
	average_sqr_likelihood = numpy.zeros(opts.bins_cumhist)
	average_DBR = numpy.zeros(opts.bins_cumhist)
	average_sqr_DBR = numpy.zeros(opts.bins_cumhist)
	
	range_slides = range(-opts.num_slides, opts.num_slides + 1)
	range_slides.remove(0)
	for slide in range_slides:
	  TriggersInSlide = slidesLikelihoodTriggers.getslide(slide)
	  (cumhist_slide, x_middle_slide_LKH) = cum_hist(TriggersInSlide.get_column("likelihood"), bins_slide)
	  average_likelihood +=cumhist_slide
	  average_sqr_likelihood +=cumhist_slide**2
	  (cumhist_slide, x_middle_slide_DBR) = cum_hist(TriggersInSlide.get_column("detect_bg_frac_ratio"), bins_DBR)
	  average_DBR +=cumhist_slide
	  average_sqr_DBR +=cumhist_slide**2
	
  
	sigma_likelihood = opts.slides_norm_factor*numpy.sqrt((average_sqr_likelihood / (2 * opts.num_slides)) - (average_likelihood/(2 * opts.num_slides))**2)
	expect_likelihood = opts.slides_norm_factor*average_likelihood / (2 * opts.num_slides)

	sigma_DBR = opts.slides_norm_factor*numpy.sqrt((average_sqr_DBR / (2 * opts.num_slides)) - (average_DBR/(2 * opts.num_slides))**2)
	expect_DBR = opts.slides_norm_factor*average_DBR / (2 * opts.num_slides)
	
	postfix = '_zerolag_vs_background'
	plot_cumhist(statistic_foreground_zerolag_LKH, sigma_likelihood, expect_likelihood, x_middle_slide_LKH, postfix, ifo=opts.plot_only_ifo)
	postfix = '_zerolag_vs_background' + '_DBR'
	#plot_cumhist(statistic_foreground_zerolag_DBR, sigma_DBR, expect_DBR, x_middle_slide_DBR, ifo=opts.plot_only_ifo, postfix, label_x='DBR')


  #cumulative histogram of found injections vs time slides triggers	
  if opts.cum_hist_injections_vs_timeslides:
	(statistic_foreground_inj_LKH, x_middle_foreground_inj_LKH) = cum_hist(injectionLikelihoodTriggers.get_column("likelihood"), opts.bins_cumhist)
	(statistic_foreground_inj_DBR, x_middle_foreground_inj_DBR) = cum_hist(injectionLikelihoodTriggers.get_column("detect_bg_frac_ratio"), opts.bins_cumhist)
	bins_slide = x_middle_foreground_inj_LKH - (x_middle_foreground_inj_LKH[1]-x_middle_foreground_inj_LKH[0])
	bins_DBR = x_middle_foreground_inj_DBR - (x_middle_foreground_inj_DBR[1]-x_middle_foreground_inj_DBR[0])
	
	average_likelihood = numpy.zeros(opts.bins_cumhist)
	average_sqr_likelihood = numpy.zeros(opts.bins_cumhist)
	average_DBR = numpy.zeros(opts.bins_cumhist)
	average_sqr_DBR = numpy.zeros(opts.bins_cumhist)
	  

	range_slides = range(-opts.num_slides, opts.num_slides + 1)
	range_slides.remove(0)
	for slide in range_slides:
	  TriggersInSlide = slidesLikelihoodTriggers.getslide(slide)
	  (cumhist_slide, x_middle_slide_LKH) = cum_hist(TriggersInSlide.get_column("likelihood"), bins_slide)
	  average_likelihood +=cumhist_slide
	  average_sqr_likelihood +=cumhist_slide**2
	  (cumhist_slide, x_middle_slide_DBR) = cum_hist(TriggersInSlide.get_column("detect_bg_frac_ratio"), bins_DBR)
	  average_DBR +=cumhist_slide
	  average_sqr_DBR +=cumhist_slide**2
	  
	sigma_likelihood = numpy.sqrt((average_sqr_likelihood / (2 * opts.num_slides)) - (average_likelihood/(2 * opts.num_slides))**2)
	expect_likelihood = average_likelihood / (2 * opts.num_slides)

	sigma_DBR = numpy.sqrt((average_sqr_DBR / (2 * opts.num_slides)) - (average_DBR/(2 * opts.num_slides))**2)
	expect_DBR = average_DBR / (2 * opts.num_slides)
	postfix = '_injections_vs_background' 
	plot_cumhist(statistic_foreground_inj_LKH, sigma_likelihood, expect_likelihood, x_middle_slide_LKH, postfix)
	postfix = '_injections_vs_background' + '_DBR'
	plot_cumhist(statistic_foreground_inj_DBR, sigma_DBR, expect_DBR, x_middle_slide_DBR, postfix, label_x='DBR')
	
  

     

	    
############ ########### ############# ############# ############### ###########	
# plots that make use of both single inspiral and inspiral likelihood tables
############ ########### ############# ############# ############### ###########	
if opts.input_data_type == "all-data":
  if not (opts.input_cache_file or (opts.zerolag_glob and opts.slides_glob and opts.inj_glob)):
	print >>sys.stderr, "Some of the options specifying the input files containing in single inspiral tables are missing. Either --input-cache-file option or all three --zerolag-glob, --slides-glob and --inj-glob must be used."
	sys.exit(1)
	
  # contsructing lists of single inspiral table data files containing zero lag, time slides and injections triggers respectively	
  ##############################################################################################################################
  if opts.input_cache_file:
	zerolagfiles = []
	slidesfiles = []
	injfiles = []
	SnglInspiralCache = lal.Cache.fromfile(open(opts.input_cache_file))
	zerolagfiles = SnglInspiralCache.sieve(description = opts.zerolag_pattern).checkfilesexist()[0].pfnlist()
	slidesfiles = SnglInspiralCache.sieve(description = opts.slides_pattern).checkfilesexist()[0].pfnlist()
	injfiles = SnglInspiralCache.sieve(description = opts.inj_pattern).checkfilesexist()[0].pfnlist()
  else :
	zerolagfiles = []
	slidesfiles = []
	injfiles = []
	zerolagfiles = glob.glob(opts.zerolag_glob)
	slidesfiles = glob.glob(opts.slides_glob)
	injfiles = glob.glob(opts.inj_glob)

  if not (opts.likelihood_cache_file or (opts.likelihood_zerolag_glob and opts.likelihood_slides_glob and opts.likelihood_inj_glob)):
	print >>sys.stderr, "Some of the options specifying the input files containing  inspiral likelihood tables are missing. Either --likelihood-cache-file option or all three --likelihood-zerolag-glob, --likelihood-slides-glob and --likelihood-inj-glob must be used."
	sys.exit(1)
	
  # contsructing lists of inspiral likelihood table data files containing zero lag, time slides and injections triggers respectively
  ##################################################################################################################################	
  if opts.likelihood_cache_file:
	LikelihoodZerolagFiles = []
	LikelihoodSlidesFiles = []
	LikelihoodInjFiles = []
	SnglInspiralCache = lal.Cache.fromfile(open(opts.likelihood_cache_file))
	LikelihoodZerolagFiles = SnglInspiralCache.sieve(description = opts.likelihood_zerolag_pattern).checkfilesexist()[0].pfnlist()
	LikelihoodSlidesFiles = SnglInspiralCache.sieve(description = opts.likelihood_slides_pattern).checkfilesexist()[0].pfnlist()
	LikelihoodInjFiles = SnglInspiralCache.sieve(description = opts.likelihood_inj_pattern).checkfilesexist()[0].pfnlist()
  else:
	LikelihoodZerolagFiles = []
	LikelihoodSlidesFiles = []
	LikelihoodInjFiles = []
	LikelihoodZerolagFiles = glob.glob(opts.likelihood_zerolag_glob)
	LikelihoodSlidesFiles = glob.glob(opts.likelihood_slides_glob)
	LikelihoodInjFiles = glob.glob(opts.likelihood_inj_glob)	
	
	
  # read in single inspiral and inspiral likelihood tables from the data files
  ####################################################
  if opts.plot_only_ifo:
	coinc_ifos_list = opts.plot_only_ifo.split("_")
	coinc_IFO = opts.plot_only_ifo.replace("_", "")
  
  # read in zero lag coinc triggers
  zerolagTriggers = None
  zerolagTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(zerolagfiles, mangle_event_id=False)  
  # construct the zero lag coincs
  if opts.plot_only_ifo:
	zerolagCoincTriggers = CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic).coinctype(coinc_ifos_list)
	zerolagLikelihoodTriggers = None
	zerolagLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodZerolagFiles).coinctype(coinc_IFO)
  else:
    zerolagCoincTriggers = CoincInspiralUtils.coincInspiralTable(zerolagTriggers, statistic)
    zerolagLikelihoodTriggers = None
    zerolagLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodZerolagFiles)
  # check if inspiral likelihood table is compatible with the inspiral coinc table
  if not len(zerolagLikelihoodTriggers) == len(zerolagCoincTriggers):
	print >>sys.stderr, "zero lag: inspiral likelihood table is incompatible with the inspiral coinc table"
	#sys.exit(1)
	
  # read in time slides triggers 
  slidesTriggers = None
  slidesTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(slidesfiles, mangle_event_id=False)
  # construct the time slides coincs
  if opts.plot_only_ifo:
    slidesCoincTriggers = CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic).coinctype(coinc_ifos_list)
    slidesLikelihoodTriggers = None
    slidesLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodSlidesFiles).coinctype(coinc_IFO)  
  else:
    slidesCoincTriggers = CoincInspiralUtils.coincInspiralTable(slidesTriggers, statistic)
    slidesLikelihoodTriggers = None
    slidesLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodSlidesFiles)
   # check if inspiral likelihood table is compatible with the inspiral coinc table
  if not len(slidesLikelihoodTriggers) == len(slidesCoincTriggers):
	print >>sys.stderr, "time slides: inspiral likelihood table is incompatible with the inspiral coinc table"
	sys.exit(1)
  
  # read in injections sngl inspiral
  injectionTriggers = None
  injectionTriggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(injfiles, mangle_event_id=False)
  #simTriggers = None
  #simTriggers = SimInspiralUtils.ReadSimInspiralFromFiles(injfiles)   
  #construct injection coincs
  if opts.plot_only_ifo:
    injectionCoincTriggers = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic).coinctype(coinc_ifos_list)
    injectionLikelihoodTriggers = None
    injectionLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodInjFiles).coinctype(coinc_IFO)  
  else:
    injectionCoincTriggers = CoincInspiralUtils.coincInspiralTable(injectionTriggers, statistic)
    injectionLikelihoodTriggers = None
    injectionLikelihoodTriggers = ReadInspiralLikelihoodFromFiles(LikelihoodInjFiles)
  # check if inspiral likelihood table is compatible with the inspiral coinc table
  if not len(injectionLikelihoodTriggers) == len(injectionCoincTriggers):
	print >>sys.stderr, "injections: inspiral likelihood table is incompatible with the inspiral coinc table"
	#sys.exit(1)
   
  # generation of plots
  #####################
  
  # scatter plots for zero lag only 
  if opts.scatter_plot or opts.print_loudest_candidates:
	stat_dic = {}
	fap_dic = {}
	likelihood_dic = {}
	dbr_dic = {}
	for coinc in zerolagCoincTriggers:
	  stat_dic[coinc.event_id] = coinc.stat
	for coinc in zerolagLikelihoodTriggers:
	  fap_dic[coinc.event_id] = coinc.false_alarm_prob
	  likelihood_dic[coinc.event_id] = coinc.likelihood
	  dbr_dic[coinc.event_id] = coinc.detect_bg_frac_ratio
	  
    # get loudest events
	if opts.print_loudest_candidates:
	  likelihood_sorted_array = numpy.flipud(numpy.sort(numpy.asarray(likelihood_dic.values()), kind="quicksort"))
	  loudest_likelihood_dic = {}
	  while len(loudest_likelihood_dic) < opts.print_loudest_candidates:
		for i in range(len(likelihood_sorted_array)):
		  for id in likelihood_dic.keys():
			if likelihood_dic[id] == likelihood_sorted_array[i]:
			  if len(loudest_likelihood_dic) <= (opts.print_loudest_candidates - 1):
				loudest_likelihood_dic[id] = likelihood_dic[id]
	  # creating new tables for loudest events
	  loudest_sngl_table = lsctables.New(lsctables.SnglInspiralTable)
	  loudest_inspiral_likelihood_table = lsctables.New(InspiralLikelihoodTable)
	  loudest_coinc_table = CoincInspiralUtils.coincInspiralTable()
	  
	  for coinc in zerolagCoincTriggers:
            ifos,ifolist = coinc.get_ifos()
	    if getattr(coinc, ifolist[0]).event_id in loudest_likelihood_dic.keys():
	      loudest_coinc_table.append(coinc)
	  for coinc in zerolagLikelihoodTriggers:
	    if coinc.event_id in loudest_likelihood_dic.keys():
	      loudest_inspiral_likelihood_table.append(coinc)
	  #writing the new tables into a file
	  loudest_file = open("Loudest_events.xml", "w")		  
	  loudest_inspiral_likelihood_table.write(loudest_file)
	  
	  for coinc in loudest_coinc_table:
		ifos,ifolist = coinc.get_ifos()
		for ifo in ifolist:
		  loudest_sngl_table.append(getattr(coinc, ifo))
	  loudest_sngl_table.write(loudest_file)
	  loudest_file.close()
	  
	
	if opts.scatter_plot:
	  array_size = len(zerolagCoincTriggers)  
	  zerolag_stat_array = numpy.zeros(array_size)
	  FalseAlarmProb_array = numpy.zeros(array_size)
	  Likelihood = numpy.zeros(array_size)
	  DetectionBackgroundRatio = numpy.zeros(array_size)
	  i = 0
	  for id in stat_dic.keys():
		zerolag_stat_array[i] = stat_dic[id]
		FalseAlarmProb_array[i] = fap_dic[id]
		Likelihood[i] = likelihood_dic[id]
		DetectionBackgroundRatio[i] = dbr_dic[id]
		i += 1 		        
	  scatter_plot_stat(zerolag_stat_array, FalseAlarmProb_array, old_statistic=opts.statistic, ifo=opts.plot_only_ifo)
	  scatter_plot_stat(zerolag_stat_array, Likelihood, new_statistic = 'likelihood', old_statistic=opts.statistic, ifo=opts.plot_only_ifo)
	  scatter_plot_stat(zerolag_stat_array, DetectionBackgroundRatio, new_statistic = 'DetectionBackgroundRatio', old_statistic=opts.statistic, ifo=opts.plot_only_ifo)




  # scatter plots for zero lag, time slides and injections
  if opts.scatter_all_plot:
  
    # forming array for zero lag
	zerolag_stat_dic={}
	zerolag_fap_dic = {}
	zerolag_likelihood_dic = {}
	zerolag_dbr_dic = {}
	for coinc in zerolagCoincTriggers:
	  zerolag_stat_dic[coinc.event_id] = coinc.stat
	for coinc in zerolagLikelihoodTriggers:
	  zerolag_fap_dic[coinc.event_id] = coinc.false_alarm_prob
	  zerolag_likelihood_dic[coinc.event_id] = coinc.likelihood
	  zerolag_dbr_dic[coinc.event_id] = coinc.detect_bg_frac_ratio
	  
	zerolag_array_size = len(zerolagCoincTriggers)  
	zerolag_stat_array = numpy.zeros(zerolag_array_size)
	p0_zerolag_array = numpy.zeros(zerolag_array_size)
	Likelihood_zerolag = numpy.zeros(zerolag_array_size)
	DetectionBackgroundRatio_zerolag = numpy.zeros(zerolag_array_size)
	i = 0
	for id in zerolag_stat_dic.keys():
	  zerolag_stat_array[i] = zerolag_stat_dic[id]
	  p0_zerolag_array[i] = zerolag_fap_dic[id]
	  Likelihood_zerolag[i] = zerolag_likelihood_dic[id]
	  DetectionBackgroundRatio_zerolag[i] = zerolag_dbr_dic[id]
	  i += 1
	  
	# forming arrays for injections
	injection_stat_dic={}
	injection_fap_dic = {}
	injection_likelihood_dic = {}
	injection_dbr_dic = {}
	for coinc in injectionCoincTriggers:
	  injection_stat_dic[coinc.event_id] = coinc.stat
	for coinc in injectionLikelihoodTriggers:
	  injection_fap_dic[coinc.event_id] = coinc.false_alarm_prob
	  injection_likelihood_dic[coinc.event_id] = coinc.likelihood
	  injection_dbr_dic[coinc.event_id] = coinc.detect_bg_frac_ratio
	  
	injection_array_size = len(injectionCoincTriggers)  
	injection_stat_array = numpy.zeros(injection_array_size)
	p0_injection_array = numpy.zeros(injection_array_size)
	Likelihood_injection = numpy.zeros(injection_array_size)
	DetectionBackgroundRatio_injection = numpy.zeros(injection_array_size)
	i = 0
	for id in injection_stat_dic.keys():
	  injection_stat_array[i] = injection_stat_dic[id]
	  p0_injection_array[i] = injection_fap_dic[id]
	  Likelihood_injection[i] = injection_likelihood_dic[id]
	  DetectionBackgroundRatio_injection[i] = injection_dbr_dic[id]
	  i += 1 
	# forming arrays for time slides
	slides_stat_dic={}
	slides_fap_dic = {}
	slides_likelihood_dic = {}
	slides_dbr_dic = {}	
	for coinc in slidesCoincTriggers:
	  slides_stat_dic[coinc.event_id] = coinc.stat
	for coinc in slidesLikelihoodTriggers:
	  slides_fap_dic[coinc.event_id] = coinc.false_alarm_prob
	  slides_likelihood_dic[coinc.event_id] = coinc.likelihood
	  slides_dbr_dic[coinc.event_id] = coinc.detect_bg_frac_ratio
	  
	slides_array_size = len(slidesCoincTriggers)  
	slides_stat_array = numpy.zeros(slides_array_size)
	p0_slides_array = numpy.zeros(slides_array_size)
	Likelihood_slides = numpy.zeros(slides_array_size)
	DetectionBackgroundRatio_slides = numpy.zeros(slides_array_size)
	i = 0
	for id in slides_stat_dic.keys():
	  slides_stat_array[i] = slides_stat_dic[id]
	  p0_slides_array[i] = slides_fap_dic[id]
	  Likelihood_slides[i] = slides_likelihood_dic[id]
	  DetectionBackgroundRatio_slides[i] = slides_dbr_dic[id]
	  i +=1
	
	triple_scatter_plot_stat(zerolag_stat_array, p0_zerolag_array, injection_stat_array, p0_injection_array, slides_stat_array, p0_slides_array, old_statistic=opts.statistic, ifo=opts.plot_only_ifo)
	triple_scatter_plot_stat(zerolag_stat_array, Likelihood_zerolag, injection_stat_array, Likelihood_injection, slides_stat_array, Likelihood_slides, new_statistic='likelihood', old_statistic=opts.statistic, ifo=opts.plot_only_ifo)
	#triple_scatter_plot_stat(zerolag_stat_array, DetectionBackgroundRatio_zerolag, injection_stat_array, DetectionBackgroundRatio_injection, slides_stat_array, DetectionBackgroundRatio_slides, new_statistic='DetectionBackgroundRatio', old_statistic=opts.statistic, ifo=opts.plot_only_ifo)

if opts.show:
  show()

