#!/usr/bin/python

import sys
import os
import getopt
import re
import exceptions
import glob
from types import *

from pylab import *
from lgen import readMeta
from lgen import viz


##############################################################################
# help message


def usage():
  msg = """\
Usage: plotinspinj [options]

  SUMMARY:  
  
  Generate a set of summary plots from triggers and found injections stored as
  sngl_inspiral and sim_inspiral table in LIGO lightweight format
  respectively.  The plots can be turned on by selecting them.  For plots, the
  AXIS must be specified (this is the Y-axis scale).  If either AXIS = 0 then
  the range is set automatically.  The WIDTH of the histograms must also be
  specified.  If either AXIS = 0 then the range is set automatically.

  OPTIONS:
  
    -h, --help                display this message
    -v, --version             display version information
    -t, --trig-file   TRIGS   xml file with triggers and found injections
    -m, --missed-file MISSED  xml file with missed injections
    -f, --figure-name FNAME   generate png figures with name FNAME-fig.png
    -s, --show                display the figures on the terminal.
    -n, --nbins       NBINS   number of bins for the histogram plots
    -a, --plot-mchirp AXIS    plot the chirp mass accuracy
    -b, --hist-mchirp WIDTH   histogram of the chirp mass accuracy
    -c, --plot-timing AXIS    plot of the timing accuracy
    -d, --hist-timing WIDTH   histogram of the timing accuracy
    -i, --plot-dist   AXIS    plot of the effective distance accuracy
    -j, --hist-dist   WIDTH   histogram of the effective distance accuracy
    -k, --dist-dist           plot of injected vs recovered distance
    -l, --found-missed        plot of eff dist vs time for found/missed inj
    -o, --chirp-dist  AXIS    plot of chirp mass accuracy vs effective dist
    -p, --time-dist   AXIS    plot of timing accuracy vs effective dist
"""
  print >> sys.stderr, msg


# grab command line options
shortop = "ab:cd:f:hij:kln:opst:"
longop = [
  "nbins=",
  "figure-name=",
  "trig-file=",
  "plot-mchirp=",
  "hist-mchirp=",
  "plot-timing=",
  "hist-timing=",
  "plot-dist=",
  "hist-dist=",
  "dist-dist",
  "found-missed",
  "chirp-dist=",
  "time-dist=",
  "help",
  "show",
  "missed-file="]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >>sys.stderr, "Error parsing command line"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

# defaul values
trigFile = []
missedFile = []
plots = []

myFigure = None
showflag = 0
nbins = 10


for o, a in opts:
  if o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-v", "--version"):
    sys.exit(0)
  elif o in ("-t", "--trig-file"):
    trigFile.append(a)
  elif o in ("-m", "--missed-file"):
    missedFile.append(a)
  elif o in ("-a", "--plot-mchirp"):
    plots.append("mchirp")
    chirp_axis = float(a)
  elif o in ("-b", "--hist-mchirp"):
    plots.append("chirp_hist")
    chirp_width = float(a)
  elif o in ("-c", "--plot-timing"):
    plots.append("time")
    time_axis = float(a)
  elif o in ("-d", "--hist-timing"):
    plots.append("time_hist")
    time_width = float(a)
  elif o in ("-i", "--plot-dist"):
    plots.append("dist")
    dist_axis = float(a)
  elif o in ("-j", "--hist-dist"):
    plots.append("dist_hist")
    dist_width = float(a)
  elif o in ("-k", "--dist-dist"):
    plots.append("dist_dist")
  elif o in ("-l", "--found-missed"):
    plots.append("found_missed")
  elif o in ("-o", "--chirp-dist"):
    plots.append("chirp_dist")
    chirp_dist_axis = float(a)
  elif o in ("-p", "--time-dist"):
    plots.append("time_dist")
    time_dist_axis = float(a)
  elif o in ("-f", "--figure-name"):
    myFigure = a
  elif o in ("-n", "--nbins"):
    nbins = int(a)
  elif o in ("-s", "--show"):
    showflag = 1

if not trigFile:
  print >>sys.stderr, "--trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

if "found_missed" in plots:
  if not missedFile:
    print >>sys.stderr, "--missed-file must be specified"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
    sys.exit(1)

# read in the triggers, found and missed injections:
inspTrig   = readMeta.metaDataTable(trigFile, "sngl_inspiral")
inspInj    = readMeta.metaDataTable(trigFile, "sim_inspiral")

if inspTrig.nevents() != inspInj.nevents():
  print >>sys.stderr, "number of triggers and found injections must be equal"
  sys.exit(1)

# extract the interesting columns from injections
inj_chirp = inspInj.mkarray("mchirp")
# for now assume all triggers from same IFO.
ifo = inspTrig.table[1]["ifo"]
if ifo == 'H1'  or  ifo == 'H2':
  inj_time =  inspInj.mkarray("h_end_time") + \
    1e-9 * inspInj.mkarray("h_end_time_ns")
  inj_dist =  inspInj.mkarray("eff_dist_h")
  
elif ifo == ('L1'):
  inj_time =  inspInj.mkarray("l_end_time") + \
    1e-9 * inspInj.mkarray("l_end_time_ns")
  inj_dist =  inspInj.mkarray("eff_dist_l")

# extract interesting columns from triggers
trig_chirp = inspTrig.mkarray("mchirp")
trig_time = inspTrig.mkarray("end_time") + \
  1e-9 * inspTrig.mkarray("end_time_ns")
trig_dist = inspTrig.mkarray("eff_distance")

# and the errors:
chirp_err = trig_chirp - inj_chirp
time_err = trig_time - inj_time
dist_err = trig_dist / inj_dist - 1

# and the missed injections:
if "found_missed" in plots:
  if not missedFile:
    print >>sys.stderr, "--missed-file must be specified"
    print >>sys.stderr, "when making plots of missed injections"
    print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
    sys.exit(1)

  inspMissed = readMeta.metaDataTable(missedFile, "sim_inspiral")
  if ifo == 'H1'  or  ifo == 'H2':
    missed_time =  inspMissed.mkarray("h_end_time") + \
      1e-9 * inspMissed.mkarray("h_end_time_ns")
    missed_dist =  inspMissed.mkarray("eff_dist_h")
  
  elif ifo == ('L1'):
    missed_time =  inspMissed.mkarray("l_end_time") + \
      1e-9 * inspMissed.mkarray("l_end_time_ns")
    missed_dist =  inspMissed.mkarray("eff_dist_l")


################################
# plot of mchirp error vs mchirp
if "mchirp" in plots:
  figure(1)
  viz.plotdiff(inspInj, inspTrig, 'mchirp', 'plot', 'M_sun', 
    [0,0,-chirp_axis,chirp_axis], myFigure)
  
###############################  
# histogram of chirp mass error
if "chirp_hist" in plots:
  figure(2)
  viz.histdiff(inspInj, inspTrig, 'mchirp', 'hist', 'M_sun', nbins, 
    chirp_width, myFigure)

################################
# plot of timing error vs time
if "time" in plots:
  figure(3)
  viz.plotdiff(inspInj, inspTrig, 'end_time', 'plot', 'seconds', 
    [0,0,-time_axis,time_axis], myFigure)
  
###############################  
# histogram of timing error
if "time_hist" in plots:
  figure(4)
  viz.histdiff(inspInj, inspTrig, 'end_time', 'hist', 'seconds', nbins, 
    time_width, myFigure)

################################
# plot of distamce error vs dist
if "dist" in plots:
  figure(5)
  viz.plotfracdiff(inspInj, inspTrig, 'eff_dist', 'log', 'Mpc', 
    [0,0,-dist_axis,dist_axis], myFigure)
  
###############################  
# histogram of dist error
if "dist_hist" in plots:
  figure(6)
  viz.histdiff(inspInj, inspTrig, 'eff_dist', 'frac_hist', 'Mpc', nbins, 
    dist_width, myFigure)

#######################################
# plot of injected vs detected distamce    
if "dist_dist" in plots:  
  figure(7)
  viz.plotval(inspInj, inspTrig, 'eff_dist', 'log', 'Mpc', 'Injected',
    'Recovered', [0,0,0,0], myFigure)

####################################################
# plot of injected eff dist vs time for found/missed    
if "found_missed" in plots:  
  figure(8)
  semilogy(inj_time,inj_dist,'bx',label='Found')
  hold(True)
  semilogy(missed_time,missed_dist,'rx',label='Missed')
  legend()
  title(ifo + ' Distance vs Time', size='x-large')
  xlabel('Injected End Time (GPS seconds)', size='x-large')
  ylabel('Injected Effective Distance (Mpc)', size='x-large')
  axis([min(inj_time), max(inj_time), \
    0.95 * min(inj_dist), 1.05 * max(missed_dist)])
  gca().grid(True)

  if myFigure:
    savefig(myFigure + '_' + ifo + "_found_missed.png")

################################
# plot of mchirp error vs mchirp
if "chirp_dist" in plots:
  figure(9)
  semilogx(inj_dist,chirp_err,'bx')
  title(ifo + ' Chirp Mass Accuracy', size='x-large')
  xlabel('Injected Effective Distance (Mpc)', size='x-large')
  ylabel('Detected - Injected Chirp Mass (M_sun)',size='x-large')
  if chirp_dist_axis:
    axis([0.95*min(inj_dist), 1.05*max(inj_dist), \
      - chirp_dist_axis, chirp_dist_axis])
  else:
    axis([0.95 * min(inj_dist), 1.05 * max(inj_dist), \
      (1.1 * min(chirp_err)),(1.1 * max(chirp_err))])
  gca().grid(True)

  if myFigure:
    savefig(myFigure + '_' + ifo + "_chirp_mass_vs_dist.png")

################################
# plot of mchirp error vs mchirp
if "time_dist" in plots:
  figure(10)
  semilogx(inj_dist,time_err,'bx')
  title(ifo + ' End Time Accuracy', size='x-large')
  xlabel('Injected Effective Distance (Mpc)', size='x-large')
  ylabel('Detected - Injected End Time (ms)',size='x-large')
  if time_dist_axis:
    axis([0.95*min(inj_dist), 1.05*max(inj_dist), \
      - time_dist_axis, time_dist_axis])
  else:
    axis([0.95 * min(inj_dist),1.05 * max(inj_dist), \
      (1.1 * min(time_err)),(1.1 * max(time_err))])
  gca().grid(True)

  if myFigure:
    savefig(myFigure + '_' + ifo + "_time_vs_dist.png")


  
if showflag:
  show()
   


