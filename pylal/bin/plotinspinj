#!/usr/bin/python

import sys
import os
from optparse import *
import re
import exceptions
import glob
from types import *

from pylab import *
from lgen import readMeta
from lgen import viz

##############################################################################
usage = """usage: %prog [options] file1 (file2 file3)

Inspiral Injection Plotting Functions

Generate a set of summary plots from triggers and found injections stored as
sngl_inspiral and sim_inspiral table in LIGO lightweight format
respectively.  The plots can be turned on by selecting them.  For plots, the
AXIS must be specified (this is the Y-axis scale).  If either AXIS = 0 then
the range is set automatically.  The WIDTH of the histograms must also be
specified.  If either AXIS = 0 then the range is set automatically.

Example 1: ...
Example 2: ...
"""
parser = OptionParser( usage )
parser.add_option("-v","--version",action="store_true",default=False,\
    help="display version information " )
parser.add_option("-m","--plot-mchirp",action="store_true",default=False,\
    help="plot the chirp mass accuracy" )
parser.add_option("-M","--hist-mchirp",action="store_true",default=False,\
    help="histogram of the chirp mass accuracy" )
parser.add_option("-e","--plot-eta",action="store_true",default=False,\
    help="plot the chirp mass accuracy" )
parser.add_option("-E","--hist-eta",action="store_true",default=False,\
    help="histogram of the eta accuracy" )    
parser.add_option("-t","--plot-timing",action="store_true",default=False,\
    help="plot of the timing accuracy" )
parser.add_option("-T","--hist-timing",action="store_true",default=False,\
    help="histogram of the timing accuracy" )
parser.add_option("-i","--plot-dist",action="store_true",default=False,\
    help="plot of the effective distance accuracy" )
parser.add_option("-I","--hist-dist",action="store_true",default=False,\
    help="histogram of the effective distance accuracy" )
parser.add_option("-k","--dist-dist",action="store_true",default=False,\
    help="plot of injected vs recovered distance" )
parser.add_option("-o","--chirp-dist",action="store_true",default=False,\
    help="plot of chirp mass accuracy vs effective dist" )
parser.add_option("-p","--time-dist",action="store_true",default=False,\
    help="plot of timing accuracy vs effective dist" )
parser.add_option("-q","--chirp-snr",action="store_true",default=False,\
    help="plot of chirp mass accuracy vs snr" )
parser.add_option("-r","--time-snr",action="store_true",default=False,\
    help="plot of timing accuracy vs snr" )
parser.add_option("-C","--chirp-axis",action="store",type="float",\
    default=0, metavar=" M_SUN",help="width of chirp mass accuracy in plots" )
parser.add_option("-F","--eta-axis",action="store",type="float",\
    default=0, metavar=" UNITS",help="width of eta accuracy in plots" )
parser.add_option("-D","--dist-axis",action="store",type="float",\
    default=0,metavar=" FRAC_DIFF",help="width of distance accuracy in plots" )
parser.add_option("-S","--time-axis",action="store",type="float",\
    default=0, metavar=" SEC",help="width of timing accuracy in plots" )
parser.add_option("-1","--tag1",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for first input file" )
parser.add_option("-2","--tag2",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for second input file" )
parser.add_option("-3","--tag3",action="store",type="string",\
    default=None, metavar=" TAG",help="identifier for third input file" )
parser.add_option("-s","--show-plot",action="store_true",default=False,\
    help="display the figures on the terminal" )
parser.add_option("-n","--nbins",action="store",type="int",default=10,\
    metavar=" NBINS", help="number of bins for the histogram plots" )
parser.add_option("-f","--fig-name",action="store",type="string",\
    default=None, metavar=" FNAME",\
    help="generate png figures with name FNAME-fig.png" ) 

(opts,args) = parser.parse_args()

# if --version flagged
if opts.version:
  sys.exit(0)

# check at least one trig file was specified
if not args:
  print >>sys.stderr, "a trig-file must be specified"
  print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
  sys.exit(1)

injFiles = args        

tags = []
if opts.tag1:
  tags.append(opts.tag1)
  if opts.tag2:
    tags.append(opts.tag2)
    if opts.tag3:
      tags.append(opts.tag3)
      
# read in tables into dictionaries of paired sets
injSets = []

for i in range(len(injFiles)):
  injDict = {}
  # 
  flist = []
  flist.append(injFiles[i])
  injDict["sngl_inspiral"] = readMeta.metaDataTable(flist, "sngl_inspiral")
  injDict["sim_inspiral"]  = readMeta.metaDataTable(flist, "sim_inspiral")
  #
  # test sire clustering
  if injDict['sngl_inspiral'].nevents() != injDict['sim_inspiral'].nevents():
    print >>sys.stderr,"number of triggers and found injections must be equal"
    sys.exit(1)
  #
  injSets.append(injDict)


# set lists of plot symbols
plotsymbols= ['ro','b+','kx']
histcolors = ['r','b','k']

################################
# plot of mchirp error vs mchirp
if opts.plot_mchirp:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'mchirp', 'plot', plotsymbols[sym], 'M_sun', \
                 [0,0,-opts.chirp_axis,opts.chirp_axis], opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)
  
###############################  
# histogram of chirp mass error
if opts.hist_mchirp:
  figure()
  sym=0
  for set in injSets:
    viz.histdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'mchirp', 'hist', sym,'M_sun', \
                 opts.nbins, opts.chirp_axis, opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

################################
# plot of eta error vs eta
if opts.plot_eta:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'eta', 'plot', plotsymbols[sym], 'units', \
                 [0,0,-opts.eta_axis,opts.eta_axis], opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)
  
###############################  
# histogram of chirp mass error
if opts.hist_eta:
  figure()
  sym=0
  for set in injSets:
    viz.histdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'eta', 'hist', sym,'units', \
                 opts.nbins, opts.eta_axis, opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)


################################
# plot of timing error vs time
if opts.plot_timing:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'end_time', 'plot', plotsymbols[sym],'seconds', \
                 [0,0,-opts.time_axis,opts.time_axis], opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)



###############################  
# histogram of timing error
if opts.hist_timing:
  figure()
  sym=0
  for set in injSets:
    viz.histdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'end_time', 'hist', sym, 'seconds',opts.nbins,\
                 opts.time_axis, opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

################################
# plot of distamce error vs dist
if opts.plot_dist:
  figure()
  sym=0
  for set in injSets:
    viz.plotfracdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                     'eff_dist', 'log', plotsymbols[sym], 'Mpc', \
                     [0,0,-opts.dist_axis,opts.dist_axis], opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

###############################  
# histogram of dist error
if opts.hist_dist:
  figure()
  sym=0
  for set in injSets:
    viz.histdiff(set['sim_inspiral'], set['sngl_inspiral'],\
                 'eff_dist', 'frac_hist', sym, 'Mpc', opts.nbins, \
                 opts.dist_axis, opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)
  legend(tags)

#######################################
# plot of injected vs detected distamce    
if opts.dist_dist:  
  figure()
  sym=0
  for set in injSets:
    viz.plotval(set['sim_inspiral'], \
                set['sngl_inspiral'],\
                'eff_dist', 'log', 'Mpc', 'Injected',\
                'Recovered', [0,0,0,0], opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

################################
# plot of mchirp error vs eff_dist
if opts.chirp_dist:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiffa_vs_b(set['sim_inspiral'], set['sngl_inspiral'],\
                 'mchirp', 'eff_dist', 'log', plotsymbols[sym], \
                 'M_sun','Mpc', [0,0,-opts.chirp_axis,opts.chirp_axis], \
                 opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)


################################
# plot of mchirp error vs mchirp
if opts.time_dist:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiffa_vs_b(set['sim_inspiral'], set['sngl_inspiral'],\
                 'end_time', 'eff_dist', 'log', plotsymbols[sym], \
                 'seconds','Mpc', [0,0,-opts.time_axis,opts.time_axis], \
                 opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)


################################
# plot of mchirp error vs snr
if opts.chirp_snr:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiffa_vs_b(set['sngl_inspiral'], set['sim_inspiral'],\
                 'mchirp', 'snr', 'log', plotsymbols[sym], \
                 'M_sun',None, [0,0,-opts.chirp_axis,opts.chirp_axis], \
                 opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

################################
# plot of mchirp error vs snr
if opts.time_snr:
  figure()
  sym=0
  for set in injSets:
    viz.plotdiffa_vs_b(set['sngl_inspiral'], set['sim_inspiral'],\
                 'end_time', 'snr', 'log', plotsymbols[sym], \
                 'seconds',None, [0,0,-opts.time_axis,opts.time_axis], \
                 opts.fig_name)
    hold(True) 
    sym+=1
  if tags:
    legend(tags)

 
if opts.show_plot:
  show()
