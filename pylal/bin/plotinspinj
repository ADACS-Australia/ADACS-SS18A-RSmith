#!/usr/bin/python

# $Id$
__author__ = "Stephen Fairhurst <sfairhurs@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]
__name__ = "plotinspinj"
__Id__ = "$Id$"
__title__ = "Injection Plots"


import sys
import os
import re
import exceptions
import glob
itertools = __import__("itertools")  # system-wide itertools
from types import *
from optparse import *

from glue import segmentsUtils
from glue.ligolw import ligolw, table as tab, lsctables, utils
from glue import lal

from pylal import SnglInspiralUtils, SimInspiralUtils, CoincInspiralUtils
from pylal.tools import XLALEThincaParameterForInjection as ethinca_param
from pylal import InspiralUtils

#############################################################################

usage = """usage: %prog [options] file1 (file2 file3)

Inspiral Injection Plotting Functions

Generate a set of summary plots from triggers and found injections stored as
sngl_inspiral and sim_inspiral table in LIGO lightweight format
respectively.  The routine expects that there are equal numbers of triggers
and injections stored in the files.  

The various plots can be turned on by selecting them.  For plots and
histograms, the AXIS can be specified.  This gives the Y-axis scale for plots and the width for the histograms.

Available plots:

1) Chirp mass accuracy can be plotted as:
  a) a function of the injected chirp mass, using --plot-mchirp
  b) a histogram, using --hist-mchirp
  c) a function of the injected effective distance, using --chirp-dist
  d) a function of the detected SNR, using --chirp-snr
The width of all these plots is set using --chirp-axis

2) Eta accuracy can be plotted as:
  a) a function of the injected eta, using --plot-eta
  b) a histogram, using --hist-eta
The width of all these plots is set using --eta-axis

3) End time accuracy can be plotted as:
  a) a function of the injected end time, using --plot-time
  b) a histogram, using --hist-time
  c) a function of the injected effective distance, using --time-dist
  d) a function of the detected SNR, using --time-snr
The width of all these plots is set using --time-axis

4) Effective distance accuracy can be plotted as:
  a) a function of the injected eta, using --plot-dist
  b) a histogram, using --hist-dist
The width of these plots is set using --dist-axis
  c) injected vs detected distance can be plotted using --dist-dist 

5) E-thinca parameter between a trigger and an injection can be plotted as:
  a) a function of the difference between a common parameter in the trigger and
     injections, using --ethinca-param-vs (ex: --ethinca-param-vs=end_time)
  b) histogram, using --hist-ethinca

"""

#################################################################
def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")

    
  parser.add_option("-m","--plot-mchirp",action="store_true",default=False,\
      help="plot the chirp mass accuracy" )
  parser.add_option("-M","--hist-mchirp",action="store_true",default=False,\
      help="histogram of the chirp mass accuracy" )
  parser.add_option("-Z","--chirp-dist",action="store_true",default=False,\
      help="plot of chirp mass accuracy vs effective dist" )
  parser.add_option("-q","--chirp-snr",action="store_true",default=False,\
      help="plot of chirp mass accuracy vs snr" )
  parser.add_option("-C","--chirp-axis",action="store",type="float",\
      default=0, metavar=" M_SUN",help="width of chirp mass accuracy in plots" )
  parser.add_option("","--mchirp-mchirp",action="store_true",default=False,\
     help="plot of injected vs recovered mchirp" )
 
  parser.add_option("-e","--plot-eta",action="store_true",default=False,\
      help="plot the eta accuracy" )
  parser.add_option("-E","--hist-eta",action="store_true",default=False,\
      help="histogram of the eta accuracy" ) 
  parser.add_option("-a","--eta-snr",action="store_true",default=False,\
      help="plot of eta accuracy vs snr" )
  parser.add_option("-F","--eta-axis",action="store",type="float",\
      default=0, metavar=" UNITS",help="width of eta accuracy in plots" )
  
  parser.add_option("-t","--plot-time",action="store_true",default=False,\
      help="plot of the timing accuracy" )
  parser.add_option("-T","--hist-time",action="store_true",default=False,\
      help="histogram of the timing accuracy" )
  parser.add_option("-p","--time-dist",action="store_true",default=False,\
      help="plot of timing accuracy vs effective dist" )
  parser.add_option("-r","--time-snr",action="store_true",default=False,\
      help="plot of timing accuracy vs snr" )
  parser.add_option("-S","--time-axis",action="store",type="float",\
      default=0, metavar=" SEC",help="width of timing accuracy in plots" )
  
  parser.add_option("","--plot-dist",action="store_true",default=False,\
      help="plot of the effective distance accuracy" )
  parser.add_option("-I","--hist-dist",action="store_true",default=False,\
      help="histogram of the effective distance accuracy" )
  parser.add_option("-k","--dist-dist",action="store_true",default=False,\
      help="plot of injected vs recovered distance" )
  parser.add_option("-D","--dist-axis",action="store",type="float",\
      default=0,metavar=" FRAC_DIFF",help="width of distance accuracy in plots")
  
  parser.add_option("", "--ethinca-vs-diff", dest="ethinca_vs_diff", \
      action='append', default=[], \
      help="plot maximum ethinca parameter for which "\
      "the trigger's ellipse encloses the true injection params "\
      "vs difference in given column between injection and trigger")
  parser.add_option("", "--ethinca-vs-snr", action="store_true", \
      default=False, help="plot minimum ethinca parameter for which "\
      "the trigger's ellipse encloses the true injection params "\
      "vs the inverse of the snr of the trigger")
  
  parser.add_option("", "--log-x", action="store_true", default=False,\
      help="plot the x-axis on a log scale (only implemented for ethinca "
      " plots)")
  parser.add_option("", "--log-y", action="store_true", default=False,\
      help="plot the y-axis on a log scale (only implemented for ethinca "
      " plots)")
  parser.add_option("", "--hist-ethinca", action="store_true", default=False,\
      help="histogram ethinca parameters between injections and recovered triggers")
  
  parser.add_option("-c", "--coire-split", action="store_true", default=False,\
      help="split coired triggers into sire-like single ifo triggers")
  
  parser.add_option("-s","--show-plot",action="store_true",default=False,\
      help="display the figures on the terminal" )
  parser.add_option("-n","--nbins",action="store",type="int",default=10,\
      metavar=" NBINS", help="number of bins for the histogram plots (default 10)" )
  parser.add_option("-x","--title-text",action="store",type="string",\
      default=None, metavar=" TEXT",\
      help="add TEXT at start of plot titles" ) 
  parser.add_option("-V","--veto-file",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="read in segments from FNAME (assumed segwizard format)")
  parser.add_option("","--cache-file",action="store",type="string",\
      default=None, metavar=" CACHE-FILE",help=" reads the cache file as an input" )
  parser.add_option("","--found-pattern", metavar=" INJECTION_PATTERN",
    help="sieves a file for found injections of a particular type" )

  # output related
  parser.add_option("-z","--user-tag",action="store",type="string",\
      default=None,metavar=" FNAME",\
      help="a user tag for the output filenames" )
  parser.add_option("-o","--output-path",action="store",\
      type="string",default="",  metavar="PATH",\
      help="path where the figures would be stored")
  parser.add_option("-O","--enable-output",action="store_true",\
      default="false",  metavar="OUTPUT",\
      help="enable the generation of the html and cache documents")
  parser.add_option("","--gps-start-time",action="store",\
      type="int",  metavar="GPSSTARTTIME",\
      help="gps start time (for naming figure and output files")
  parser.add_option("","--gps-end-time",action="store",\
      type="int",  metavar=" GPSENDTIME",\
      help="gps end time (for naming figure and output files")
  parser.add_option("-i", "--ifo-times", action="store", type="string",\
      default=None,\
      metavar="IFOTIMES", help="sieve a cache file according to a particular ifo times")
  parser.add_option("","--ifo-tag",action="store",\
      type="string",  metavar=" IFOTAG",\
      help="ifo tag gives the information about ifo times and stage")
  parser.add_option("", "--verbose", action="store_true", default=False,\
      metavar="VERBOSE", help="verbose option")
  parser.add_option("", "--figure-resolution",action="store",type="int",\
      default=50, help="dpi of the thumbnails (50 by default)")
  parser.add_option("", "--html-for-cbcweb",action="store",\
      default=False, metavar = "CVS DIRECTORY", help="publish the html "\
      "output in a format that can be directly published on the cbc webpage "\
      "or in CVS. This only works IF --enable-output is also specified. The "\
      "argument should be the cvs directory where the html file will be placed "\
      "Example: --html-for-cbcweb protected/projects/s5/yourprojectdir")

  (options,args) = parser.parse_args()

  # test the input options
  if options.ifo_times is None:
    raise ValueError, "--ifo-times must be an undelimited list of IFOs "\
      "from the set {H1, H2, L1, V1, G1}.  e.g. H1H2V1."

  return options, sys.argv[1:]

# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()
# ============================================================================
# Initialise
opts = InspiralUtils.initialise(opts, __name__,__version__)
# -- set the proper color code
colors = InspiralUtils.colors
figure_number = 0  # used for the figure label (showplot)
fnameList = []   # use for the cache file
tagList= []   # use for the cache file

# to avoid  display problem when show plot is not used
if not opts.show_plot:
  import matplotlib
  matplotlib.use('Agg')
from pylab import *
from pylal import viz
from numpy import histogram
rc('text', usetex=True)



# check at least one trig file was specified
if opts.cache_file:
  cache = lal.Cache.fromfile(open(opts.cache_file))
  injcache = cache.sieve(ifos=opts.ifo_times, description = opts.found_pattern)
  injFiles = injcache.checkfilesexist()[0].pfnlist()
  if opts.verbose:
    for inj in injFiles:
      print "...reading the following list of found files  " + inj

else:
  if not args:
    print >>sys.stderr, "a trig-file must be specified"
    print >>sys.stderr, "Enter 'plotinspinj --help' for usage"
    sys.exit(1)

  injFiles = args


# get veto segment list
if opts.veto_file:
  seglist = segmentsUtils.fromsegwizard(file(opts.veto_file, 'r'))

     
# read in triggers
trigs = SnglInspiralUtils.ReadSnglInspiralFromFiles(injFiles)
sims = SimInspiralUtils.ReadSimInspiralFromFiles(injFiles)
 
if (trigs is None) or \
  (sims is None):
  raise ValueError, "the number of triggers or number of sims is zero"   
  
# veto if supplied
if opts.veto_file:
  trigs = trigs.veto(seglist)
  sims = sims.veto(seglist)
  
# provide a matching sim_inspiral for each sngl_inspiral if requested
if opts.coire_split:
  new_sim_table = tab.new_from_template(sims)
    
  # iterator over consecutive triggers with matching event_ids
  coincs = itertools.groupby(trigs,
                             lambda row: row.event_id)
  for coinc, inj in itertools.izip(coincs, sims):
    # coinc is tuple of (key, iterator); count length of iterator
    num_coincs = reduce(lambda x,y: x + 1, coinc[1], 0)
    new_sim_table.extend([inj] * num_coincs)
  sims = new_sim_table

if len(trigs) != len(sims):
  raise ValueError, "number of triggers and found injections must be equal"

# sort into bins by IFO
injSets = {}
for trig, sim in zip(trigs,sims):
  ifo = trig.ifo

  if ifo not in injSets:
    injSets[ifo] = {"sim_inspiral" : tab.new_from_template(sims),
                    "sngl_inspiral": tab.new_from_template(trigs)}
  injSets[ifo]["sim_inspiral"].append(sim)
  injSets[ifo]["sngl_inspiral"].append(trig)
ifos = injSets.keys()
ifos.sort()
 
# set lists of plot symbols
plot_symbols = ['rx','b+','ko','D','h','p','rx','b+','ko','D','h','p']
plot_colors = ['r', 'b', 'k', 'g', 'y']

# infinite sequence of integers, starting at 1
plot_num = itertools.count(1)

#####################################
# plot of injected vs detected mchirp
if opts.mchirp_mchirp:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]

    viz.plotval(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                'mchirp', 'linear', plot_symbols[sym] )
    sym+=1
  viz.labelval('mchirp', '$M_{\odot}$', [0,0,0,0],'Injected','Recovered',\
    None,opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_plot")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")


################################
# plot of mchirp error vs mchirp
if opts.plot_mchirp:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]

    viz.plotdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                 'mchirp', 'linear', plot_symbols[sym])
    sym+=1
  viz.labeldiff('mchirp', '$M_{\odot}$', \
      [0,0,-opts.chirp_axis,opts.chirp_axis],\
      None,opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")
  
###############################  
# histogram of chirp mass error
if opts.hist_mchirp:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    try:
      viz.histdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'], 'mchirp', \
                 'hist', sym, len(injSets), opts.nbins, \
                 [-opts.chirp_axis,opts.chirp_axis])
      sym+=1
    except:pass
  viz.labelhistdiff('mchirp', 'hist', '$M_{\odot}$', None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_histogram")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")
  
 
################################
# plot of eta error vs eta
if opts.plot_eta:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                 'eta', 'linear', plot_symbols[sym])
    sym+=1
  viz.labeldiff('eta', None, [0,0,-opts.eta_axis,opts.eta_axis],\
    None,opts.title_text) 
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eta_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")
 
 
###############################  
# histogram of chirp mass error
if opts.hist_eta:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo  in ifos:
    injSet = injSets[ifo]
    viz.histdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'], 'eta', \
                 'hist', sym, len(injSets), opts.nbins, \
                 [-opts.eta_axis,opts.eta_axis])
    sym+=1
  viz.labelhistdiff('eta', 'hist', None, None, opts.title_text, \
                    )
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eta_histogram")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")


################################
# plot of timing error vs time
if opts.plot_time:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                 'end_time', 'linear', plot_symbols[sym] )
    sym+=1
  viz.labeldiff('end_time', 'days', [0,0,-opts.time_axis,opts.time_axis],\
    None,opts.title_text) 
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "end_time_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")


############################### 
# histogram of timing error
if opts.hist_time:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.histdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'], 'end_time', \
                 'hist', sym, len(injSets), opts.nbins, \
                 [-opts.time_axis,opts.time_axis])
    sym+=1
  viz.labelhistdiff('end_time', 'hist', 'seconds', None, opts.title_text \
                    )
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "end_time_histogram")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")


################################
# plot of distance error vs dist
if opts.plot_dist:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotfracdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                     'eff_dist', 'log', plot_symbols[sym] )
    sym+=1
  viz.labelfracdiff('eff_dist', 'Mpc', [0,0,-opts.dist_axis,opts.dist_axis],\
    None,opts.title_text) 
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eff_dist_frac_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

###############################  
# histogram of dist error
if opts.hist_dist:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.histdiff(injSet['sim_inspiral'], injSet['sngl_inspiral'], 'eff_dist', \
                 'frac_hist', sym, len(injSets), opts.nbins, 
                 [-opts.dist_axis,opts.dist_axis])
    sym+=1
  viz.labelhistdiff('eff_dist', 'frac_hist', 'Mpc', None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eff_dist_histogram")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

#######################################
# plot of injected vs detected distance    
if opts.dist_dist:  
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotval(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                'eff_dist', 'log', plot_symbols[sym] )
    sym+=1
  viz.labelval('eff_dist', 'Mpc', [0,0,0,0],'Injected','Recovered',\
    None,opts.title_text) 
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eff_dist_plot")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

################################
# plot of mchirp error vs eff_dist
if opts.chirp_dist:
  figure(plot_num.next())
  hold(True) 
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotfracdiffa_vs_b(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                 'mchirp', 'eff_dist', 'log', plot_symbols[sym])
    sym+=1
  viz.labelfracdiffa_vs_b('mchirp', 'eff_dist','$M_{\odot}$','Mpc', \
    [0,0,-opts.chirp_axis,opts.chirp_axis], None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_vs_eff_dist")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

################################
# plot of end time error vs eff_dist
if opts.time_dist:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotdiffa_vs_b(injSet['sim_inspiral'], injSet['sngl_inspiral'],\
                 'end_time', 'eff_dist', 'log', plot_symbols[sym])
    sym+=1
  viz.labeldiffa_vs_b('end_time', 'eff_dist','$M_{\odot}$','Mpc', \
    [0,0,-opts.time_axis,opts.time_axis], None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_vs_eff_dist_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

################################
# plot of mchirp error vs snr
if opts.chirp_snr:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotfracdiffa_vs_b(injSet['sngl_inspiral'], injSet['sim_inspiral'], \
                 'mchirp', 'snr', 'log', plot_symbols[sym])
    sym+=1
  viz.labelfracdiffa_vs_b('mchirp', 'snr','$M_{\odot}$',None, \
    [0,0,-opts.chirp_axis,opts.chirp_axis], None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "mchirp_vs_snr_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")


################################
# plot of end time error vs snr
if opts.time_snr:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotdiffa_vs_b(injSet['sngl_inspiral'], injSet['sim_inspiral'], \
                 'end_time', 'snr', 'log', plot_symbols[sym])
    sym+=1
  viz.labeldiffa_vs_b('end_time', 'snr','seconds',None, \
    [0,0,-opts.time_axis,opts.time_axis], None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "end_time_vs_snr_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

################################
# plot of eta error vs snr
if opts.eta_snr:
  figure(plot_num.next())
  hold(True)
  sym=0
  for ifo in ifos:
    injSet = injSets[ifo]
    viz.plotfracdiffa_vs_b(injSet['sngl_inspiral'], injSet['sim_inspiral'], \
                 'eta', 'snr', 'log', plot_symbols[sym])
    sym+=1
  viz.labelfracdiffa_vs_b('eta', 'snr',None,None, \
    [0,0,-opts.eta_axis,opts.eta_axis], None, opts.title_text)
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "eta_vs_snr_accuracy")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")

################################
# plot of ethinca parameter vs the difference between any parameter's
# injected and recovered values

for ethinca_vs_diff in opts.ethinca_vs_diff:
  fig = figure(plot_num.next())
  ax = fig.add_subplot(111)
  ax.grid(True)
  for ifo, symb in zip(ifos, plot_symbols):
    injSet = injSets[ifo]
    table1 = injSet['sim_inspiral']
    table2 = injSet['sngl_inspiral']
    
    # Print first row of table1
    # print [(k, table1[0].__getattribute__(k)) for k in table1.columnnames]
    
    # Print first row of table2
    # print [(k, table2[0].__getattribute__(k)) for k in table2.columnnames]
    
    [par1, par2, ifo] = viz.readcolfrom2tables(table1, table2, ethinca_vs_diff)
    
    diff_a = (par1 - par2)
    col_b = [ethinca_param(sim, sngl) for sim, sngl in zip(table1, table2)]
    
    ax.plot(diff_a, col_b, symb)
    
    if opts.log_x:
      ax.set_xscale('log')
    if opts.log_y:
      ax.set_yscale('log')
    
    ax.set_xlabel('$\delta (\mathrm{%s})$' \
      % ethinca_vs_diff.replace('_', r'\_'), size='x-large')
    ax.set_ylabel('ethinca-parameter', size='x-large')

    if opts.title_text is not None:
      ax.set_title(opts.title_text, size='x-large', weight='bold')
    
    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "ethinca_vs_ethinca_vs_diff_accuracy")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotinspinj")

# Plot of ethinca values vs snr
if opts.ethinca_vs_snr:
  fig = figure(plot_num.next())
  ax = fig.add_subplot(111)
  ax.grid(True)
  for ifo, symb in zip(ifos, plot_symbols):
    injSet = injSets[ifo]
    table1 = injSet['sim_inspiral']
    table2 = injSet['sngl_inspiral']

    # Print first row of table1
    # print [(k, table1[0].__getattribute__(k)) for k in table1.columnnames]

    # Print first row of table2
    # print [(k, table2[0].__getattribute__(k)) for k in table2.columnnames]

    col_a = viz.readcol(table2, 'snr')

    col_b = [ethinca_param(sim, sngl) for sim, sngl in zip(table1, table2)]

    ax.plot(col_a, col_b, symb)

    if opts.log_x:
      ax.set_xscale('log')
    if opts.log_y:
      ax.set_yscale('log')

    ax.set_xlabel('snr', size='x-large')
    ax.set_ylabel('ethinca-parameter', size='x-large')

    if opts.title_text is not None:
      ax.set_title(opts.title_text, size='x-large', weight='bold')

    if opts.enable_output:
      fname = InspiralUtils.set_figure_name(opts, "ethinca_vs_snr")
      fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
      fnameList.append(fname)
      tagList.append("fix me in plotinspinj")

# Histogram of ethinca values
if opts.hist_ethinca:
  fig = figure(plot_num.next())
  ax = fig.add_subplot(111)
  
  sim_tables = [x['sim_inspiral'] for x in injSets.itervalues()]
  sngl_tables = [x['sngl_inspiral'] for x in injSets.itervalues()]
  
  ethinca_list = [[ethinca_param(sim, sngl) \
                  for sim, sngl in zip(sim_table, sngl_table)] \
                  for sim_table, sngl_table in zip(sim_tables, sngl_tables)]
  
  # Histogram all datasets with the same bins
  ep_max = max([max(eps) for eps in ethinca_list])
  hists = {}
  for ifo in ifos:
    hists[ifo] = histogram(eps, bins=opts.nbins, range=[0, ep_max])
  # y_list, x_list = zip(*[histogram(eps, bins=opts.nbins, range=[0, ep_max]) \
  #                        for eps in ethinca_list])
  
  n = len(ifos)
  for i, ifo in enumerate(ifos):
    y, x = hists[ifo]
  # for i, x, y, color in zip(range(n), x_list, y_list, plot_colors):
    x += 0.1*i*ep_max/opts.nbins  # Introduce some stagger
    ax.bar(x, y, color=plot_colors[i], width=(1-0.1*n)*ep_max/opts.nbins)
  ax.set_ylabel("\#")
  ax.set_xlabel("E-thinca parameter")
  
  if opts.title_text is not None:
    ax.set_title(opts.title_text, size='x-large', weight='bold')
  
  if opts.enable_output:
    fname = InspiralUtils.set_figure_name(opts, "inj_trig_ethinca_hist")
    fname_thumb = InspiralUtils.savefig_pylal(filename=fname, doThumb=True, dpi_thumb=opts.figure_resolution)
    fnameList.append(fname)
    tagList.append("fix me in plotinspinj")




# ============================================================================
# final step: html, cache file generation
if opts.enable_output is True:
  html_filename = InspiralUtils.write_html_output(opts, args, fnameList, tagList)
  InspiralUtils.write_cache_output(opts, html_filename, fnameList)

  if opts.html_for_cbcweb:
    html_filename_publish = InspiralUtils.write_html_output_for_cbcweb(opts, args, fnameList, tagList)

if opts.show_plot:
  show()
