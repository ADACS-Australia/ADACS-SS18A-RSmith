#!/usr/bin/env python

from optparse import OptionParser
import sys
import os

# =============================================================================
# Function to execute shell command and get output
# ============================================================================
def GetCommandOutput(command, show_stdout=False, show_command=False, show_error=False):
  """
  Run a command line argument and print informative messages on failure.
  It returns two outputs: the stdout of the command, and its status.  

    >>> GetCommandOutput('cp * /tmp', False, False, True)

  @param command: the command to try
  @type command: string
  @param show_stdout: show the stdout 
  @type show_stdout: boolean
  @param show_command: show the command
  @type show_command: boolean
  @param show_error: show the error if any
  @type show_error: boolean
  @return: the stdout and a status  


  """
  if show_command:
    print "--- Trying this command :" + command

  stdin, out, err = os.popen3(command)
  pid, status = os.wait()
  this_output = out.read()
  if show_error & status != 0:
    print >>sys.stderr, "External call failed."
    print >>sys.stderr, "  status: %d" % status
    print >>sys.stderr, "  stdout: %s" % this_output
    print >>sys.stderr, "  stderr: %s" % err.read()
    print >>sys.stderr, "  command: %s" % command
    sys.exit(status)
  if show_stdout:
    if this_output[0:1]=='\n':
      print  this_output[1:]  #first character is \n
    else:
      print this_output

  stdin.close()
  out.close()
  err.close()
  return this_output, status

# =============================================================================
# Main program begins here
# =============================================================================
usage = """usage: %prog [options]

This script is designed to create the CBC Data Quality Analysis page for the given times specified in the options. The default is for one week from the given start date. The only required option is:

--start-date

If you are NOT running on CIT, the options

--skip-dq-flags
--skip-hveto-ihope

are set TRUE automatically as the scripts to run these sections require access to ihope_daily on CIT."""

parser = OptionParser(usage=usage)

parser.add_option("-t","--start-date",action="store",type="string",\
    help="start date in format mm/dd/yyyy")

parser.add_option("-n","--number-of-days",action="store",type="int",\
    default=7,dest="number_days",help="number of days required for DQ page")

parser.add_option("-u","--username",action="store",type="string",\
    dest="username",help="username required to access Scimon DQ Flag webpage")

parser.add_option("-p","--password",action="store",type="string",\
    dest="password",help="password required to access Scimon DQ Flag webpage")

parser.add_option("-d","--skip-common-dqflags",action="store_true",\
    default=False,dest="skip_dq_flags",\
    help="skip generation of common DQ flag lists")

parser.add_option("-k","--skip-hveto-kw",action="store_true",default=False,\
    dest="skip_hveto_kw",help="skip analysis of hveto_ihope results")

parser.add_option("-i","--skip-hveto-ihope",action="store_true",default=False,\
    dest="skip_hveto_ihope",help="skip analysis of KW hveto results")

parser.add_option("-r","--skip-daily",action="store_true",\
    default=False,dest="skip_daily",help="skip generation of daily plots")

parser.add_option("-H","--skip-h1",action="store_true",\
    default=False,dest="skip_h1",help="skip generation of H1 daily plots")

parser.add_option("-L","--skip-l1",action="store_true",\
    default=False,dest="skip_l1",help="skip generation of L1 daily plots")

parser.add_option("-V","--skip-v1",action="store_true",\
    default=False,dest="skip_v1",help="skip generation of V1 daily plots")

(options, args) = parser.parse_args()

if options.start_date is None:
        parser.error("Please specify a start date")

# ==========
# Set up name variables from options
# ==========
ifo=[]
ligoIfo=[]
site=[]
ligoSite=[]
ligoName=[]
if options.skip_h1 is False:
	ifo.append('H1')
	ligoIfo.append('H1')
	site.append('-wa')
	ligoSite.append('-wa')
	ligoName.append('LHO')
if options.skip_l1 is False:
	ifo.append('L1')
	ligoIfo.append('L1')
	site.append('-la')
	ligoSite.append('-la')
	ligoName.append('LLO')
if options.skip_v1 is False:
	ifo.append('V1')
	site.append('')

# ==========
# Work out location and set location specific changes
# ==========
hostname = 'hostname -f'
hostname = GetCommandOutput(hostname)[0]
hostname = hostname.replace('\n','')
if hostname == "ldas-pcdev1.ligo.caltech.edu" or hostname == 'ldas-grid.ligo.caltech.edu':
	webURL = "https://ldas-jobs.ligo.caltech.edu/"
elif hostname == "ldas-pcdev1.ligo-wa.caltech.edu" or hostname == "ldas-grid.ligo-wa.caltech.edu":
		webURL = "https://ldas-jobs.ligo-wa.caltech.edu/"
elif hostname == "ldas-pcdev1.ligo-la.caltech.edu" or hostname == "ldas-grid.ligo-la.caltech.edu":
		webURL = "https://ldas-jobs.ligo-la.caltech.edu/"
elif hostname == "atlas1.atlas.aei.uni-hannover.de":
	webURL = "https://atlas1.atlas.aei.uni-hannover.de/"
elif hostname == "atlas2.atlas.aei.uni-hannover.de":
        webURL = "https://atlas2.atlas.aei.uni-hannover.de/"
elif hostname == "atlas3.atlas.aei.uni-hannover.de":
        webURL = "https://atlas3.atlas.aei.uni-hannover.de/"
elif hostname == "atlas4.atlas.aei.uni-hannover.de":
        webURL = "https://atlas4.atlas.aei.uni-hannover.de/"
elif hostname == "sugar.phy.syr.edu":
	webURL = "https://sugar-jobs.phy.syr.edu/"
elif hostname == "coma2.local":
	webURL = "https://coma2.astro.cf.ac.uk/"
elif hostname == "hydra.phys.uwm.edu":
	webURL = "https://ldas-jobs.phys.uwm.edu/"

if hostname[0:5] == "atlas":
	publicFolder = "WWW/LSC"
else:
	publicFolder = "public_html"

if hostname != "ldas-pcdev1.ligo.caltech.edu" and hostname != 'ldas-grid.ligo.caltech.edu':
	options.skip_dq_flags = True
	options.skip_hveto_ihope = True
# ==========
# Calculate time info
# ==========
numDays=options.number_days
numWeeks = int(round(numDays/7))

GPSday = [0]*(numDays+1)
GPSstart=GPSday[0] = int(GetCommandOutput('''tconvert '''+ str(options.start_date))[0])
DateStart=str(GetCommandOutput('''tconvert '''+str(GPSday[0]))[0])
DateStart=DateStart.replace("\n","")
#DateStartFormatted=GetCommandOutput('''tconvert ''' + str(GPSday[0]) + ''' -f %A", "%B""%e" "%Y''')

for i in range(1,len(GPSday)):
	GPSday[i]=GPSday[i-1]+86400
GPSend=GPSday[-1]
GPSlength=GPSend-GPSstart
DateEnd=str(GetCommandOutput('''tconvert '''+str(GPSend))[0])
DateEnd=DateEnd.replace("\n","")

# ==========
# Calculate date info
# ==========
ihopePathStart=str('''/archive/home/cbc/ihope_daily/''')

ihopePath = ['']*numDays
date = ['']*numDays
day = ['']*numDays
month = ['']*numDays
year = ['']*numDays

dayOfWeek = ['']*numDays
dateFormatted = ['']*numDays

for i in range(0,numDays):
	date[i] = str(GetCommandOutput('''tconvert '''+str(GPSday[i])+''' -f %Y%m%d''')[0])
	dayOfWeek[i] = str(GetCommandOutput('''tconvert '''+str(GPSday[i])+''' -f %a''')[0])
	date[i]=date[i].replace("\n","")
	day[i]=date[i][6:8]
	month[i]=date[i][4:6]
	year[i]=date[i][0:4]
	dateFormatted[i]=month[i]+"/"+day[i]
	dayOfWeek[i]=dayOfWeek[i].replace("\n","")
	ihopePath[i] = ihopePathStart+str(date[i][0:6]+'''/'''+date[i]+'''/''')

# ==========
# Create DQ folder for week
# ==========
homepath = str(GetCommandOutput('echo $HOME')[0])
homepath = homepath.replace('\n','')
user = str(GetCommandOutput('echo $USER')[0])
user = user.replace('\n','')
dqFolder='cbc_dq_week_'+date[0]
dqPath=homepath+'/'+publicFolder+'/'+dqFolder
mkdirStatus=GetCommandOutput('''mkdir -p '''+dqPath)
webURL=webURL+'~'+user
webPath=webURL+'/'+dqFolder

# ==========
# HEADER
# ==========
print "= S6C Data Quality Checks for",GPSstart, "-", GPSend, "="
print
print "<<TableOfContents(3)>>"

# ==========
# SUMMARY
# ==========
print "== Summary Information =="
print "\'\'\'Start Time:\'\'\' "+DateStart+", "+str(GPSstart)+". \'\'\'End Time:\'\'\' "+DateEnd+", "+str(GPSend)
print
print "Live time statistics:"
print "||IFO||Science time %||Science time in seconds (days)||"
for obs in ifo:
	print "||"+obs+"||?||?||"
print
print "[[#top|Back to top]]"
# ==========
# Scimon DQ flags
# ==========

if options.username != None:
	print "== Scimon DQ Flags =="
	print "{{{"
	print '''curl -k -s --user albert.einstein:<password> https://segdb.ligo.caltech.edu/seginsert/listflags.php | ligolw_print -d QQQ -t segment_summary -c start_time -c end_time -c ifos -c scimon_comment -c elog_url  | awk -F 'QQQ' '($1 >= GPSstart && $1 < GPSend) || ( $2 >= GPSstart && $2 < GPSend ) || ( $1 < GPSstart && $2 > GPSend DDD) { printf "||%s||%s||%s||%s||%s||[[%s|elog]]||\\n", $3,$1,$2,$2-$1,$4,$5 }' '''
	print "}}}"
	print "The following scimon flags were generated this week:"
	scimonFlagCommand = '''curl -k -s --user '''+options.username+''':'''+options.password+''' https://segdb.ligo.caltech.edu/seginsert/listflags.php | ligolw_print -d QQQ -t segment_summary -c start_time -c end_time -c ifos -c scimon_comment -c elog_url  | awk -F 'QQQ' '($1 >= '''+str(GPSstart)+''' && $1 < '''+str(GPSend)+''') || ( $2 >= '''+str(GPSstart)+''' && $2 < '''+str(GPSend)+''' ) || ( $1 < '''+str(GPSstart)+''' && $2 > '''+str(GPSend)+''' DDD) { printf "||%s||%s||%s||%s||%s||[[%s|elog]]||\\n", $3,$1,$2,$2-$1,$4,$5 }' '''
	scimonFlags = GetCommandOutput(scimonFlagCommand)[0]
	print "||IFO||Start time||End time||Duration||Notes||Ilog link||"
	print scimonFlags
	print
	print "[[#top|Back to top]]"

# ==========
# Common DQ Flags
# ==========

if options.skip_dq_flags is False:
	commonDQtag = 'common_dq_flag'
	commonDQpath = dqPath+'/'+commonDQtag+'/'
	mkdirCommand = 'mkdir -p '+commonDQpath
	mkdirStatus = GetCommandOutput(mkdirCommand)[1]
	commonDQwebPath = webPath+'/'+commonDQtag+'/'
	commonDQfilename = ['']*len(ifo)
	commonDQfile=['']*len(ifo)
	commonDQcommand=['lalapps_flag_triggers ']*len(ifo)
	commonDQflags = ['']*len(ifo)
	skippedDays=['']*len(ifo)
	for i in range(0,len(ifo)):
	        commonDQfilename[i] = commonDQtag+'_'+str(ifo[i])+'-'+str(GPSstart)+'-'+str(GPSlength)+'.txt'
		commonDQfile[i]=commonDQpath+commonDQfilename[i]
		f = open(commonDQfile[i],'w')
		commonDQcommand[i]+=ifo[i]+''' 100 '''
		for j in range(0,len(ihopePath)):
			lsCheck = 'ls '+ihopePath[j]+'H1-4-INSPIRAL_16SEC_CLUSTERED.csv'
			status = GetCommandOutput(lsCheck)[1]
			if status == 0:
				commonDQcommand[i]+=ihopePath[j]+''' '''
			else:
				skippedDays[i]+=''' '''+date[j]+''' '''
		commonDQflags[i],status=GetCommandOutput(commonDQcommand[i])
		if status==0:
			f.write(commonDQflags[i])
		else:
			f.write("Command:\n "+commonDQcommand[i])
			f.write("\nfailed, please rerun.")
	print "== Common DQ Flags =="
	print "{{{"
	print "lalapps_flag_triggers $IFO $SNR_THRESHOLD $DAILY_DIRECTORIES" 
	print "}}}"
	for i in range(0,len(ifo)):
		print "===== "+ifo[i]+" ====="
		print
		print "The output of the above command for "+ifo[i]+" can be found [["+commonDQwebPath+commonDQfilename[i]+"|here]]."
		if skippedDays != '':
			print "The following days were not analysed due to a lack of data:"
			print "  "+skippedDays[i]
	print
	print "[[#top|Back to top]]"

# ==========
# UPV
# ==========

if dayOfWeek[0] != "Tue":
	UPVstart = [0]*(numWeeks+2)
	for i in range(0,numDays):
		if dayOfWeek[i] == "Tue":
			UPVstart[int(i/7)] = GPSday[i]-604800
			UPVstart[int(i/7)+1] = GPSday[i]
	UPVstart[-1] = UPVstart[-2]+604800
	UPVlink = ['']*(3*(numWeeks+1))
else:
	UPVstart = [0]*(numWeeks+1)
	for i in range(0,numDays):
                if dayOfWeek[i] == "Tue":
                        UPVstart[int(i/7)] = GPSday[i]-604800
	UPVstart[-1]=UPVstart[-2]+604800
	UPVlink = ['']*(3*(numWeeks))

print "== Used Percentage Veto =="
print "The UPV studies run weekly starting on Tuesdays. The results for this week can be found at the following locations:"
print "||Week||",
for i in range(0,len(ifo)):
	print ifo[i]+'||',
print

for i in range(0,len(UPVstart)-1):
	for j in range(0,len(ifo)):
		if ifo[j]=="H1" or ifo[j]=="L1":
			UPVlink[3*i+j]="https://ldas-jobs.ligo"+site[j]+\
			    ".caltech.edu/~detchar/S6/UPV/weekly/"+ifo[j]+\
			    "_DARMERR_"+str(UPVstart[i])+"_"\
			    +str(UPVstart[i+1])+"_WEEKLY_webpage/"
		elif ifo[j]=="V1":
			UPVlink[3*i+j]="https://ldas-jobs.ligo"+site[j]+\
			    ".caltech.edu/~detchar/S6/UPV/weekly/V1_PR_B1_ACP_"\
			    +str(UPVstart[i])+"_"+str(UPVstart[i+1])+"_webpage/"
	print "||"+str(i+1)+"||",
	for j in range(0,len(ifo)):
		print "[["+UPVlink[3*i+j]+"|link]]||",
	print 
print
print "[[#top|Back to top]]"

# ==========
# Glitch Shifts
# ==========

if len(ligoIfo)>0:
	numWeeks = int(round(numDays/7))
	print "== Glitch Shifts =="
	if numWeeks > 1:
		print "The glitch shifts for these "+str(numWeeks)+" weeks can be found here:",
	else:
		print "The glitch shifts for this week can be found here:",
	if dayOfWeek[0] != "Sat":
		glitchDate=['']*(numWeeks+1)
		for i in range(0,numDays):
			if dayOfWeek[i] == "Sat":
				glitchDate[int(i/7)] = str(GetCommandOutput('''tconvert '''+str(GPSday[i])+'''-604800 -f %Y%m%d''')[0])
	                        glitchDate[int(i/7)]=glitchDate[int(i/7)].replace("\n","")
				glitchDate[int(i/7)+1] = date[i]
		for i in range(0,len(glitchDate)):
			for j in range(0,len(ligoIfo)):
				glitchLink="https://www.lsc-group.phys.uwm.edu/twiki/bin/view/DetChar/GlitchWeek-"+ligoIfo[j]+"-"+glitchDate[i/2]
				print " [["+glitchLink[i]+"|"+ligoName[j]+" "+glitchDate[i/2]+"]], ",
		print "and all other glitch information can be found on the Glitch Studies page, [[https://www.lsc-group.phys.uwm.edu/twiki/bin/view/DetChar/GlitchStudies|here]]."
	else:
		glitchLink=['']*len(ligoIfo)*numWeeks
		for i in range(0,numWeeks):
			glitchDate = str(GetCommandOutput('''tconvert '''+str(GPSday[i*7])+''' -f %Y%m%d''')[0])
			glitchDate=glitchDate.replace("\n","")
			for j in range(0,len(ligoIfo)):
				glitchLink[i]="https://www.lsc-group.phys.uwm.edu/twiki/bin/view/DetChar/GlitchWeek"+ligoIfo[j]+"-"+glitchDate
				print " [["+glitchLink[i]+"|"+ligoName[j]+" "+glitchDate+"]], ",
		        print "and all other glitch information can be found on the Glitch Studies page, [[https://www.lsc-group.phys.uwm.edu/twiki/bin/view/DetChar/GlitchStudies|here]]."

print
print "[[#top|Back to top]]"

# ==========
# HVeto
# ==========

hvetoGPSday=[0]*numDays
hvetoURL=['']*2*len(ligoIfo)
hvetoIhopeURL=['']*2*len(ligoIfo)
winner=['']*2*len(ligoIfo)
hvetoIhopeWinner=['']*2*len(ligoIfo)
winnerGrep='''cat ./hveto_summaries/summary_stats.txt | awk 'BEGIN{FS=OFS=" "}{print $2}' | awk 'NR==1 {print }' '''
hvetoIhopeURLstart=webURL+'''/hveto_ihope/'''

if options.skip_hveto_ihope is False or options.skip_hveto_kw is False:
	print "== HVeto =="

if options.skip_hveto_ihope is False:
	print "HVeto can be run on ihope triggers following the instructions [[https://www.lsc-group.phys.uwm.edu/ligovirgo/cbcnote/S6Plan/100131174312DQandVetoeshveto_ihope_daily|here]]. The results for this week are:\n"
        print "||Date||",
	for det in ligoIfo:
		print det+" INST winner||"+det+" PEM winner||",
	print
	for i in range(0,len(ligoIfo)):
		hvetoIhopeURL[len(ligoIfo)*i] = hvetoIhopeURLstart+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''+ligoIfo[i]+'''-HVETO_iHope_INST-'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''
		hvetoIhopeURL[len(ligoIfo)*i+1] = hvetoIhopeURLstart+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''+ligoIfo[i]+'''-HVETO_iHope_PEM-'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''
		hvetoWinnerGrep = '''cat ~/public_html/hveto_ihope/'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''+ligoIfo[i]+'''-HVETO_iHope_INST-'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/summary_stats.txt | awk 'BEGIN{FS=OFS=" "}{print $2}' | awk 'NR==1 {print }' '''
                output, status = GetCommandOutput(hvetoWinnerGrep)
		if status == 0:
			if output == '\n':
				hvetoIhopeWinner[len(ligoIfo)*i]='hveto error'
			else:
				hvetoIhopeWinner[len(ligoIfo)*i]=str(output)
				hvetoIhopeWinner[len(ligoIfo)*i]=hvetoIhopeWinner[len(ligoIfo)*i].replace("\n","")
		else:
			hvetoIhopeWinner[2*i]='hveto error'
		hvetoWinnerGrep = '''cat ~/public_html/hveto_ihope/'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/'''+ifo[i]+'''-HVETO_iHope_PEM-'''+str(GPSstart)+'''-'''+str(GPSlength)+'''/summary_stats.txt | awk 'BEGIN{FS=OFS=" "}{print $2}' | awk 'NR==1 {print }' '''
                output, status = GetCommandOutput(hvetoWinnerGrep)
		if status==0:
			if output =='\n':
				hvetoIhopeWinner[len(ligoIfo)*i]='hveto error'
			else:
		                hvetoIhopeWinner[len(ligoIfo)*i+1]=str(output)
				hvetoIhopeWinner[len(ligoIfo)*i+1]=hvetoIhopeWinner[len(ligoIfo)*i+1].replace("\n","")
	        else:
	                hvetoIhopeWinner[len(ligoIfo)*i+1]='hveto error'
	print "||Full period||",
	for k in range(0,len(hvetoIhopeWinner)):
		print "[["+hvetoIhopeURL[k]+"|"+hvetoIhopeWinner[k]+"]]||",
	print

if options.skip_hveto_kw is False:
	hvetoKWpath = dqPath+'/hveto_summaries' 
	mkdirCommand = 'mkdir -p '+hvetoKWpath
	mkdirStatus=GetCommandOutput(mkdirCommand)[1]
	winnerGrep='''cat '''+hvetoKWpath+'''/summary_stats.txt | awk 'BEGIN{FS=OFS=" "}{print $2}' | awk 'NR==1 {print }' '''

	print "HVeto is run daily on the Kleine-Welle triggers. The results are:\n"
	print "||Date||",
	for det in ligoIfo:
		print det+" INST winner|| "+det+" PEM winner||",
	print
	for i in range(0,numDays):
		hvetoGPSday[i]=GPSday[i]-15	
		for j in range(0,len(ligoIfo)):
			hvetoURL[len(ligoIfo)*j] = '''https://ldas-jobs.ligo'''+ligoSite[j]+'''.caltech.edu/~jrsmith/hveto/s6b/'''+ligoIfo[j]+'''-HVETO_KW_INST-'''+str(hvetoGPSday[i])+'''-86400/'''
			hvetoURL[len(ligoIfo)*j+1] = '''https://ldas-jobs.ligo'''+ligoSite[j]+'''.caltech.edu/~jrsmith/hveto/s6b/'''+ligoIfo[j]+'''-HVETO_KW_PEM-'''+str(hvetoGPSday[i])+'''-86400/'''
			hvetoSummaryCopy = '''gsiscp ldas-grid.ligo'''+ligoSite[j]+'''.caltech.edu:/archive/home/jrsmith/public_html/hveto/s6b/'''+ligoIfo[j]+'''-HVETO_KW_INST-'''+str(hvetoGPSday[i])+'''-86400/summary_stats.txt '''+hvetoKWpath
			copystatus = GetCommandOutput(hvetoSummaryCopy)[1]
			if copystatus==0:	
				output,status = GetCommandOutput(winnerGrep)
				winner[len(ligoIfo)*j]=str(output)
				winner[len(ligoIfo)*j]=winner[len(ligoIfo)*j].replace("\n","")
			else:
				winner[len(ligoIfo)*j]='hveto error'
			hvetoSummaryCopy = '''gsiscp ldas-grid.ligo'''+ligoSite[j]+'''.caltech.edu:/archive/home/jrsmith/public_html/hveto/s6b/'''+ligoIfo[j]+'''-HVETO_KW_PEM-'''+str(hvetoGPSday[i])+'''-86400/summary_stats.txt '''+hvetoKWpath
			copystatus=GetCommandOutput(hvetoSummaryCopy)[1]
			if copystatus==0:
				output,status = GetCommandOutput(winnerGrep)
				winner[len(ligoIfo)*j+1]=str(output)
	        	        winner[len(ligoIfo)*j+1]=winner[len(ligoIfo)*j+1].replace("\n","")
			else:
				winner[len(ligoIfo)*j+1]='hveto error'
		print "||"+dateFormatted[i]+"||",
		for k in range(0,len(winner)):
			print "[["+hvetoURL[k]+"|"+winner[k]+"]]||",
		print
	print "[[#top|Back to top]]"
# ==========
# Detailed Results
# ==========

print "== Detailed Results =="

print "=== Site Weekly ==="
print "The Site Weekly report from Mike Landry can be found in the archives, [[http://relativity.phys.lsu.edu/pipermail/siteweekly/|here]]."
print
print "[[#top|Back to top]]"
# ==========
# Daily Results
# ==========

if options.skip_daily is False:
	for i in range(0,numDays):
		print "=== "+dateFormatted[i]+" ==="
		if options.skip_h1 is False:
			print "'''Links: '''[[http://ilog.ligo-wa.caltech.edu/ilog/pub/ilog.cgi?group=detector&date_to_view="+month[i]+"/"+day[i]+"/"+year[i]+"|LHO ilog]], ",
		if options.skip_l1 is False:
			print "[[http://ilog.ligo-la.caltech.edu/ilog/pub/ilog.cgi?group=detector&date_to_view="+month[i]+"/"+day[i]+"/"+year[i]+"|LLO ilog]], ",
		if len(ligoIfo) != 0:
			print "[[https://ldas-jobs.ligo.caltech.edu/~cbc/ihope_daily/"+year[i]+month[i]+"/"+year[i]+month[i]+day[i]+"|Daily ihope]], ",
		if options.skip_h1 is False:
			print "[[https://ldas-jobs.ligo-wa.caltech.edu/~detchar/S6/glitch/report/Omega-"+str(GPSday[i])+"-"+str(GPSday[i+1])+".html|H1 Omega]], ",
		if options.skip_l1 is False:
			print "[[https://ldas-jobs.ligo-la.caltech.edu/~detchar/S6/glitch/report/Omega-"+str(GPSday[i])+"-"+str(GPSday[i+1])+".html|L1 Omega]], ",
		if options.skip_v1 is False:
			print "[[http://wwwcascina.virgo.infn.it/DataAnalysis/Burst/wonline/V1/"+year[i]+"/"+month[i]+"/"+day[i]+"|V1 Omega]]."
		print
		print "|| ||",
		for det in ifo:		
			print det+"||",
		print
		print "|| SNR vs. time <<BR>> (100ms / CAT4) ||",
		for j in range(0,len(ifo)):
			print "[[https://ldas-jobs.ligo.caltech.edu/~cbc/ihope_daily/"+year[i]+month[i]+"/"+year[i]+month[i]+day[i]+"/"+ifo[j]+"_4_100MILLISEC_CLUSTERED_snr_vs_time.png|{{https://ldas-jobs.ligo.caltech.edu/~cbc/ihope_daily/"+year[i]+month[i]+"/"+year[i]+month[i]+day[i]+"/"+ifo[j]+"_4_100MILLISEC_CLUSTERED_snr_vs_time.png||width=300}}]]||",
		print		
		print "|| Omega ||",
		for j in range(0,len(ifo)):
			if ifo[j] == "H1" or ifo[j] =="L1":
				print "[[https://ldas-jobs.ligo"+site[j]+".caltech.edu/~detchar/S6/glitch/figures/"+str(GPSday[i])+"_"+str(GPSday[i+1])+"/S6-"+ifo[j]+"-omega-"+str(GPSday[i])+"-"+str(GPSday[i+1])+"-GlitchTS.gif|{{https://ldas-jobs.ligo"+site[j]+".caltech.edu/~detchar/S6/glitch/figures/"+str(GPSday[i])+"_"+str(GPSday[i+1])+"/S6-"+ifo[j]+"-omega-"+str(GPSday[i])+"-"+str(GPSday[i+1])+"-GlitchTS.gif||width=300}}]]||",
			elif ifo[j] == "V1":
				print "[[http://wwwcascina.virgo.infn.it/DataAnalysis/Burst/wonline/V1/"+year[i]+"/"+month[i]+"/"+day[i]+"/Plots/V1-GlitchTS.gif|{{http://wwwcascina.virgo.infn.it/DataAnalysis/Burst/wonline/V1/"+year[i]+"/"+month[i]+"/"+day[i]+"/Plots/V1-GlitchTS.gif||width=300}}]]||",
		print
		print "[[#top|Back to top]]"
