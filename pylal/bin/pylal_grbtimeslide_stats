#!/usr/bin/env python
"""
Determine the mean number of triggers per slide per fold_time-length segment
"""

from __future__ import division

import glob
import optparse
import sys

import numpy

from glue import lal
from glue import segmentsUtils
from glue.ligolw import ligolw
from glue.ligolw import table
from glue.ligolw import lsctables
from pylal import CoincInspiralUtils
from pylal import SnglInspiralUtils

# handle user input
parser = optparse.OptionParser(usage=__doc__, version="%prog CVS $Id$ ")
parser.add_option("-g", "--glob", action="append",
    help="glob of thinca slide files to read")
parser.add_option("-i", "--input", action="append",
    help="lal cache of thinca slide files to read")
parser.add_option("-t", "--fold-time", type="float",
    help="express result in terms of segments of length FOLD_TIME")
(opts,args) = parser.parse_args()

if opts.glob is None and opts.input is None:
    print >>sys.stderr, "A glob or input file is required"
    sys.exit(2)

# discover files containing coincs
if opts.glob is not None:
    filegroups = [glob.glob(g) for g in opts.glob]
    input_source = opts.glob
else:
    filegroups = [[lal.CacheEntry(line).path() for line in open(f)] \
        for f in opts.input]
    input_source = opts.input

# compute stats
dummy_stat = CoincInspiralUtils.coincStatistic('snr')
for input, files in zip(input_source, filegroups):
    # I/O
    triggers = SnglInspiralUtils.ReadSnglInspiralFromFiles(files)
    coincTable = CoincInspiralUtils.coincInspiralTable(triggers, dummy_stat)
    
    # compute
    lens = numpy.array([len(coincTable.getslide(x)) \
                        for x in range(-10,0)+range(1,11)])
    segs = segmentsUtils.fromfilenames(files)
    
    assert 2*lens.sum() == len(triggers)
    
    # find count per 180s segment
    if opts.fold_time is not None:
        nsegs = abs(segs) / opts.fold_time
        lens = lens / nsegs  # in-place wouldn't upcast to float
    else:
        nsegs = 1.
    
    print "Statistics for: \"%s\"" % input
    print "  Mean coincidences per slide per segment: %f" % lens.mean()
    print "  Stdev of mean: %f" % (lens.std() / numpy.sqrt(nsegs))
