id = "@ID@"
date = "@DATE@"
branch = "@BRANCH@"
tag = "@TAG@"
if tag == "None":
    tag = None
author = "@AUTHOR@"
builder = "@BUILDER@"
committer = "@COMMITTER@"
status = "@STATUS@"
version = id
verbose_msg = """Branch: @BRANCH@
Tag: @TAG@
Id: @ID@

Builder: @BUILDER@
Build date: @BUILD_DATE@
Repository status: @STATUS@"""

import warnings

class VersionMismatchError(ValueError):
    pass

def check_match(foreign_id, onmismatch="raise"):
    """
    If foreign_id != id, perform an action specified by the onmismatch
    kwarg. This can be useful for validating input files.

    onmismatch actions:
      "raise": raise a VersionMismatchError, stating both versions involved
      "warn": emit a warning, stating both versions involved
    """
    if onmismatch not in ("raise", "warn"):
        raise ValueError(onmismatch + " is an unrecognized value of onmismatch")
    if foreign_id == "@ID@":
        return
    msg = "Program id (@ID@) does not match given id (%s)." % foreign_id
    if onmismatch == "raise":
        raise VersionMismatchError(msg)

    # in the backtrace, show calling code
    warnings.warn(msg, UserWarning)

