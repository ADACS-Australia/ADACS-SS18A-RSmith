#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

"""
Cut pieces out of LIGO LW XML files containing LSC tables.
"""

from optparse import OptionParser
import sys

from glue.ligolw import ligolw
from glue.ligolw import table

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__date__ = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	parser.add_option("--delete-column", metavar = "name", action = "append", default = [], help = "delete matching columns")
	parser.add_option("--delete-element", metavar = "tag[,attr=value[,...]]", action = "append", default = [], help = "delete matching elements")
	parser.add_option("--delete-table", metavar = "name", action = "append", default = [], help = "delete matching tables")
	options, filenames = parser.parse_args()

	# strip column names
	# FIXME: remove duplicates
	options.delete_column = map(table.StripColumnName, options.delete_column)

	# parse element specs
	# FIXME: remove duplicates
	def parse_delete_element(arg):
		arg = arg.split(",")
		attrs = {}
		for i in range(1, len(arg)):
			[name, value] = arg[i].split("=")
			attrs[name] = value
		return arg[0], attrs
	options.delete_element = map(parse_delete_element, options.delete_element)

	# strip table names
	# FIXME: remove duplicates
	options.delete_table = map(table.StripTableName, options.delete_table)

	return options, (filenames or [None])


#
# =============================================================================
#
#                                    Input
#
# =============================================================================
#

ContentHandler = ligolw.LIGOLWContentHandler

def load_filename(filename):
	doc = ligolw.Document()
	if filename:
		ligolw.make_parser(ContentHandler(doc)).parse(file(filename))
	else:
		ligolw.make_parser(ContentHandler(doc)).parse(sys.stdin)
	return doc


#
# =============================================================================
#
#                                     Cut
#
# =============================================================================
#

#
# Remove unwanted tables
#

def RemoveTables(doc, tables):
	for name in tables:
		for table_elem in table.getTablesByName(doc, name):
			table_elem.parentNode.removeChild(table_elem)


#
# Remove unwanted columns
#

def RemoveColumns(doc, columns):
	for table_elem in doc.getElementsByTagName(ligolw.Table.tagName):
		for name in columns:
			for column in table.getColumnsByName(table_elem, name):
				table_elem.removeChild(column)


#
# Remove unwanted elements
#

def CompareDeleteElement(elem, elemspec):
	"""
	Return 1 for !=, 0 for ==.
	"""
	if elem.tagName != elemspec[0]:
		return 1
	for name, value in elemspec[1].iteritems():
		try:
			if elem.getAttribute(name) != value:
				return 1
		except AttributeError:
			return 1
	return 0

def IsDeleteElement(elem, specs):
	"""
	Return True if elem matches an elem spec for deleting.
	"""
	for spec in specs:
		if CompareDeleteElement(elem, spec) == 0:
			return True
	return False

def RemoveElements(doc, specs):
	for elem in doc.getElements(lambda e: IsDeleteElement(e, specs)):
		elem.parentNode.removeChild(elem)


#
# =============================================================================
#
#                                    Output
#
# =============================================================================
#

def write_filename(filename):
	if filename:
		doc.write(file(filename, "w"))
	else:
		doc.write(sys.stdout)


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

try:
	options, filenames = parse_command_line()
except Exception, e:
	print >>sys.stderr, "error: parsing command line: %s" % str(e)
	sys.exit(1)

for n, filename in enumerate(filenames):
	if options.verbose:
		print >>sys.stderr, "loading %d/%d: %s" % (n + 1, len(filenames), filename or "stdin")
	doc = load_filename(filename)

	if options.verbose:
		print >>sys.stderr, "processing"
	RemoveTables(doc, options.delete_table)
	if options.delete_column:
		RemoveColumns(doc, options.delete_column)
	if options.delete_element:
		RemoveElements(doc, options.delete_element)

	if options.verbose:
		print >>sys.stderr, "writing %s" % (filename or "stdout")
	write_filename(filename)
