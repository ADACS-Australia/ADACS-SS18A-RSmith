#!/usr/bin/env python2
#
# lightweight database dumper client
#
# $Id$
#
# Copyright (C) 2003 Duncan Brown
# 
# This file is part of the lightweight datapase dumper (ldbd)
#

import os
import sys
import string
import re
import getopt
from pyGlobus import io
from pyGlobus.util import GlobusException

class LDBDServerException(Exception):
  """Exceptions returned by server"""
  def __init__(self,args=None):
    self.args = args

class LDBDServerConnection(object):
  def __init__(self, host, port, identity):
    """
    Attempt to open a connection to the ldbd server
    using the 'host' and 'port', and expecting the 
    server to identify itself with credentials that 
    match the subject name 'identity'.

    A IOException is raised if the connection cannot be made.
    """
    self.host = host
    self.port = port
    self.identity = identity

    try:
      # create TCPIOAttr instance and set authentication mode to be GSSAPI
      clientAttr = io.TCPIOAttr()
      clientAttr.set_authentication_mode(
        io.ioc.GLOBUS_IO_SECURE_AUTHENTICATION_MODE_GSSAPI)

      # create AuthData instance and set expected identity
      authData = io.AuthData()
      authData.set_identity(identity)

      # set authorization, channel, and delegation modes
      clientAttr.set_authorization_mode(
        io.ioc.GLOBUS_IO_SECURE_AUTHORIZATION_MODE_IDENTITY, authData)
      clientAttr.set_channel_mode(
        io.ioc.GLOBUS_IO_SECURE_CHANNEL_MODE_CLEAR)
      clientAttr.set_delegation_mode(
        io.ioc.GLOBUS_IO_SECURE_DELEGATION_MODE_LIMITED_PROXY)

      if not verbose:
        f = open("/dev/null", "w")
        sys.stdout = f
        sys.stderr = f
  
      soc = io.GSITCPSocket()
      soc.connect(host, port, clientAttr)
      self.socket = soc

      if not verbose:
        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__
        f.close()

    except GlobusException, e:
      if not verbose:
        sys.stdout = sys.__stdout__
        sys.stderr = sys.__stderr__
        f.close()
      print "Error establising GSI connection to %s:%d" % (host,port)
      print e
      sys.exit(1)
    
class LDBDServerAction(object):
  """
  Does the work making the connection to the server, sending
  the request and processing the result
  """
  def __init__(self,host,port,identity,action,db,squery,fh):
    """
    host = server host
    port = server port
    identity = globus identity of server
    action = specific action to perform (query or insert)
    db = the database to connect to on the server
    sql = the sql to execute in a query (or just insert for an insert)
    fh = file handle of input or output file
    """
    self.host = host
    self.port = port
    try:
      self.connection = LDBDServerConnection(host,port,identity)
    except Exception, e:
      print "Error connecting to %s:%d with identity %s" % (host,port,identity)
      print "Check credentials and verify entry in remote grid-mapfile"
      sys.exit(1)
    self.action = action
    self.db = db
    self.squery = squery
    self.fh = fh

  def execute(self):
    try:
      self.send()
    except Exception, e:
      print "Error writing to %s:%d" % (self.host,self.port)
      print e
      sys.exit(1)
    try:
      self.receive()
    except LDBDServerException, e:
      print "Error: database transaction failed"
      print "Message from server %s:%d" % (self.host,self.port)
      print e
      sys.exit(2)
    except Exception, e:
      print "Error receiving from %s:%d" % (self.host,self.port)
      print e
      sys.exit(1)

  def send(self):
    msg = "%s\0%s\0%s\0" % (self.action,self.db,self.squery)
    if re.search("insert",self.action):
      inputdata = ''
      nlines = 0
      lines = fh.readlines()
      nlines = len(lines)
      inputdata = ''.join(lines)
      if verbose: print "read %d lines from file" % nlines
      msg += "%s\n%s" % (nlines,inputdata)
    else:
      msg += "0\n"
    self.connection.socket.write(msg, len(msg))

  def receive(self):
    f = self.connection.socket.makefile()
    r = f.readline().strip()
    try:
      retcode = int(r)
    except ValueError:
      errmsg = "server closed connection without returning an exit code"
      raise LDBDServerException, errmsg
    if retcode:
      errmsg = f.read()
      raise LDBDServerException, errmsg
    else:
      if re.match("query",self.action):
        retdata = f.read()
        while retdata:
          fh.write(retdata)
          retdata = f.read()

def usage():
  msg = """\
Usage: ldbdc.py [OPTIONS]

  -s, --server HOST:PORT  connect to ldbd on HOST:PORT (default port 49999)
  -j, --identity SUBJECT  the subject of the servers service certififcate
  -d, --database NAME     use database NAME
  -i, --insert LIGOLW     insert LIGO lightweight file LIGOLW
  -q, --query QUERY       execute SQL query QUERY
  -o, --output FILE       write output to FILE
  -v, --verbose           print lots of debugging information
  -h, --help              print this message

The options --server and --database must be specified.
One of the options --query or --insert must be specified.
\
"""
  print msg

def help():
  usage()
  sys.exit(0)

shortop = "s:j:d:i:q:o:vh"
longop = [
  "server=",
  "identity=",
  "database=",
  "insert=",
  "query=",
  "output=",
  "verbose",
  "help"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

# defaults
server = None
port = 49999
identity = None
database = None
infile = None
outfile = None
squery = None
verbose = None

for o, a in opts:
  if o in ("-h", "--help"):
    help()
  elif o in ("-s", "--server"):
    a = a.split(':')
    server = a[0]
    try: port = a[1]
    except IndexError: pass
  elif o in ("-j", "--identity"):
    identity = a
  elif o in ("-i", "--insert"):
    infile = a
  elif o in ("-q", "--query"):
    squery = a
  elif o in ("-d", "--database"):
    database = a
  elif o in ("-o", "--output"):
    outfile = a
  elif o in ("-v", "--verbose"):
    verbose = 1

if not server or not database or (not infile and not squery):
  usage()
  sys.exit(1)
if (squery and infile):
  print "Only one of --query and --insert can be specified\n"
  usage()
  sys.exit(1)

if not identity:
  identity = "/DC=org/DC=doegrids/OU=Services/CN=ldbdserver/%s" % server

if infile:
  fh = open(infile,'r')
  act = "insert"
  squery = None
elif squery:
  if outfile:
    fh = open(outfile,'w')
  else:
    fh = sys.__stdout__
  act = "query"

doit = LDBDServerAction(server,port,identity,act,database,squery,fh)
  identity = "/O=doesciencegrid.org/OU=Services/CN=ldbdserver/%s" % server

#try:
#  doit.execute()
#except Exception, e:
#  print "Server at %s:%d using database %s returned an error message:" \
#  % (server,port,database)
#  print e
#  fh.close()
#  sys.exit(1)

fh.close()
sys.exit(0)
