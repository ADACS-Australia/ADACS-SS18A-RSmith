#!/usr/bin/env python

import sys
import os
from optparse import OptionParser
from numpy import argsort
from pylal.dq import dqFrameUtils

from glue import git_version
__author__ = "Duncan Macleod <duncan.macleod@ligo.org>"
__version__ = "git id %s" % git_version.id
__date__ = git_version.date

"""
Script to query frames for channels
"""

# =============================================================================
# Function to execute shell command and get output
# =============================================================================
def GetCommandOutput(command):
  # == function to execute bash commands and return the stdout and error status
  stdin, out, err = os.popen3(command)
  pid, status = os.wait()
  this_output = out.read()
  stdin.close()
  out.close()
  err.close()
  return this_output, status

# =============================================================================
# Function to parse command line
# =============================================================================
def parse_command_line():
  """
  Parser function dedicated
  """
  usage = """usage: %prog [options]

This script will return all frame types associated with given channel. All or part of a channel name to search for must be given. Including all or part of a data type will greatly speed up the search.

Accepted ifos:

H,L,V,H0,H1,H2,L0,L1,G0,G1,V0,V1
"""
  parser = OptionParser(usage=usage)

  parser.add_option("--verbose", action="store_true", default=False,\
      help="verbose output")

  parser.add_option("-c", "--channels", action="store", type="string",\
      help="relevant channel (or part therein), or comma separated list of channels (or parts therein) for search")

  parser.add_option("-e", "--exclude-channels", action="store", type="string",\
      help="exclude these channels (or parts therein), comma separated")
  
  parser.add_option("-t", "--types", action="store", type="string",\
      help="specfic data type (or part therein), "+\
        "or comma separated list of data types (or parts therein) to search")
 
  parser.add_option("-i", "--ifos", action="store", type="string",\
      help="specific ifo, or comma separated list of ifos, to search")

  parser.add_option("-s", "--gps-time", action="store", type="string",\
      help="gps time around which channels must be active")

  parser.add_option("--full", action="store_true", default=False,\
      help="include ALL data types in search, default: %default")

  parser.add_option("--short", action="store_true", default=False,\
      help="include only the most common data types in search "+\
           "(recommended for most users), default: %default")

  parser.add_option("--match", action="store_true", default=False,\
      help="return only full matches to --channels option, default: %default")

  (options, args) = parser.parse_args()

  return options,args

# =============================================================================
# Main program starts here
# =============================================================================

if __name__ == '__main__':
  options,args = parse_command_line()

  # ==========
  # set up channels and types sets
  # ==========
  if options.channels:
    channels = options.channels.split(',')
  else:
    channels = None

  if options.exclude_channels:
    ex_channels = options.exclude_channels.split(',')
  else:
    ex_channels = None
 
  # ==========
  # find types
  # ==========
  if options.types:
    options.types = options.types.split(',')
  ignore_list=[]
  if options.types is None and not options.full:
    ignore_list=['M','T']

  types = dqFrameUtils.find_types(options.types,\
                                  short=options.short,\
                                  full=options.full)

  # ==========
  # set up ifos list
  # ==========
  if options.ifos:
    options.ifos = options.ifos.split(',')
  ifos = dqFrameUtils.find_ifos(channels,\
                                types,\
                                options.ifos)

  # ==========
  # search frame types for channels
  # ==========
  found = dqFrameUtils.find_channels(channels,\
                                     types,\
                                     ifos,\
                                     ignore=ignore_list,\
                                     match=options.match,\
                                     time=options.gps_time,\
                                     verbose=options.verbose)
  
  # ==========
  # print summary
  # ==========
  if options.verbose:
    print >>sys.stdout, str(len(found))+" channels found:"
  #== sort channels by name
  order = argsort(found)
  for i in range(len(found)):
    print >>sys.stdout, found[order[i]].name,found[order[i]].type,\
                        found[order[i]].sampling

  if options.verbose:
    print >>sys.stdout
