#!/usr/bin/env python
#
# $Id$
#
# Copyright (C) 2009  Larne Pekowsky
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Takes one or more files with sngl_$x triggers (where x = inspiral or burst or...)
and a veto files, and filters or passes all triggers in vetoed times
"""


from optparse import OptionParser

try:
    import sqlite3
except ImportError:
    # pre 2.5.x
    from pysqlite2 import dbapi2 as sqlite3

import sys
import os
import pwd
import tempfile

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import ligolw_sqlite
from glue.ligolw import dbtables

from glue.segmentdb import segmentdb_utils

from glue.ligolw.utils import process

PROGRAM_NAME = sys.argv[0].replace('./','')
PROGRAM_PID  = os.getpid()
try:
        USER_NAME = os.getlogin()
except:
        USER_NAME = pwd.getpwuid(os.getuid())[0]


__author__ = "Larne Pekowsky <lppekows@physics.syr.edu>"
__date__ = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
    """
    Parse the command line, return an options object
    """

    parser = OptionParser(
        version = "%prog CVS $Header$",
        usage   = "%prog -v|--veto-file filename [options] trigger_file1 trigger_file2 ...",
        description = "Reads one or more segment files and a veto file and generates files of veto segments"        
	)
    
    parser.add_option("-v", "--veto-file",    metavar = "veto_file",    help = "veto XML file (required).")
    parser.add_option("-t", "--type",         metavar = "type",         help = "type of trigger [burst|inspiral]")
    parser.add_option("-i", "--include-veto",  action="store_true",     help = "Only return triggers that are inside vetoed times") 
    parser.add_option("-e", "--exclude-veto",  action="store_true",     help = "Only return triggers that are outside vetoed times")
    parser.add_option("-o", "--output-file",  metavar = "output_file",  help = "File to write output XML (default stdout)")

    options, input_files = parser.parse_args()

    if not options.veto_file:
        print >>sys.stderr, "missing required argument --veto-file"
        sys.exit(1)
   
    if not options.type:
        print >>sys.stderr, "missing required argument --type [burst|inspiral]"
        sys.exit(1)

    if options.type not in ['burst', 'inspiral']:
        print >>sys.stderr, "type must be one of [burst|inspiral]"
        sys.exit(1)

    if not options.include_veto and not options.exclude_veto:
        print >>sys.stderr, "missing required argument, either --include-veto or --exclude-veto"
        sys.exit(1)

    return options, input_files

#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

if __name__ == '__main__':
    # Munge the table definitions for S5 triggers -- these may
    # not be needed for E14 and beyond.

    # Settings - disable nanoseconds
    del lsctables.SegmentTable.validcolumns['start_time_ns']
    del lsctables.SegmentTable.validcolumns['end_time_ns']
    # del lsctables.ProcessTable.validcolumns['domain']
    # del lsctables.ProcessTable.validcolumns['jobid']
    # del lsctables.ProcessTable.validcolumns['is_online']
    del lsctables.SummValueTable.validcolumns['summ_value_id']
    del lsctables.SummValueTable.constraints
    del lsctables.SummValueTable.next_id


    lsctables.SnglInspiralTable.validcolumns['event_id'] = 'int_8s'
    del lsctables.SnglInspiralTable.constraints
    del lsctables.SnglInspiralTable.next_id

    options, trigger_files = parse_command_line()    

    # 1. Load the files into sqlite. 
    handle, temp_db = tempfile.mkstemp(suffix='.sqlite')
    os.close(handle)
    target          = dbtables.get_connection_filename(temp_db, None, True, False)
    connection      = ligolw_sqlite.setup(target)

    ligolw_sqlite.insert(connection, trigger_files + [options.veto_file])

    # Delete any triggers whose end time falls within a vetoed segment
    sql =  'DELETE FROM sngl_' + options.type
    sql += ' WHERE end_time %s IN ' % (options.exclude_veto and "NOT" or '')
    sql += ' (SELECT sngl_%s.end_time FROM sngl_%s, segment WHERE sngl_%s.end_time BETWEEN segment.start_time AND segment.end_time)' % (options.type, options.type, options.type)

    connection.cursor().execute(sql)

    # Write out
    ligolw_sqlite.extract(connection, options.output_file)

    # Clean up
    os.remove(temp_db)

