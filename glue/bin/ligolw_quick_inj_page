#!/usr/bin/env python

try:
    import sqlite3
except ImportError:
    # pre 2.5.x
    from pysqlite2 import dbapi2 as sqlite3

import sys
import os
import glob
import tempfile

import glue.segments

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw.utils import ligolw_sqlite
from glue.ligolw import dbtables

from glue.segmentdb import segmentdb_utils

from glue import gpstime

import glob
import time
import datetime
import StringIO


def list_results(ifo, time):
    """Generate HTML for each MBTA trigger in the given ifo 'close to' the given time """
    dq_flags = ''
    flags    = {}

    # Get associated DQ flags
    pipe  = os.popen('ligolw_dq_query --segment=%s --include-segments %s --in-segments-only --report %d' % ('ldbd://nldas.ligo-wa.caltech.edu', ifo, time))
    for line in pipe:
        flag, beforet, timet, aftert = filter(lambda x: x != '', line.split())
    
        ifo, name, version = flag.split(':')
        flags[name] = (beforet, timet, aftert)

    pipe.close()
    
    ifo_status = ''

    # Handle the ones that sould be displayed in bols without
    # DMT- 
    for flag_name in ['Light','Up','Calibrated','Science','Injection']:
        flag = 'DMT-' + flag_name.upper()

        if flag in flags:
            ifo_status += flag_name + ','
            del flags[flag]

    if len(ifo_status) > 0:
        ifo_status = ifo_status[:-1]


    flags[ifo_status] = True


    for name, value in flags.items():
        if not name.startswith('DMT'):
            dq_flags += '<b>%s</b><br>' % name
        else:
            dq_flags += '%s %s %s<br>' % (name, value[0], value[2])

    # Read the triggers.  The dirname should come from the command line
    dir_name = '/cluster/inspiral/E13/mbta/' + ifo

    # Look for +/- 10 seconds around the end time
    xml_files  = segmentdb_utils.get_all_files_in_range(dir_name, end_time - 10, end_time + 10)

    # Create a temporary sqlite DB
    handle2, temp_db2    = tempfile.mkstemp(suffix='.sqlite')
    os.close(handle2)

    target2     = dbtables.get_connection_filename(temp_db2, None, True, False)
    connection2 = ligolw_sqlite.setup(target2)

    ligolw_sqlite.insert(connection2, xml_files)

    # If there were no triggers then the necessary tables won't exist, and subsequent
    # queries will fail.  Check for that first.
    howmany = connection2.cursor().execute("""SELECT count(*) FROM sqlite_master WHERE name='sngl_inspiral'""").fetchone()[0]

    if howmany:
        # Tables exist, get the triggers
        rows2 = connection2.cursor().execute("""SELECT end_time, end_time_ns, mass1, mass2, snr, eff_distance FROM sngl_inspiral
        WHERE end_time BETWEEN %d AND %d  """ % (end_time, end_time + 5))

        for m_end_time, m_end_time_ns, mass1, mass2, snr, eff_distance in rows2:
            print '  <tr valign="top" bgcolor="ddffdd">'
            print '    <td>%s</td><td>%d</td><td>%d</td><td>%.2f</td><td>%.2f</td><td>%.2f</td><td>%.2f</td><td>%s</td>' % (ifo, end_time, end_time_ns, mass1, mass2, eff_distance, snr, dq_flags)
            print '  </tr>'
    else:
        print '  <tr valign="top" bgcolor="ddffdd"><td>%s</td><td colspan="6">Not found</td><td>%s</td></tr>' % (ifo, dq_flags)

    # clean up after ourselves
    connection2.close()
    os.remove(temp_db2)

# __main__

# Create a temporary DB to hold the injections
handle, temp_db    = tempfile.mkstemp(suffix='.sqlite')
os.close(handle)

target     = dbtables.get_connection_filename(temp_db, None, True, False)
connection = ligolw_sqlite.setup(target)

# Load the injections (this should come from the command line and ideally
# should be able to retrieve from a URL)
ligolw_sqlite.insert(connection, ['HL-INJECTIONS_1-924649215-244800.xml'])

# Find the injections
rows = connection.cursor().execute("""SELECT sim_inspiral.h_end_time, h_end_time_ns, mass1, mass2, eff_dist_h
FROM sim_inspiral""")


for end_time, end_time_ns, mass1, mass2, eff_dist_h in rows:
    print '<table>'
    print '  <tr bgcolor="#9999ff"><th>ifo</th><th>end_time</th><th>end_time_ns</th><th>mass 1</th><th>mass 2</th><th>eff_distance_h</th><th>snr</th><th>DQ flags</th>'
    print '  <tr valign="top" bgcolor="ffdddd">'
    print '    <td></td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td>%d</td><td></td><td></td>' % (end_time, end_time_ns, mass1, mass2, eff_dist_h) 
    print '  </tr>'

    # Generate rows for triggers in H1 and H2
    list_results('H1', end_time)
    list_results('H2', end_time)

    print '</table>'
    print '<p>'
    sys.stdout.flush()

# Clean up
connection.close()
os.remove(temp_db)
 
