#!/usr/bin/env python2

"""
Client for querying a LSCsegFindServer to find state segments.

Uses pyGlobus and the LSCsegFindClient modules.

$Id$
"""

__version__ = '$Revision$'[11:-2]

import sys
import os
import getopt
import re
import exceptions

try:
  from pyGlobus import security
except ImportError:
  print >> sys.stderr, """
Error: unable to import security module from pyGlobus.

Check that pyGlobus is correctly installed and in your PYTHONPATH.
"""
  sys.exit(1)

# this client should have its PYTHONPATH set for it during installation

PYTHONPATH = os.getenv('PYTHONPATH', None)

try:
  from glue.LSCsegFindClient import LSCsegFindClient
except ImportError:
  print >> sys.stderr, """
Error: unable to import LSCsegFindClient module from glue.

Check that glue is correctly installed and in your PYTHONPATH.
"""
  sys.exit(1)


class LSCsegFindException(exceptions.Exception):
  """
  Exceptions raised by the classes and methods in this client
  will be instances of this class.
  """
  def __init__(self, args=None):
    """
    Create an instance of this class, ie. an LSCSegFindException.

    @param args:

    @return: Instance of class LSCsegFindException
    """
    self.args = args

class LSCsegFind(LSCsegFindClient):
  """
  Class that represents this client interacting with a LSCsegFindServer in
  order to find state segments.
  """
  def __init__(self, host, port):
    """
    Open a connection to a LSCsegFindServer and return an instance of
    class LSCsegFind. One of the public methods can then be called to send a
    request to the server.

    @param host: the host on which the LSCsegFindServer runs
    @type host: string

    @param port: port on which the LSCsegFindServer listens
    @type port: integer


    @return: Instance of LSCsegFindClient
    """
    LSCsegFindClient.__init__(self, host, port)

  def __check_gps(self, gpsString):
    """
    Minimal checking on GPS time strings. Raises a LSCdataFindClientException if
    the GPS time string is not 9 digits long.

    @param gpsString: The string representing the 9 digit GPS time.

    @returns: None
    """
    if len(gpsString) != 9:
      msg = "GPS times must be 9 digits"
      raise LSCsegFindException, msg

    try:
      a = int(gpsString)
    except Exception, e:
      msg = "GPS times must be 9 digits"
      raise LSCsegFindException, msg


  def ping(self, argDict):
    """
    Ping the LSCsegFindServer and print any response sent back.

    @param argDict: Dictionary of arguments passed to all methods.

    @return: None
    """
    response = LSCsegFindClient.ping(self)
    print response

        
  def showInterferometers(self, argDict):
    """
    Query LSCsegFindServer for the distinct values for the 'state_segment.ifo'
    attribute in the metadata table.

    @param argDict: Dictionary of arguments passed to all methods.

    @return: None
    """

    distinctValueList = LSCsegFindClient.distinctAttrValues(self,
      "interferometers")

    for v in distinctValueList:
      print v

  def showTypes(self, argDict):
    """
    Query LSCsegFindServer for the distinct values for the 'state_vec.state'
    attribute in the metadata table.

    @param argDict: Dictionary of arguments passed to all methods.

    @return: None
    """
    distinctValueList = LSCsegFindClient.distinctAttrValues(self, 
      "state")
                
    for v in distinctValueList:
      print v


def checkCredentials():
    """
    Check to make sure that the proper Grid Credentials (a proxy certificate) is
    available in order to authenticate to the remote LSCsegFindServer.
    """
    # verify that we have access to credentials
    try:
      proxyText = security.grid_proxy_info()
    except Exception, e:
      print >>sys.stderr, "Error verifying credentials: %s" % e
      print >>sys.stderr, "Run 'grid-proxy-init' to generate a proxy certificate"
      sys.exit(1)

    pat = re.compile(r'timeleft : (\d{1,3}):(\d\d):(\d\d)')

    try:
      if isinstance(proxyText, str):
        m = pat.search(proxyText)
      elif isinstance(proxyText, tuple):
        m = pat.search(proxyText[0])
      else:
        raise RuntimeError, "bad format for proxyText in checkCredentials"
      hours, minutes, seconds = map(int, m.groups())

    except Exception, e:
      print >>sys.stderr, "Error parsing proxy information: %s" % e
      sys.exit(1)

    timeleft = seconds + 60 * minutes + 3600 * hours

    if timeleft < 300:
      print >>sys.stderr, "Less than 5 minutes left for proxy certificate."
      print >>sys.stderr, \
        "Run 'grid-proxy-init' to generate a new proxy certificate"
      sys.exit(1)



def usage():
  """
  Print a usage message to stderr.
  """
  msg = """\
NAME
        LSCsegFind

SYNOPSIS
        LSCsegFind --server=NAME:PORT --show-interferometers

        LSCsegFind --server=NAME:PORT --show-types

        LSCsegFind --server=NAME:PORT --ping

        LSCsegFind --server=NAME:PORT --help

DESCRIPTION
        Query a LSCsegFindServer to obtain state vector information from a
        certain instrument and of a particular frame type within a GPS range.

        -v, --version
                Print version information for LSCdataFind client

        -r, --server
                hostname and optional port of server to query, in the form
                host:port

        -w, --show-interferometers
                list available observatory data

        -y, --show-types
                list available types

        -p, --ping
                ping the LSCsegFind server

        -h, --help  
                show this usage message

ENVIRONMENT

        LSC_SEGFIND_SERVER can be set to avoid having to use the 
        --server option on the command line. 

EXAMPLE

none yet.

\
"""
  print >>sys.stderr, msg


# grab command line options
shortop = "vr:wyph"
longop = [
  "version",
  "server=",
  "show-interferometers",
  "show-types",
  "ping",
  "help" ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >>sys.stderr, "Error parsing command line"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

# defaults
hostPortString = None
port = 49999

clientMethodArgDict = {
  'interferometer': None,
  'end': None,
  'start': None,
  'type': None,
  'lalcache': False,
  'filename': None,
  'urlType': None,
  'match': None,
  'limit': None,
  'offset': None,
  'strict': None
}

# default method 
clientMethod = 'ping'

# environment variables override defaults but not
# command line options
try:
  hostPortString = os.environ['LSC_DATAFIND_SERVER']
except:
  pass


for o, a in opts:
  if o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-v", "--version"):
    print 'LSCsegFind client version', __version__
    import glue.LSCsegFindClient
    print 'Built on top of LSCsegFindClient version', \
      glue.LSCsegFindClient.version()
    sys.exit(0)
  elif o in ("-p", "--ping"):
    clientMethod = 'ping'
  elif o in ("-w", "--show-interferometers"):
    clientMethod = 'showInterferometers'
  elif o in ("-y", "--show-types"):
    clientMethod = 'showTypes'
  elif o in ("-r", "--server"):
    hostPortString = a

if not clientMethod:
  print >>sys.stderr, "Bad combination or missing options"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

# determine server and port
if not hostPortString:
  print >>sys.stderr, "No LSCsegFindServer specified"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

if hostPortString.find(':') < 0:
  # no port specified
  host = hostPortString
else:
  # server and port specified
  host, portString = hostPortString.split(':')
  port = int(portString)

# check credentials
checkCredentials()

# open connection to LSCsegFindServer
try:
  myClient = LSCsegFind(host, port)

except Exception, e:
  print >>sys.stderr, \
    "Unable to connect to LSCsegFindServer %s:%d : %s" % (host, port, e)
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

try:
  eval("myClient.%s(%s)" % (clientMethod, clientMethodArgDict))

except LSCsegFindException, e:
  print >>sys.stderr, str(e)
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

except Exception, e:
  print >>sys.stderr, "Error querying LSCsegFindServer: %s" % str(e)
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)
