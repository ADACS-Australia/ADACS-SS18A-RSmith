#!/usr/bin/env python2

"""
Returns GPS segments in an interval from a URL with e.g., science-mode segments
"""
__author__ = "Greg Mendell: returns GPS segments in an interval from a URL with e.g., science-mode segments"
__date__ = '$Date$'
__version__ = '$Revision$'[0:0]

# Revisions:
# 01/19/05 gam; change default for minLength to 1 second.
# 01/19/05 gam; clarify instructions; fix typos.
# 01/19/05 gam; allow path to curl to be set.
# 01/19/05 gam; fix error message when invalid type given.

import sys
import os
import getopt
import re
import exceptions

#from pyGlobus import io
#from pyGlobus import security

#PYTHONPATH = os.getenv('PYTHONPATH', None)

try:
        from glue.LSCsegFind import *
except ImportError:
        # print >>sys.stderr, "\nPython glue.LSCsegFind library not found; please add its location to the PYTHONPATH environmental variable.\n"
        print >>sys.stderr, "\nPython glue.LSCsegFind library not found; please follow the instructions in the glue README file or add the location of glue to the PYTHONPATH environmental variable.\n"
        print >>sys.stderr, "For example, from the bash or csh shell respectively, run:\n"
        print >>sys.stderr, "    export PYTHONPATH=$PYTHONPATH:$LSCSOFT/src/glue"
        print >>sys.stderr, "or "
        print >>sys.stderr, "    setenv PYTHONPATH ${PYTHONPATH}:$LSCSOFT/src/glue"
        print >>sys.stderr, "\nwhere $LSCSOFT needs to be replaced with the local directory with software from the lscsoft cvs repository.\n"
        sys.exit(1)
        
def shortUsage():
        """
        Print short usage message to stderr.
        """
        msg = """\
NAME
     LSCsegFind: Returns GPS segments in the interval [gps-start-time, gps-end-time)

SYNOPSIS
     help:       
        LSCsegFind --help
        LSCsegFind --help-long (use this option for further help)
        
     if the LSC_SEGFIND_SERVER environmental variable is set:
        LSCsegFind --show-types        
        LSCsegFind --gps-start-time=GPS --gps-end-time=GPS --type=NAME
           
     else:               
        LSCsegFind --server=NAME:PORT --show-types
        LSCsegFind --server=NAME:PORT --gps-start-time=GPS --gps-end-time=GPS --type=NAME

     other options:        
        LSCsegFind --gps-start-time=GPS --gps-end-time=GPS < --server=NAME:PORT --type=NAME | 
        --local-config-file=CONFIG_FILE --type=NAME | --local-seg-file=NAME [--coalesce] >
        [--min-length=SEC] [--add-start=SEC] [--reduce-end=SEC] [--output-format=STRING]
        [--curl-path=PATH] [--strict-off] [--save-files]

        LSCsegFind --show-types --local-config-file=CONFIG_FILE

IMPORTANT CAVEATS     
     1) Currently the segments returned are determined by web pages produced by either
     DMT or Conlog scripts, along with the options given to this script. The web page
     used is completely determined by the --type option.  The server used has no
     bearing on the segments returned nor any relationship to what data is actually
     available at the site of that server. The server returns to LSCsegFind a list of
     web pages with segments; all servers return the same list. Thus, the actual server
     name used does not matter as long as the list of web pages exists on that server.
     
     2) The default value for the --min-length option is 1 second.
     
     3) Run LSCsegFind --help-long to get further help.

EXAMPLE
     $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --gps-start-time=757838000 --gps-end-time=757881848 --type=S3H1
     757842133 757849258
     757874829 757881843
\
"""
        print >>sys.stdout, msg
                
def usage():
        """
        Print long usage message to stderr.
        """
        
        # First print short usage message
        shortUsage()
        
        msg = """\
DESCRIPTION
        
     -r NAME, --server=NAME:PORT
            Replace NAME with the server with segment information (PORT is optional
            and currently unused). If the environmental variable LSC_SEGFIND_SERVER
            is defined this is used for the default NAME:PORT value and the --server
            option is not needed.  Note that giving the --server option over-rides
            the environmental variable.
                
     -y --show-types
            Show a list of names that can be used with the --type option to designate
            the type of segments to return.
       
     -t NAME, --type=NAME
            Replace NAME with a name that designates the type of segments to return
            Use -y or --show-types to see what names are available
        
     -s GPS, --gps-start-time=GPS
            GPS = gps start-time of range (inclusive)

     -e GPS, --gps-end-time=GPS
            GPS = gps end-time of range (exclusive)
               
     -m SEC, --min-length=SEC
            SEC = minimum duration of output segments in seconds (default = 1).
        
     -a SEC, --add-start=SEC
            SEC = number of seconds to add to output segments start times (default = 0).
        
     -d SEC, --reduce-end=SEC
           SEC  = number of seconds to reduce output segments end times (default = 0).
        
     -o STRING, --output-format=STRING
            Replace STRING with a string that specifies the output format. The default
            is "%s %e" which prints out 'start-time end-time', in the format:
                  757842133 757849258
                  757874829 757881843
                  ...
            The format options are:
                   %i = prints segment id
                   %s = prints segment start time (inclusive)
                   %e = prints segment end time (exclusive)
                   %d = prints segment duration
            For example "%i %s %e %d" outputs 'id start-time end-time duration'
                  507 757842133 757849258 7125
                  508 757874829 757881843 7014               
                  ...
            Other characters can be included, but must be space separated for the format options.
            Examples:
                  1. "%s , %e" prints:
                     757842133 , 757849258
                     ...
                  2. "{ %s %e }" prints:
                     { 757842133 757849258 }
                     ...
            In addition to formatted output, special values of the format string are:
                 SCIENCE_SEGMENTS = prints segments as objects of the LSC python Class ScienceSegment
                 PYTHON_LIST = prints start times and end times as a python list
                 TCL_LIST = prints start times and end times as a tcl list
                      
     --strict-off
            The default behavior is to truncate segments so that returned segments are
            entirely in the interval [gps-start-time, gps-end-time).  However if this 
            option is given, the entire non-truncated segment is returned if any part
            of it overlaps the interval.               
     
     --save-files
            The default behavior is to remove temporary files after each call. Use this option
            to keep temporary configuration and segment files on disk. These files can then be
            used locally with the --local-config-file and --local-seg-file options.  These
            files will end in _LSCsegFind.py and _LSCsegFind.txt respectively
        
     -c NAME, --local-config-file=NAME
            A local configuration file can be used, rather than the configuration from the server.
            For an example, see LSCsegFindCfgExample.py in the glue etc directory.
        
     -f NAME, --local-seg-file=NAME
            Name of a local file with segments with the format "seg-id-number start-time end-time duration"
            The numbers can be separated by any amount of white space.
     
     -p PATH, --curl-path=PATH
            Complete path to the curl (copy URL) utility. The default value used is either that set by the
            environmental variable LSC_SEGFIND_CURL_PATH or "/usr/bin/curl" if this variable is not set.

     --coalesce
            Used only when the --local-seg-file option is used; otherwise coalesces is determined by the
            server or the config file.  If --coalesce is given, the segments in the local segment file
            will be coalesced (in memory only) before using them.
        
     -h, --help
            show short usage message
        
     --help-long
            show long usage message

ENVIRONMENT
     PYTHONPATH: The path with the lib directory which contains LSCsegFind.py must be added to the
                 PYTHONPATH environmental variable.                
 
     LSC_SEGFIND_SERVER: the default server NAME:PORT to use.
     
     LSC_SEGFIND_CURL_PATH: complete path to the curl (copy URL) utility; default is "/usr/bin/curl"

EXAMPLES
 
 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --show-types
                                                                                                                             
  Available types : description
            H1DMT : DMT Science-mode Segments
         H1DMT_CM : DMT Common-mode Segments
            H2DMT : DMT Science-mode Segments
         H2DMT_CM : DMT Common-mode Segments
             M5H1 : Conlog Science-mode Segments
             M5H2 : Conlog Science-mode Segments
             S3H1 : Conlog Science-mode Segments
             S3H2 : Conlog Science-mode Segments
             S3L1 : Conlog Science-mode Segments

 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=H2DMT --gps-start-time=782635107 --gps-end-time=782641908
 782635107 782637268
 782637631 782641908

 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=M5H2 --gps-start-time=782635107 --gps-end-time=782641908
 782635107 782637268
 782637630 782641908

 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=H2DMT --gps-start-time=782635107 --gps-end-time=782641908 --output-format="%i %s %e %d"
 34 782635107 782637268 2161
 59 782637631 782641908 4277

 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=H2DMT --gps-start-time=782635107 --gps-end-time=782641908 --output-format=SCIENCE_SEGMENTS
 <ScienceSegment: id 34, start 782635107, end 782637268, dur 2161, unused 2161>
 <ScienceSegment: id 59, start 782637631, end 782641908, dur 4277, unused 4277>
  
 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=H2DMT --gps-start-time=782635107 --gps-end-time=782641908 --output-format=TCL_LIST
 { { 782635107 782637268 } { 782637631 782641908 } }

 $ LSCsegFind --server=ldas-gridmon.ligo-wa.caltech.edu --type=H2DMT --gps-start-time=782635107 --gps-end-time=782641908 --output-format=PYTHON_LIST
 [[782635107L, 782637268L], [782637631L, 782641908L]]
\
"""
        print >>sys.stdout, msg

################################################################
# MAIN CODE STARTS HERE
#
#

# set defaults
LSC_SEGFIND_SERVER = os.getenv('LSC_SEGFIND_SERVER', None)
server=LSC_SEGFIND_SERVER
startTime = None
endTime = None
segType = None
# 01/19/05 gam; minLength = long(200)
minLength = long(1)
addStart = long(0)
reduceEnd = long(0)
outputFormat = "%s %e"
strict = True
saveFiles = False
cfgFile = None
localSegFile=None
coalesce=False
showTypes = False
LSC_SEGFIND_CURL_PATH = os.getenv('LSC_SEGFIND_CURL_PATH', None)
curlPath = LSC_SEGFIND_CURL_PATH
if curlPath == None:
   curlPath = "/usr/bin/curl" 

# check credentials (currently disabled)
# checkCredentials()
        
# grab command line options
shortop = "r:s:e:t:m:a:d:o:c:f:p:yh"
longop = [
          "help",
          "help-long",
          "server=",
          "gps-start-time=",
          "gps-end-time=",
          "type=",
          "min-length=",
          "add-start=",
          "reduce-end=",
          "output-format=",          
          "strict-off",
          "save-files",
          "local-config-file=",
          "local-seg-file=",
          "curl-path=",
          "coalesce",
          "show-types",
          ]

try:
        opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
        print >>sys.stderr, "Error parsing command line"
        print >>sys.stderr, "Run %s with -h, --help, or --help-long to get help with command line arguments" % sys.argv[0]
        sys.exit(1)

if len(opts) < 1:
        print >>sys.stderr, "Run %s with -h, --help, or --help-long to get help with command line arguments" % sys.argv[0]
        sys.exit(1)

for o, a in opts:
        if o in ("-h", "--help"):
                shortUsage()
                sys.exit(0)
        elif o in ("--help-long",):
                usage()
                sys.exit(0)
        elif o in ("-r", "--server"):
                server = a
        elif o in ("-s", "--gps-start-time"):
                startTime = a
        elif o in ("-e", "--gps-end-time"):
                endTime = a
        elif o in ("-t", "--type"):
                segType = a
        elif o in ("-m", "--min-length"):
                minLength = a
        elif o in ("-a", "--add-start"):
                addStart = a
        elif o in ("-d", "--reduce-end"):
                reduceEnd = a
        elif o in ("-o", "--output-format"):
                outputFormat = a
        elif o in ("--strict-off",):
                strict = False
        elif o in ("--save-files",):
                saveFiles = True
        elif o in ("-c", "--local-config-file"):
                cfgFile = a
        elif o in ("-f", "--local-seg-file"):
                localSegFile = a
        elif o in ("-p", "--curl-path"):
                curlPath = a
        elif o in ("--coalesce",):
                coalesce = True
        elif o in ("-y", "--show-types"):
                showTypes = True

# coalesce used only if localSegFile used
if localSegFile == None:
   coalesce=False

#print server,startTime,endTime,segType,minLength,addStart,reduceEnd,outputFormat,strict,saveFiles,cfgFile,localSegFile,coalesce,showTypes
        
# Initiate the LSCsegFind Class; note that the class does all vetting of parameters.
# 01/19/05 gam; myLSCsegFind = LSCsegFind(server,startTime,endTime,segType,minLength,addStart,reduceEnd,outputFormat,strict,saveFiles,cfgFile,localSegFile,coalesce,showTypes)
myLSCsegFind = LSCsegFind(server,startTime,endTime,segType,minLength,addStart,reduceEnd,outputFormat,strict,saveFiles,cfgFile,localSegFile,coalesce,showTypes,curlPath)

if showTypes:
     # LSCsegFind will have displayed a list of segment types; just continue to exit.
     pass
else:
     # Get the segments; the results are printed to stdout.
     myLSCsegFind.GetSegments()

sys.exit(0)
