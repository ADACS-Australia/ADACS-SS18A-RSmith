#!/usr/bin/python

"""
Client for querying a LSCsegFindServer to find state segments.

Uses pyGlobus and the LSCsegFindClient modules.

$Id$
"""

__version__ = '$Revision$'[11:-2]

import sys
import os
import getopt
import re
import exceptions
from types import *

try:
  from glue import segments
  from glue import LSCsegFindClient
#  from glue import LSCsegFindClient1
  from glue import gsiserverutils
  from glue.lal import LIGOTimeGPS
except ImportError, e:
  print >> sys.stderr, """
Error: unable to import modules from glue.

Check that glue is correctly installed and in your PYTHONPATH.

%s
""" % e
  sys.exit(1)


def usage():
  """
  Print a usage message to stderr.
  """
  msg = """\
NAME
        LSCsegFind

NOTE
        The new test server is running at ldas-cit.ligo.caltech.edu:300156 which is used by default by the client so that a user does not have to specify it.

SYNOPSIS
        LSCsegFind [--server=NAME:PORT] --interferometer=NAME --type=NAME[:version[:only]] 
               --gps-start-time=GPS --gps-end-time=GPS [ --strict-off ] 
               [ --output-format (tcl|python|segwizard) ]

          only=1 means only the requested version should be returned,
          only=0 (default) means that the requested version should be returned on its validity interval
          and the union of all versions should be returned beyond the validity interval of the requested segment list.
          Currently, the query runs faster if the version is provided and only=1.
          If no version is provided, the highest one is returned by default with only=0.
          To find out which versions are available, use --explain-types option described below.

        LSCsegFind [--server=NAME:PORT] --type=All
               --gps-start-time=GPS --gps-end-time=GPS

          A special type 'All' can be used to return all segment types, all versions, all ifos for the given time interval
          The results are returned in the following format:
          ifo name version start end
   
        LSCsegFind [--server=NAME:PORT] --type=NAME[:version[:only]] --run=NAME --interferometer=NAME

          Instead of specifying a time interval, one can specify run name. At the moment this does not work with type=All.

        LSCsegFind [--server=NAME:PORT] --show-interferometers

        LSCsegFind [--server=NAME:PORT] --show-types

        LSCsegFind [--server=NAME:PORT] --explain-types

        LSCsegFind [--server=NAME:PORT] --ping

        LSCsegFind [--server=NAME:PORT] --version

        LSCsegFind [--server=NAME:PORT] --help


DESCRIPTION
        Query a LSCsegFindServer to obtain state vector information from a
        certain instrument and of a particular frame type within a GPS range.

        -v, --version
                Print version information for LSCdsegFind client.

        -i, --interferometer
                Comma separated list of interferometer names. The 
                intersection of segments from each interferometer is
                returned. Use --show-interferometers to see what is 
                available.

        -t, --type  
                Comma separated list of interferometer states. The 
                union of segments from all types specified is 
                returned. Use --show-types to see what is available.
                
                Special type 'All' lists all active segment types for
                the specified time interval in the format:
                ifo segment_type version start end
                Interferomenter option is not used for type 'All'.

        -s, --gps-start-time 
                Start of GPS time range.

        -e, --gps-end-time   
                End of GPS time range.

        -r, --server
                Hostname and optional port of server to query, in the form
                host:port

        -w, --show-interferometers
                List available interferometer names.

        -y, --show-types
                List available segment types.

        -x, --explain-types
                Explain the meanings of available segment types.

        -S, --strict-off
                The default behavior is to truncate segments so that 
                returned segments are entirely in the interval
                [gps-start-time, gps-end-time).  However if this option
                is given, the entire non-truncated segment is returned 
                if any part of it overlaps the interval.               

        -o, --output-format (tcl|python|segwizard)
                Return the segments as a TCL list, a python list or in
                segwizard format. If not specified the default is two 
                space separated columns containing segment start and 
                end times.

        -p, --ping
                Ping the LSCsegFind server.

        -h, --help  
                Show this usage message.

ENVIRONMENT

        LSC_SEGFIND_SERVER can be set to avoid having to use the 
        --server option on the command line. 

EXAMPLES

LSCsegFind --type=All -s `tconvert 10/01/06` -e `tconvert 10/02/06` -r ldas-cit.ligo.caltech.edu:300156
LSCsegFind --type=DARM_09_11_dHz_HIGHTHRESH --run=S5 -i H1 -r ldas-cit.ligo.caltech.edu:300156
LSCsegFind --type=DARM_09_11_dHz_HIGHTHRESH:10:1 --run=S5 -i H1 -r ldas-cit.ligo.caltech.edu:300156
LSCsegFind --type=DARM_09_11_dHz_HIGHTHRESH:10:0 -s 834744360 -e 834744960 -i H1 -r ldas-cit.ligo.caltech.edu:300156
LSCsegFind --explain-types -r ldas-cit.ligo.caltech.edu:300156

"""
  print >>sys.stderr, msg


# grab command line options
shortop = "vi:t:s:e:r:wxySlo:ph:u"
longop = [
  "version",
  "interferometer=",
  "type=",
  "gps-start-time=",
  "gps-end-time=",
  "server=",
  "show-interferometers",
  "show-types",
  "explain-types",
  "loose",
  "lfns",
  "strict-off",
  "ping",
  "output-format=",
  "help" ,
  "run="]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >>sys.stderr, "Error parsing command line"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

# defaults
#### hostPortString = None
#### port = 30015

hostPortString = "ldas-cit.ligo.caltech.edu"
port = 300156

clientMethodArgDict = {
  'interferometer': None,
  'type': None,
  'explain': None,
  'end': None,
  'start': None,
  'lfns': False,
  'strict' : True,
  'run' : None
}

# default method 
clientMethod = 'findStateSegments'
typeString = None
format = None

# environment variables override defaults but not
# command line options
try:
  hostPortString = os.environ['LSC_SEGFIND_SERVER']
except:
  pass

for o, a in opts:
  if o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-v", "--version"):
    print 'LSCsegFind client version', __version__
    import glue.LSCsegFindClient1
    print 'Built on top of LSCsegFindClient version', \
      glue.LSCsegFindClient1.version()
    sys.exit(0)
  elif o in ("-i", "--interferometer"):
    clientMethodArgDict['interferometer'] = a
  elif o in ("-t", "--type"):
    clientMethodArgDict['type'] = a
    if(a=='All'):
      clientMethodArgDict['strict']=False
      clientMethodArgDict['interferometer']='All'
  elif o in ("-s", "--gps-start-time"):
    clientMethodArgDict['start'] = str(LIGOTimeGPS(a).seconds)
  elif o in ("-e", "--gps-end-time"):
    a = LIGOTimeGPS(a)
    if a.nanoseconds:
      clientMethodArgDict['end'] = str(a.seconds + 1)
    else:
      clientMethodArgDict['end'] = str(a.seconds)
  elif o in ("-u","--run"):
    clientMethodArgDict['run']=a
  elif o in ("-r", "--server"):
    hostPortString = a
  elif o in ("-p", "--ping"):
    clientMethod = 'ping'
  elif o in ("-w", "--show-interferometers"):
    clientMethod = 'showInterferometers'
  elif o in ("-y", "--show-types"):
    clientMethod = 'showTypes'
  elif o in ("-y", "--explain-types"):
    clientMethod = 'explainTypes'
  elif o in ("-S", "--strict-off"):
    clientMethodArgDict['strict'] = False
  elif o in ("-o", "--output-format"):
    format = a

if not clientMethod:
  print >>sys.stderr, "Bad combination or missing options"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

# determine server and port
if not hostPortString:
  print >>sys.stderr, "No LSCsegFindServer specified"
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

if hostPortString.find(':') < 0:
  # no port specified
  host = hostPortString
else:
  # server and port specified
  host, portString = hostPortString.split(':')
  port = int(portString)


# open connection to LSCsegFindServer
try:
  myClient = LSCsegFindClient1.LSCsegFind(host, port)

except Exception, e:
  print >>sys.stderr, \
    "Unable to connect to LSCsegFindServer %s:%d" % (host, port)
  if gsiserverutils.checkCredentials():
    print >>sys.stderr, "Got the following error : " + str(e)
    print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)


#print "Before myClient call"
#sys.stdout.flush()

try:
  seglist = eval("myClient.%s(%s)" % (clientMethod, clientMethodArgDict))

#  print "After myClient call, seglist="+str(seglist)
#  sys.stdout.flush()

  if(clientMethodArgDict['type']=='All'):
    keys=seglist.keys()
    keys.sort()
    for k in keys:
      for s in seglist[k]:
        print " ".join(map(str,list(k)+[s[0],s[1]]))
  elif type(seglist) is StringType:
    print seglist
  else:
    if len( seglist ) == 0:
      print >> sys.stderr, "No segments found!"
    else:
      if not format:
        for seg in seglist:
          print seg[0], seg[1]
      elif format == 'segwizard':
        i = 0
        for seg in seglist:
          print i,seg[0],seg[1],abs(seg)
          i += 1
      elif format == 'tcl' or format == 'python':
        if format == 'tcl':
          ldelim = '{ '
          rdelim = ' }'
          cdelim = ' '
        else:
          ldelim = '['
          rdelim = ']'
          cdelim = ', '
        s = seglist.pop(0)
        print ldelim + ldelim + str(s[0]) + cdelim + \
          str(s[1]) + rdelim,
        for seg in seglist:
          print cdelim + ldelim + str(seg[0]) + cdelim + \
            str(seg[1]) + rdelim,
        print rdelim
      else:
        msg = "Error: unknown segment format : %s" % format
        raise LSCsegFindClient1.LSCsegFindException, msg
 
except Exception, e:
  print >>sys.stderr, "Error querying LSCsegFindServer: %s" % str(e)
  print >>sys.stderr, "Enter 'LSCsegFind --help' for usage"
  sys.exit(1)

sys.exit(0)
