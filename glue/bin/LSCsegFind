#!/usr/bin/env python2

"""
Returns GPS segments in an interval from a URL with e.g., science-mode segments
"""
__author__ = "Greg Mendell: returns GPS segments in an interval from a URL with e.g., science-mode segments"
__date__ = '$Date$'
__version__ = '$Revision$'[0:0]

import sys
import os
import getopt
import re
import exceptions
import types
#from pyGlobus import io
#from pyGlobus import security

#PYTHONPATH = os.getenv('PYTHONPATH', None)

try:
        from LSCsegFind import *
except ImportError:
        print >>sys.stderr, "\nPython LSCsegFind.py library not found; please add its location to the PYTHONPATH environmental variable.\n"
        print >>sys.stderr, "For example, from the bash or csh shell respectively, run:\n"
        print >>sys.stderr, "    export PYTHONPATH=$PYTHONPATH:$LSCSOFT/src/glue/lib"
        print >>sys.stderr, "or "
        print >>sys.stderr, "    setenv PYTHONPATH ${PYTHONPATH}:$LSCSOFT/src/glue/lib"
        print >>sys.stderr, "\nwhere $LSCSOFT needs to be replaced with the local directory with software from the lscsoft cvs repository."
        sys.exit(1)
        
def shortUsage():
        """
        Print short usage message to stderr.
        """
        msg = """\
NAME
        LSCsegFind: Returns GPS segments in interval [gps-start-time, gps-end-time)

SYNOPSIS
        LSCsegFind --help
        LSCsegFind --help-long (Use this option for further help)
                
        LSCsegFind --ifo=IFO --gps-start-time=GPS --gps-end-time=GPS [--seg-url=URL] 
        [--config-file=CONFIG_FILE] [--min-length=SEC] [--add-start=SEC] [--reduce-end=SEC]
        [--output-format=STRING] [--seg-type=SEGMENT_TYPE] [--strict-off] [--save-files]
        
        The URL must be given by either the --seg-url option or set in the CONFIG_FILE. 
        The CONFIG_FILE can be specified by the environmental variable LSCSEGFIND_CONFIGFILE.
        IFO can be anything; to use default URLs define urlDefault_IFO = URL in the CONFIG_FILE.

EXAMPLE
        $ LSCsegFind --ifo=H1 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        757842133 757849258
        757874829 757881843
\
"""
        print >>sys.stdout, msg
                
def usage():
        """
        Print long usage message to stderr.
        """
        
        # First print short usage message
        shortUsage()
        
        msg = """\
DESCRIPTION
        -i, --ifo
                Can be anything; if --seg-url is not given then the value of this option
                is used to find the default URLs given as 'urlDefault_IFO = URL' in the
                CONFIG_FILE.  For example, to use '--ifo=H1' to get the default URL for
                'H1' a line in the config file must look like this:
                
                urlDefault_H1 = 'http://blue.ligo-wa.caltech.edu/scirun/S3/LockStatistics/S3segments/S3H1v00_segs.txt'

        -s, --gps-start-time
                Start of GPS time range

        -e, --gps-end-time
                End of GPS time range
        
        -u, --seg-url
                URL to get segments from (can start with http:// or file:// to use a local file)

        -t, --seg-type
                Type of segments (currently unused; the type is determined by the URL)
       
        -c, --config-file
                Note that it is not necessary for a configuration file to exist to run this program,
                but then the URL to get segments from must be specfied on the command line using
                -u or --seg-url. Setting the URL from the command line overrides any URL found in the
                config file. For maximum speed, end the config filename in .py so that python can create
                a .pyc version of it, and add its path to your PYTHONPATH environmental variable. In
                this case, you do NOT need to give the path or the .py extension when specifying the
                config filename. However, config files not in your PYTHONPATH must be specified with
                the complete path and filename. See LSCsegFindCfgExample.py for an example config file
                (run 'echo $PYTHONPATH' to see possible paths to this file). The CONFIG_FILE can also
                be specified by the environmental variable LSCSEGFIND_CONFIGFILE.
        
        -m, --min-length
               minimum duration of output segments in seconds (default = 300).
        
        -a, --add-start
               add this many seconds to output segments start times (default = 0).
        
        -r, --reduce-end
               reduce output segments end times by this many seconds (default = 0).
        
        -o, --output-format
               String that specifies output format. The default is "%s %e" which print
               out 'start-time and end-time', in the format:
                     757842133 757849258
                     757874829 757881843
                     ...
               Other format options are:
                      %i = prints segment id
                      %s = prints segment start time
                      %e = prints segment end time
                      %d = prints segment duration
               For example "%i %s %e %d" prints outputs 'id start-time end-time duration'
                     507 757842133 757849258 7125
                     508 757874829 757881843 7014               
                     ...
               Other characters can be included, but must be space separated for the format options.
               Examples:
                     1. "%s , %e" prints:
                        757842133 , 757849258
                         ...
                     2. "{ %s %e }" prints:
                        { 757842133 757849258 }
                         ...
               In addition to formated output, special values of the format string are:
                    SCIENCE_SEGMENTS = prints segments as objects of the LSC python Class ScienceSegment
                    PYTHON_LIST = prints start times and end times as a python list
                    TCL_LIST = prints start times and end times as a tcl list
                      
        --strict-off
                The default behavior is to truncate segments so that returned segments are
                entirely in the interval [gps-start-time, gps-end-time).  However if this 
                option is given, the entire non-truncated segment is returned if any part
                of it overlaps the interval.               
        
        --save-files
               The default behavior is to remove temporary files after each call. Using this option will keep
               the temporary file LSCsegFindWebPage.txt on disk. The option to automatically reuse and/or
               merge temporary files with new files has not been implemented. However, the current use of
               --save-files does allow one to get a file from a http:// URL the first time, and then to use
               --seg-url=file://LSCsegFindWebPage.txt --save-files to use the local copy on subsequent calls.
                       
        -h, --help
                show short usage message
        --help-long
                show long usage message
ENVIRONMENT
        PYTHONPATH: The path with the lib directory which contains LSCsegFind.py must be added to the
                    PYTHONPATH environmental variable.                
           
        LSCSEGFIND_CONFIGFILE: the default CONFIG_FILE to use. For example, see LSCsegFindCfgExample.py

EXAMPLES
        $ LSCsegFind --ifo=H1 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        757842133 757849258
        757874829 757881843
                
        $ LSCsegFind --ifo=L1 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        --output-format="%i %s %e %d"
        533 757879447 757881848 5354
 
        $ LSCsegFind --ifo=H1 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        --output-format=SCIENCE_SEGMENTS
        <ScienceSegment: id 507, start 757842133, end 757849258, dur 7125, unused 7125>
        <ScienceSegment: id 508, start 757874829, end 757881843, dur 7014, unused 7014>
        
        $ LSCsegFind --ifo=H2 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        --output-format=PYTHON_LIST
        [[757840695L, 757844152L], [757844868L, 757849257L], [757874819L, 757881848L]]
        
        $ LSCsegFind --ifo=H2 --gps-start-time=757838000 --gps-end-time=757881848 --config-file=LSCsegFindCfgExample
        --output-format=TCL_LIST
        { { 757840695 757844152 } { 757844868 757849257 } { 757874819 757881848 } }         
\
"""
        print >>sys.stdout, msg

################################################################
# MAIN CODE STARTS HERE
#
#

# set defaults        
segSourceType = 'url'
ifo = None
startTime = None
endTime = None
segURL = None
segType = None
LSCSEGFIND_CONFIGFILE = os.getenv('LSCSEGFIND_CONFIGFILE', None)
cfgFile = LSCSEGFIND_CONFIGFILE
minLength = long(300)
addStart = long(0)
reduceEnd = long(0)
outputFormat = "%s %e"
strict = True
saveFiles = False

# check credentials (currently disabled)
# checkCredentials()
        
# grab command line options
shortop = "i:s:e:u:t:c:m:a:r:o:h"
longop = [
          "help",
          "help-long",
          "ifo=",
          "gps-start-time=",
          "gps-end-time=",
          "seg-url=",
          "seg-type=",
          "config-file=",
          "min-length=",
          "add-start=",
          "reduce-end=",
          "output-format=",          
          "strict-off",
          "save-files",
          ]

try:
        opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
        print >>sys.stderr, "Error parsing command line"
        print >>sys.stderr, "Run %s with -h, --help, or --help-long to get help with command line arguments" % sys.argv[0]
        sys.exit(1)

if len(opts) < 1:
        print >>sys.stderr, "Run %s with -h, --help, or --help-long to get help with command line arguments" % sys.argv[0]
        sys.exit(1)

for o, a in opts:
        if o in ("-h", "--help"):
                shortUsage()
                sys.exit(0)
        elif o in ("--help-long",):
                usage()
                sys.exit(0)                
        elif o in ("-i", "--ifo"):
                ifo = a
        elif o in ("-s", "--gps-start-time"):
                startTime = a
        elif o in ("-e", "--gps-end-time"):
                endTime = a
        elif o in ("-u", "--seg-url"):
                segURL = a                
        elif o in ("-t", "--seg-type"):
                segType = a
        elif o in ("-c", "--config-file"):
                cfgFile = a
        elif o in ("-m", "--min-length"):
                minLength = a
        elif o in ("-a", "--add-start"):
                addStart = a
        elif o in ("-r", "--reduce-end"):
                reduceEnd = a
        elif o in ("-o", "--output-format"):
                outputFormat = a
        elif o in ("--strict-off",):
                strict = False
        elif o in ("--save-files",):
                saveFiles = True
                                
#print segSourceType,ifo,startTime,endTime,segURL,segType,cfgFile,minLength,addStart,reduceEnd,outputFormat,strict,saveFiles

# Initiate the LSCsegFind Class; note that the class does all vetting of parameters.
myLSCsegFind = LSCsegFind(segSourceType,ifo,startTime,endTime,segURL,segType,cfgFile,minLength,addStart,reduceEnd,outputFormat,strict,saveFiles)

# Get the segments; the results are printed to stdout.
myLSCsegFind.GetSegments()

sys.exit(0)

