#!/usr/bin/env python
#
# $Id$
#
# Copyright (C) 2009  Larne Pekowsky
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Takes one or more segment XML files and file of GPS times, and prints a list of
DQ flags active at each of those times.
"""


from optparse import OptionParser

try:
    import sqlite3
except ImportError:
    # pre 2.5.x
    from pysqlite2 import dbapi2 as sqlite3

import sys
import os

import glue.segments

from glue.ligolw.utils import ligolw_sqlite
from glue.ligolw.utils import ligolw_add
from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue.ligolw import utils
from glue.ligolw import dbtables
from glue.segmentdb import segmentdb_utils


PROGRAM_NAME = sys.argv[0].replace('./','')
PROGRAM_PID  = os.getpid()
USER_NAME    = os.getlogin()



__author__ = "Larne Pekowsky <lppekows@physics.syr.edu>"
__date__ = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
    """
    Parse the command line, return an options object
    """

    parser = OptionParser(
        version = "%prog CVS $Header$",
        usage   = "%prog -v|--veto-file filename [options]",
        description = "Reads one or more segment files and a veto file and generates files of veto segments"        
	)
    
    parser.add_option("-i", "--input-dir",    metavar = "input_dir",    default = '.',      help = "Directory containing segment XML files (default=cwd). It can be either one level or two levels above the actual .xml files. For example, --input-dir=/dmt/triggers/DQ_Segments, or --input-dir=/dmt/triggers/DQ_Segments/H-DQ_Segments-9247/")
    parser.add_option("-m", "--temp-dir",     metavar = "temp_dir",     default = '/tmp',   help = "Directory for temporary files (default=/tmp).")
    parser.add_option("-o", "--ifo",          metavar = "ifo",          help = "IFO to look at (required).")
    parser.add_option("-t", "--time-file",    metavar = "time_file",    help = "File containing GPS times of interest (one per line) (required).")
    parser.add_option("-x", "--keep-xml",     metavar = "keep_xml",     action  = "store_true", help = "Keep temporary XML file.")
    parser.add_option("-d", "--keep-db",      metavar = "keep_db",      action  = "store_true", help = "Keep sqlite database.")
                      
    options, others = parser.parse_args()
    
    if not options.ifo:
        raise ValueError, "missing required argument --ifo"

    if not options.time_file:
        raise ValueError, "missing required argument --time-file"

    return options




#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

if __name__ == '__main__':
    options      = parse_command_line()    

    # TODO: These should have better names that include the
    # start and end times
    temp_db    = options.temp_dir + '/temp.db'
    target     = dbtables.get_connection_filename(temp_db, None, True, False)
    connection = ligolw_sqlite.setup(target)


    f = open(options.time_file)
    time_from_file = []
    xml_files = []
    for line in f:
      if line.startswith('#') or len(line.strip(' \t\n\r')) == 0 :
            continue
      gps_time = int(line)
      xml_files += segmentdb_utils.get_all_files_in_range(options.input_dir, gps_time, gps_time)

      time_from_file.append(gps_time) # collect times for later use
    # populcate local sqlite database
    ligolw_sqlite.insert(connection, xml_files)


    # retrieve active segment type for each time in the time_file
    cursor = connection.cursor()
    for t in time_from_file:
        print t,

        cursor.execute("""
             SELECT DISTINCT(segment_definer.name)
             FROM segment, segment_definer
             WHERE segment.segment_def_id = segment_definer.segment_def_id
               AND segment_definer.ifos = ?
               AND ? BETWEEN segment.start_time AND segment.end_time
               """,(options.ifo, t))

        for row in cursor:
            print ( '\t%s' % row[0] ),

        print


    if not options.keep_db:
        os.remove(temp_db)

        
