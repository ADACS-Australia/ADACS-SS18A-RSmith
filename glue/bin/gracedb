#!/usr/bin/env python

import httplib, mimetypes, urllib
import socket
import os, sys

DEFAULT_SERVICE_URL = "https://archie.phys.uwm.edu/gracedb/cli"

#-----------------------------------------------------------------
# Util routines

def error(*message):
    message = "".join(message) + "\n"
    sys.stderr.write("ERROR: " + message)

def warning(*message):
    message = "".join(message) + "\n"
    sys.stderr.write("WARNING: " + message)

def output(*message):
    message = "".join(message) + "\n"
    sys.stdout.write(message)

#-----------------------------------------------------------------
# HTTP/S Proxy classses
# Taken from: http://code.activestate.com/recipes/456195/

class ProxyHTTPConnection(httplib.HTTPConnection):

    _ports = {'http' : 80, 'https' : 443}

    def request(self, method, url, body=None, headers={}):
        #request is called before connect, so can interpret url and get
        #real host/port to be used to make CONNECT request to proxy
        proto, rest = urllib.splittype(url)
        if proto is None:
            raise ValueError, "unknown URL type: %s" % url
        #get host
        host, rest = urllib.splithost(rest)
        #try to get port
        host, port = urllib.splitport(host)
        #if port is not defined try to get from proto
        if port is None:
            try:
                port = self._ports[proto]
            except KeyError:
                raise ValueError, "unknown protocol for: %s" % url
        self._real_host = host
        self._real_port = port
        httplib.HTTPConnection.request(self, method, url, body, headers)
        

    def connect(self):
        httplib.HTTPConnection.connect(self)
        #send proxy CONNECT request
        self.send("CONNECT %s:%d HTTP/1.0\r\n\r\n" % (self._real_host, self._real_port))
        #expect a HTTP/1.0 200 Connection established
        response = self.response_class(self.sock, strict=self.strict, method=self._method)
        (version, code, message) = response._read_status()
        #probably here we can handle auth requests...
        if code != 200:
            #proxy returned and error, abort connection, and raise exception
            self.close()
            raise socket.error, "Proxy connection failed: %d %s" % (code, message.strip())
        #eat up header block from proxy....
        while True:
            #should not use directly fp probablu
            line = response.fp.readline()
            if line == '\r\n': break


class ProxyHTTPSConnection(ProxyHTTPConnection):
    
    default_port = 443

    def __init__(self, host, port = None, key_file = None, cert_file = None, strict = None):
        ProxyHTTPConnection.__init__(self, host, port)
        self.key_file = key_file
        self.cert_file = cert_file
    
    def connect(self):
        ProxyHTTPConnection.connect(self)
        #make the sock ssl-aware
        ssl = socket.ssl(self.sock, self.key_file, self.cert_file)
        self.sock = httplib.FakeSocket(self.sock, ssl)

#-----------------------------------------------------------------
# HTTP upload encoding

typeCodeMap = {
        "LowMass" : "LM",
        "HighMass" : "HM",
        "GRB"      : "GRB",
        "Ringdown" : "RD",
        "Omega"    : "OM",
        "Q"        : "Q",
        "X"        : "X",
        "CWB"      : "CWB",
        "MBTAOnline": "MBTA",
}
validTypes = typeCodeMap.keys()

def post_multipart(h, selector, fields, files):
    """
    Post fields and files to an http host as multipart/form-data.
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return the server's response page.
    """
    content_type, body = encode_multipart_formdata(fields, files)
    #h = httplib.HTTP(host)
    h.putrequest('POST', selector)
    h.putheader('content-type', content_type)
    h.putheader('content-length', str(len(body)))
    h.endheaders()
    h.send(body)
    errcode, errmsg, headers = h.getreply()
    return h.file.read()

def encode_multipart_formdata(fields, files):
    """
    fields is a sequence of (name, value) elements for regular form fields.
    files is a sequence of (name, filename, value) elements for data to be uploaded as files
    Return (content_type, body) ready for httplib.HTTP instance
    """
    BOUNDARY = '----------ThIs_Is_tHe_bouNdaRY_$'
    CRLF = '\r\n'
    L = []
    for (key, value) in fields:
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="%s"' % key)
        L.append('')
        L.append(value)
    for (key, filename, value) in files:
        L.append('--' + BOUNDARY)
        L.append('Content-Disposition: form-data; name="%s"; filename="%s"' % (key, filename))
        L.append('Content-Type: %s' % get_content_type(filename))
        L.append('')
        L.append(value)
    L.append('--' + BOUNDARY + '--')
    L.append('')
    body = CRLF.join(L)
    content_type = 'multipart/form-data; boundary=%s' % BOUNDARY
    return content_type, body

def get_content_type(filename):
    return mimetypes.guess_type(filename)[0] or 'application/octet-stream'

#-----------------------------------------------------------------
# X509 Credentials

def checkProxy(fname):
    """Check to see if this is a pre-RFC proxy.
       Not sure if this is valid in all cases, but it works at
       least sometimes and is better than giving the user a
       "broken pipe" error message.

       Do one of three things:

         (1) If a check cannot be done because the M2Crypto lib is not
             available, say so.

         (2) If it is a RFC 3820 compliant proxy, say and do nothing.

         (3) Otherwise issue a warning.
       """
    try:
        import M2Crypto
        cert = M2Crypto.X509.load_cert(fname)
        try:
            cert.get_ext('proxyCertInfo')
        except LookupError:
            # Really, there shouldn't be an undefined extension.
            warning("Warning: You seem to be using a pre-RFC proxy.\n"
                    "Try doing grid-proxy-init -rfc")
    except ImportError:
        warning("Warning: Cannot load M2Crypto.  Not able to check proxy\n"
                "   If you are getting errors, perhaps you are not using\n"
                '   an RFC compliant proxy.  Did you do "grid-proxy-init -rfc"?\n'
                "To enable proxy checking, install m2crypto (CentOS, RedHat),\n"
                "python-m2crypto (Debian) or py25-m2crypto (MacPorts)")

def findUserCredentials(warnOnOldProxy=1):

    proxyFile = os.environ.get('X509_USER_PROXY')
    certFile = os.environ.get('X509_USER_CERT')
    keyFile = os.environ.get('X509_USER_KEY')

    if proxyFile:
        if warnOnOldProxy:
            checkProxy(proxyFile)
        return proxyFile, proxyFile

    if certFile and keyFile:
        return certFile, keyFile

    # Try default proxy
    proxyFile = os.path.join('/tmp', "x509up_u%d" % os.getuid())
    if os.path.exists(proxyFile):
        if warnOnOldProxy:
            checkProxy(proxyFile)
        return proxyFile, proxyFile

    # Try default cert/key
    homeDir = os.environ.get('HOME')
    certFile = os.path.join(homeDir, '.globus', 'usercert.pem')
    keyFile = os.path.join(homeDir, '.globus', 'keycert.pem')

    if os.path.exists(certFile) and os.path.exists(keyFile):
        return certFile, keyFile

#-----------------------------------------------------------------
# Web Service Client

class Client:
    def __init__(self, url, proxy_host=None, proxy_port=3128):
        cred = findUserCredentials(warnOnOldProxy=0)
        if not cred:
            raise Exception("No credentials found")
        cert, key = cred
        if proxy_host:
            self.conn = ProxyHTTPSConnection(proxy_host, proxy_port,
                                             key_file=key, cert_file=cert)
        else:
            proto, rest = urllib.splittype(url)
            if proto is None:
                raise ValueError, "unknown URL type: %s" % url
            #get host
            host, rest = urllib.splithost(rest)
            #try to get port
            host, port = urllib.splitport(host)
            port = port or 443
            self.conn = httplib.HTTPSConnection(host, port,
                                                key_file=key, cert_file=cert)
        self.url = url

    def send(self, method, httpmethod="POST", **kw):
        try:
            kw['cli'] = 'true'
            kw['cli_version'] = "1"
            kw = urllib.urlencode(kw)
            headers = {'connection' : 'keep-alive'}
            url = "%s/%s" % (self.url, method)
            self.conn.request(httpmethod, url, kw, headers)
            response = self.conn.getresponse()
            rv = response.read()
        except Exception, e:
            return { 'error':  "client send exception: " + str(e) }
        # XXX Bad!  Should be JSON conversion
        try:
            return eval(rv)
        except Exception, e:
            if "Authorization Required" in rv:
                return { 'error': 'Credentials not accepted' }
            return {'error': "while parsing:%s\nclient send exception: %s" % (rv, str(e))}

    def upload(self, method, fields, files):
        # Do an tiny GET request to get SSL primed.
        # Large initial SSL/POST requests will choke the server.
        r = self.send('ping', 'POST', ack='priming')
        if 'error' in r and r['error']:
            return r
        try:
            fields += [('cli', 'true')]
            fields += [('cli_version', "1")]
            content_type, body = encode_multipart_formdata(fields, files)
            headers = {
                'content-type': content_type,
                'content-length': str(len(body)),
                'connection': 'keep-alive',
            }
            url = "%s/%s" % (self.url, method)
            self.conn.request("POST", url, body, headers)
            response = self.conn.getresponse()
            rv = response.read()
        except Exception, e:
            return { "error" : "client upload exception: " + str(e) }
        # XXX should be JSON conversion
        try:
            return eval(rv)
        except Exception, e:
            return {'error': "while parsing:%s\nclient upload exception: %s" % (rv, str(e))}

#-----------------------------------------------------------------
# Main 


def main():
    usage ="""%%prog [options] GROUP TYPE EVENTFILE
   where GROUP is one of %(groups)s
         TYPE is one of %(types)s
         EVENTFILE is file containing event data. '-' indicates stdin.

%%prog [options] ping
   Test server connection

%%prog [options] upload GRACEID FILE [COMMENT]
   where GRACEID is the id of an existing candidate event in GraCEDb
         FILE    is the name of the file to upload. '-' indicates stdin.
         COMMENT is an optional annotation to enter into the log
   Upload FILE to the private data area for a candidate event

%%prog [options] log GRACEID COMMENT
   where GRACEID  is the id of an existing candidate event in GraCEDb
         COMMENT  is text that will be entered into the event's log
   Enter a comment into the log for a candidate event

%%prog [options] label GRACEID LABEL
    Label event with GRACEDID with LABEL.  LABEL must already exist.

Environment Variables (can all be overridden by options):
    GRACEDB_SERVICE_URL
    HTTP_PROXY              

Note that comments can only be 200 characters long.
Longer strings will be truncated.""" % {
        'groups' : 'CBC, Burst, Stochastic, CW',
        'types'  : ", ".join(validTypes),
    }

    from optparse import OptionParser
    op = OptionParser(usage=usage)
    op.add_option("-p", "--proxy", dest="proxy",
                  help="HTTP Proxy", metavar="PROXY[:PORT]")
    op.add_option("-s", "--service-url", dest="service",
                  help="GraCEDb Service URL", metavar="URL")
    op.add_option("-f", "--filename", dest="filename",
                  help="If data is read from stdin, use this as the filename.", metavar="NAME")

    options, args = op.parse_args()

    proxy = options.proxy or os.environ.get('HTTP_PROXY', None)
    service = options.service or \
              os.environ.get('GRACEDB_SERVICE_URL', None) or \
              DEFAULT_SERVICE_URL

    proxyport = None
    if proxy and proxy.find(':') > 0:
        try:
            proxy, proxyport = proxy.split(':')
            proxyport = int(proxyport)
        except:
            op.error("Malformed proxy: '%s'" % proxy)
    if proxyport:
        client = Client(service,
                        proxy_host=proxy,
                        proxy_port=proxyport)
    else:
        client = Client(service, proxy_host=proxy)

    if len(args) < 1:
        op.error("not enough arguments")
    elif args[0] == 'ping':
        msg = " ".join(args[1:]) or "PING"
        response = client.send('ping', ack=msg)
    elif args[0] == 'upload':
        if len(args) < 3:
            op.error("not enough arguments for upload")
        graceid = args[1]
        filename = args[2]
        if len(args) >= 4:
            comment = " ".join(args[3:])
        else:
            comment = ""
        fields = [ ('graceid', graceid), ('comment', comment) ]
        if filename == '-':
            filename = options.filename or 'uploaded.data'
            files = [ ('upload', filename, sys.stdin.read()) ]
        else:
            files = [ ('upload', filename, open(filename,'r').read()) ]
        response = client.upload('upload', fields, files)
    elif args[0] == 'log':
        if len(args) < 3:
            op.error("not enough arguments for log")
        graceid = args[1]
        message = " ".join(args[2:])
        response = client.send('log', graceid=graceid, message=message)
    elif args[0] == 'tag':
        if len(args) != 3:
            op.error("wrong number of arguments for tag")
        graceid = args[1]
        tag = args[2]
        response = client.send('tag', graceid=graceid, tag=tag)
    elif args[0] == 'label':
        if len(args) != 3:
            op.error("wrong number of arguments for label")
        graceid = args[1]
        label = args[2]
        response = client.send('label', graceid=graceid, label=label)
    elif len(args) == 3:
        group = args[0]
        type = args[1]
        filename = args[2]

        if type in typeCodeMap:
            type = typeCodeMap[type]
        else:
            error("Type must be one of: ", ", ".join(typeCodeMap.keys()))
            sys.exit(1)

        fields = [
                  ('group', group),
                  ('type', type),
                 ]
        if filename == '-':
            filename = options.filename or 'initial.data'
            files = [('eventFile', filename, sys.stdin.read())]
        else:
            files = [('eventFile', filename, open(filename, 'r').read())]

        response = client.upload("create", fields, files)

        if not response:
            error("There was a problem.  Did you do grid-proxy-init -rfc?")
            sys.exit(1)
    else:
        op.error("")
        sys.exit(1)

    # Output the response.

    exitCode = 0
    if ('error' in response) and response['error']:
        error(response['error'])
        exitCode = 1
    if ('warning' in response) and response['warning']:
        warning(response['warning'])
    if ('output' in response) and response['output']:
        output(response['output'])

    return exitCode

if __name__ == "__main__":
    try:
        code = main()
    except Exception, e:
        error(str(e))
        sys.exit(1)
    sys.exit(code)
