#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2007  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 3 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Transfer table data between LIGO Light Weight XML files and SQLite
databases.
"""


from optparse import OptionParser
try:
	import sqlite3
except ImportError:
	# pre 2.5.x
	from pysqlite2 import dbapi2 as sqlite3
import sys


from glue.lal import CacheEntry
from glue.ligolw import ligolw
from glue.ligolw import dbtables
from glue.ligolw import utils
from glue.ligolw.utils import ligolw_add


# so they can be inserted into a database
dbtables.ligolwtypes.ToPyType["ilwd:char"] = unicode


# FIXME: remove this hack when the SnglInspiralTable class uses the
# standard ID generator by default.
dbtables.lsctables.SnglInspiralTable.next_id = dbtables.lsctables.SnglInspiralID(0)


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__date__ = "$Date$"[7:-2]
__version__ = "$Revision$"[11:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	"""
	Parse the command line, return an options object and a list of file
	names.
	"""
	parser = OptionParser(
		version = "%prog CVS $Id$",
		usage = "%prog -d|--database filename [options] [url ...]",
		description = "Transfers data between LIGO Light Weight XML files and SQLite database files.  The contents of the XML documents listed on the command line will be inserted, in order, into the SQLite database file identified by the --database argument.  If the database exists the contents of the XML documents will be added to it, otherwise a new database file is created.  If --extract is given on the command line, then the database contents will be converted to XML and written to the file named by this argument.  The input XML documents can be regular files or many common URLs such as ftp:// and http://.  If no input documents are named then input is read from stdin unless --extract is given in which case the datase contents are extracted to XML without reading any input documents.  Input XML documents ending in .gz will be gzip-decompressed while being read, and if the file named by --extract ends in .gz then it will be gzip-compressed when written."
	)
	parser.add_option("-d", "--database", metavar = "filename", help = "Set the name of the SQLite3 database file (required).")
	parser.add_option("-i", "--input-cache", metavar = "filename", action = "append", default = [], help = "Get the names of XML documents to insert into the database from this LAL cache.  This option can be given multiple times, and all files from all caches will be loaded.")
	parser.add_option("-p", "--preserve-ids", action = "store_true", help = "Preserve row IDs from the XML in the database.  The default is to assign new IDs to prevent collisisions.  Inserts will fail if collisions occur.")
	parser.add_option("-r", "--replace", action = "store_true", help = "If the database file already exists, over-write it instead of inserting into it.")
	parser.add_option("-t", "--tmp-space", metavar = "path", help = "Path to a directory suitable for use as a work area while manipulating the database file.  The database file will be worked on in this directory, and then moved to the final location when complete.  This option is intended to improve performance when running in a networked environment, where there might be a local disk with higher bandwidth than is available to the filesystem on which the final output will reside.")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	parser.add_option("-x", "--extract", metavar = "filename", default = None, help = "Extract database contents to the given XML file, \"-\" == stdout (use \"./-\" if you want to write to a file named \"-\").  Extraction is done after any inserts.")
	options, urls = parser.parse_args()

	urls += [CacheEntry(line).url for cache in options.input_cache for line in file(cache)]

	if not options.database:
		raise ValueError, "missing required argument --database"

	return options, (urls or [None])


#
# =============================================================================
#
#                                 Library Code
#
# =============================================================================
#


#
# How to insert
#


def insert(connection, urls, preserve_ids = True, verbose = False):
	"""
	Iterate over a sequence of URLs and parse and insert each one into
	the database the dbtables.DBTable class is currently connected to.
	"""
	if not preserve_ids:
		# enable ID remapping
		dbtables.idmap_create(connection)
		dbtables.DBTable.append = dbtables.DBTable._remapping_append
	for n, url in enumerate(urls):
		# load document (if enabled, row IDs are reassigned on
		# input)
		if verbose:
			print >>sys.stderr, "%d/%d:" % (n + 1, len(urls)),
		doc = utils.load_url(url, verbose = verbose, gz = (url or "stdin").endswith(".gz"))

		# update references to row IDs
		if not preserve_ids:
			table_elems = doc.getElementsByTagName(ligolw.Table.tagName)
			for i, tbl in enumerate(table_elems):
				if verbose:
					print >>sys.stderr, "updating IDs: %d%%\r" % (100 * i / len(table_elems)),
				tbl.applyKeyMapping()
			if verbose:
				print >>sys.stderr, "updating IDs: 100%"

			# reset ID mapping for next document
			dbtables.idmap_reset(connection)

		# delete cursors
		doc.unlink()
	connection.commit()


#
# How to extract
#


def extract(connection, filename, verbose = False):
	xmldoc = ligolw.Document()
	xmldoc.appendChild(dbtables.DBTable_get_xml(connection))
	utils.write_filename(xmldoc, filename, gz = (filename or "stdout").endswith(".gz"), verbose = verbose)

	# delete cursors
	xmldoc.unlink()


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


#
# Command line
#


options, urls = parse_command_line()


will_write_to_file = (options.extract is None) or (urls != [None])
will_replace_file = will_write_to_file and options.replace
will_use_tmp_space = will_write_to_file and (options.tmp_space is not None)


#
# Open database
#


target = dbtables.get_connection_filename(options.database, tmp_path = (will_use_tmp_space or None) and options.tmp_space, replace_file = will_replace_file, verbose = options.verbose)

connection = sqlite3.connect(target)
dbtables.DBTable_set_connection(connection)


#
# Synchronize ID generators with table contents
#


for tbl in dbtables.DBTable_get_xml(connection).getElementsByTagName(ligolw.Table.tagName):
	tbl.sync_next_id()


#
# Insert files
#


if (options.extract is None) or (urls != [None]):
	insert(connection, urls, preserve_ids = options.preserve_ids, verbose = options.verbose)

	#
	# construct indexes
	#

	dbtables.build_indexes(connection, verbose = options.verbose)


#
# Extract database contents
#


if options.extract is not None:
	if options.extract == "-":
		# stdout
		options.extract = None
	extract(connection, options.extract, verbose = options.verbose)


#
# Close database
#


connection.close()


#
# Move database to final location
#


dbtables.put_connection_filename(options.database, target, verbose = options.verbose)


if options.verbose:
	print >>sys.stderr, "done."
