#!/usr/bin/env python
# Copyright (C) 2010  Nickolas Fotopoulos, Peter F. Couvares
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

import cStringIO
import sys
import optparse
import os

from glue import iterutils
from glue.ligolw import table
from glue.ligolw import utils
from glue.ligolw import lsctables

def strip_process(xmldoc):
    """
    Remove the process table from an XML document.
    """
    try:
      process = table.get_table(xmldoc, lsctables.ProcessTable.tableName)
    except ValueError:
      pass
    else:  # only executed if table extraction is successful
      ligolw_elem = xmldoc.childNodes[0]
      ligolw_elem.removeChild(process)

def strip_searchsummary(xmldoc):
    """
    Remove the search_summary table from an XML document.
    """
    try:
      search_summary = table.get_table(xmldoc, lsctables.SearchSummaryTable.tableName)
    except ValueError:
      pass
    else:  # only executed if table extraction is successful
      ligolw_elem = xmldoc.childNodes[0]
      ligolw_elem.removeChild(search_summary)

def strip_process_params(xmldoc, param_names):
    """
    Remove particular rows in the process_params table. Use the full
    --option-name.
    """
    try:
      pparams = table.get_table(xmldoc, lsctables.ProcessParamsTable.tableName)
    except ValueError:
      pass
    else:  # only executed if table extraction is successful
      iterutils.inplace_filter(lambda p: p.param not in param_names, pparams)

def strip_searchsummary_cols(xmldoc, col_names):
    """
    Equalize particular columns in the search_summary table.
    """
    try:
      ssummary = table.get_table(xmldoc, lsctables.SearchSummaryTable.tableName)
    except ValueError:
      pass
    else:  # only executed if table extraction is successful
      # TODO: use col_names, and set for all rows
      ssummary.getColumnByName('lalwrapper_cvs_tag')[0] = u''
      ssummary.getColumnByName('lal_cvs_tag')[0] = u''

# parse command line
usage = "Usage: %s doc1.xml doc2.xml" % sys.argv[0]

parser = optparse.OptionParser(usage=usage)
parser.add_option("--ignore-process-table", action="store_true", default=False,
    help="Ignore the process table in comparing files")
parser.add_option("--ignore-searchsummary-table", action="store_true", default=False,
    help="Ignore the searchsummary table in comparing files")
parser.add_option("--ignore-process-params", metavar="CSV_LIST",
    help="Ignore process_param table entries in CSV_LIST; "\
    "omit leading hyphens.")
parser.add_option("--ignore-searchsummary-cols", metavar="CSV_LIST",
    help="Ignore search_summary table columns in CSV_LIST; "\
    "omit leading hyphens.")

opts, args = parser.parse_args()
if len(args) != 2:
    print >>sys.stderr, "Error: require exactly two arguments"
    print usage
    sys.exit(2)

filename1, filename2 = args
if not os.path.exists(filename1):
    print >>sys.stderr, "Error: %s does not exist" % filename
    sys.exit(2)
if not os.path.exists(filename2):
    print >>sys.stderr, "Error: %s does not exist" % filename
    sys.exit(2)

# parse document
xmldoc1 = utils.load_filename(filename1)
xmldoc2 = utils.load_filename(filename2)

# strip process tables
if opts.ignore_process_table:
    strip_process(xmldoc1)
    strip_process(xmldoc2)

# strip search_summary tables
if opts.ignore_searchsummary_table:
    strip_searchsummary(xmldoc1)
    strip_searchsummary(xmldoc2)

# strip elements of the process_params table that contain input paths
if opts.ignore_process_params is not None:
    # split params and reattach the leading --
    params = ["--" + p for p in opts.ignore_process_params.split(",")]
    strip_process_params(xmldoc1, params)
    strip_process_params(xmldoc2, params)

# equalize given columns of the search_summary table
if opts.ignore_searchsummary_cols is not None:
    # split params and reattach the leading --
    params = opts.ignore_searchsummary_cols.split(",")
    strip_searchsummary_cols(xmldoc1, params)
    strip_searchsummary_cols(xmldoc2, params)

# compare string representations
strio1 = cStringIO.StringIO()
strio2 = cStringIO.StringIO()
utils.write_fileobj(xmldoc1, strio1)
del xmldoc1
utils.write_fileobj(xmldoc2, strio2)
del xmldoc2

# exit with error code 0 if documents are identical, 1 if different
sys.exit(abs(cmp(strio1.getvalue(), strio2.getvalue())))
