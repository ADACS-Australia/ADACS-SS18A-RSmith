#!/usr/bin/python

import os
import re
import sys
import getopt
import popen2
import glob
from types import *
from glue import statedb

filepat = re.compile(r'^[A-Za-z]+\-\w+\-(\d+)\-(\d+)\..+')

run = None
version = None
frsvpath = '/ligotools/bin/FrStateFetcher'
usesegnum = False

shortop = "r:v:f:s"
longop = [
  "run=",
  "version=",
  "fetcher=",
  "use-segnum"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum " \
      "--fetcher [PROG] PATH1, PATH2, ..." % sys.argv[0]
  sys.exit( 1 )

for o, a in opts:
  if o in ("-r", "--run"):
    run = a
  elif o in ("-v", "--version"):
    version = int(a)
  elif o in ("-f", "--fetcher"):
    file = a
  elif o in ("-s", "--use-segnum"):
    usesegnum = True

if not run or not version:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum " \
      "--fetcher [PROG] PATH1, PATH2, ..." % sys.argv[0]
  sys.exit( 1 )

if segnum:
  print >> sys.stderr, "--use-segnum not yet supported"
  sys.exit( 1 )
else:
  segpat = re.compile(r'^(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s([A-Z][0-9]+)\s(.+)')
  segnum = None

sdb = statedb.StateSegmentDatabase(run,'segment')

for dirpath in args:
  if not os.path.isdir( dirpath ):
    print >> sys.stderr, "Warning: %s is not a directory" % sys.argv[1]
    continue
  
  print "globbing for files in %s" % dirpath
  framefiles = glob.glob(os.path.join(dirpath,'*.gwf'))

  for framefile in framefiles:
    print "publishing state information from %s " % framefile,
    sys.stdout.flush()
  
    lfn = os.path.basename(framefile)
    gpstime = filepat.search(lfn).groups()
    lfn_start = int(gpstime[0])
    lfn_end = lfn_start + int(gpstime[1])
  
    try:
      sdb.register_lfn(lfn,lfn_start,lfn_end)
    except statedb.StateSegmentDatabaseLFNExistsException:
      pass
    
    sv = popen2.Popen3(frsvpath + " " + framefile)
    sv.tochild.close()
    r = sv.wait()
    if r:
      print >> sys.stderr, "FrStateFetcher failed: %s" % sv.childerr.readlines()
      sys.exit( 1 )
    segdata = sv.fromchild.readlines()
    del sv
  
    for segdatum in segdata:
      segmatch = segpat.search(segdatum).groups()
      start = int(segmatch[0])
      start_nano = int(segmatch[1])
      end = int(segmatch[2])
      end_nano = int(segmatch[3])
      sv = int(segmatch[4])
      ifo = str(segmatch[6])
  
      try:
        sdb.publish_state(ifo,start,start_nano,end,end_nano,version,sv,segnum)
        print ".",
      except statedb.StateSegmentDatabaseSegmentExistsException:
        print "x",
      
    print "done"
  
sdb.close()
sys.exit(0)
