#!/usr/bin/python
#
# This program is part of the Grid LSC User Environment (GLUE)
# 
# GLUE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import re
import sys
import getopt
import popen2
import glob
from types import *
from glue import statedb

filepat = re.compile(r'^[A-Za-z]+\-\w+\-(\d+)\-(\d+)\..+')

## Define statevector-specific bits
ligo_science_bits = 0xFFFF
ligo_injection_bits = 0x0400
geo_science_bits = 0x0

frsvpath = '/ligotools/bin/FrStateFetcher'

run = None
version = None
dbname = None
usesegnum = False

shortop = "r:v:f:d:s"
longop = [
  "run=",
  "version=",
  "fetcher=",
  "database=",
  "use-segnum"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum " \
      "--fetcher [PROG] --database [DBNAME] PATH1, PATH2, ..." % sys.argv[0]
  sys.exit( 1 )

for o, a in opts:
  if o in ("-r", "--run"):
    run = a
  elif o in ("-v", "--version"):
    version = int(a)
  elif o in ("-f", "--fetcher"):
    frsvpath = a
  elif o in ("-d", "--database"):
    dbname = a
  elif o in ("-s", "--use-segnum"):
    usesegnum = True

if not run or not version or not dbname:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum " \
      "--fetcher [PROG] --database [DBNAME] PATH1, PATH2, ..." % sys.argv[0]
  sys.exit( 1 )

if usesegnum:
  segpat = re.compile(r'^(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\-\d+)\s([A-Z][0-9]+)\s(.+)')
else:
  segpat = re.compile(r'^(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\-\d+)\s([A-Z][0-9]+)\s(.+)')

sdb = statedb.StateSegmentDatabase(run,dbname)

for dirpath in args:
  if not os.path.isdir( dirpath ):
    print >> sys.stderr, "Warning: %s is not a directory" % sys.argv[1]
    continue
  
  print "globbing for files in %s" % dirpath
  framefiles = glob.glob(os.path.join(dirpath,'*.gwf'))

  for framefile in framefiles:
    print "publishing state information from %s " % framefile,
    sys.stdout.flush()
  
    lfn = os.path.basename(framefile)
    gpstime = filepat.search(lfn).groups()
    lfn_start = int(gpstime[0])
    lfn_end = lfn_start + int(gpstime[1])
  
    try:
      sdb.register_lfn(lfn,lfn_start,lfn_end)
    except statedb.StateSegmentDatabaseLFNExistsException:
      pass
    
    sv = popen2.Popen3(frsvpath + " " + framefile)
    sv.tochild.close()
    r = sv.wait()
    if r:
      print >> sys.stderr, "FrStateFetcher failed: %s" % sv.childerr.readlines()
      sys.exit( 1 )
    segdata = sv.fromchild.readlines()
    del sv
  
    for segdatum in segdata:
      segmatch = segpat.search(segdatum).groups()
      start = int(segmatch[0])
      start_nano = int(segmatch[1])
      end = int(segmatch[2])
      end_nano = int(segmatch[3])
      sv = int(segmatch[4])
      if usesegnum:
        segnum = None
        cmp = bool(segnum == ligo_science_bits \
                   or segnum == (ligo_science_bits & ~ligo_injection_bits) \
                   or segnum == geo_science_bits)
        if cmp:
          ifo = str(segmatch[7])
          if segmatch[6] == -1:
            # segnum undefined
            segnum = None
          else:
            segnum = int(segmatch[6])
          
      else:
        segnum = None
        ifo = str(segmatch[6])
      if ifo == "G1":
        # Apply hack to get around FrameL difficulties
        start_nano = int(15000)
        end_nano = int(15000)
  
      try:
        sdb.publish_state(ifo,start,start_nano,end,end_nano,version,sv,segnum)
        print ".",
      except statedb.StateSegmentDatabaseSegmentExistsException:
        print "x",
      
    print "done"
  
sdb.close()
sys.exit(0)
