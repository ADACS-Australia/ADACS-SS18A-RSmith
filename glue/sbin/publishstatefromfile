#!/usr/bin/python

import os
import re
import sys
import getopt
import popen2
import glob
from types import *
from glue import statedb

filepat = re.compile(r'^[A-Za-z]+\-\w+\-(\d+)\-(\d+)\..+')

run = None
version = None
file = None
dbname = None
usesegnum = False

shortop = "r:v:f:d:s"
longop = [
  "run=",
  "version=",
  "file=",
  "database=",
  "use-segnum"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum  --database [DBNAME] --file [SEGMENTS]" \
      % sys.argv[0]
  sys.exit( 1 )

for o, a in opts:
  if o in ("-r", "--run"):
    run = a
  elif o in ("-v", "--version"):
    version = int(a)
  elif o in ("-d", "--database"):
    dbname = a
  elif o in ("-f", "--file"):
    file = a
  elif o in ("-s", "--use-segnum"):
    usesegnum = True

if not run or not version or not file or not dbname:
  print >> sys.stderr, \
    "Usage: %s --run [RUN] --version [VER] --use-segnum --database [DBNAME] --file [SEGMENTS]" \
      % sys.argv[0]
  sys.exit( 1 )

if usesegnum:
  segpat = re.compile(r'^(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s([A-Z][0-9]+)\s(.+)')
else:
  segpat = re.compile(r'^(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s(\d+)\s([A-Z][0-9]+)\s(.+)')

try:
  statefile = open(file,"r")
except Exception,e:
  print >>sys.stderr, "Could not open statefile, %s: %s" % (statefile,e)
  sys.exit(2)

sdb = statedb.StateSegmentDatabase(run,dbname)
i = 0
lfnexists = {}
for line in statefile.readlines():
  i = i + 1
  contents = line.split(' ')
  if usesegnum:
    lfn = os.path.basename(contents[8])
  else:
    lfn = os.path.basename(contents[7])
  lfn = lfn.strip()
  gpstime = filepat.search(lfn).groups()
  lfn_start = int(gpstime[0])
  lfn_end = lfn_start + int(gpstime[1])
  
  if not lfnexists.has_key(lfn):
    try:
      sdb.register_lfn(lfn,lfn_start,lfn_end)
    except statedb.StateSegmentDatabaseLFNExistsException:
      pass
    lfnexists[lfn] = 1
    
  segmatch = segpat.search(line).groups()
  start = int(segmatch[0])
  start_nano = int(segmatch[1])
  end = int(segmatch[2])
  end_nano = int(segmatch[3])
  sv = int(segmatch[4])
  if usesegnum:
    segnum = int(segmatch[6])
    if segnum != 65535:
      segnum = None
    ifo = str(segmatch[7])
  else:
    segnum = None
    ifo = str(segmatch[6])
    
  try: 
    sdb.publish_state(ifo,start,start_nano,end,end_nano,version,sv,segnum)
  except statedb.StateSegmentDatabaseSegmentExistsException:
    pass
  except Exception,e:
    print "Caught exception with:"
    print (ifo,start,start_nano,end,end_nano,version,sv)
    print "Error was: %s" % (e,)
    sys.stdout.flush()
    raise
        
  if i % 100 == 0:
    print "Finished file %s" % (i,)
    sys.stdout.flush()
      
print "done"
  
sdb.close()
statefile.close()
sys.exit(0)
