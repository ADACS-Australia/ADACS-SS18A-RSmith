#!/usr/bin/env python
# 
# This program is part of the Grid LSC User Environment (GLUE)
# 
# GLUE is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# 
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
# 
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <http://www.gnu.org/licenses/>.

import os
import sys
import string
import re
import getopt
from glue import statedb

def usage():
  msg = """\
Usage: insert_conlogsegs [OPTIONS]

  -d, --database NAME      name of the database to connect to
  -u, --username USER      database username for connection
  -p, --password PASS      database password for connection
  -t, --type-name TYPE     segment type for this import
  -c, --type-code CODE     segment type code for this import
  -i, --ifo IFO            interferometer name
  -f, --file FILE          file containing conlog segments

The password argument is not required. All other options are required.
\
"""
  print msg

def help():
  usage()

shortop = "d:u:p:t:c:i:f:"
longop = [
  "database=",
  "username=",
  "password=",
  "type-name=",
  "type-code=",
  "ifo=",
  "file="
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

dbname = None
dbuser = None
dbpasswd = ''
type = None
code = None
ifo = None
segfile = None

for o, a in opts:
  if o in ("-h", "--help"):
    help()
    sys.exit(0)
  elif o in ("-d", "--database"):
    dbname = a
  elif o in ("-u", "--username"):
    dbuser = a
  elif o in ("-p", "--password"):
    dbpasswd = a
  elif o in ("-t", "--type-name"):
    type = a
  elif o in ("-c", "--type-code"):
    code = int(a)
  elif o in ("-i", "--ifo"):
    ifo = a
  elif o in ("-f", "--file"):
    segfile = a

if not dbname or not dbuser or not type or not code or not ifo or not segfile:
  print >> sys.stderr, """\
Error: --database, --username, --type-name, --type-code, --ifo and --file must
all be specified. Use --help for more information."""
  sys.exit(1)

segments = []

octothorpe = re.compile(r'\A#')
for line in open(segfile):
 if not octothorpe.match(line):
   (id,st,en,du) = map(int,line.split())
   segments.append(tuple([st,en]))

start = segments[0][0]
end = segments[-1][1]

sdb = statedb.StateSegmentDatabase(dbname,dbuser,dbpasswd)
sdb.register_lfn(os.path.basename(segfile),start,end)
for seg in segments:
  sdb.publish_state(ifo,seg[0],0,seg[1],0,0,code)

sdb.set_state_name(0,code,type)

sdb.close()

sys.exit(0)
