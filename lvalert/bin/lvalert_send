#!/usr/bin/python
import sys
import os
import datetime
import time
import select
import logging
import libxml2
from optparse import *
from M2Crypto.SSL import Context

# pubsub import must come first because it overloads part of the
# StanzaProcessor class
from ligo.lvalert import pubsub

from pyxmpp.all import JID,Iq,Presence,Message,StreamError,TLSSettings
from pyxmpp.jabber.all import Client
from pyxmpp.jabber.simple import send_message

"""
A tool to send an event to a pubsub node 
"""

__version__ = "$Revision$"
__date__ = "$Date$"
__name__ = "lvalert_send"
__Id__ = "$Id$"
__title__ = "LIGO-Virgo Alert Sender"


#################################################################
# help message
usage = """\
%prog [options]
-----------------------------------------------------------------

  A tool to send to the pubsub service at lvalert.phys.uwm.edu.
  LSC-Virgo members can activate their accounts on this server by
  completing the form at
  
    https://www.lsc-group.phys.uwm.edu/cgi-bin/jabber-acct.cgi 

  and setting a password.  Before using this program to send to a
  node, the node should be created with lvalert_admin and/or
  configured to allow you to send to it. 

  You can send information containted in the file stuff.xml by
  doing:

  %prog --username albert.einstein --password secret --node small_steps --file stuff.xml

  When an stuff.xml is sent to a node by a publisher, it will be sent
  to all subscribers who are logged in.

  The owner (person who creates the node by default) can delete and
  publish information to the node. The owner can also add other
  publishers to the node. Configuration and management of nodes is
  handled with lvalert_admin. 
  
  Others can subscribe any existing node. Run 

  lvalert_admin --help

  to find out how to manage your subscriptions. 

"""

#################################################################
def parse_command_line():
  """
  Parser function dedicated
  """
  parser = OptionParser( usage=usage, \
      version= "%prog CVS\n" +
      "$Id$\n" +
      "$Name$\n")

  #username and password
  parser.add_option("-a","--username",action="store",type="string",\
      default="", help="the username of the publisher or listener" )
  parser.add_option("-b","--password",action="store",type="string",\
      default="", help="the password of the publisher or listener" )
  parser.add_option("-s","--server",action="store",type="string",\
      default="lvalert.phys.uwm.edu", help="the pubsub server" )
  parser.add_option("-r","--resource",action="store",type="string",\
      default="sender", help="resource to use in JID" )


  # access information about root nodes
  parser.add_option("-n","--node",action="store",type="string",\
      default=None, help="name of the node on the pubsub server" )
  parser.add_option("-p","--file",action="store",type="string",\
      default=None, help="name of the file with the event" )

  # debugging options
  parser.add_option("-v","--verbose",action="store_true",\
      default=False, help="be verbose as you process the request" )
  parser.add_option("-g","--debug",action="store_true",\
      default=False, help="should  print out lots of information" )
  
  (options,args) = parser.parse_args()

  if not options.username:
    raise ValueError, "--username is required"

  if not options.node:
    raise ValueError, "--node is required"

  if not options.file:
    raise ValueError, "--file is required"



  return options, sys.argv[1:]
  
# ============================================================================
# -- get command line arguments
opts, args = parse_command_line()

class MyClient(Client):
    def __init__(self, jid, password):
        # if bare JID is provided add a resource -- it is required
        if not jid.resource:
            jid=JID(jid.node, jid.domain, "sender")

        # we require a TLS connection
        #  Specify sslv3 to get around Sun Java SSL bug handling session ticket
        #  https://rt.phys.uwm.edu/Ticket/Display.html?id=1825
        #  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6728126
        t=TLSSettings(require=True,verify_peer=False, ctx=Context('sslv3'))

        # setup client with provided connection information
        # and identity data
        Client.__init__(self, jid, password, \
            auth_methods=["sasl:GSSAPI","sasl:PLAIN"], tls_settings=t)

    def stream_state_changed(self,state,arg):
        """This one is called when the state of stream connecting the component
        to a server changes. This will usually be used to let the user
        know what is going on."""
        if opts.verbose:
            print "*** State changed: %s %r ***" % (state,arg)
        else:
            pass

    def session_started(self):
        if opts.file:
            self.stream.set_response_handlers(pspl, \
                pspl.generic_result,pspl.create_error,\
                pspl.create_timeout)
        print datetime.datetime.now().ctime()
        self.stream.send(pspl)

    def idle(self):
        if self.stream and self.session_established:
            print "disconnecting"
            self.disconnect()
        if opts.verbose:
            print "idle"
        time.sleep(4)

    def post_disconnect(self):
        print "Disconnected"
        raise Disconnected

# add a logger so that we can see what's going
if opts.debug:
    logger=logging.getLogger()
    logger.addHandler(logging.StreamHandler())
    logger.setLevel(logging.DEBUG)

# debug the memore
libxml2.debugMemory(1)

# set up the stream
myjid=JID(opts.username+"@"+opts.server+"/"+opts.resource)
s=MyClient(jid=myjid,password=opts.password)

if opts.verbose:
    print "connecting..."
s.connect()


if opts.file:
    if opts.verbose:
        print "build pubsub stanza..."
    if opts.file == '-':
        eventfile = sys.stdin
    else:
        eventfile = open(opts.file)
    voevent = eventfile.read()
    eventfile.close()
else:
    print "You must supply a file to send"
    sys.exit(0)

recpt=JID("pubsub."+opts.server)
pspl=pubsub.PubSub(from_jid = myjid, to_jid = recpt, stream = s,\
stanza_type="get")
pspl.publish(voevent,opts.node)

if opts.verbose:
    print "sending message..."
try:
    s.loop(1)
except KeyboardInterrupt:
    print u"disconnecting..."
    s.disconnect()

# vi: sts=4 et sw=4
