#!@PYTHONPROG@
#
# Copyright (C) 2011  Leo Singer
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Convert a list of posterior samples to a HEALPix FITS image using an adaptively
refined HEALPix tree, subdividing each node if it contains more than
--samples-per-bin posterior samples. By default, the resolution is set to the
deepest resolution of the tree.

If an input filename is specified, then the posterior samples are read from it.
If no input filename is provided, then input is read from stdin.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface

from optparse import Option, OptionParser
from lalinference.bayestar import command
parser = OptionParser(
    formatter=command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage = "%prog [options] [INPUT] -o OUTPUT.fits[.gz]",
    option_list = [
        Option("--nside", "-n", type=int, default=-1,
            help="Write final sky map at this HEALPix lateral resolution [default: auto]"),
        Option("--max-nside", "-m", type=int, default=-1,
            help="Stop subdivision at this maximum HEALPix lateral resolution [default: max 64-bit]"),
        Option("-o", "--output", metavar="OUTPUT.fits[.gz]",
            help="name of output FITS file [required]"),
        Option("--samples-per-bin", type=int, default=30,
            help="Samples per bin [default: %default]"),
        Option("--objid",
            help="Event ID to be stored in FITS header [default: %default]"),
    ]
)
opts, args = parser.parse_args()
infilename = command.get_input_filename(parser, args)

if opts.output is None:
    parser.error('--output: missing required argument')


# Late imports.
import numpy as np
import healpy as hp
import lalinference.bayestar.fits
import lalinference.bayestar.postprocess
import pylal.bayespputils

# Read posterior chain.
data = pylal.bayespputils.PEOutputParser('common')
with open(infilename, 'r') as f:
    dataObj0 = data.parse(f)
posterior = pylal.bayespputils.Posterior(dataObj0)

# Re-map parameter names.
# FIXME: Which codes use rightascension & declination, and which use ra & dec?
# Is this here to support a legacy code?
if 'ra' and 'dec' not in posterior.names:
    if 'rightascension' and 'declination' in posterior.names:
        new_param_names = ('ra', 'dec')
        post_names = ('rightascension', 'declination')
        posterior.append_multiD_mapping(new_param_names,
            (lambda *args: args), post_names)
    else:
        raise ValueError('param not found')

# Read polar coordinates of samples.
# FIXME: Could we just use np.recfromtxt() here?
samples, header = posterior.samples()
header = header.split()
samples = [pylal.bayespputils.PosteriorSample(row, header, ['ra', 'dec'])
    for row in samples]
theta = 0.5*np.pi - np.asarray([sample['dec'] for sample in samples])
phi = np.asarray([sample['ra'] for sample in samples])

p = lalinference.bayestar.postprocess.adaptive_healpix_histogram(
    theta, phi, opts.samples_per_bin,
    nside=opts.nside, max_nside=opts.max_nside)

# Write output to FITS file.
lalinference.bayestar.fits.write_sky_map(opts.output, p,
    creator=parser.get_prog_name(), objid=opts.objid)
