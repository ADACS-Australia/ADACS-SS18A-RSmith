# Copyright (C) 2014 Reed Essick
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

description = \
    """The program  generates a summary of iDQ output during a short time period. Its output is written into a new xml file(s)"""


from ligo.gracedb.rest import GraceDb
import sys

from laldetchar import git_version

__author__ = 'Reed Essick <reed.essick@ligo.org>'
__version__ = git_version.id
__date__ = git_version.date

##################################################
# main
##################################################

if __name__ == '__main__':

    from laldetchar.idq import idq

    from glue.ligolw import ligolw
    from glue.ligolw.utils import ligolw_add
    from glue.ligolw import utils as ligolw_utils

    from optparse import OptionParser
    parser = OptionParser(version='Name: %%prog\n%s'% git_version.verbose_msg,
        usage='%prog [options]',
        description=description)

    parser.add_option('-v',
        '--verbose',
        default=False,
        action='store_true')

    parser.add_option(
        '-s',
        '--gps-start',
        dest='start',
        default=0,
        type='float',
        help='the gps start time of the time range of interest',
        )
    parser.add_option(
        '-e',
        '--gps-end',
        dest='end',
        default=0,
        type='float',
        help='the gps end time of the time range of interest',
        )
    parser.add_option('-g',
        '--gracedb-id',
        default=None,
        type='string',
        help='GraceDB ID')
    parser.add_option('',
        '--skip-gracedb-upload',
        default=False,
        action='store_true',
        help='skip steps involving communication with GraceDB')
    parser.add_option('',
        '--ifo',
        type='string',
        help='the ifo for which predictions were made')
    parser.add_option('-c',
        '--classifier',
        default='ovl',
        type='string',
        help='the classifier that was used to generate the data. Default="ovl"')

    parser.add_option('-i',
        '--input-dir',
        default='./',
        type='string',
        help='the directory through which is searched for relevant *glitch*.xml files. Assumes directory structure generated by laldetchar-idq-realtime.py'
        )
    parser.add_option('-o',
        '--output-dir',
        default='.',
        type='string',
        help='the output directory')
    parser.add_option('-t',
        '--usertag',
        dest='tag',
        default='',
        type='string',
        help='user tag')

    parser.add_option("", "--gdb-url", default=False, type="string")


    (opts, args) = parser.parse_args()

    if not opts.ifo:
        opts.ifo = raw_input('ifo = ')

    if opts.tag != '':
        opts.tag = opts.tag + '-'

    if not opts.skip_gracedb_upload:
	    # initialize instance of gracedb interface
        if opts.gdb_url:
            gracedb = GraceDb(opts.gdb_url)
        else:
            gracedb = GraceDb()
		# check that gracedb id is given
        if not opts.gracedb_id:
            print "GraceDB ID must be specified for enabling correct uploading of the data. Please use --gracedb-id option."
            sys.exit(1)



    # #########################################
    # ## Find relevant files
    # #########################################

    if opts.verbose:
        print 'Finding relevant *glitch*.xml files'
    gchxml_filenames = sorted([filename for filename in
                              idq.get_all_files_in_range(opts.input_dir,
                              opts.start, opts.end, pad=0, suffix='.xml.gz'
                              ) if opts.classifier in filename.split('/'
                              )[-1] and 'glitch' in filename
                              and opts.ifo in filename])
							
    if not gchxml_filenames:
        # no files found, print the message, and exit
        if not opts.skip_gracedb_upload:
            gracedb.writeLog(opts.gracedb_id, message="No iDQ glitch tables for "+opts.classifier+" at "+opts.ifo)
        print "No glitch files found, exiting."
        sys.exit(0)

    if opts.verbose:
        print 'Found:'
        for filename in gchxml_filenames:
            print '\t' + filename


    # #########################################
    # ## Merge xml_docs and write merged file
    # #########################################
    # ## merge filenames into a single xmldoc

    if opts.verbose:
        print 'merging files'
    merged_xmldoc = ligolw_add.ligolw_add(ligolw.Document(),
            gchxml_filenames, non_lsc_tables_ok=True)

# ....merged_xmldoc = ligolw_add.ligolw_add( ligolw.Document(), gchxml_filenames, non_lsc_tables_ok=False, verbose=False, contenthandler=DefaultContentHandler)

    # ## remove any rwo outside of [opts.start, opts.end]

    print 'WRITE step that removes glitches outside [opts.start, opts.end]'

    # ## save filename

    merged_xmldoc_filename = '%s/%s_idq_%s_glitch_%s%d-%d.xml' % (
        opts.output_dir,
        opts.ifo,
        opts.classifier,
        opts.tag,
        int(opts.start),
        int(opts.end - opts.start),
        )
    if opts.verbose:
        print 'saving ' + merged_xmldoc_filename
    ligolw_utils.write_filename(merged_xmldoc, merged_xmldoc_filename,
                                gz=merged_xmldoc_filename.endswith('.gz'))  # write file
    if not opts.skip_gracedb_upload:
        #write log message to gracedb and upload file
        gracedb.writeLog(opts.gracedb_id, message="iDQ glitch tables for "+opts.classifier+" at "+opts.ifo+":", filename=merged_xmldoc_filename)
