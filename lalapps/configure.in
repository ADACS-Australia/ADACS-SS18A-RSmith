dnl Process this file with autoconf to produce a configure script.
dnl $Id$
AC_INIT(src/config.h.in)
AM_INIT_AUTOMAKE(lalapps, 5.2)
AM_CONFIG_HEADER(src/config.h)
AH_TOP([/*
*  Copyright (C) 2007 Jolien Creighton
*
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*
*  You should have received a copy of the GNU General Public License
*  along with with program; see the file COPYING. If not, write to the
*  Free Software Foundation, Inc., 59 Temple Place, Suite 330, Boston,
*  MA  02111-1307  USA
*/

#ifndef CONFIG_H
#define CONFIG_H])
AH_BOTTOM([#endif /* CONFIG_H */])

LALAPPS_WITH_CC
LALAPPS_WITH_LAL_PREFIX
LALAPPS_WITH_EXTRA_CPPFLAGS
LALAPPS_WITH_EXTRA_CFLAGS
LALAPPS_WITH_EXTRA_LDFLAGS
LALAPPS_WITH_EXTRA_LIBS
LALAPPS_WITH_GCC_FLAGS
LALAPPS_ENABLE_CONDOR
LALAPPS_ENABLE_FRAME
LALAPPS_ENABLE_METAIO
LALAPPS_ENABLE_NIGHTLY

AC_PREFIX_DEFAULT([/opt/lscsoft/lalapps])

dnl Put version/configure info in config.h header
lalapps_version_major=`echo "$VERSION" | cut -d. -f1`
lalapps_version_minor=`echo "$VERSION" | cut -d. -f2`
lalapps_configure_date=`date +"%Y-%m-%dT%H:%M:%S%z"`
lalapps_cvs_tag=`echo '$Name$' | sed 's/\\$//g' | sed 's/Name: //'`
AC_DEFINE_UNQUOTED(LALAPPS_VERSION, "$VERSION", [LALApps Version])
AC_DEFINE_UNQUOTED(LALAPPS_VERSION_MAJOR, $lalapps_version_major,
                   [LALApps Version Major Number])
AC_DEFINE_UNQUOTED(LALAPPS_VERSION_MINOR, $lalapps_version_minor,
                   [LALApps Version Minor Number])
AC_DEFINE_UNQUOTED(LALAPPS_CONFIGURE_ARGS, "$ac_configure_args",
                   [LALApps Configure Arguments])
AC_DEFINE_UNQUOTED(LALAPPS_CONFIGURE_DATE, "$lalapps_configure_date",
                   [LALApps Configure Date])
AC_DEFINE_UNQUOTED(LALAPPS_CVS_TAG, "$lalapps_cvs_tag", [LALApps CVS Tag])


dnl Remove -all-static from ldflags
allstatic=`echo $LDFLAGS | sed '/-all-static/!d'`
if test "x$allstatic" = "x" ; then
  allstatic="false"
else
  LDFLAGS=`echo $LDFLAGS | sed s/-all-static//g`
  allstatic="true"
fi

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_CXX

AC_CANONICAL_HOST
if test "x$condor" = "xtrue"; then
  AC_CHECK_PROGS(CONDOR_COMPILE, condor_compile)
  CC="$CONDOR_COMPILE $CC"
  case "$host" in
    *-*-linux* | *-*-osf* | *-*-hpux* ) CFLAGS="$CFLAGS -static" AC_DISABLE_SHARED;;
  esac
  AC_DEFINE(LALAPPS_CONDOR, 1, [LALApps is condor compiled])
fi
if test "$GCC" = yes; then
  CPPFLAGS="$CPPFLAGS -ansi"
  CFLAGS="$CFLAGS -W -Wall $lalapps_gcc_flags"
fi
AC_PROG_INSTALL
AC_PROG_LN_S
AM_PROG_LIBTOOL
AC_CHECK_PROGS(LATEX, pdflatex latex, echo)
AC_CHECK_PROGS(MKIND, makeindex, echo)
AC_CHECK_PROGS(DVIPS, dvips, echo)
AC_CHECK_PROGS(BIBTEX, bibtex, echo)
AM_PATH_PYTHON(2.2,,:)
AM_CONDITIONAL([HAVE_PYTHON],[test "$PYTHON" != :])

dnl Checks for libraries.
AC_CHECK_LIB(m, sin)
AC_CHECK_LIB(z, compress)

dnl LAL and LALSupport (required unless part of a lal build).
if test "${LAL_BUILD:="false"}" = "true" ; then
  AC_MSG_NOTICE([building lalapps as part of lal])
else
  if test -n "$LAL_PREFIX" ; then
    PKG_CONFIG_PATH="$LAL_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
    LAL_CFLAGS="-I$LAL_PREFIX/include"
    LAL_LIBS="-L$LAL_PREFIX/lib -llal"
    LALSUPPORT_CFLAGS="-I$LAL_PREFIX/include"
    LALSUPPORT_LIBS="-L$LAL_PREFIX/lib -llalsupport"
  fi
  PKG_CHECK_MODULES(LAL, lal, [ true ], [ false ])
  PKG_CHECK_MODULES(LALSUPPORT, lalsupport , [ true ], [ false ])
  CPPFLAGS="$CPPFLAGS $LAL_CFLAGS $LALSUPPORT_CFLAGS"
  LIBS="$LALSUPPORT_LIBS $LAL_LIBS $LIBS"
  AC_CHECK_LIB(lal, LALVersion, , AC_MSG_ERROR(could not find the LAL library))
  AC_CHECK_LIB(lalsupport, LALOpenDataFile, , AC_MSG_ERROR(could not find the LAL support library))
  dnl LALFrame and LALMetaIo (optional).
  lalframe="true"
  lalmetaio="true"
  PKG_CHECK_MODULES(LALFRAME, lalframe, [ true ], [ false ])
  PKG_CHECK_MODULES(LALMETAIO, lalmetaio, [ true ], [ false ])
  CPPFLAGS="$CPPFLAGS $LALFRAME_CFLAGS $LALMETAIO_CFLAGS"
  LIBS="$LIBS $LALFRAME_LIBS $LALMETAIO_LIBS"
  dnl do actual checks for libraries after checking for gsl and FrameL
fi

dnl GSL
PKG_CHECK_MODULES(GSL, gsl, [ true ], [ false ])
CPPFLAGS="$CPPFLAGS $GSL_CFLAGS"
LIBS="$LIBS $GSL_LIBS"
AC_CHECK_LIB(gslcblas, main)
AC_CHECK_LIB(gsl, gsl_version)

dnl FrameL (libframe)
if test "${frame}" = "true"; then
  PKG_CHECK_MODULES(FRAME, libframe, [ true ], [ false ])
  lal_pre_frame_LIBS="$LIBS"
  LIBS="$LIBS $FRAME_LIBS"
  AC_SEARCH_LIBS(FrLibIni, Frame, ,
                 [LALAPPS_DISABLE_FRAME]
                 [frame="false"]
                 [LIBS="$lal_pre_frame_LIBS"])
fi

dnl MetaIo (libmetaio)
if test "${metaio}" = "true"; then
  PKG_CHECK_MODULES(METAIO, libmetaio, [ true ], [ false ])
  lal_pre_metaio_LIBS="$LIBS"
  LIBS="$LIBS $METAIO_LIBS"
  AC_SEARCH_LIBS(MetaioOpen, metaio dataflow, ,
                 [AC_MSG_WARN(disabling metaio support)]
                 [metaio="false"]
                 [LIBS="$lal_pre_metaio_LIBS"])
fi

dnl Now check for LALFrame and LALMetaIo
if test "$LAL_BUILD" != "true" ; then
  AC_CHECK_LIB(lalframe, LALFrOpen, , lalframe="false")
  AC_CHECK_LIB(lalmetaio, LALSnglInspiralTableFromLIGOLw, , lalmetaio="false")
fi

AC_CHECK_LIB(mysqlclient, mysql_init)
AC_CHECK_LIB(datacondCaller, DatacondCaller)

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(getopt.h)
AC_CHECK_HEADERS([gsl/gsl_fft_real.h])
AC_CHECK_HEADERS(mysql.h)
AC_CHECK_HEADERS(mpi.h)
if test "$LAL_BUILD" != "true" ; then
  AC_CHECK_HEADERS([lal/LALStdlib.h])
fi
AC_CHECK_HEADERS([datacondAPI/DatacondCaller.h])
AC_CHECK_HEADERS(glob.h)
AC_CHECK_HEADERS(unistd.h)

if test "${frame}" = "true"; then
  lal_pre_frame_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $FRAME_CFLAGS"
  AC_CHECK_HEADERS(FrameL.h, ,
                   [LALAPPS_DISABLE_FRAME]
                   [frame="false"]
                   [CPPFLAGS="$lal_pre_frame_CPPFLAGS"])
fi

if test "${metaio}" = "true"; then
  lal_pre_metaio_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $METAIO_CFLAGS"
  AC_CHECK_HEADERS(metaio.h, ,
                   [AC_MSG_WARN(disabling metaio support)]
                   [metaio="false"]
                   [CPPFLAGS="$lal_pre_metaio_CPPFLAGS"])
fi

LALAPPS_CHECK_QTHREAD

AC_MSG_CHECKING(for gethostname prototype in unistd.h)
AC_EGREP_HEADER(gethostname,unistd.h,AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_GETHOSTNAME_PROTOTYPE,1,
[Define if gethostname prototype is in unistd.h]),
AC_MSG_RESULT(no))

AC_CHECK_FUNCS(setenv)

if test "$LAL_BUILD" = "true"; then
  LIBS="$LALFRAME_LIBS $LALMETAIO_LIBS $LALSUPPORT_LIBS $LAL_LIBS $LIBS"
  CPPFLAGS="$CPPFLAGS $LAL_CFLAGS $LALSUPPORT_CFLAGS $LALFRAME_CFLAGS $LALMETAIO_CFLAGS"
  lalframe="false"
  lalmetaio="false"
  test -z "$LALFRAME_LIBS" && test -z "$LALFRAME_CFLAGS" && lalframe="true"
  test -z "$LALMETAIO_LIBS" && test -z "$LALMETAIO_CFLAGS" && lalmetaio="true"
fi
AC_ARG_VAR(LAL_BUILD,[set to "true" if lalapps is built as part of a lal build])

AM_CONDITIONAL(FRAME, test x$frame = xtrue)
AM_CONDITIONAL(LALFRAME, test x$lalframe = xtrue)
AM_CONDITIONAL(LALMETAIO, test x$lalmetaio = xtrue)
AM_CONDITIONAL(DATAFLOW, test x$metaio = xtrue)
AC_DEFINE_UNQUOTED(PREFIX, "$prefix", [Install prefix])

dnl restore all static to ldflags
if test "${allstatic}" = "true" ; then
  LDFLAGS="-all-static $LDFLAGS"
fi

AC_OUTPUT( \
  Makefile \
  lalapps.spec \
  doc/Makefile \
  man/Makefile \
  misc/Makefile \
  src/Makefile \
  src/lalapps/Makefile \
  src/example/Makefile \
  src/calibration/Makefile \
  src/frametools/Makefile \
  src/findchirp/Makefile \
  src/stochastic/Makefile \
  src/power/Makefile \
  src/ring/Makefile \
  src/string/Makefile \
  src/pulsar/Makefile \
  src/pulsar/FDS_isolated/Makefile \
  src/pulsar/FDS_isolated/ResamplingFstat/Makefile \
  src/pulsar/Injections/Makefile \
  src/pulsar/FDS_griphyn/Makefile \
  src/pulsar/hough/Makefile \
  src/pulsar/hough/src/Makefile \
  src/pulsar/FDS_binary/Makefile \
  src/pulsar/SideBand/Makefile \
  src/pulsar/templateBanks/Makefile \
  src/pulsar/TimingTests/Makefile \
  src/pulsar/TDS_isolated/Makefile \
  src/inspiral/Makefile \
  src/zmsearch/Makefile \
  src/detresponse/Makefile \
  src/pulsar/hough/src2/Makefile \
  src/pulsar/MakeSFTs/Makefile \
  src/pulsar/radiometer/Makefile \
  src/pulsar/fscan/Makefile
)

lalframeenabled="`test x${lalframe} = xtrue && echo "ENABLED" || echo "DISABLED"`"
lalmetaioenabled="`test x${lalmetaio} = xtrue && echo "ENABLED" || echo "DISABLED"`"
echo "
================================================================

        LALApps has now been successfully configured:

                LAL Frame library support is $lalframeenabled
                LAL MetaIo library support is $lalmetaioenabled

        Now run 'make' to build LALApps
        and run 'make install' to install LALApps
        LALApps will be installed under the directory:

                $prefix

================================================================="
