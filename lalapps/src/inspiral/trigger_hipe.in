#!/usr/bin/env @PYTHONPROG@
# coding=utf-8
"""
grb_hipe.in - grb inspiral pipeline driver script

$Id$

This script uses master segment lists to determine a set of segment
lists appropriate to running inspiral_hipe on time around a GRB. At
present, the script only sets up directories and writes appropriate
segment files to those directories.

It uses the same configuration file as the inspiral_hipe script to
determine various parameters and then set up analysis and injection
runs.

"""

__author__ = 'Patrick Brady <patrick@gravity.phys.uwm.edu>'
__date__ = '$Date$'
__version__ = '$Revision$'[11:-2]

##############################################################################
# import standard modules and append the lalapps prefix to the python path
import copy
import os
import sys
import shutil
import ConfigParser
from optparse import *
from glue import segments
from glue import segmentsUtils
from glue import pipeline

##############################################################################
# define a few utility functions that make this job easier

def buildOffSourceSegment ( scienceSegment, grbSegment, dt, ifo ):
  """ Return the segment protracted symmetrically about on-source. """
  scienceSegment = scienceSegment.contract(72)

  nplus = (scienceSegment[1] - grbSegment[1]) // dt 
  nminus = (grbSegment[0] - scienceSegment[0]) // dt

  nsegs = min(nplus, nminus)

  tmpSegment = grbSegment.protract( nsegs * dt + 72 )

  scienceSegment = scienceSegment.protract(72)

  return tmpSegment

def make_external_call(command, show_stdout=False, show_command=False):
  """
  Run a program on the shell and print informative messages on failure.
  """
  if show_command: print command

  stdin, out, err = os.popen3(command)
  pid, status = os.wait()

  if status != 0:
      print >>sys.stderr, "External call failed."
      print >>sys.stderr, "  status: %d" % status
      print >>sys.stderr, "  stdout: %s" % out.read()
      print >>sys.stderr, "  stderr: %s" % err.read()
      print >>sys.stderr, "  command: %s" % command
      sys.exit(status)
  if show_stdout:
      print out.read()
  stdin.close()
  out.close()
  err.close()

class hipe_run(object):
  """
  This class is intended to represent single run of lalapps_inspiral_hipe.
  """
  def __init__(self, hipe_dir, base_cp, ifos, log_path):
    self._hipe_dir = hipe_dir
    self._log_path = log_path
    self._cp = copy.copy(base_cp)
    self._ifos = ifos
  
    self._hipe_args = ["--output-segs",
      "--log-path=%s" % log_path, "--config-file=config.ini",
      "--datafind", "--template-bank", "--inspiral", "--coincidence",
      "--trigbank", "--inspiral-veto", "--second-coinc"]
    
    # determine how many ifos to analyze
    n = len(self._ifos)
    if n < 1 or n > 4:
      raise ValueError, "cannot handle less than one or more than four IFOs"
    number_words = {1: "one", 2: "two", 3: "three", 4: "four"}
    for i in range(n):
      self._hipe_args.append("--%s-ifo" % number_words[i+1])
    
    # set individual ifos to analyze
    for ifo in self._ifos:
      self._cp.set("input", "%s-segments" % ifo.lower(),
        "../%s-selectedsegs.txt" % ifo)
      self._hipe_args.append("--%s-data" % ifo.lower())
  
  def set_numslides(self, numslides):
    if numslides == 0: numslides = ""
    self._cp.set('input', 'num-slides', numslides)

  def set_injections(self, cpinj, injrun):
    """
    Turn this analysis into an injection run, using the injrun section from
    the config file cpinj.
    """
    cpinj = copy.copy(cpinj)
    
    # set the start and stop seeds from the injection config file
    for opt in ['exttrig-inj-start','exttrig-inj-stop']:
      self._cp.set('pipeline', opt, cpinj.get(injrun,opt))
      cpinj.remove_option(injrun,opt)

    # set the rest of the values that should go into section inspinj
    for (opt,value) in cpinj.items(injrun):
      self._cp.set('inspinj',opt,value)

    # the start and end time for the injections that are made
    # should be a segment adjacent to the on-source segment. It's
    # convenient to do this here since it needs a calculation.
    # We are assuming that there exists one 180s segment before the trigger
    # on-source interval.
    self._cp.set('inspinj','gps-start-time',(trigger-120-180))
    self._cp.set('inspinj','gps-end-time',(trigger-120))

  def write_dag(self):
    """
    Create directory and run lalapps_inspiral_hipe to create the DAG.
    """
    if not os.path.isdir(self._hipe_dir):
      os.mkdir(self._hipe_dir)
    os.chdir(self._hipe_dir)
    if not os.path.isdir(self._log_path):  # in case of relative path
      os.mkdir(self._log_path)
    self._cp.write(file("config.ini",'w'))
    make_external_call("lalapps_inspiral_hipe %s" % " ".join(self._hipe_args))
    os.chdir("../../")
  
  def get_dag_node(self):
    """
    Return a tuple of (job, node), where these refer to this hipe_run's DAG.
    """
    job = pipeline.CondorDAGManJob("%s/config.dag" % self._hipe_dir)
    node = pipeline.CondorDAGNode(job)
    return node
    
##############################################################################
# define usage and command line options and arguments - parse
usage = """usage: %prog ...

Lay down a directory hierarchy appropriate to analyzing the data
around the time of GRB using the inspiral pipeline. It determines an
appropriate amount of data on each side of the reported GRB trigger.

As of now, the code appears to do the right thing.  This code also
uses the inspiral_hipe config file to determine information about
segments and to ensure that appropriate overlaps, etc are being done.  


DIRECTORY HIERARCHY:

The directory hierarchy that a search would have then follows:

searchdir
  GRB<gpstime>
    analysis
    injection001
    injection002
    ....
    injection00n
  .
  .
  .


METADATA FILES:

The script currently writes ....


RELATED TOOLS AND REQUIRED TOOLS:

With a structure like this, a host of other tools can be developed to
make the whole analysis engine work well. Here is a list of things
that we need with a note about its current status:

* inspiral_hipe:  exists and meta-stable
* grb_hipe: exists, but developmental
* grb_summary: exists, but developmental

"""
parser = OptionParser( usage )

parser.add_option("-v", "--verbose", action="store_true",default=False,\
  help="make things verbose" )
parser.add_option("-H","--h1-segments",action="store",type="string",\
  default=None, metavar=" H1_SEGMENTS", help="H1 input segment to read" )
parser.add_option("-K","--h2-segments",action="store",type="string",\
  default=None, metavar=" H2_SEGMENTS", help="H2 input segment to read" )
parser.add_option("-L","--l1-segments",action="store",type="string",\
  default=None, metavar=" L1_SEGMENTS", help="L1 input segment to read" )
parser.add_option("-t","--triggers",action="append",type="int",\
    default=None, metavar=" TRIGGER TIME",\
    help="time of the trigger for the analysis")
parser.add_option("-S","--source-file",action="store",type="string",\
  default=None, metavar=" SOURCE_FILE", help="external trigger source file" )
# read in the config file
parser.add_option("-f","--config-file",action="store",type="string",\
  default=None, metavar=" FILE", help="use configuration file FILE" )
parser.add_option("-g","--injection-config",action="store",type="string",\
  default=None, metavar=" FILE", help="use configuration file FILE" )
parser.add_option("-p", "--log-path",action="store",type="string",\
    metavar=" PATH",help="directory to write condor log file")
# Add some plotting capabilities to check things
parser.add_option("-P", "--plot-segments", action="store_true",default=False,\
  help="plot segments for each interval with original segments" )

( opts , args ) = parser.parse_args()


##############################################################################
# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(opts.config_file)

##############################################################################
# get the pad and chunk lengths from the values in the ini file
paddata = int(cp.get('data', 'pad-data'))
n = int(cp.get('data', 'segment-length'))
s = int(cp.get('data', 'number-of-segments'))
r = int(cp.get('data', 'sample-rate'))
o = int(cp.get('inspiral', 'segment-overlap'))
length = ( n * s - ( s - 1 ) * o ) / r
overlap = o / r
minsciseg = length + 2 * paddata

##############################################################################
# Read in all the segment lists, filtering for sufficiently long segments
segdict = {}

for ifo in ["H1", "H2", "L1"]:
  ifo_segfile = getattr(opts, "%s_segments" % ifo.lower())
  if ifo_segfile is not None:
    tmplist = segmentsUtils.fromsegwizard(open(ifo_segfile))
    segdict[ifo] = segments.segmentlist([s for s in tmplist if abs(s) > minsciseg])
ifolist = segdict.keys()
ifolist.sort()

############################################################################
# set up the Ã¼ber dag for all intervals and all injections

tag = opts.config_file.rstrip(".ini")
uberdag = pipeline.CondorDAG("%s/%s_uberdag.log" % (opts.log_path, tag))
uberdag.set_dag_file("%s_uberdag" % tag)

##############################################################################
# loop over the intervals, constructing overlapping segment lists,
# making directories, and writing output to them
for trigger in opts.triggers:

  ##############################################################################
  # set up the on source segment
  onSourceSegment = segments.segment( trigger - 120, trigger + 60 )
  injectionSegment = segments.segment( trigger - minsciseg/2 , 
    trigger + minsciseg/2)

  # name and the directory
  idirectory = "GRB" + str(trigger)
  if not os.path.isdir(idirectory):
    os.mkdir(idirectory)
  shutil.copy(opts.source_file,idirectory)

  ##############################################################################
  # set up the segment including the off-source segment

  # first step involves making the segment infinitely large
  offSourceSegment = \
    segments.segment(segments.NegInfinity, segments.PosInfinity)
  
  # for each ifo, construct the maximal segment surrounding the grb, and
  # then use the minimal length segment to actually do the analysis
  for ifo in ifolist:
    trigger_segment = segdict[ifo][segdict[ifo].find(trigger)]
    tmpOffSourceSegment = \
        buildOffSourceSegment(trigger_segment,onSourceSegment,180,ifo)
    if tmpOffSourceSegment in offSourceSegment:
      offSourceSegment = tmpOffSourceSegment

  # write out the segment list to a segwizard file
  for ifo in ifolist:
    tmpoutfile = idirectory+"/"+ifo+"-selectedsegs.txt"
    segmentsUtils.tosegwizard(file(tmpoutfile,'w'),\
      segments.segmentlist([offSourceSegment]))
    tmpoutfile = idirectory+"/"+ifo+"-injsegs.txt"
    segmentsUtils.tosegwizard(file(tmpoutfile,'w'),\
      segments.segmentlist([injectionSegment]))
  segmentsUtils.tosegwizard(file(idirectory+"/onSourceSeg.txt",'w'),\
      segments.segmentlist([onSourceSegment]))
  
  if opts.verbose:
    print onSourceSegment
    print offSourceSegment
  
  # plot the segment lists
  if opts.plot_segments:
    import pylab
    pylab.figure()
    pylab.hold(True)
    y = pylab.asarray([0,0])
    y = y + 0.1
    pylab.plot(offSourceSegment,y,'b',linewidth=4)
    pylab.plot(onSourceSegment,y,'r',linewidth=4)
    for ifo in ifolist:
      y = y + 0.1
      for seg in segdict[ifo]:
        pylab.plot(seg,y,'k',linewidth=4)
    pylab.axvline(offSourceSegment[0], color='g')
    pylab.axvline(offSourceSegment[1], color='g')
    pylab.axvline(onSourceSegment[0], color='r')
    pylab.axvline(onSourceSegment[1], color='r')
    pylab.ylim([0.0,0.5])
    pylab.xlim([offSourceSegment[0]-2*minsciseg,\
      offSourceSegment[1]+2*minsciseg])
    pylab.savefig("segments-"+idirectory+".png")

  # Next thing is to generate the dag for this interval of time.
  # The steps here are:
  #   1. make dir for zero-lag and playground
  #   2. copy in ini file (and modify if needed)
  #   3. generate dag
  #   4. make dir for injections and run inspinj
  #   5. repeat 2 & 3
  #   6. repeat 4 & 5 as needed

  ############################################################################
  # set up the analysis dag for this interval
  #
  # In doing this, we simply copy the configuration file into the
  # sub-directory and then run the dag generation script.
  
  basic_analysis = hipe_run("%s/analysis" % idirectory, cp, ifolist, opts.log_path)
  basic_analysis.write_dag()
  basic_analysis.write_script()
  uberdag.add_node(basic_analysis.get_dag_node())
  
  ############################################################################
  # create the config parser object and read in the ini file
  if opts.injection_config:
    cpinj = ConfigParser.ConfigParser()
    cpinj.read(opts.injection_config)
    
    ############################################################################
    # set up the injection dag for this interval
    for injrun in cpinj.sections():
      injection_analysis = hipe_run(os.path.join(idirectory, injrun), cp, ifolist, opts.log_path)
      injection_analysis.set_numslides(0)
      injection_analysis.set_injections(cpinj, injrun)
      injection_analysis.write_dag()
      injection_analysis.write_script()
      uberdag.add_node(injection_analysis.get_dag_node())

uberdag.write_sub_files()
uberdag.write_dag()