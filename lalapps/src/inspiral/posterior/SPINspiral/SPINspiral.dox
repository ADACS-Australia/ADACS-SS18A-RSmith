/**
\if LALINSPIRAL

\defgroup lalapps_SPINspiral SPINspiral: Parameter estimation on gravitational-wave signals from spinning binary inspirals
\ingroup lalapps_inspiral
\authors Marc van der Sluys, Vivien Raymond, Ilya Mandel

> \ref SPINspiral.c was developed at Northwestern University to analyse gravitational-wave signals from
> stellar-mass binary inspirals, as can be detected by ground-based interferometers like LIGO and Virgo.
> The code performs parameter estimation on such signals, using Markov-chain Monte-Carlo (MCMC) techniques.
> This analysis includes the spins of the binary components.  \ref SPINspiral.c was adapted from an MCMC
> code for non-spinning binary inspirals written by Christian R\"over [\cite RoeverThesis2007].

# Getting started

## Quick start

<ol>
<li> Make sure you have the six configuration files <tt>SPINspiral.input*</tt> in your trunk.  There are example
  files in <tt>input_*\/</tt>; you'll need four files from <tt>input_all/</tt> and two from one or two of the other
  directories, depending on which waveforms to use for injection and parameter estimation.  If unsure, use the two from
  <tt>input_apostolatos/</tt>.  Set \c nIter in <tt>SPINspiral.input.mcmc</tt> to 10 or 100 for a first test run.</li>
<li> Type <tt>./SPINspiral</tt> and \ref SPINspiral.c should run with the parameters specified in the input files.</li>
</ol>

# Source code

## Source files

\ref SPINspiral.c currently has ten source files and is written in plain C.

\ref SPINspiral.c is split into several routines and functions that give it a modular character.
The routines are grouped into six source files:

<dl>
<dt>SPINspiral_main.c</dt><dd> Main routine. The idea is to keep this routine as small as possible and use it to call other routines.</dd>
<dt>SPINspiral_parameters.c</dt><dd> Contains routines that deal with reading input files and choosing and setting (starting or injection) parameters.</dd>
<dt>SPINspiral_data.c</dt><dd> Contains routines for data and noise reading and handling.</dd>
<dt>SPINspiral_templates.c</dt><dd> Contains routines to generate templates or obtain them from LAL.</dd>
<dt>SPINspiral_signal.c</dt><dd> Contains routines to compute things like overlaps and likelihoods.</dd>
<dt>SPINspiral_mcmc.c</dt><dd> Contains the MCMC core.</dd>
<dt>SPINspiral_lal.c</dt><dd> Contains interfaces to LAL routines.</dd>
<dt>SPINspiral_nolal.c</dt><dd> Contains dummy interfaces to LAL routines, used when not linking against LAL.</dd>
<dt>SPINspiral_routines.c</dt><dd> Contains more general supporting functions.</dd>
<dt>SPINspiral_3rdparty.c</dt><dd> Contains third-party routines.</dd>
</dl>

# Command-line options

Most of \ref SPINspiral.c's options (\f$\sim 250-300\f$) are specified in input files (see \ref sec_input_files "this section".
However, a small --- but possibly growing --- number of options can be passed to the program
using command-line options:

<dl>
  <dt><tt>-i \<main input file name\></tt></dt><dd> override the name of the main input file (\ref sec_SPINspiral_input "this section"
  </dd><dt><tt>--injXMLfilename \<file name\></tt></dt><dd> specify an XML file to read injection data from
  </dd><dt><tt>--injXMLnr \<0-...\></tt></dt><dd> specify the injection number in the injection XML file
  </dd><dt><tt>--mChirp</tt></dt><dd> specify a trigger value for the chirp mass (\f$\cal{M}\f$) in \f$M_\odot\f$
  </dd><dt><tt>--eta</tt></dt><dd> specify a trigger value for the mass ratio (\f$\eta\f$)
  </dd><dt><tt>--tc</tt></dt><dd> specify a trigger value for the GPS time of coalescence (s)
  </dd><dt><tt>--dist</tt></dt><dd> specify a trigger value for the distance (Mpc)
  </dd><dt><tt>--nIter</tt></dt><dd> specify the desired number of MCMC iterations
  </dd><dt><tt>--nSkip</tt></dt><dd> specify the number of step of which the output should be skipped between two saved iterations
  </dd><dt><tt>--network</tt></dt><dd> specify the network configuration, <em>e.g.</em> H1=[1], H1L1=[1,2], H1L1V1=[1,2,3], V1H1=[3,1]
  </dd><dt><tt>--downsample</tt></dt><dd> specify the downsample factor for the data
  </dd><dt><tt>--beforetc</tt></dt><dd> specify the number of seconds of data before \f$t_\mathrm{c}\f$ that should be analysed
  </dd><dt><tt>--aftertc</tt></dt><dd> specify the number of seconds of data after \f$t_\mathrm{c}\f$ that should be analysed
  </dd><dt><tt>--Flow</tt></dt><dd> specify the low frequency cut-off (Hz)
  </dd><dt><tt>--Fhigh</tt></dt><dd> specify the high frequency cut-off (Hz)
  </dd><dt><tt>--nPSDsegment</tt></dt><dd> specify number of data segments to estimate the PSD
  </dd><dt><tt>--lPSDsegment</tt></dt><dd> specify length of each data segment to estimate the PSD
  </dd><dt><tt>--outputPath</tt></dt><dd> specify the directory where the output will be stored. Default is running directory.
  </dd><dt><tt>--cache</tt></dt><dd> specify the cache files to run. Overrides most of the information form SPINspiral.input.data.
  </dd><dt><tt>--channel</tt></dt><dd> specify the list of channels to run, e.g. [H1:LSC-STRAIN,L1:LSC-STRAIN].
  </dd><dt><tt>--PSDstart</tt></dt><dd> specify the GPS time for the start of the PSD. The default value is the begining of the cache file.
  </dd>
</dl>

\anchor sec_input_files
# Input files

\ref SPINspiral.c has six different ASCII input files.  The main input file is assumed to be called
<tt>SPINspiral.input</tt>, but can be specified differently using the command-line option <tt>-i
  \<main input file name\></tt>.  The names of the other five input files are specified in the main
input file.  Example input files can be found in the <tt>input_*</tt> directories.
The directory <tt>input_all</tt> contains the four waveform-independent files, the
other <tt>input_*</tt> directories contain the two files that specify the injection and MCMC
templates.

\anchor sec_SPINspiral_input
## SPINspiral.input

The file <tt>SPINspiral.input</tt> is the main input file and specifies the main mode of operation
and the names of the other input files.

### Operation and output
<dl>
<dt>doSNR</dt><dd> Calculate the SNR: 0-no, 1-yes. Default: 1.</dd>
<dt>doMCMC</dt><dd> Do MCMC: 0-no, 1-yes.  Default: 1.</dd>
<dt>doMatch</dt><dd> Calculate matches: 0-no, 1-yes.  Default: 0.</dd>
<dt>intscrout</dt><dd>  Print initialisation output to screen: 0-no, 1-yes.  Default: 0.</dd>
<dt>writeSignalWrite</dt><dd> signal, noise, PSDs to file: 0-no, 1-yes.  Default: 0.</dd>
<dt>printMuch</dt><dd>  Print long stretches of output (1) or not (0).  Default: 0.</dd>
</dl>

### Secondary input files
<dl>
<dt>mcmcFilename</dt><dd> Name of the MCMC input file.  Default: SPINspiral.input.mcmc.</dd>
<dt>dataFilename</dt><dd> Name of the data/noise input file.  Default: SPINspiral.input.data.</dd>
<dt>injectionFilename</dt><dd> Name of the software injection input file.  Default: SPINspiral.input.injection.</dd>
<dt>parameterFilename</dt><dd> Name of the MCMC parameter input file.  Default: SPINspiral.input.parameters.</dd>
<dt>systemFilename</dt><dd> Name of the file with system-dependent parameters.  Default: SPINspiral.input.system.</dd>
</dl>

## SPINspiral.input.mcmc
The MCMC input file

### Basic settings
<dl>
<dt>nIter</dt><dd> Total number of iterations to be computed, <em>e.g.</em> \f$10^7\f$.</dd>
<dt>thinOutput</dt><dd> Number of iterations to be skipped between stored steps (100 for 1d).</dd>
<dt>thinScreenOutput</dt><dd> Number of iterations between screen outputs in the MCMC (1000 for 1d).</dd>
<dt>MCMCseed</dt><dd> Random number seed to start the MCMC: 0-let system clock determine seed, \f$>0\f$: use the specified seed.  Default: 0.</dd>
<dt>adaptiveMCMC</dt><dd> Use adaptation: 0-no, 1-yes.  Default: 1.</dd>
<dt>acceptRateTarget</dt><dd> Target acceptance rate for MCMC (0.0-1.0).  We used 0.25 for a long time.</dd>
<dt>minlogL</dt><dd> Minimum value for the log Likelihood to accept a jump. We used 0 for a long time, this number shouldn't be positive! Try -1.e3.</dd>
<dt>blockFrac</dt><dd> Fraction of uncorrelated updates that is updated as a block of all parameters (\f$\leq 0.0\f$: none, \f$\geq 1.0\f$: all).  Default: 0.1.</dd>
</dl>

### Correlated update proposals
<dl>
<dt>correlatedUpdates</dt><dd> Do correlated update proposals: 0-no, 1-yes but update the matrix only once, 2-yes and update the matrix every \c ncorr iterations.  Default: 2.</dd>
<dt>corrFrac</dt><dd> Fraction of update proposals that is correlated (0.0-1.0,  0.7 seems OK). corrupd must be 2. Should this replace corrupd?  Default: 0.7.</dd>
<dt>nCorr</dt><dd> Number of iterations for which the covariance matrix is calculated.  Default: \f$10^3-10^4\f$.</dd>
<dt>matAccFr</dt><dd> Fraction of elements on the diagonal that must `improve' in order to accept a new covariance matrix. ??? 0.6-0.8 for unimodal, 0.0-0.2 for multimodal???  Default: 0.5.</dd>
<dt>prMatrixInfo</dt><dd> Print information to screen on proposed matrix updates: 0-none, 1-some (default), 2-add the old and new matrices.  Default: 1.</dd>
</dl>

### Annealing
<dl>
<dt>annealTemp0</dt><dd> Starting temperature of the chain, <em>e.g.</em> 100.0. Set 1.0 for no temperature effect.  Default: 1.0.</dd>
<dt>annealNburn</dt><dd> Number of iterations for the burn-in phase (1e4) at this number, the temperature drops to 1.0.  Default: \f$10^5\f$.</dd>
<dt>annealNburn0</dt><dd> Number of iterations during which temp=temp0 (e.g. 0.1*annealNburn, should be lower than  0.9*annealNburn).  Default: \f$10^5\f$.</dd>
</dl>

### Parallel tempering
<dl>
<dt>parallelTempering</dt><dd> Use parallel tempering:  0-no,  1-auto, fixed \f$T\f$ ladder,  2-auto, sinusoid \f$T\f$ ladder,  3-manual, fixed \f$T\f$ ladder,  4-manual, sinusoid \f$T\f$ ladder.  For a manual ladder, see near the bottom of the file.  Default: 2.</dd>
<dt>nTemps</dt><dd> Number of steps in the temperature ladder for parallel tempering, typically 5-10.  Default: 5.</dd>
<dt>maxTemp</dt><dd> Maximum temperature in automatic parallel-tempering ladder (equidistant in \f$\log(T)\f$), typically 20-100.  Default: 40.</dd>
<dt>saveHotChains</dt><dd> Save hot (\f$T>1\f$) parallel-tempering chains: 0-no (just the \f$T=1\f$ chain), \f$>0\f$-yes; for every saved \f$T=1\f$ point, save every savehotchains-th hot point.  Default: 100.</dd>
<dt>prParTempInfo</dt><dd> Print information to screen on the temperature chains: 0-none, 1-some ladder info (default), 2-add chain-swap matrix.  Default: 2.</dd>
</dl>

### Manual temperature ladder for parallel tempering (tempLadder[])
At least \c nTemps increasing temperature values, starting with 1.0, <em>e.g.</em> <tt>1.00     2.00     4.00     8.00     16.00</tt>

\anchor sec_input_data
## SPINspiral.input.data

The data/noise input file

### General
<dl>
<dt>datasetName</dt><dd> Name of the data set used (for printing purposes), up to 80 characters, <em>e.g.</em> NINJA data set</dd>
</dl>

### Detector network
<dl>
<dt>networksize</dt><dd> Set the number of detectors that make up the network; read in networksize block of IFO data below (Currently 1--3)</dd>
<dt>selectifos</dt><dd> Select the IFOs to use  1: H1, 2: L1, 3: V, <em>e.g.</em> <tt>1 2 3</tt> </dd>
</dl>

### Data handling
<dl>
<dt>downsamplefactor</dt><dd> Downsample the sampling frequency of the detector (16-20kHz for the detectors, 4kHz for NINJA) by this factor.  Default (for detectors): 4.0. 10+1.4Mo needs \f$\sim 16\times\f$ a<0.1, 8x: \f$a\leq 0.8\f$, 4x: \f$a>0.8\f$. <tt>Notice the difference of a factor of \f$\sim4\f$ in the original sampling rate between detector data and e.g. the NINJA data files!</tt></dd>
<dt>databeforetc</dt><dd> The stretch of data in seconds before presumed coalescence that is read in as part of the data segment, <em>e.g.</em> 6.0.</dd>
<dt>dataaftertc</dt><dd> The stretch of data in seconds after presumed coalescence that is read in as part of the data segment, <em>e.g.</em> 1.0.</dd>
<dt>lowfrequencycut</dt><dd> Templates and overlap integration start at this frequency, <em>e.g.</em> 40.0.</dd>
<dt>highfrequencycut</dt><dd> Overlap integration ends at this frequency, <em>e.g.</em> 400.0.</dd>
<dt>tukeywin</dt><dd> Parameter for Tukey-window used in <tt>dataFT()</tt> (non-flat fraction of window);  Use 0.15 for Virgo data.  Default: 0.15.</dd>
</dl>

### Noise PSD estimation
<dl>
<dt>PSDsegmentNumber</dt><dd> Number of data segments used for the PSD estimation.  Default: 32, quick test runs: 8 or 4.</dd>
<dt>PSDsegmentLength</dt><dd> Length of each data segment used for PSD estimation.  Default: 8.0 \f$\rightarrow\f$ 32x8.0s = 256s, quick test runs: 4.0 or 2.0 (8x2.0 = 16s; 4x1.0s = 4s).</dd>
</dl>

\anchor sec_input_data_ifo
### IFO i

Parameters for the location, orientation and data file for each detector used
(see also \ref sec_frame "this section":

<dl>
<dt>name</dt><dd> Detector name, <em>e.g.</em> Hanford.</dd>
<dt>lati</dt><dd> Latitude (degrees), <em>e.g.</em> 46.45.</dd>
<dt>longi</dt><dd> Longitude (degrees), <em>e.g.</em> 119.41.</dd>
<dt>rightarm</dt><dd> Orientation of the 'right' arm (degrees), <em>e.g.</em> 36.80.</dd>
<dt>leftarm</dt><dd> Orientation of the 'left' arm (degrees), <em>e.g.</em> 126.80.</dd>
<dt>ch\f$1\f$name</dt><dd> Name of the data channel in the Frame file, <em>e.g.</em> \c H1:STRAIN (see \ref sec_frame "this section".</dd>
<dt>ch\f$1\f$filepath</dt><dd> Subdirectory of the path in <tt>SPINspiral.input.system</tt> where the data sits.  Use "." for no subdirectory.  Default: ".".</dd>
<dt>ch\f$1\f$fileprefix</dt><dd> Prefix of the Frame data file name, <em>e.g.</em> <tt>H-H1_NINJA_NOISE</tt> (see \ref sec_frame "this section".</dd>
<dt>ch\f$1\f$filesuffix</dt><dd> Suffix of the Frame file name, <em>e.g.</em> <tt>-1024.gwf</tt> (see \ref sec_frame "this section".</dd>
<dt>ch\f$1\f$filesize</dt><dd> `Size' (in seconds) of the data in each data Frame file, <em>e.g.</em> 1024.</dd>
<dt>ch\f$1\f$fileoffset</dt><dd> If the Frame file name ends in: -839366009-128.gwf (where 128 is the length of the data stream), \c fileoffset = <tt>mod(839366009,128)</tt>, <em>e.g.</em> 743 (see \ref sec_frame "this section".</dd>
<dt>ch\f$1\f$doubleprecision</dt><dd> Data in data Frame file is double precision (1) or not (0).  Default: 0.</dd>
<dt>add2channels</dt><dd> Keep 0, unless you want to read a signal from file.  Default: 0.</dd>

<dt>noiseGPSstart</dt><dd> GPS time to start reading data to generate a noise PSD,  <em>e.g.</em> 894377200.</dd>
<dt>noisechannel</dt><dd> Name of the data channel in the Frame file, <em>e.g.</em> \c H1:STRAIN.</dd>
<dt>noisefilepath</dt><dd> Directory of the path in <tt>SPINspiral.input.system</tt> where the noise files sit.  Use "." for no subdirectory.  Default: ".".</dd>
<dt>noisefileprefix</dt><dd> Prefix of the Frame data file name, <em>e.g.</em> <tt>H-H1_NINJA_NOISE</tt>.</dd>
<dt>noisefilesuffix</dt><dd> Suffix of the Frame data file name, <em>e.g.</em> <tt>-1024.gwf</tt>.</dd>
<dt>noisefilesize</dt><dd> `Size' (in seconds) of the data in each noise Frame file,  <em>e.g.</em> 1024.</dd>
<dt>noisefileoffset</dt><dd>  Modulo between the start time and length of a Frame file.  If the Frame file name ends in: <tt>-839366009-128.gwf</tt>, \c fileoffset = <tt>mod(839366009,128)</tt>,  <em>e.g.</em> 743.</dd>
<dt>noisedoubleprecision</dt><dd> Data in data Frame file is double precision (1) or nor (0).  Default: 0.</dd>
</dl>

## SPINspiral.input.injection
The software injection input file

### General
<dl>
<dt>injectSignal</dt><dd> Inject a signal into the data (1) or not (0).</dd>
<dt>injectionWaveform</dt><dd> Waveform version used for the software injection:  1 for 1.5PN 12-parameter Apostolatos, 2 for 3.5PN 12-parameter LAL, 3 for 3.5PN 15-parameter LAL.</dd>
<dt>injectionPNorder</dt><dd> Post-Newtonian order at which the injection signal should be generated, <em>e.g.</em> 1.5, 2.0, 3.5.</dd>
<dt>injectionSNR</dt><dd> If \f$>0\f$: scale the distance such that the injection network SNR becomes injectionSNR.</dd>
<dt>injRanSeed</dt><dd> Random number seed for random injection parameters. Don't change between serial chains of the same run!  Default: 12345.</dd>
</dl>

### Table: Parameters

Following the "General" section is a table with nine columns containing the following data:

<dl>
<dt>Number</dt><dd> Currently just to guide the eye in this file.</dd>
<dt>ID</dt><dd> a unique number for each parameter.  See \ref sec_parameter_catalogue "this section" for a list of current IDs.</dd>
<dt>InjectionValue</dt><dd> injection value for the parameter, can be overwritten depending on \c ranInjPar.</dd>
<dt>RanInjPar</dt><dd> randomise the injection value:
  <dl>
  <dt>0</dt><dd> no; inject InjectionValue.
  </dd><dt>1</dt><dd> yes; inject random value from a Gaussian distribution with centre InjectionValue and width Sigma (min BoundLow, max BoundUp).
  </dd><dt>2</dt><dd> yes; inject random value from range determined by BoundLow-BoundUp (make sure your MCMC prior matches this!).
  </dd></dl></dd>
<dt>Sigma</dt><dd> width of the Gaussian distribution to draw from for <tt>RanInjPar=1</tt>, <em>e.g.</em> 0.1.

  </dd>
<dt>BoundType</dt><dd> type of boundaries to use for the ranges of the injection parameters:
  <dl>
  <dt>1</dt><dd> general range, BoundLow-BoundUp
  </dd><dt>2</dt><dd> general range, InjectionValue + BoundLow - InjectionValue + BoundUp; BoundLow must be \f$\leq 0\f$, BoundUp must be \f$\geq 0\f$.
  </dd><dt>3</dt><dd> general range, InjectionValue * BoundLow - InjectionValue * BoundUp; BoundLow must be \f$\leq 1\f$, BoundUp must be \f$\geq 1\f$.
  </dd></dl></dd>
<dt>BoundLow, Up</dt><dd>: used to determine upper or lower bound for BoundType = 1,2.</dd>
<dt>Description</dt><dd> of the parameter, to increase readability of the file.</dd>
</dl>


## SPINspiral.input.parameters

### General
<dl>
<dt>mcmcWaveform</dt><dd> Waveform version used as MCMC template:  1 for 1.5PN 12-parameter Apostolatos, 2 for 3.5PN 12-parameter LAL, 3 for 3.5PN 15-parameter LAL, 4 for non-spinning LAL.</dd>
<dt>mcmcPNorder</dt><dd> Post-Newtonian order at which the MCMC template should be used, <em>e.g.</em> 1.5, 2.0, 3.5.</dd>
<dt>priorSet</dt><dd> Set of priors to use, currently: 1.</dd>
<dt>offsetMCMC</dt><dd> Start the MCMC with offset initial parameters: 0-no: use injection parameters, overrules Start below; 1-yes: use Start below.  Default: 1.</dd>
<dt>offsetX</dt><dd> Start the MCMC from a Gaussian distribution with a width of (offsetX times Sigma), if Start==2,4 below.  Default: 10.0.</dd>
</dl>

### Parameters
<dl>
<dt>Number</dt><dd> Currently just to guide the eye in this file.</dd>
<dt>ID</dt><dd> a unique number for a parameter.  See \ref sec_parameter_catalogue "this section" for a list of current IDs.</dd>
<dt>BestValue</dt><dd> best value for the parameter, <em>e.g.</em> from the trigger;  use to start from or close to.</dd>
<dt>Fix</dt><dd> fix an MCMC parameter (i.e., keep it constant throughout the MCMC run):
  <dl>
  <dt>0</dt><dd> no.
  </dd><dt>1</dt><dd> yes; fix to the starting value determined by \c Start
  </dd></dl>                </dd>
<dt>Start</dt><dd> where to start the Markov chains:
  <dl>
  <dt>1</dt><dd> start at best value.
  </dd><dt>2</dt><dd> start near best value (Gaussian distribution with width sigma).
  </dd><dt>3</dt><dd> start at injection value.
  </dd><dt>4</dt><dd> start near injection value (Gaussian distribution with width sigma).
  </dd><dt>5</dt><dd> start randomly from range determined by BoundLow-BoundUp (see prior type).
  </dd></dl>                </dd>
<dt>Sigma</dt><dd> width of the Gaussian distribution to start from for start=2,4; also used for diagonal of first correlation matrix.</dd>
</dl>

### Priors
<dl>
<dt>Type</dt><dd> Type of prior range:
  <dl>
  <dt>11</dt><dd> general range, BoundLow-BoundUp.
  </dd><dt>12</dt><dd> general range, best value+BoundLow - best value+BoundUp; BoundLow must be \f$\leq 0\f$, BoundUp must be \f$\geq 0\f$.
  </dd><dt>13</dt><dd> general range, best value*BoundLow - best value*BoundUp; BoundLow must be \f$\leq 1\f$, BoundUp must be \f$\geq 1\f$.
  </dd><dt>14</dt><dd> general range, injection value+BoundLow - injection value+BoundUp; BoundLow must be \f$\leq 0\f$, BoundUp must be \f$\geq 0\f$.
  </dd><dt>15</dt><dd> general range, injection value*BoundLow - injection value*BoundUp; BoundLow must be \f$\leq 1\f$, BoundUp must be \f$\geq 1\f$.
  </dd><dt>21</dt><dd> periodic boundaries \f$0-2\pi\f$; BoundLow, BoundUp will be ignored.
  </dd><dt>22</dt><dd> periodic boundaries \f$0-\pi\f$; BoundLow, BoundUp will be ignored.
  </dd></dl>                </dd>
<dt>BoundLow/Up</dt><dd> used to determine upper or lower bound, depending on prior type.  Ignored for periodic boundaries.</dd>
<dt>Description</dt><dd> symbol/name of the parameter, to increase readability of the file.</dd>
</dl>

## SPINspiral.input.system
A file with system-dependent parameters (well, currently one).

<dl>
<dt>datadir</dt><dd> Data directory (actual data files may be in a subdirectory of this, see <tt>SPINspiral.input.data</tt>), <em>e.g.</em> <tt>/home/user/MCMC/data</tt></dd>
</dl>

# Output files

## SPINspiral.output.123456.12

\anchor sec_parameter_catalogue
# Parameter catalogue

Goal: assign a unique identifier to each possible variable that has been used in \ref SPINspiral.c so far.
The identifier is stored in the variable <tt>parID[]</tt> and <tt>injID[]</tt> in the \c runPar and
\c mcmcvariables structs.  The reverse identification is stored in <tt>parRevID[]</tt> and
<tt>injRevID[]</tt>.  Thus, if the first parameter is \f$t_\mathrm{c}\f$, then <tt>parID[0]</tt>=11 and
<tt>parRevID[11]</tt>=0.  Whether a parameter is used (1) or not (0) for the software injection or MCMC
is stored in <tt>injParUse[]</tt> and <tt>mcmcParUse[]</tt>.  The arrays <tt>parAbrev[]</tt> and
<tt>parAbrv[]</tt> contain short and ultrashort parameter names respectively. The variable <tt>parDef[i]</tt>
signifies whether the parameter with ID \f$i\f$ is defined (1) or not (0).

## Time
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 11</td><td>\f$t_\mathrm{c}\f$</td><td>GPS time of coalescence</td><td>s</td><td>\f$[0,\infty[\f$</td></tr>
<tr><td>  \c 12</td><td>\f$t_\mathrm{40\,Hz}\f$</td><td>GPS time at 40\,Hz</td><td>s</td><td>\f$[0,\infty[\f$</td></tr>
<tr><td></td></tr></table>

## Distance
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 21</td><td>\f$d_\mathrm{L}^3\f$</td><td>Luminosity distance</td><td>Mpc\f$^3\f$</td><td>\f$]0,\infty[\f$</td></tr>
<tr><td>  \c 22</td><td>\f$^\mathrm{e}\log(d_\mathrm{L}/\mathrm{Mpc})\f$</td><td>Luminosity distance</td><td>---</td><td>\f$]-\infty,\infty[\f$</td></tr>
<tr><td></td></tr></table>

## Sky position
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 31</td><td>R.A. (\f$\alpha\f$)</td><td>Right ascension</td><td>rad</td><td>\f$[0,2\pi[\f$</td></tr>
<tr><td>  \c 32</td><td>\f$\sin(\mathrm{Dec})\f$ (\f$\sin(\delta)\f$)</td><td>Declination</td><td>---</td><td>\f$[-1,1]\f$</td></tr>
<tr><td></td></tr></table>

## Phase
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 41</td><td>\f$\varphi_\mathrm{orb,c}\f$</td><td>Orbital phase at coalescence</td><td>rad</td><td>\f$[0,2\pi[\f$</td></tr>
<tr><td></td></tr></table>

## Orientation
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 51</td><td>\f$\cos(\iota)\f$</td><td>Inclination</td><td>---</td><td>\f$[-1,1]\f$</td></tr>
<tr><td>  \c 52</td><td>\f$\psi\f$</td><td>Polarisation angle</td><td>rad</td><td>\f$[0,\pi[\f$</td></tr>
<tr><td>  \c 53</td><td>\f$\sin(\theta_{J_0})\f$</td><td>`Declination of \f$J_0\f$'</td><td>---</td><td>\f$[-1,1]\f$</td></tr>
<tr><td>  \c 54</td><td>\f$\varphi_{J_0}\f$</td><td>`R.A. of \f$J_0\f$'</td><td>rad</td><td>\f$[0,2\pi[\f$</td></tr>
<tr><td></td></tr></table>

## Mass
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 61</td><td>\f$\cal{M}\f$</td><td>Chirp mass</td><td>\f$M_\odot\f$</td><td>\f$[0,\infty[\f$</td></tr>
<tr><td>  \c 62</td><td>\f$\eta\f$</td><td>Symmetric mass ratio</td><td>---</td><td>\f$[0,0.25]\f$</td></tr>
<tr><td>  \c 63</td><td>\f$M_1\f$</td><td>Mass 1</td><td>\f$M_\odot\f$</td><td>\f$[0,\infty[\f$</td></tr>
<tr><td>  \c 64</td><td>\f$M_2\f$</td><td>Mass 2</td><td>\f$M_\odot\f$</td><td>\f$[0,\infty[\f$</td></tr>
<tr><td></td></tr></table>

## Spin 1
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 71</td><td>\f$a_\mathrm{spin,1}\f$</td><td>Spin magnitude 1</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 72</td><td>\f$\cos(\theta_\mathrm{spin,1})\f$</td><td>Spin tilt 1</td><td>---</td><td>\f$[-1,1]\f$</td></tr>
<tr><td>  \c 73</td><td>\f$\varphi_\mathrm{spin,1}\f$  (\f$\alpha_\mathrm{c}\f$)</td><td>Spin phase 1</td><td>rad</td><td>\f$[0,2\pi[\f$</td></tr>
<tr><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>  \c 75</td><td>\f$S_\mathrm{1,x}\f$</td><td>Spin 1 magnitude, x-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 76</td><td>\f$S_\mathrm{1,y}\f$</td><td>Spin 1 magnitude, y-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 77</td><td>\f$S_\mathrm{1,z}\f$</td><td>Spin 1 magnitude, z-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td></td></tr></table>

## Spin 2
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 81</td><td>\f$a_\mathrm{spin,2}\f$</td><td>Spin magnitude 2</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 82</td><td>\f$\cos(\theta_\mathrm{spin,2})\f$</td><td>Spin tilt 2</td><td>---</td><td>\f$[-1,1]\f$</td></tr>
<tr><td>  \c 83</td><td>\f$\varphi_\mathrm{spin,2}\f$</td><td>Spin phase 2</td><td>rad</td><td>\f$[0,2\pi[\f$</td></tr>
<tr><td></td><td></td><td></td><td></td><td></td></tr>
<tr><td>  \c 85</td><td>\f$S_\mathrm{2,x}\f$</td><td>Spin 2 magnitude, x-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 86</td><td>\f$S_\mathrm{2,y}\f$</td><td>Spin 2 magnitude, y-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td>  \c 87</td><td>\f$S_\mathrm{2,z}\f$</td><td>Spin 2 magnitude, z-component</td><td>---</td><td>\f$[0,1]\f$</td></tr>
<tr><td></td></tr></table>

## Merger, ringdown
<table><tr><td>
  \c Number</td><td>\c Variable</td><td>\c Description</td><td>\c Unit</td><td>\c Range</td></tr>
<tr><td>  \c 91</td><td></td><td></td><td></td><td>\f$[,]\f$</td></tr>
<tr><td></td></tr></table>

\anchor sec_frame
# Reading Frame files

Frame files are designed to store detector data and are also used to store synthetic noise.
They can be read using [libframe](http://lappweb.in2p3.fr/virgo/FrameL), see e.g.
<tt>/export/apps/lsc/libframe/</tt> on Fugu.

\ref SPINspiral.c can read Frame files.  The parameters in <tt>SPINspiral.input.data</tt>
(\ref sec_input_data_ifo "this section" determine how this is done.

The name of a Frame file typically looks like <tt>H-H1_SOME_TEXT-123456789-123.gwf</tt>
(using a file with detector data from H1 as an example).  The first part (<tt>H-H1_SOME_TEXT-</tt>)
goes into the parameter \c ch1fileprefix, while the last part (<tt>-123.gwf</tt>)
is stored in \c ch1filesuffix.

The example number \c 123456789 indicates the starting GPS time (in seconds) of the
data in the file, while \c 123 is the length of the data strech in the file, again
in seconds (and again an example). In order for the code to know at which GPS time Frame
files start and stop, we need to feed the modulus of the two numbers (<tt>mod(123456789,123) = 90</tt>
here) to the parameter \c ch1fileoffset.  At the moment, we cannot read subsequent files
of different length (using \c FrCopy, which can copy multiple files into one, is a
quick-and-dirty solution. The ability to read cache files would be a better one).

One of the more obscure parameters is the channel name \c ch1name.  It can be found
using the program \c FrDump, which comes with \c libframe: \\
<tt>FrDump -i H-H1_SOME_TEXT-123456789-123.gwf |grep ProcData</tt>\\
The channel name is probably going to look like \c H1:STRAIN (for the case of
the H1 detector).

\endif
*/
