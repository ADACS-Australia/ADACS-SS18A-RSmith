#!/usr/bin/env @PYTHONPROG@

# End-to-end LALInference test pipeline
# (C) 2014 John Veitch

from lalapps import lalinference_pipe_utils as pipe_utils
from lalapps import inspiralutils
from glue import pipeline
import ConfigParser
from optparse import OptionParser,OptionValueError
import sys
import ast
import os


class PriorTestDAG(pipeline.CondorDAG):
  """
  Class to contain outer DAG workflow
  """
  def __init__(self,cp,dax=False,site='local'):
    pass



usage=""" %prog [options] config.ini
Setup a DAG to run an end-to-end lalinference test:
 1) Generate samples from prior
 2) Analyse a set of injections drawn from the prior
 3) Run P vs P test on results
"""

parser=OptionParser(usage)
parser.add_option("-r","--run-path",default=None,action="store",type="string",help="Directory to run pipeline in (default: $PWD)",metavar="RUNDIR")
parser.add_option("-p","--daglog-path",default=None,action="store",type="string",help="Path to directory to contain DAG log file. SHOULD BE LOCAL TO SUBMIT NODE",metavar="LOGDIR")
parser.add_option("-x", "--dax",action="store_true",default=False, help="Delete the ligo_data_find jobs and populate frame LFNs in the DAX")
parser.add_option("-G", "--grid-site",action="store",type="string",metavar="SITE", help="Specify remote site in conjunction with --dax option. e.g. --grid-site=creamce for Bologna cluster.\
Supported options are: creamce and local",default=None)


(opts,args)=parser.parse_args()

inifile=args[0]

cp=ConfigParser.ConfigParser()
cp.optionxform = str
cp.readfp(open(inifile))

if opts.run_path is not None:
  cp.set('paths','basedir',os.path.abspath(opts.run_path))

if opts.daglog_path is not None:
  cp.set('paths','daglogdir',os.path.abspath(opts.daglog_path))
elif opts.run_path is not None:
  cp.set('paths','daglogdir',os.path.abspath(opts.run_path))
else:
  cp.set('paths','daglogdir',os.path.abspath(cp.get('paths','basedir')))

local_work_dir=cp.get('paths','daglogdir')

# Create a DAG to contain the other scripts

outerdag=pipeline.CondorDAG


# Run code with prior sampling
priordag=pipe_utils.LALInferencePipelineDAG(cp,dax=opts.dax,site=opts.grid_site)


priordagjob=pipeline.CondorDAGManJob()

# Convert prior samples to injections

# Create the pipeline based on the injections

# Analyse results of injection runs to generate PP plot



