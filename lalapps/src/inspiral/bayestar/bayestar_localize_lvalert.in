#!@PYTHONPROG@
#
# Copyright (C) 2013  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
"""
Listen for new events from lvalert and perform sky localization.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


#
# Command line interface
#

from optparse import Option, OptionParser
parser = OptionParser(
    description=__doc__,
    usage="%prog [options] [GRACEID]"
)
opts, args = parser.parse_args()


#
# Late imports
#

from cStringIO import StringIO
import json
import io
import logging
import os
import shutil
import sys
import tempfile
import time
import urlparse

import ligo.gracedb.logging
import ligo.gracedb.rest
import ligo.lvalert.utils


#
# Logging
#

logging.basicConfig(level=logging.DEBUG)
log = logging.getLogger('BAYESTAR')


#
# Functions
#


class DownloadNotFoundError(Exception):
    pass


def wait_for_download(gracedb, graceid, filename, max_timeout=16):
    timeout = 1
    log.debug("%s:waiting for file to arrive", filename)
    while True:
        try:
            fileobj = gracedb.files(graceid, filename)
        except ligo.gracedb.rest.HTTPError:
            if timeout <= max_timeout:
                log.debug('%s:not found, sleeping for %d seconds', filename, timeout)
                time.sleep(timeout)
                timeout *= 2
            else:
                raise DownloadNotFoundError(filename)
        else:
            log.debug('%s:downloaded', filename)
            return fileobj


#
# Parse input
#

if len(args) > 0:
    # Manual start
    lvadata = {'uid': args[0], 'alert_type': 'new'}
else:
    # Read LVAlert data from stdin
    lvadata = ligo.lvalert.utils.get_LVAdata_from_stdin(sys.stdin, as_dict=True)


#
# Act on input
#

graceid = lvadata['uid']
alert_type = lvadata['alert_type']
log.info("received lvalert event for uid='%s' of type '%s'", graceid, alert_type)

if alert_type == 'new':
    # Fire up a GraceDb client
    gracedb = ligo.gracedb.rest.GraceDb()

    # Send log messages to GraceDb too
    handler = ligo.gracedb.logging.GraceDbLogHandler(gracedb, graceid)
    handler.setLevel(logging.INFO)
    logging.root.addHandler(handler)

    # A little bit of Cylon humor
    log.info('by your command...')

    # Produce log message for any otherwise uncaught exception
    try:
        try:
            # download coinc.xml
            coinc_file = wait_for_download(gracedb, graceid, "coinc.xml")
        except DownloadNotFoundError as e:
            log.error("%s:file not found, giving up on this event", e.args[0])

        try:
            # download psd.xml.gz
            psd_file = wait_for_download(gracedb, graceid, "psd.xml.gz")
        except DownloadNotFoundError as e:
            psd_file = None
            log.warn("%s:file not found, assuming aLIGO/AdvVirgo model PSDs", e.args[0])

        # perform sky localization
        from lalinference.bayestar.ligolw_sky_map import gracedb_sky_map
        from lalinference.bayestar import fits
        log.info("starting sky localization")
        sky_map, epoch, elapsed_time, instruments = gracedb_sky_map(coinc_file, psd_file, "TaylorF2threePointFivePN", 10, prior_distance_power=-1, reference_frequency=120)
        log.info("sky localization complete")

        # upload FITS file
        fitsdir = tempfile.mkdtemp()
        try:
            fitspath = os.path.join(fitsdir, "skymap.fits.gz")
            fits.write_sky_map(fitspath, sky_map, gps_time=float(epoch),
                creator=parser.get_prog_name(), objid=str(graceid),
                url='https://gracedb.ligo.org/events/{0}'.format(graceid),
                runtime=elapsed_time, instruments=instruments)
            response = gracedb.writeFile(graceid, fitspath)
            response_json = response.read()
            attrs = json.loads(response_json)
            permalink_url = attrs['permalink']
            permalink_path = urlparse.urlparse(permalink_url).path
            permalink_filename = os.path.basename(permalink_path)

            # FIXME: the 'permalink' URL does not work in a browser; use this
            # hardcoded URL base instead
            log.info('uploaded sky map: <a href="https://ldas-jobs.phys.uwm.edu/gracedb/data/%s/private/%s">%s</a>', graceid, permalink_filename, permalink_filename)
        finally:
            shutil.rmtree(fitsdir)

        # write EM_READY label
        gracedb.writeLabel(graceid, "EM_READY")
    except:
        log.exception("sky localization failed")
        raise
else:
    # LVAlert notification was not intended for us
    log.info("ignoring")
