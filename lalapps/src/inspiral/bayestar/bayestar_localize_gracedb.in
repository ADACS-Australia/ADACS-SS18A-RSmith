#!@PYTHONPROG@
#
# Copyright (C) 2013  Leo Singer
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#
"""
Generate a sky map for a GraCEDb event by extracting times of arrival and SNRs
for the coinc_inspiral record that is present in a LIGO LW-XML file.

The filename of the (optionally gzip-compressed) LIGO-LW XML input is an
optional argument; if omitted, input is read from stdin.

The distance prior is controlled by the --prior-distance-power argument.
If you set --prior-distance-power=k, then the distance prior is
proportional to r^k. The default is 2, uniform in volume.

If the --min-distance argument is omitted, it defaults to zero. If the
--max-distance argument is omitted, it defaults to the SNR=4 horizon
distance of the most sensitive detector.

Output is an optionally gzip-compressed HEALPix FITS file, whose filename is
provided by the required "-o" or "--output" argument.
"""
__author__ = "Leo Singer <leo.singer@ligo.org>"


# Command line interface.
from optparse import Option, OptionParser
from lalinference.bayestar import command

parser = OptionParser(
    formatter = command.NewlinePreservingHelpFormatter(),
    description = __doc__,
    usage = '%prog [options] --prior-distance-power -1|2 [INPUT.xml[.gz]] --psd PSD.xml[.gz] -o OUTPUT.fits[.gz]',
    option_list = [
        Option("--nside", "-n", type=int, default=-1,
            help="HEALPix lateral resolution [default: auto]"),
        Option("--f-low", type=float, default=10, metavar="Hz",
            help="Low frequency cutoff [default: %default]"),
        Option("--waveform", default="TaylorF2threePointFivePN",
            help="Waveform to use for determining parameter estimation accuracy from signal model [default: %default]"),
        Option("--min-distance", type=float, metavar="Mpc",
            help="Minimum distance of prior in megaparsecs [default: infer from effective distance]"),
        Option("--max-distance", type=float, metavar="Mpc",
            help="Maximum distance of prior in megaparsecs [default: infer from effective distance]"),
        Option("--prior-distance-power", type=int, metavar="-1|2",
            help="Distance prior [-1 for uniform in log, 2 for uniform in volume, default: 2]"),
        Option("--reference-frequency", type=float, metavar="Hz",
            help="Shift trigger times from coalescence time to time when GW inspiral has this frequency"),
        Option("--psd", metavar="PSD.xml[.gz]",
            help="Name of file containing noise power spectral densities of detectors (required)."),
        Option("--output", "-o", metavar="OUTPUT.fits[.gz]",
            help="Name of output file (required)")
    ]
)
opts, args = parser.parse_args()
infilename = command.get_input_filename(parser, args)
command.check_required_arguments(parser, opts, "psd", "output")


#
# Logging
#

import logging
logging.basicConfig(level=logging.INFO)
log = logging.getLogger('BAYESTAR')

# BAYESTAR imports.
from lalinference.bayestar import fits
from lalinference.bayestar.ligolw_sky_map import gracedb_sky_map

sky_map, epoch, elapsed_time, instruments = gracedb_sky_map(open(infilename, "rb"), open(opts.psd, "rb"), opts.waveform, opts.f_low, opts.min_distance, opts.max_distance, opts.prior_distance_power, reference_frequency=opts.reference_frequency, nside=opts.nside)

# Write sky map
fits.write_sky_map(opts.output, sky_map, gps_time=float(epoch),
    creator=parser.get_prog_name(), runtime=elapsed_time, instruments=instruments)
