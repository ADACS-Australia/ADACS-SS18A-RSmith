#!/usr/bin/env @PYTHONPROG@
"""
flag_triggers.in - find DQ flags common to triggers

$Id $

This small utility reads in trigger files generated by the ihope daily pages,
specifically those that have not been vetoed after cat 4.  It then finds DQ
flags that were on during the time of those triggers, and ranks those flags by
the percentage of triggers covered.  

The idea is that if there are lots of loud glitches this program will suggest
flags that can be used to veto them.

usage: lalapps_flag_triggers ifo trigger_snr_threshold dir1 dir2 ...

where the dirs are ihope_daily analysis directories
"""



import os
import sys
import pickle

ifo      = sys.argv[1]
category = int(sys.argv[2])
thresh   = float(sys.argv[3])
dirs     = sys.argv[4:]

all_triggers = []

for d in dirs:
    trigger_file  = '%s/%s-%d-INSPIRAL_16SEC_CLUSTERED.csv' % (d,ifo,category)
    triggers      = [x.strip().split(',') for x in open(trigger_file)]
    all_triggers += [(x[0], float(x[3])) for x in triggers if float(x[3]) > thresh]


num_triggers = len(all_triggers)
print "Found %d triggers\n\n" % num_triggers

# divide by 100 = multiply percentage by 100 below
num_triggers = float(num_triggers)

flags     = {}
end_times = ' '.join([t[0] for t in all_triggers])

pipe  = os.popen('ligolw_dq_query --database --include-segments %s --in-segments-only --report %s' % (ifo, end_times))

for line in pipe:
    flag, beforet, timet, aftert = [x for x in line.split() if x != '']
    # append the time (rather than increment a counter)
    # in case anyone later wants to see each list
    flags.setdefault(flag,set()).add(timet)

use_percents = [(k, flags[k]) for k in flags]
use_percents = sorted(use_percents, cmp=lambda x,y:cmp(len(y[1]),len(x[1])))

for name, triggers in use_percents:
    print '%-45s        %.2f' % (name[3:], 100.0 * (float(len(triggers)) / num_triggers))

