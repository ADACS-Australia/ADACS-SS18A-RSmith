#!/usr/bin/env python
"""
condor_submit_dax [--verbose] dax_file site

dax_file - DAX file to submit
site - site at which to run DAX
"""

import ConfigParser
import optparse
import os
import socket
import sys
import urllib
import urlparse

sites_url = "http://ldas-jobs.ligo.caltech.edu/~bdaudert/sites.xml"
properties_url = "http://ldas-jobs.ligo.caltech.edu/~bdaudert/properties.bundle"

class PegasusTransformationCatalog(list):
    def write_tc_data(self, file_obj):
        file_obj.write("\n".join(map(str, self)) + "\n")

class PegasusTransformation(object):
    __slots__ = ["siteID", "LogicalTX", "PhysicalTX", "Type", "SystemInfo",
        "Profiles"]
    
    def __str__(self):
        return " ".join([getattr(self, key) for key in self.__slots__])

def get_url(url, verbose=False):
    """
    Connect to a server and download the url.
    The path to this temporary file is returned.
    """
    if verbose:
        print "Downloading " + url

    dest, info = urllib.urlretrieve(url)

    if verbose >= 2:
        print info
    return dest

def parse_args():
    parser = optparse.OptionParser(version="$Id$")
    parser.add_option("-s", "--sites-file",
        help="site.xml describing the desired sites")
    parser.add_option("-p", "--properties-file",
        help="property bundle with pegasus preferences")
    parser.add_option("-i", "--ini-file",
        help="inspiral_hipe's ini file with which to create tc.data")
    parser.add_option("-n", "--no-submit", action="store_true", default=False,
        help="concretize the DAG and generate a sub file for it; do not submit to cluster")
    parser.add_option("-v", "--verbose", action="store_true", default=False,
        help="print informative messages")
    
    opts, args = parser.parse_args()
    
    if len(args) < 2:
        print >>sys.stderr, "not enough arguments"
    
    return opts, args

#
# Main
#

# commandline
opts, args = parse_args()
dax_file = args[0]
site = args[1]

# fetch site descriptions and property bundle if necessary
if opts.sites_file is None:
    opts.sites_file = get_url(sites_url, opts.verbose)
if opts.properties_file is None:
    opts.properties_file = get_url(properties_url, opts.verbose)

# create tc.data if necessary
if opts.ini_file:
    if os.path.isfile("tc.data"): raise ValueError, "tc.data already exists"
    cp = ConfigParser.ConfigParser()
    cp.read(opts.ini_file)
    hostname = socket.getfqdn()
    
    catalog = PegasusTransformationCatalog()
    for prog, path in cp.items("condor"):
        tx = PegasusTransformation()
        tx.siteID = "local"
        tx.LogicalTX = "ligo::%s:1.0" % os.path.split(path)[1]
        tx.PhysicalTX = urlparse.urlunsplit(("gsiftp", hostname,
            os.path.abspath(path), None, None))
        tx.Type = "STATIC_BINARY"
        tx.SystemInfo = "INTEL32::LINUX"
        tx.Profiles = ""
        catalog.append(tx)
    catalog.write_tc_data(open("tc.data", "w"))

#
# run Pegasus stuff
#

# do pegasus-plan
cwd = os.getcwd()

plan_args = ["pegasus-plan"]
plan_args.append("-Dpegasus.user.properties=%s" % opts.properties_file)
plan_args.append("-Dpegasus.dir.storage=%s" % cwd)
plan_args.append("--dir ./submit_files")
plan_args.append("--sites %s" % site)
plan_args.append("--output local")
plan_args.append("--dax %s" % dax_file)
plan_args.append("--nocleanup")
plan_args.append("--verbose")
plan_command = " ".join(plan_args)

if opts.verbose: print "Executing: " + plan_command
plan_in, plan_out, plan_err = os.popen3(plan_command)
pid, status = os.wait()

if status != 0:
    print >>sys.stderr, "External call failed."
    print >>sys.stderr, "  status: %d" % status
    print >>sys.stderr, "  stdout: %s" % plan_out.read()
    print >>sys.stderr, "  stderr: %s" % plan_err.read()
    print >>sys.stderr, "  command: %s" % plan_command
    sys.exit(status)
plan_out_lines = plan_out.readlines()

# do pegasus-run
run_commands = [line.strip() for line in plan_out_lines if line.startswith("pegasus-run")]
if len(run_commands) == 0:
    print >>sys.stderr, "Where is the run command?  I couldn't find it in the following:"
    print >>sys.stderr, plan_out_lines
    sys.exit(1)
elif len(run_commands) > 1:
    print >>sys.stderr, "I are t3h confus3d.  Why do I find more than one command to run?"
    print >>sys.stderr, "Matching lines:"
    print >>sys.stderr, run_commands
    print >>sys.stderr, "All lines:"
    print >>sys.stderr, "".join(plan_out_lines)
    sys.exit(1)
run_command = run_commands[0]
run_args = run_command.split(" ")

if opts.no_submit:
    dag_filename = os.path.join(run_args[-1], dax_base + ".dag")
    os.execvp("condor_submit_dag", ("condor_submit_dag", "-nosubmit", dag_filename))
else:
    os.execvp(run_args[0], run_args)
