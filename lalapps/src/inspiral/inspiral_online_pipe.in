#!/usr/bin/env @PYTHONPROG@
"""
inspiral_online_pipe.py - online inspiral pipeline driver script

$Id$

This script produced the necessary condor submit and dag files to run
a prototype online analysis in E11
"""

__author__ = 'Duncan Brown <duncan@gravity.phys.uwm.edu>'
__date__ = '$Date$'
__version__ = '$Revision$'[11:-2]

# import standard modules and append the lalapps prefix to the python path
import sys, os
import popen2, time
import getopt, re, string
import tempfile
import ConfigParser
import urlparse
sys.path.append('@PYTHONLIBDIR@')

# import the modules we need to build the pipeline
import pipeline, inspiral

def usage():
  msg = """\
Usage: lalapps_inspiral_pipe [options]

  -h, --help               display this message
  -v, --version            print version information and exit
  -u, --user-tag TAG       tag the job with TAG (overrides value in ini file)

  -f, --config-file FILE   use configuration file FILE
  -l, --log-path PATH      directory to write condor log file
"""
  print >> sys.stderr, msg

# pasrse the command line options to figure out what we should do
shortop = "hvu:f:l:"
longop = [
  "help",
  "version",
  "user-tag=",
  "config-file=",
  "log-path="
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

config_file = None
usertag = None
config_file = None
log_path = None

for o, a in opts:
  if o in ("-v", "--version"):
    print "$Id$"
    sys.exit(0)
  elif o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-u", "--user-tag"):
    usertag = a
  elif o in ("-f", "--config-file"):
    config_file = a
  elif o in ("-l", "--log-path"):
    log_path = a
  else:
    print >> sys.stderr, "Unknown option:", o
    usage()
    sys.exit(1)

if not config_file:
  print >> sys.stderr, "No configuration file specified."
  print >> sys.stderr, "Use --config-file FILE to specify location."
  sys.exit(1)

if not log_path:
  print >> sys.stderr, "No log file path specified."
  print >> sys.stderr, "Use --log-path PATH to specify a location."
  sys.exit(1)

try: os.mkdir('cache')
except: pass
try: os.mkdir('logs')
except: pass

# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(config_file)

# if a usertag has been specified, override the config file
if usertag:
  cp.set('pipeline','user-tag',usertag)
else:
  try:
    usertag = string.strip(cp.get('pipeline','user-tag'))
  except:
    usertag = None

# create a log file that the Condor jobs will write to
dagfilesuffix = '.dag'
basename = re.sub(r'\.ini',r'',config_file)
tempfile.tempdir = log_path
if usertag:
  tempfile.template = basename + '.' + usertag + dagfilesuffix + '.log.'
else:
  tempfile.template = basename + dagfilesuffix + '.log.'
logfile = tempfile.mktemp()
fh = open( logfile, "w" )
fh.close()

# create the DAG writing the log to the specified directory
dag = pipeline.CondorDAG(logfile)
if usertag:
  dag.set_dag_file(basename + '.' + usertag + dagfilesuffix)
else:
  dag.set_dag_file(basename + dagfilesuffix)

# create the Condor jobs that will be used in the DAG
df_job = pipeline.LSCDataFindJob('cache','logs',cp)
tmplt_job = inspiral.TmpltBankJob(cp)
insp_job = inspiral.InspiralJob(cp)
inca_job = inspiral.IncaJob(cp)

# set better submit file names than the default
if usertag:
  subsuffix = '.' + usertag + '.sub'
else:
  subsuffix = '.sub'
df_job.set_sub_file( basename + '.datafind'+ subsuffix )
tmplt_job.set_sub_file( basename + '.tmpltbank' + subsuffix )
insp_job.set_sub_file( basename + '.inspiral' + subsuffix )
inca_job.set_sub_file( basename + '.inca' + subsuffix )

# set the usertag in the jobs
if usertag:
  tmplt_job.add_opt('user-tag',usertag)
  insp_job.add_opt('user-tag',usertag)
  inca_job.add_opt('user-tag',usertag)

# get the pad and chunk lengths from the values in the ini file
pad = int(cp.get('data', 'pad-data'))
n = int(cp.get('data', 'segment-length'))
s = int(cp.get('data', 'number-of-segments'))
r = int(cp.get('data', 'sample-rate'))
o = int(cp.get('inspiral', 'segment-overlap'))
length = ( n * s - ( s - 1 ) * o ) / r
overlap = o / r

# read science segs that are greater or equal to a chunk from the input file
data = pipeline.ScienceData()
data.read(cp.get('input','segments'),length)

# create the chunks from the science segments
data.make_chunks(length,overlap,0,0,overlap/2)
data.make_chunks_from_unused(
  length,overlap/2,0,overlap/2,0,overlap/2)

# get the order of the ifos to filter
ifo = cp.get('pipeline','ifo')

# create all the LSCdataFind jobs to run in sequence
prev_df = None

# store things needed for a big inca at the end
dag_start_time = None
dag_end_time = None
insp_nodes = []

for seg in data:
  # find all the data
  df = pipeline.LSCDataFindNode(df_job)
  df.set_start(seg.start() - pad)
  df.set_end(seg.end() + pad)
  df.set_observatory(ifo1[0])
  if prev_df: 
    df.add_parent(prev_df)
  dag.add_node(df)
  prev_df = df

  for chunk in seg:
    # remember the start time and update the end time
    if not dag_start_time:
      dag_start_time = chunk.start()
    dag_end_time = chunk.end()

    # create the template bank job
    bank = inspiral.TmpltBankNode(tmplt_job)
    bank.set_start(chunk.start())
    bank.set_end(chunk.end())
    bank.set_ifo(ifo)
    bank.set_cache(df.get_output())
    bank.add_parent(df)
    dag.add_node(bank)

    # create the inspiral job
    insp = inspiral.InspiralNode(insp_job)
    insp.set_start(chunk.start())
    insp.set_end(chunk.end())
    insp.add_var_opt('trig-start-time',chunk.trig_start())
    insp.add_var_opt('snr-threshold',ifo1_snr)
    insp.add_var_opt('chisq-threshold',ifo1_chisq)
    insp.set_ifo(ifo)
    insp.set_cache(df.get_output())
    insp.set_bank(bank.get_output())
    insp.add_parent(bank)
    insp.add_parent(df)
    dag.add_node(insp)
    insp_nodes.append(insp)

# use inca to concatenate all the inspiral files
inca = inspiral.IncaNode(inca_job)
inca.add_opt('single-ifo')
inca.add_var_opt('ifo-a',ifo)
inca.add_var_opt('gps-start-time',dag_start_time)
inca.add_var_opt('gps-end-time',dag_end_time)
inca.add_opt('all-data')
for insp in insp_nodes:
  inca.add_var_arg(insp.get_output())
dag.add_node(inca)

# write the dag
dag.write_dag()

# write out a log file for this script
if usertag:
  log_fh = open(basename + '.pipeline.' + usertag + '.log', 'w')
else:
  log_fh = open(basename + '.pipeline.log', 'w')
  
log_fh.write( "$Id$" + "\n\n" )
log_fh.write( "Invoked with arguments:\n" )
for o, a in opts:
  log_fh.write( o + ' ' + a + '\n' )
log_fh.write( "\n" )
log_fh.write( "Parsed " + str(len(data)) + " science segments\n" )
total_data = 0
for seg in data:
  for chunk in seg:
    total_data += len(chunk)
print >> log_fh, "total data =", total_data

print >> log_fh, "\n===========================================\n"
print >> log_fh, data
for seg in data:
  print >> log_fh, seg
  for chunk in seg:
    print >> log_fh, chunk

sys.exit(0)
