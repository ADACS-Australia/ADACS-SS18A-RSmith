#!/usr/bin/python
#
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Program for changing the instrument names appearing in the tables in a LIGO
Light Weight XML file.  Used as a hack to allow the standard burst
coincidence tools in pylal when looking for coincidences between a single
instrument's science and auxiliary channels.

"""


from optparse import OptionParser
import sys

from glue.ligolw import table
from glue.ligolw import lsctables
from pylal import llwapp


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"
__date__ = "$Date$"


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("-m", "--map", metavar = "old:new", action = "append", default = [], help = "Change the instrument named \"old\" to \"new\".")
	parser.add_option("-p", "--program", metavar = "name", default = "lalapps_power", help = "Set name of program whose triggers are being modified (default = \"lalapps_power\").")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	try:
		options.map = dict([m.split(":") for m in options.map])
	except Exception, e:
		raise ValueError, "unable to parse mappings: %s" % str(e)

	return options, (filenames or [None])


#
# =============================================================================
#
#                                  Remapping
#
# =============================================================================
#


def apply_map(instruments, mapping):
	"""
	instruments:
		an instrument string in the form "H1" or "H1,H2" or
		"H1+H2".
	mapping:
		a dictionary of old name --> new name pairs.

	Example:

	>>> ifos = "H1,L1"
	>>> map = {"L1": "secret"}
	>>> apply_map(ifos, map)
	'H1,secret'
	"""
	if "," in instruments:
		instruments = instruments.split(",")
	elif "+" in instruments:
		instruments = instruments.split("+")
	else
		# not a multi-instrument list
		try:
			return mapping[instruments]
		except KeyError:
			# this instrument is not being renamed
			return instruments
	for i in range(len(instruments)):
		try:
			instruments[i] = mapping[instruments[i]]
		except KeyError:
			# this instrument is not being renamed
			pass
	return ",".join(instruments)


def remap_instruments(xmldoc, program_name, mapping, verbose = False):
	if verbose:
		print >>sys.stderr, "remapping instruments ..."

	#
	# the process ids we care about
	#

	ids = llwapp.get_process_ids_by_program(xmldoc, program_name)

	#
	# process table
	#

	for row in table.get_table(xmldoc, lsctables.ProcessTable.tableName):
		if row.process_id in ids:
			row.ifos = apply_map(row.ifos, mapping)

	#
	# search_summary table
	#

	for row in table.get_table(xmldoc, lsctables.SearchSummaryTable.tableName):
		if row.process_id in ids:
			row.ifos = apply_map(row.ifos, mapping)

	#
	# sngl_burst table
	#

	for row in table.get_table(xmldoc, lsctables.SnglBurstTable.tableName):
		if row.process_id in ids:
			row.ifo = apply_map(row.ifo, mapping)


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()


for n, filename in enumerate(filenames):
	if options.verbose:
		print >>sys.stderr, "%d/%d: " % (n + 1, len(filenames)),

	xmldoc = llwapp.load_filename(filename, gz = (filename or "stdin").endswith(".gz"), verbose = options.verbose)

	remap_instruments(xmldoc, options.program, options.mapping, verbose = options.verbose)

	llwapp.write_filename(xmldoc, filename, gz = (filename or "stdout").endswith(".gz"), verbose = options.verbose)
