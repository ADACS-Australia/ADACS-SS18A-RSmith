#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


from optparse import OptionParser
import sys

from glue.ligolw import table
from glue.ligolw import lsctables
from glue.ligolw import ilwd
from glue.ligolw import utils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	return options, (filenames or [None])


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#


options, filenames = parse_command_line()

for filename in filenames:
	# read the file
	doc = utils.load_filename(filename, verbose = options.verbose, gz = filename[-3:] == ".gz")

	# find the coinc_event_map table, skip it does not have one
	try:
		coinc_event_map = table.get_table(doc, lsctables.CoincMapTable.tableName)
	except ValueError:
		continue

	# skip if the coinc_event_map table already has a table_name column
	try:
		coinc_event_map.getColumnByName("table_name")
	except KeyError:
		pass
	else:
		continue

	# add a table_name column
	table_name_col = coinc_event_map.appendColumn("table_name")

	# find the event_id column
	event_id_col = coinc_event_map.getColumnByName("event_id")

	# populate the table_name column from the event_id column
	for i, event_id in enumerate(event_id_col):
		table_name_col[i] = ilwd.ILWDTableName(event_id)

	# write the file
	utils.write_filename(doc, filename, verbose = options.verbose, gz = filename[-3:] == ".gz")
