#!/usr/bin/python
#
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

import numpy
from optparse import OptionParser
import sys

from glue.ligolw import ligolw
from glue.ligolw import lsctables
from glue import segments
from glue import segmentsUtils
from pylal import llwapp
from pylal.date import LIGOTimeGPS

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"
__date__ = "$Date$"


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version = "%prog CVS $Id$")
	parser.add_option("--comment", metavar = "text", default = "", help = "set comment string in process table")
	parser.add_option("-s", "--segwizard-segments", metavar = "filename", help = "read segment list from filename (segwizard format)")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	if options.segwizard_segments:
		options.seglist = segmentsUtils.fromsegwizard(file(options.segwizard_segments), coltype = LIGOTimeGPS)
	else:
		raise ValueError, "must specify a segment list"

	return options, (filenames or [None])


#
# =============================================================================
#
#                                 Preparation
#
# =============================================================================
#

def new_doc():
	doc = ligolw.Document()
	doc.appendChild(ligolw.LIGO_LW())
	doc.childNodes[0].appendChild(lsctables.New(lsctables.ProcessTable))
	doc.childNodes[0].appendChild(lsctables.New(lsctables.ProcessParamsTable))
	doc.childNodes[0].appendChild(lsctables.New(lsctables.SearchSummaryTable, ["process_id", "ifos", "in_start_time", "in_start_time_ns", "in_end_time", "in_end_time_ns", "out_start_time", "out_start_time_ns", "out_end_time", "out_end_time_ns"]))
	doc.childNodes[0].appendChild(lsctables.New(lsctables.SnglBurstTable, ["process_id", "ifo", "start_time", "start_time_ns", "stop_time", "stop_time_ns", "duration", "flow", "fhigh", "central_freq", "bandwidth", "confidence", "peak_time", "peak_time_ns", "event_id"]))

	return doc


def append_process(doc, **kwargs):
	process = llwapp.append_process(doc, program = "lalapps_power_fake", version = __version__, cvs_repository = "lscsoft", cvs_entry_time = __date__, comment = kwargs["comment"])

	llwapp.append_process_params(doc, process, [])

	return process


#
# =============================================================================
#
#                                 Segment List
#
# =============================================================================
#

def set_segments(process, doc, seglist):
	search_summ = llwapp.get_table(doc, lsctables.SearchSummaryTable.tableName)
	for seg in seglist:
		row = lsctables.SearchSummary()
		row.process_id = process.process_id
		row.ifos = "fake"
		row.set_in(seg)
		row.set_out(seg)

		search_summ.append(row)


#
# =============================================================================
#
#                            Fake Event Generation
#
# =============================================================================
#

def make_triggers(process, doc, rate, seglist):
	sngl_burst = llwapp.get_table(doc, lsctables.SnglBurstTable.tableName)
	ids = lsctables.NewILWDs(sngl_burst, "event_id")

	(start, stop) = seglist.extent()
	for t in map(LIGOTimeGPS, numpy.arange(float(start), float(stop), 1.0 / rate)):
		seg = segments.segment(t - 1.0 / 32.0, t + 1.0 / 32.0)
		if seg not in seglist:
			continue
		event = lsctables.SnglBurst()
		event.process_id = process.process_id
		event.event_id = ids.next()
		event.ifo = "fake"
		event.set_start(seg[0])
		event.set_stop(seg[1])
		event.set_peak(t)
		event.duration = seg.duration()
		event.central_freq = 105.0
		event.bandwidth = 10.0
		event.flow = event.central_freq - event.bandwidth / 2.0
		event.fhigh = event.central_freq + event.bandwidth / 2.0
		event.confidence = -40.0

		sngl_burst.append(event)


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

options, filenames = parse_command_line()

doc = new_doc()
process = append_process(doc, **options.__dict__)
set_segments(process, doc, options.seglist)
make_triggers(process, doc, 0.1, options.seglist)

for filename in filenames:
	llwapp.write_filename(doc, filename, options.verbose)
