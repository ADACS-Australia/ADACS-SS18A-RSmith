#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

from optparse import OptionParser
import math
import matplotlib
matplotlib.use("Agg")
from matplotlib import figure
from matplotlib.backends.backend_agg import FigureCanvasAgg
import numarray
import sys

from glue.ligolw import ligolw
from glue.ligolw import array
from glue.ligolw import param
from pylal import llwapp
from pylal import SnglBurstUtils

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__version__ = "$Revision$"[11:-2]
__date__ = "$Date$"[7:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	return options, (filenames or [None])


#
# =============================================================================
#
#                                    Input
#
# =============================================================================
#

def get_instrument(elem):
	return llwapp.get_param(elem.parentNode, "instrument").pcdata


#
# =============================================================================
#
#                                    Plots
#
# =============================================================================
#

def make_frequency_plot(fseries):
	fig = figure.Figure()
	FigureCanvasAgg(fig)
	fig.set_figsize_inches(16, 8)
	axes = fig.gca()
	axes.semilogy()
	axes.grid(True)
	axes.plot(fseries[0], numarray.fabs(fseries[1]))
	axes.plot(fseries[0], numarray.fabs(fseries[2]))
	axes.plot(fseries[0], numarray.sqrt(fseries[1]**2.0 + fseries[2]**2.0))
	axes.set_xlim([min(fseries[0]), max(fseries[0])])
	axes.set_title("Frequency Decomposition of Confidence Time Series")
	axes.set_xlabel("Frequency (Hz)")
	axes.set_ylabel("Re, Im Magnitude")
	return fig


def normalize(array):
	# used in validation code
	array -= array.mean()
	return array / array.stddev()


class RatePlot(SnglBurstUtils.BurstPlot):
	def __init__(self, instrument):
		SnglBurstUtils.BurstPlot.__init__(self, "Greenwich Mean Sidereal Time (rad)", "Event Power Accumulation Rate (power / sidereal day / rad)")
		self.axes.semilogy()

		self.axes.set_title("%s Event Power Accumulation Rate By Sidereal Time" % instrument)
		self.axes.set_xticks(numarray.arange(9) * math.pi / 4)
		self.axes.set_xticklabels([r"0", r"$\pi/4$", r"$\pi/2$", r"$3\pi/4$", r"$\pi$", r"$5\pi/4$", r"$3\pi/2$", r"$7\pi/4$", r"$2\pi$"])

	def add_contents(self, rate):
		self.rate = rate

	def finish(self):
		# some commented-out code for validation
		#self.axes.plot(self.rate.xvals(), normalize(self.rate.numerator), "go")
		#self.axes.plot(self.rate.xvals(), normalize(self.rate.denominator), "b")
		#self.axes.plot(self.rate.xvals(), normalize(self.rate.filtered()), "r")
		#self.axes.set_xlim([0, 1])

		self.rate.logregularize()
		#self.rate.set_filterwidth(math.pi / 8)
		yvals = self.rate.filtered(cyclic = True)
		ymin = min(numarray.compress(self.rate.denominator, yvals))
		self.axes.plot(self.rate.xvals(), yvals, "k")
		self.axes.set_xlim([0, 2.0 * math.pi])
		self.axes.set_ylim([10.0**int(math.log10(ymin)), 10.0**(int(math.log10(max(yvals))) + 1)])


#
# =============================================================================
#
#                                     Main
#
# =============================================================================
#

options, filenames = parse_command_line()

for filename in filenames:
	doc = llwapp.load_filename(filename, options.verbose)
	for elem in array.getArraysByName(doc, "confidence_frequencies"):
		fig = make_frequency_plot(elem.array)
		outname = "%s_frequency_%s.png" % (filename, get_instrument(elem))
		if options.verbose:
			print >>sys.stderr, "writing %s..." % outname
		fig.savefig(outname)
	for elem in param.getParamsByName(doc, "rate"):
		instrument = get_instrument(elem)
		outname = "%s_rate_%s.png" % (filename, instrument)
		if options.verbose:
			print >>sys.stderr, "generating %s..." % outname
		plot = RatePlot(instrument)
		plot.add_contents(llwapp.pickle_from_param(elem, "rate"))
		plot.finish()
		if options.verbose:
			print >>sys.stderr, "writing %s..." % outname
		plot.fig.savefig(outname)
