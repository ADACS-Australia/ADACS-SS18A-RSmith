#!/usr/bin/python

import glob
import math
from optparse import OptionParser
import os
from pysqlite2 import dbapi2 as sqlite3
import sys

from glue import iterutils
from glue.ligolw import dbtables
from pylal import SnglBurstUtils


def parse_command_line():
	parser = OptionParser()
	options, patterns = parser.parse_args()
	filenames = [filename for g in patterns for filename in glob.glob(g)]
	filenames.sort()
	if not filenames:
		raise ValueError, "no files found!"
	return options, filenames


def effective_confidence(likelihood, confidence, slope = -49.0):
	if likelihood <= 0:
		return -1e400
	return math.log(likelihood) - slope * math.log(confidence)


class Summary(object):
	def __init__(self):
		self.time_slides = iterutils.Highest(max = 1000000)
		self.zero_lags = []
		self.injections = []

	def add_contents(self, contents):
		if contents.sim_burst_table is None:
			# non-injections file
			buffer = []
			for values in contents.connection.cursor().execute("""
SELECT
	effective_confidence(coinc_event.likelihood, multi_burst.confidence),
	coinc_event.likelihood,
	multi_burst.confidence,
	?,
	coinc_event.coinc_event_id,
	-- True if time slide vector contains a non-zero entry
	EXISTS (
		SELECT
			*
		FROM
			time_slide
		WHERE
			time_slide.time_slide_id == coinc_event.time_slide_id
			AND time_slide.offset != 0
	)
FROM
	coinc_event
	JOIN multi_burst ON (
		multi_burst.coinc_event_id == coinc_event.coinc_event_id
	)
WHERE
	coinc_event.coinc_def_id == ?
			""", (contents.filename, contents.bb_definer_id,)):
				is_time_slide = values[-1]
				if is_time_slide:
					buffer.append(values[:-1])
				else:
					self.zero_lags.append(values[:-1])
			self.time_slides.extend(buffer)
		else:
			# injections file
			cursor = contents.connection.cursor()
			cursor.execute("""
CREATE TEMPORARY VIEW
	sim_coinc_summary
AS
	SELECT
		sim_burst.simulation_id AS simulation_id,
		effective_confidence(burst_coinc_event.likelihood, multi_burst.confidence) AS effective_confidence,
		burst_coinc_event.likelihood AS likelihood,
		multi_burst.confidence AS confidence,
		burst_coinc_event.coinc_event_id AS coinc_event_id,
		sim_coinc_event.coinc_def_id AS coinc_def_id
	FROM
		sim_burst
		JOIN coinc_event_map AS a ON (
			a.table_name == 'sim_burst'
			AND a.event_id == sim_burst.simulation_id
		)
		JOIN coinc_event AS sim_coinc_event ON (
			sim_coinc_event.coinc_event_id == a.coinc_event_id
		)
		JOIN coinc_event_map AS b ON (
			b.coinc_event_id == a.coinc_event_id
		)
		JOIN coinc_event AS burst_coinc_event ON (
			b.table_name == 'coinc_event'
			AND b.event_id == burst_coinc_event.coinc_event_id
		)
		JOIN multi_burst ON (
			multi_burst.coinc_event_id == burst_coinc_event.coinc_event_id
		)
			""")
			self.injections.extend(cursor.execute("""
SELECT
	sim_coinc_summary.effective_confidence,
	sim_coinc_summary.likelihood,
	sim_coinc_summary.confidence,
	sim_burst.freq,
	sim_burst.hrss,
	?,
	sim_burst.simulation_id,
	sim_coinc_summary.coinc_event_id
FROM
	sim_burst
	LEFT OUTER JOIN sim_coinc_summary ON (
		sim_coinc_summary.simulation_id == sim_burst.simulation_id
	)
WHERE
	sim_coinc_summary.coinc_def_id == ?
			""", (contents.filename, contents.sce_definer_id)))

	def finish(self):
		self.zero_lags.sort(reverse = True)
		self.injections.sort(reverse = True)


def process_files(filenames, tmp_path = None, verbose = False):
	summary = Summary()

	for n, filename in enumerate(filenames):
		if verbose:
			print >>sys.stderr, "%d/%d: %s" % (n + 1, len(filenames), filename)
		working_filename = dbtables.get_connection_filename(filename, tmp_path = tmp_path, verbose = verbose)
		connection = sqlite3.connect(working_filename)
		connection.create_function("effective_confidence", 2, effective_confidence)
		dbtables.DBTable_set_connection(connection)
		database = SnglBurstUtils.CoincDatabase().summarize("lalapps_power", verbose)
		database.filename = filename

		summary.add_contents(database)

		connection.close()
		dbtables.discard_connection_filename(filename, working_filename, verbose = verbose)

	return summary


options, filenames = parse_command_line()


summary = process_files(filenames, tmp_path = os.environ["TMPDIR"], verbose = True)
summary.finish()


f = file("summary_time_slides.txt", "w")
print >>f, "# eff_conf\tlikelihood\tconfidence\tfilename\tcoinc_event_id"
for x in summary.time_slides:
	print >>f, "%.16g\t%.16g\t%.16g\t%s\t%s" % x
f.flush()


f = file("summary_zero_lags.txt", "w")
print >>f, "# eff_conf\tlikelihood\tconfidence\tfilename\tcoinc_event_id"
for x in summary.zero_lags:
	print >>f, "%.16g\t%.16g\t%.16g\t%s\t%s" % x
f.flush()


f = file("summary_injections.txt", "w")
print >>f, "# eff_conf\tlikelihood\tconfidence\tfreq\thrss\tfilename\tsimulation_id\tcoinc_event_id"
for x in summary.injections:
	if x[0] is None:
		print >>f, "None\tNone\tNone\t%.16g\t%.16g\t%s\t%s\t%s" % x[3:]
	else:
		print >>f, "%.16g\t%.16g\t%.16g\t%.16g\t%.16g\t%s\t%s\t%s" % x
f.flush()
