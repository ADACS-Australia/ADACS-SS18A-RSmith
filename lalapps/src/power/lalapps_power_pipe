#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

"""
Excess power offline pipeline construction script.
"""

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__date__ = "$Date$"[5:-2]
__version__ = "$Revision$"[11:-2]

import ConfigParser
from optparse import OptionParser
import sys

from glue import pipeline
from glue import segments
from glue import segmentsUtils
from pylal import ligolw_tisi
from pylal import llwapp
from pylal.date import LIGOTimeGPS


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("--config-file", metavar = "filename", default = "power.ini", help = "set .ini config file name (default = power.ini)")
	options, filenames = parser.parse_args()

	return options, (filenames or ["power.dag"])

try:
	options, filenames = parse_command_line()
except ValueError, e:
	print >>sys.stderr, "error: %s" % str(e)


#
# =============================================================================
#
#                                    Config
#
# =============================================================================
#

def parse_config_file(options):
	config = ConfigParser.SafeConfigParser()
	config.read(options.config_file)

	options.tag = config.get("pipeline", "user-tag")
	options.injection_bands = config.getint("pipeline", "injection-bands")

	options.seglistdict = segments.segmentlistdict()
	for ifo in config.get("pipeline", "ifos").split():
		options.seglistdict[ifo] = segmentsUtils.fromsegwizard(file(config.get("pipeline", "seglist-%s" % ifo)), coltype = LIGOTimeGPS).coalesce()

	options.timeslides = list(ligolw_tisi.SlidesIter(ligolw_tisi.parse_slides([slidespec for slidespec in config.get("ligolw_tisi", "instrument").split() if slidespec != "--instrument"])))

	# A few static parameters
	options.cache_dir = "cache/"
	options.out_dir = "logs/"
	options.psds_per_job = 32
	options.psds_per_injection = 32

	return config

config_parser = parse_config_file(options)


#
# =============================================================================
#
#                              Define .sub Files
#
# =============================================================================
#

power.init_job_types(options.cache_dir, options.out_dir, config_parser)


#
# =============================================================================
#
#                            Determine Segment List
#
# =============================================================================
#

def compute_coincident_segment_lists(options):
	options.seglistdict = llwapp.get_coincident_segmentlistdict(options.seglistdict, options.timeslides)

compute_coincident_segment_lists(options)


#
# =============================================================================
#
#                          Single Instrument Fragment
#
# =============================================================================
#

def make_single_instrument_fragment(dag, options, instrument, seglist, binjfrag = None, tisifrag = None):
	nodes = []
	for seg in seglist:
		datafindfrag = power.make_datafind_fragment(dag, instrument, seg)
		darmpowerfrag = power.make_power_segment_fragment(dag, options.cache_dir, datafindfrag, seg, instrument, options.psds_per_job, options.tag)
		injpowerfrag = power.make_injection_segment_fragment(dag, options.cache_dir, datafindfrag, seg, instrument, options.psds_per_injection, options.tag, binjfrag = binjfrag, tisifrag = tisifrag)
		binjfindfrag = power.make_binjfind_fragment(dag, injpowerfrag, "INJECTIONS_%s" % options.tag)
		nodes.append(darmpowerfrag)
	return nodes


#
# =============================================================================
#
#                               DAG Construction
#
# =============================================================================
#

os.mkdir(options.cache_dir)
os.mkdir(options.out_dir)

dag = pipeline.CondorDAG(condor_log)
dag.set_dag_file(filenames[0])

binjfrag = power.make_multibinj_fragment(dag, options.cache_dir, options.tag, options.seglistdict.extent())
tisifrag = power.make_tisi_fragment(dag, options.tag)

single_instrument_fragments = {}
for instrument, seglist in options.seglistdict.iteritems():
	single_instrument_fragements[instrument] = make_single_instrument_fragment(dag, options, instrument, seglist, binjfrag = binjfrag, tisifrag = tisifrag)

dag.write_sub_files()
dag.write_dag()
