#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#


"""
Excess power offline pipeline construction script.
"""


import ConfigParser
import glob
import math
from optparse import OptionParser
import os
import sys
import tempfile


from glue import pipeline
from glue import segments
from glue import segmentsUtils
from glue.lal import CacheEntry
from pylal import ligolw_tisi
from pylal import ligolw_cafe
from pylal import llwapp
from pylal.date import LIGOTimeGPS
from lalapps import power


__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__date__ = "$Date$"[5:-2]
__version__ = "$Revision$"[11:-2]


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#


def parse_command_line():
	parser = OptionParser(
		version="%prog CVS $Id$"
	)
	parser.add_option("--condor-log-dir", metavar = "path", default = ".", help = "Set the directory for Condor log files (default = \".\").")
	parser.add_option("--config-file", metavar = "filename", default = "power.ini", help = "Set .ini configuration file name (default = \"power.ini\").")
	parser.add_option("--full-segments", action = "store_true", help = "Analyze all data from segment lists, not just coincident times.")
	parser.add_option("--minimum-gap", metavar = "seconds", default = "240", help = "Merge jobs analyzing data from the same instrument if the gap between them is less than this many seconds (default = 240).")
	parser.add_option("--variant", metavar = "[injections|noninjections|both]", default = "both", help = "Select the variant of the pipeline to construct.  \"injections\" produces a simulations-only version of the pipeline, \"noninjections\" produces a version with no simulation jobs, and \"both\" produces a full pipeline with both simulation and non-simulation jobs.")
	parser.add_option("--background-time-slides", metavar = "filename", default = [], action = "append", help = "Set file from which to obtain the time slide table for use in the background branch of the pipeline (default = \"background_time_slides.xml.gz\").  Provide this argument multiple times to provide multiple time slide files, each will result in a separate set of ligolw_burca jobs.")
	parser.add_option("--injection-time-slides", metavar = "filename", help = "Set file from which to obtain the time slide table for use in the injection branch of the pipeline (default = \"injection_time_slides.xml.gz\").")
	parser.add_option("-v", "--verbose", action = "store_true", help = "Be verbose.")
	options, filenames = parser.parse_args()

	options.minimum_gap = float(options.minimum_gap)

	if options.variant not in ("injections", "noninjections", "both"):
		raise ValueError, "unrecognized --variant %s" % options.variant
	options.do_injections = options.variant in ("injections", "both")
	options.do_noninjections = options.variant in ("noninjections", "both")

	if options.do_injections and not options.injection_time_slides:
		raise ValueError, "missing required --injection-time-slides argument"
	if options.do_noninjections and not options.background_time_slides:
		raise ValueError, "missing required --background-time-slides argument"

	return options, (filenames or ["power.dag"])


#
# =============================================================================
#
#                                    Config
#
# =============================================================================
#


def parse_config_file(options):
	if options.verbose:
		print >>sys.stderr, "reading %s ..." % options.config_file
	config = ConfigParser.SafeConfigParser()
	config.read(options.config_file)

	options.tag = config.get("pipeline", "user_tag")
	options.enable_clustering = config.getboolean("pipeline", "enable_clustering")

	seglistdict = segments.segmentlistdict()
	tiling_phase = {}
	for ifo in config.get("pipeline", "ifos").split():
		seglistdict[ifo] = segmentsUtils.fromsegwizard(file(config.get("pipeline", "seglist_%s" % ifo)), coltype = LIGOTimeGPS).coalesce()
		try:
			offset = config.getfloat("pipeline", "tiling_phase_%s" % ifo)
		except ConfigParser.NoOptionError:
			offset = 0.0
		if offset:
			tiling_phase[ifo] = offset

	options.psds_per_power = config.getint("pipeline", "psds_per_power")
	options.psds_per_injection = config.getint("pipeline", "psds_per_injection")
	options.timing_params = power.get_timing_parameters(config)

	return seglistdict, tiling_phase, config


#
# =============================================================================
#
#                            Determine Segment List
#
# =============================================================================
#


def remove_too_short_segments(seglistdict, timing_params):
	"""
	Remove segments from seglistdict that are too short to analyze.
	"""
	# CAUTION:  this function modifies seglistdict in place.
	for seglist in seglistdict.itervalues():
		for i in xrange(len(seglist) - 1, -1, -1):
			if not power.segment_ok(timing_params, seglist[i]):
				del seglist[i]


def compute_segment_lists(seglistdict, time_slides, minimum_gap, timing_params, full_segments = True, verbose = False):
	if verbose:
		print >>sys.stderr, "constructing segment list ..."

	seglistdict = seglistdict.copy()

	if not full_segments:
		# cull too-short single-instrument segments from the input
		# segmentlist dictionary;  this can significantly increase
		# the speed of the llwapp.get_coincident_segmentlistdict()
		# function when the input segmentlists have had many data
		# quality holes poked out of them
		remove_too_short_segments(seglistdict, timing_params)

		# extract the segments that are coincident under the time
		# slides
		new = llwapp.get_coincident_segmentlistdict(seglistdict, time_slides)

		# adjust surviving segment lengths up to the next integer
		# number of PSDs
		for seglist in new.itervalues():
			# Try Adjusting Upper Bounds:

			# count the number of PSDs in each segment
			psds = [power.psds_from_job_length(timing_params, float(abs(seg))) for seg in seglist]

			# round up to the nearest integer.
			psds = [int(math.ceil(max(n, 1.0))) for n in psds]

			# compute the duration of each job
			durations = [power.job_length_from_psds(timing_params, n) for n in psds]

			# update segment list
			for i, seg in enumerate(seglist):
				seglist[i] = segments.segment(seg[0], seg[0] + durations[i])

			# and take intersection with original segments to
			# not exceed original bounds
			new &= seglistdict

			# Try Adjusting Lower Bounds:

			# count the number of PSDs in each segment
			psds = [power.psds_from_job_length(timing_params, float(abs(seg))) for seg in seglist]

			# round up to the nearest integer.
			psds = [int(math.ceil(max(n, 1.0))) for n in psds]

			# compute the duration of each job
			durations = [power.job_length_from_psds(timing_params, n) for n in psds]

			# update segment list
			for i, seg in enumerate(seglist):
				seglist[i] = segments.segment(seg[1] - durations[i], seg[1])

			# and take intersection with original segments to
			# not exceed original bounds
			new &= seglistdict


		# try to fill gaps between jobs
		new.protract(minimum_gap / 2).contract(minimum_gap / 2)

		# and take intersection with original segments to not
		# exceed original bounds
		seglistdict &= new

	# remove segments that are too short
	remove_too_short_segments(seglistdict, timing_params)

	# done
	return seglistdict


#
# =============================================================================
#
#                         Coincidence Post-Processing
#
# =============================================================================
#


def group_coinc_parents(parents, time_slides, verbose = False):
	if not time_slides:
		# no-op
		return []

	if verbose:
		print >>sys.stderr, "Grouping jobs for coincidence analysis:"

	# use ligolw_cafe to group each output file according to how they
	# need to be combined to perform the coincidence analysis
	caches = []
	for parent in parents:
		caches += parent.get_output_cache()
	caches = [set(bin.objects) for bin in ligolw_cafe.ligolw_cafe(caches, time_slides, verbose = verbose)[1]]

	# compute the segment spanned by each cache of output files, store
	# results in a list in the same order as the list of caches
	segs = [segments.segmentlist([c.segment for c in cache]).extent() for cache in caches]

	# for each cache, get the set of the nodes whose output files it
	# contains.  note that a parent node is allowed to provide more
	# than one output file, and thus can be listed in more than one
	# group
	if verbose:
		print >>sys.stderr, "Matching jobs to caches ..."
	# can't use [set()] * len(caches) for the normal reason
	parent_groups = [set() for cache in caches]
	n_found = 0
	for n, parent in enumerate(parents):
		if verbose and not (n % 10):
			print >>sys.stderr, "\t%.1f%%\r" % (100.0 * n / len(parents)),
		found = False
		for output in parent.get_output_cache():
			# find the caches in which this output has been
			# placed, and add the parent to the matching group
			for i, cache in enumerate(caches):
				if output in cache:
					parent_groups[i].add(parent)
					found = True
		if found:
			n_found += 1
	if verbose:
		print >>sys.stderr, "\t100.0%"
	if verbose and len(parents) != n_found:
		# there were parents that didn't match any caches.  this
		# happens if ligolw_cafe decides their outputs aren't
		# needed
		print >>sys.stderr, "Notice:  %d jobs (of %d) produce output that will not be used by a coincidence job" % (len(parents) - n_found, len(parents))

	# done
	return zip(caches, parent_groups, segs)


#
# =============================================================================
#
#                           Injection Identification
#
# =============================================================================
#


def make_binjfind_stage(dag, parents, tag, verbose = False):
	parents = power.make_bucut_fragment(dag, parents, tag)
	return power.make_binjfind_fragment(dag, parents, tag)


#
# =============================================================================
#
#                               DAG Construction
#
# =============================================================================
#


#
# Command line
#


options, filenames = parse_command_line()


#
# Parse .ini file.
#


seglistdict, tiling_phase, config_parser = parse_config_file(options)


#
# Define .sub files
#


power.init_job_types(config_parser)


#
# Construct initial segment lists
#


if options.verbose:
	print >>sys.stderr, "Computing segments for which lalapps_power jobs are required ..."

if options.do_noninjections:
	background_time_slides = {}
	background_seglistdict = segments.segmentlistdict()
	for filename in options.background_time_slides:
		background_time_slides[filename] = ligolw_tisi.load_time_slides(filename, verbose = options.verbose, gz = filename[-3:] == ".gz").values()
		background_seglistdict |= compute_segment_lists(seglistdict, background_time_slides[filename], options.minimum_gap, options.timing_params, full_segments = options.full_segments, verbose = options.verbose)
else:
	background_time_slides = {}
	background_seglistdict = segments.segmentlistdict()


if options.do_injections:
	injection_time_slides = ligolw_tisi.load_time_slides(options.injection_time_slides, verbose = options.verbose, gz = options.injection_time_slides[-3:] == ".gz").values()
	injection_seglistdict = compute_segment_lists(seglistdict, injection_time_slides, options.minimum_gap, options.timing_params, full_segments = options.full_segments, verbose = options.verbose)
else:
	injection_time_slides = []
	injection_seglistdict = segments.segmentlistdict()

# apply time shifts to segment lists to shift tiling phases, but take
# intersection with original segments to stay within allowed times.  Note:
# can't use segmentlistdict's offset mechanism to do this because we need
# the offsets to still be 0 for coincidence testing later.
for key, offset in tiling_phase.items():
	if key in background_seglistdict:
		background_seglistdict[key].shift(offset)
	if key in injection_seglistdict:
		injection_seglistdict[key].shift(offset)
background_seglistdict &= seglistdict
injection_seglistdict &= seglistdict


#
# Start DAG
#


power.make_dag_directories(config_parser)
dag = pipeline.CondorDAG(tempfile.mkstemp(".log", "power_", options.condor_log_dir)[1])
dag.set_dag_file(os.path.splitext(filenames[0])[0])


#
# Injection list generation.
#


if options.do_injections:
	if options.verbose:
		print >>sys.stderr, "Building lalapps_binj jobs ..."
	binjnodes = power.make_multibinj_fragment(dag, injection_seglistdict.extent_all(), "INJECTIONS_%s" % options.tag)
else:
	binjnodes = []


#
# Build datafind jobs.
#


datafinds = power.make_datafind_stage(dag, injection_seglistdict | background_seglistdict, verbose = options.verbose)


#
# Build single instrument fragments, one for each instrument for each
# segment.
#


# non-injections

pwr_nodes = power.make_single_instrument_stage(dag, datafinds, background_seglistdict, options.tag, options.timing_params, options.psds_per_power, verbose = options.verbose)
if options.enable_clustering:
	pwr_nodes = power.make_bucluster_fragment(dag, pwr_nodes, options.tag)


# injections

inj_pwr_nodes = power.make_single_instrument_injections_stage(dag, datafinds, binjnodes, injection_seglistdict, "INJECTIONS_%s" % options.tag, options.timing_params, options.psds_per_injection, verbose = options.verbose)
if options.enable_clustering:
	inj_pwr_nodes = power.make_bucluster_fragment(dag, inj_pwr_nodes, "INJECTIONS_%s" % options.tag)


#
# Coincidence
#


# non-injections

coinc_nodes = []
for n, (time_slides_filename, time_slides) in enumerate(background_time_slides.iteritems()):
	if options.verbose:
		print >>sys.stderr, "non-injections %d/%d (%s):" % (n + 1, len(background_time_slides), time_slides_filename)
	extra_cache = set([CacheEntry(None, None, None, "file://localhost" + os.path.abspath(time_slides_filename))])
	for cache, parents, seg in group_coinc_parents(pwr_nodes, time_slides, verbose = options.verbose):
		parents = power.make_pre_coinc_lladd(dag, parents, seg, "%s_%d" % (options.tag, n), input_cache = cache | extra_cache)
		if options.enable_clustering:
			parents = power.make_bucluster_fragment(dag, parents, "%s_%d_%d_%d" % (options.tag, n, int(seg[0]), int(abs(seg))))
		coinc_nodes += power.make_burca_fragment(dag, parents, "ALL", seg, "%s_%d" % (options.tag, n))


# injections


inj_coinc_nodes = []
if options.verbose:
	print >>sys.stderr, "injections 1/1 (%s):" % options.injection_time_slides
extra_cache = set([CacheEntry(None, None, None, "file://localhost" + os.path.abspath(options.injection_time_slides))])
for node in binjnodes:
	extra_cache |= set(node.get_output_cache())
for cache, parents, seg in group_coinc_parents(inj_pwr_nodes, injection_time_slides, verbose = options.verbose):
	parents = power.make_pre_coinc_lladd(dag, parents | set(binjnodes), seg, "INJECTIONS_%s" % options.tag, input_cache = cache | extra_cache)
	if options.enable_clustering:
		parents = power.make_bucluster_fragment(dag, parents, "INJECTIONS_%s_%d_%d" % (options.tag, int(seg[0]), int(abs(seg))))
	inj_coinc_nodes += power.make_burca_fragment(dag, parents, "ALL", seg, "INJECTIONS_%s" % options.tag)


#
# Injection identification
#


if options.verbose:
	print >>sys.stderr, "Adding injection identification nodes"
inj_coinc_nodes = make_binjfind_stage(dag, inj_coinc_nodes, "INJECTIONS_%s" % options.tag, verbose = options.verbose)


#
# Conversion to SQLite database files
#


coinc_nodes = power.make_sqlite_stage(dag, coinc_nodes, options.tag, verbose = options.verbose)
inj_coinc_nodes = power.make_sqlite_stage(dag, inj_coinc_nodes, "INJECTIONS_%s" % options.tag, verbose = options.verbose)


#
# Output
#


if options.verbose:
	print >>sys.stderr, "writing dag ..."
dag.write_sub_files()
dag.write_dag()

final_cache = file(os.path.splitext(filenames[0])[0] + "_output.cache", "w")
for node in coinc_nodes + inj_coinc_nodes:
	for entry in node.get_output_cache():
		print >>final_cache, str(entry)
