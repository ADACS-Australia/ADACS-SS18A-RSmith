#!/usr/bin/python
#
# $Id$
#
# Copyright (C) 2006  Kipp C. Cannon
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation; either version 2 of the License, or (at your
# option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
# Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#
# =============================================================================
#
#                                   Preamble
#
# =============================================================================
#

"""
Excess power offline pipeline construction script.
"""

__author__ = "Kipp Cannon <kipp@gravity.phys.uwm.edu>"
__date__ = "$Date$"[5:-2]
__version__ = "$Revision$"[11:-2]

import ConfigParser
import glob
import math
from optparse import OptionParser
import os
import sys
import tempfile

from glue import pipeline
from glue import segments
from glue import segmentsUtils
from pylal import ligolw_tisi
from pylal import llwapp
from pylal.date import LIGOTimeGPS
import power


#
# =============================================================================
#
#                                 Command Line
#
# =============================================================================
#

def parse_command_line():
	parser = OptionParser(version="%prog CVS $Id$")
	parser.add_option("--condor-log-dir", metavar = "path", default = ".", help = "set directory for Condor log (default = .)")
	parser.add_option("--config-file", metavar = "filename", default = "power.ini", help = "set .ini config file name (default = power.ini)")
	parser.add_option("--full-segments", action = "store_true", help = "analyze all data from segment lists, not just coincident times")
	parser.add_option("--no-injections", action = "store_true", help = "do not do injections")
	parser.add_option("-v", "--verbose", action = "store_true", help = "be verbose")
	options, filenames = parser.parse_args()

	return options, (filenames or ["power.dag"])

try:
	options, filenames = parse_command_line()
except ValueError, e:
	print >>sys.stderr, "error: %s" % str(e)


#
# =============================================================================
#
#                                    Config
#
# =============================================================================
#

def parse_config_file(options):
	if options.verbose:
		print >>sys.stderr, "reading %s..." % options.config_file
	config = ConfigParser.SafeConfigParser()
	config.read(options.config_file)

	options.tag = config.get("pipeline", "user_tag")

	options.seglistdict = segments.segmentlistdict()
	for ifo in config.get("pipeline", "ifos").split():
		options.seglistdict[ifo] = segmentsUtils.fromsegwizard(file(config.get("pipeline", "seglist_%s" % ifo)), coltype = LIGOTimeGPS).coalesce()

	options.timeslides = list(ligolw_tisi.SlidesIter(ligolw_tisi.parse_slides([slidespec for slidespec in config.get("ligolw_tisi", "instrument").split() if slidespec != "--instrument"])))

	options.psds_per_power = config.getint("pipeline", "psds_per_power")
	options.psds_per_injection = config.getint("pipeline", "psds_per_injection")

	return config

config_parser = parse_config_file(options)


#
# =============================================================================
#
#                              Define .sub Files
#
# =============================================================================
#

power.init_job_types(config_parser)


#
# =============================================================================
#
#                            Determine Segment List
#
# =============================================================================
#

def compute_segment_lists(options):
	if options.verbose:
		print >>sys.stderr, "constructing segment list..."

	if not options.full_segments:
		# extract the segments that are coincident under the time
		# slides
		new = llwapp.get_coincident_segmentlistdict(options.seglistdict, options.timeslides)

		# adjust surviving segment lengths up to the next integer
		# number of PSDs
		for seglist in new.itervalues():
			for i in xrange(len(seglist)):
				psds = power.psds_from_job_length(power.powerjob, float(seglist[i].duration()))
				if psds >= 0.0:
					new_duration = power.job_length_from_psds(power.powerjob, int(math.ceil(psds)))
				else:
					new_duration = power.job_length_from_psds(power.powerjob, 1)
				seglist[i] = segments.segment(seglist[i][0], seglist[i][0] + new_duration)

		# and take intersection with original segments to not
		# exceed original bounds
		options.seglistdict &= new

	# remove segments that are too short
	for seglist in options.seglistdict.itervalues():
		for i in xrange(len(seglist) - 1, -1, -1):
			if not power.segment_ok(power.powerjob, seglist[i]):
				del seglist[i]


#
# =============================================================================
#
#                          Single Instrument Fragment
#
# =============================================================================
#

def make_single_instrument_fragment(dag, options, instrument, seglist, binjfrag = None, tisifrag = None):
	nodes = []
	for seg in seglist:
		if options.verbose:
			print >>sys.stderr, "generating fragment: %s: %s -- %s" % (instrument, str(seg[0]), str(seg[1]))
		datafindfrag = power.make_datafind_fragment(dag, instrument, seg)

		darmpowerfrag = power.make_power_segment_fragment(dag, datafindfrag, seg, instrument, options.psds_per_power, options.tag)
		if "cluster" in power.powerjob.get_opts():
			darmpowerfrag = power.make_bucluster_fragment(dag, [darmpowerfrag], instrument, seg, options.tag)

		if not options.no_injections:
			injpowerfrag = power.make_injection_segment_fragment(dag, datafindfrag, seg, instrument, options.psds_per_injection, options.tag, binjfrag = binjfrag, tisifrag = tisifrag)
			if "cluster" in power.powerjob.get_opts():
				injpowerfrag = power.make_bucluster_fragment(dag, [injpowerfrag], instrument, seg, "INJECTIONS_%s" % options.tag)

			binjfindfrag = power.make_binjfind_fragment(dag, [injpowerfrag], instrument, seg, "INJECTIONS_%s" % options.tag)

		nodes.append(darmpowerfrag)
	return nodes


#
# =============================================================================
#
#                               DAG Construction
#
# =============================================================================
#

compute_segment_lists(options)

power.make_dag_directories(config_parser)

dag = pipeline.CondorDAG(tempfile.mkstemp(".log", "power_", options.condor_log_dir)[1])
dag.set_dag_file(os.path.splitext(filenames[0])[0])

#
# DAG "preamble":  injection and time slide lists.
#

if options.no_injections:
	binjfrag = None
else:
	binjfrag = power.make_multibinj_fragment(dag, options.seglistdict.extent_all(), options.tag)
tisifrag = power.make_tisi_fragment(dag, options.tag)

#
# Build single instrument fragments, one for each instrument for each
# segment.
#

single_instrument_fragments = {}
for instrument, seglist in options.seglistdict.iteritems():
	single_instrument_fragments[instrument] = make_single_instrument_fragment(dag, options, instrument, seglist, binjfrag = binjfrag, tisifrag = tisifrag)

if options.verbose:
	print >>sys.stderr, "writing dag..."
dag.write_sub_files()
dag.write_dag()


#
# =============================================================================
#
#                               DAG Verification
#
# =============================================================================
#

def check_caches_against_segwizard(segwizard_filename, cache_filenames):
	"""
	Check that the segments in the segwizard file span the files in the
	given caches.  This ensures that no job has been created that
	analyzes data outside of the given input segment lists.
	"""
	segwizard_list = segmentsUtils.fromsegwizard(file(segwizard_filename), coltype = LIGOTimeGPS).coalesce()
	cache_list = segments.segmentlist()
	for cache_filename in cache_filenames:
		cache_list |= segmentsUtils.fromlalcache(file(cache_filename), coltype = LIGOTimeGPS).coalesce()
	extra = cache - segwizard
	if extra:
		raise ValueError, "caches span these times not spanned by segwizard: %s" % str(extra)
