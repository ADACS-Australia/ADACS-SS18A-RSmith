#!/home/cokelaer/geopptools/bin/python
"""
python script to process xml file given by the BankEfficiency code
Intensive use of awk and lwtprint. 
"""

__author__ = 'Thomas Cokelaer <Thomas.Cokelaer@astro.cf.ac.uk>'
__date__ = '$Date$'
__version__ = '$Revision$'


import sys
import os
import string
import math
import sys

argc =  len(sys.argv)


# a help function
def usage():
    print 'you have to provide only one argument which is the name of the file to process'
    sys.exit(1)

# a checking function to parse parameters
def checkargs():
    if argc != 2:
        usage()

def AddCol(arg1, arg2):
    
    length = len(arg1)
    datain = []
    for i in range(0,length):
        datain.append(string.atof(arg1[i]) + string.atof(arg2[i]))
    return datain

def SubCol(arg1, arg2):
    length = len(arg1)
    datain = []
    for i in range(0,length):
        datain.append(math.fabs(string.atof(arg1[i]) - string.atof(arg2[i])))
    return datain


def DivCol(arg1, arg2):
    length = len(arg1)
    datain = []
    for i in range(0,length):
        datain.append((string.atof(arg1[i]) / string.atof(arg2[i])))
    return datain

def MulCol(arg1, arg2):
    length = len(arg1)
    datain = []
    for i in range(0,length):
        datain.append((string.atof(arg1[i]) *  string.atof(arg2[i])))
    return datain


def extract_data(filename, arg1, arg2):
    print "Compute "+arg1+" and "+arg2 +" --> "+filename
    output = open(filename,"w")    
    chaine='#generated by BE_process_xml, ' + str(__version__) +'\n'
    output.write(chaine)
    chaine = '#Author: '+ str(__author__)+'\n'
    output.write(chaine)
    chaine = '# '+ str(count) + 'lines' + '\n'
    output.write(chaine)
    chaine = '# '+ str(arg1) +' '+arg2 + '\n'
    output.write(chaine)
    for i in range(0,count):
        output.write(str(data[arg1][i])+" "+str(data[arg2][i])+ "\n")
    output.close()



#starting application here
checkargs()

filename = sys.argv[argc-1]
chainToFind = "Stream Name=\"bankefficiencygroup"

count = 0
input = open(filename, 'r')
""" 	assume that there 11 occurences of the string "Stream" in the input
	file before the actual data (there is a 12th one but we dfont care 
	about it since it is at the nd
"""
arret = 0                        # a boolean variable to stop the file parsing


data = {}  			 # dictionary to store the data and their related name
Col2Name = {}
colonne = 0 
while arret == 0:               # while that loop does not change the arret variable, we 
    line = input.readline()     # read a line
    if line == "":              # if this is the end of the file then the boolean variable switch
        arret = 1
    else:                       # else we carry on and search for the "Stream variable" or lower frequency parameter
        res = string.find(line,"Column Name=\"bankefficiencygroup:bankefficiency:") # here we are going to catalogate all the output parameters
        if res>=0:
            colonne=colonne+1
            res1 = string.rfind(line,":", )       #we are searching for the second character " .Just before it is the parameters name
            res2 = string.find(line,"\"", res1)       #we are searching for the second character " .Just before it is the parameters name

            if res1 >= 0 and res2 >=0:
                name = line[res1+1:res2]
                data[name] = []  # we create an entry in the dictionary which has the given parameter name jsut read in the xml table
                Col2Name[colonne] =  name
        res = string.find(line,"--fl")
        if res>=0:
            flower = string.atof( line[len(line)-11: len(line)-3])# todo : check that it is a number

        res = string.find(line,"Stream")
        if res>=0:                                   # if it exist then is it related to the bankefficiency table ? 
            res = string.find(line,"bankefficiency") # if yes we have found the table so 
            if res>=0:                               # we can switch  the boolean 
                arret = 1


# let's read the data now


arret = 0
while arret == 0 :
    line = input.readline()
    
    if line == "":
        arret = 1
        print "Unexpected end of line (no /Stream string at the end of the file. Is it valid xml file ?"
    else:
        res = string.find(line,"</Stream>")
        if res>=0:
            arret = 1
        else:
            arret = 0
            dataLine = list((string.split(line, ',')))
            for i in range(1,colonne-1):
                data[Col2Name[i]].append(string.atof(dataLine[i-1]))
            count = count + 1
    
        
input.close()


# compute new parameters with the 16 original one
data['totalMassI'] = AddCol(data.get('mass1I') ,  data.get('mass2I') )
data['etaI'] = MulCol(data.get('mass1I') ,  data.get('mass2I') )
data['etaI'] = DivCol(data.get('etaI') ,  data.get('totalMassI') )
data['etaI'] = DivCol(data.get('etaI') ,  data.get('totalMassI') )


# injected total mass versus overlap
extract_data("MInjectedVsOverlap.dat", "totalMassI", "overlap")
extract_data("MTriggeredVsOverlap.dat", "totalMassT", "overlap")
extract_data("EtaTriggeredVsOverlap.dat", "etaT", "overlap")
extract_data("EtaInjectedVsOverlap.dat", "etaI", "overlap")
extract_data("PhaseOverlap.dat", "phase", "overlap")
extract_data("AlphaOverlap.dat", "alpha", "overlap")
extract_data("AlphaFOverlap.dat","alpha_f", "overlap")
extract_data('Psi0TOverlap.dat','psi0T','overlap')
extract_data('Psi0IOverlap.dat','psi0I','overlap')
extract_data('Psi3TOverlap.dat','psi3T','overlap')
extract_data('Psi3IOverlap.dat','psi3I','overlap')
extract_data('FreqTOverlap.dat','fT','overlap')
extract_data('FreqIOverlap.dat','fI','overlap')
extract_data('Psi0IPsi0T.dat','psi0I','psi0T')
extract_data('Psi3IPsi3T.dat','psi3I','psi3T')
extract_data('Psi0TPsi3T.dat','psi0T','psi3T')
extract_data('Psi0IPsi3I.dat','psi0I','psi3I')

#related to alpha
extract_data('AlphaFpsi0T.dat','alpha_f','psi0T')
extract_data('AlphaFpsi0I.dat','alpha_f','psi0I')
extract_data('AlphaFpsi3T.dat','alpha_f','psi3T')
extract_data('AlphaFpsi3I.dat','alpha_f','psi3I')
extract_data('PhaseAlphaF.dat','phase','alpha_f')
extract_data('PhaseAlpha.dat','phase','alpha')
extract_data('FreqTAlpha.dat','fT','alpha')
extract_data('FreqTAlphaF.dat','fT','alpha_f')


# compute new parameters with the new one and original one
data['diffTotalMass'] = SubCol(data.get('totalMassI') ,  data.get('totalMassT') )
data['diffEta'] = SubCol(data.get('etaI') ,  data.get('etaT') )
data['diffPsi0'] = SubCol(data.get('psi0I') ,  data.get('psi0T') )
data['diffPsi3'] = SubCol(data.get('psi3I') ,  data.get('psi3T') )
data['diffFreq'] = SubCol(data.get('fI') ,  data.get('fT') )

#compute diff between expected and triggered
extract_data("DiffMassVsOverlap.dat", "diffTotalMass", "overlap")
extract_data("DiffPsi0VsOverlap.dat", "diffPsi0", "overlap")
extract_data("DiffPsi3VsOverlap.dat", "diffPsi3", "overlap")
extract_data("DiffEtaVsOverlap.dat", "diffEta", "overlap")
extract_data("DiffFreqVsOverlap.dat", "diffFreq", "overlap")











