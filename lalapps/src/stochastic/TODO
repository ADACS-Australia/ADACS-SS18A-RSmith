TODO:

stochastic.c/stochastic_fake.c:

* unify stochastic.c and stochastic_fake.c into a single code

* implement software injections for preforming monte carlo simulations

* rewrite frequency mask code to enable general frequency masks to be
  applied, not just multiples of 16 and 60 Hz

* add loop over frequency band for bayesian search within stochastic.c,
  so that all bands can be analysed without rereading all the data in
  for each band

* add loop so that the code reads in the maximum amount of data that can
  be stored within a specified amount of data, analyses that data, and
  the reads in more data etc... this will allow the code to analyse the
  science segments as a whole and reduce the complexity of the pipeline
  dag scripts

* reduce the amount of global variables, create a data structure to hold
  variables associated with command line options to pass around when
  needed - removing the need for global variables

* will only need to use either tukey or hann window, therefore replace
  the --overlap-hann and --hann-duration command line switches with
  --hann, --tukey, and --overlap flags

stopp.c/stopp_bayes.c:

* unify stopp.c and stopp_bayes.c into a single code

* add support for combining statistics from overlapping hann windows

* modularise

* output bayesian pdf into a separate xml table

* add process and process params tables

stochastic_pipe.in/stochastic_bayes.in:

* unify stochastic_pipe.in and stochastic_bayes.in into a single script

* call lalapps_stopp for each frequency band to create a single xml file
  for each frequency band, for the bayesian search

* enable support for GEO/LIGO correlations, script currently checks for
  calibration information for all detectors - which GEO doesn't need

* when the data is split up into segments to analyse, no overlapping of
  data is performed - this means that there are 60s of data not analysed
  at the end of one segment and the start of the next leading to 120s of
  data being lost everytime a science segment is split

stochastic.py:

* get local modifications of LSCdataFind classes into glues pipeline.py

General:

* XLALify core SGWB routines

* use XLAL functions in precedence of LAL functions

* move as many of the helper functions as possible into LAL

* need to fully update documentation, out of date as it refers to
  needing to set the LSC DataFind Server which is now specified within
  the config file
