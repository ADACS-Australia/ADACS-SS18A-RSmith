/** @file cmdline_compareCandidates.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.4
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_COMPARECANDIDATES_H
#define CMDLINE_COMPARECANDIDATES_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE "compareCandidates"
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_PACKAGE_NAME "compareCandidates"
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION "1.0.0"
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * config_arg;	/**< @brief Configuration file in gengetopt format for passing parameters.  */
  char * config_orig;	/**< @brief Configuration file in gengetopt format for passing parameters original value given at command line.  */
  const char *config_help; /**< @brief Configuration file in gengetopt format for passing parameters help description.  */
  char * infile1_arg;	/**< @brief Input file 1.  */
  char * infile1_orig;	/**< @brief Input file 1 original value given at command line.  */
  const char *infile1_help; /**< @brief Input file 1 help description.  */
  char * infile2_arg;	/**< @brief Input file 2.  */
  char * infile2_orig;	/**< @brief Input file 2 original value given at command line.  */
  const char *infile2_help; /**< @brief Input file 2 help description.  */
  char * outfile1_arg;	/**< @brief Temporary output file with all coincident candidates.  */
  char * outfile1_orig;	/**< @brief Temporary output file with all coincident candidates original value given at command line.  */
  const char *outfile1_help; /**< @brief Temporary output file with all coincident candidates help description.  */
  char * outfile2_arg;	/**< @brief Temporary output file with subset of coincient outliers.  */
  char * outfile2_orig;	/**< @brief Temporary output file with subset of coincient outliers original value given at command line.  */
  const char *outfile2_help; /**< @brief Temporary output file with subset of coincient outliers help description.  */
  char * outfile3_arg;	/**< @brief Temporary output file with alternate subset of coincident outliers.  */
  char * outfile3_orig;	/**< @brief Temporary output file with alternate subset of coincident outliers original value given at command line.  */
  const char *outfile3_help; /**< @brief Temporary output file with alternate subset of coincident outliers help description.  */
  char * finalOutfile_arg;	/**< @brief Final output file of coincident outliers.  */
  char * finalOutfile_orig;	/**< @brief Final output file of coincident outliers original value given at command line.  */
  const char *finalOutfile_help; /**< @brief Final output file of coincident outliers help description.  */
  double Tobs_arg;	/**< @brief Total observation time (in seconds).  */
  char * Tobs_orig;	/**< @brief Total observation time (in seconds) original value given at command line.  */
  const char *Tobs_help; /**< @brief Total observation time (in seconds) help description.  */
  double Tcoh_arg;	/**< @brief SFT coherence time (in seconds).  */
  char * Tcoh_orig;	/**< @brief SFT coherence time (in seconds) original value given at command line.  */
  const char *Tcoh_help; /**< @brief SFT coherence time (in seconds) help description.  */
  double fdiff_allowed_arg;	/**< @brief Difference in frequencies allowed (in Hz).  */
  char * fdiff_allowed_orig;	/**< @brief Difference in frequencies allowed (in Hz) original value given at command line.  */
  const char *fdiff_allowed_help; /**< @brief Difference in frequencies allowed (in Hz) help description.  */
  double dfdiff_allowed_arg;	/**< @brief Difference in modulation depth allowed (in Hz).  */
  char * dfdiff_allowed_orig;	/**< @brief Difference in modulation depth allowed (in Hz) original value given at command line.  */
  const char *dfdiff_allowed_help; /**< @brief Difference in modulation depth allowed (in Hz) help description.  */
  double skydiff_allowed_arg;	/**< @brief Difference in sky location allowed (in radians) at fiducial frequency 200 Hz.  */
  char * skydiff_allowed_orig;	/**< @brief Difference in sky location allowed (in radians) at fiducial frequency 200 Hz original value given at command line.  */
  const char *skydiff_allowed_help; /**< @brief Difference in sky location allowed (in radians) at fiducial frequency 200 Hz help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int infile1_given ;	/**< @brief Whether infile1 was given.  */
  unsigned int infile2_given ;	/**< @brief Whether infile2 was given.  */
  unsigned int outfile1_given ;	/**< @brief Whether outfile1 was given.  */
  unsigned int outfile2_given ;	/**< @brief Whether outfile2 was given.  */
  unsigned int outfile3_given ;	/**< @brief Whether outfile3 was given.  */
  unsigned int finalOutfile_given ;	/**< @brief Whether finalOutfile was given.  */
  unsigned int Tobs_given ;	/**< @brief Whether Tobs was given.  */
  unsigned int Tcoh_given ;	/**< @brief Whether Tcoh was given.  */
  unsigned int fdiff_allowed_given ;	/**< @brief Whether fdiff_allowed was given.  */
  unsigned int dfdiff_allowed_given ;	/**< @brief Whether dfdiff_allowed was given.  */
  unsigned int skydiff_allowed_given ;	/**< @brief Whether skydiff_allowed was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char **argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char **argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_COMPARECANDIDATES_H */
