
#Key to terminology: 
#BLKs: The input blocks of frequency domain data (e.g., from SFTs). 
#STKs: The BLK data is stacked up and turned in STKs. 
#SUMs: The STKs are slid and then summed to produce SUMs; 

#For historical reasons, parameters for controlling Monte Carlo Simulations occur in several places.
#See: maxMCinterations, maxMCErr, orientationAngle, cosInclinationAngle, weightFlag, testFlag, outputEventFlag, numMCInjections, numMCRescalings, rescaleMCFraction, parameterMC, and debugOptionFlag.

#Example command line arguments for ComputeStackSlide: 

set gpsEpochStartTimeSec               731210229; #1  UINT4 GPS seconds at the SSB giving reference time that defines the start of the epoch at the SSB.
set gpsEpochStartTimeNan                       0; #2  UINT4 GPS nanoseconds at the SSB giving reference time that defines the start of the epoch at the SSB.
set gpsStartTimeSec                    731210229; #3  UINT4 analysis GPS start-time seconds at the detector. 
#Note that for the isolated search case, to make Monte Carlo simulations with spindown work properly and self-consistently with the search one needs to:
# 1. Use lal/packages/pulsar/src/ComputeSky.c version 1.11 or higher.
# 2. Use lal/packages/inject/src/GeneratePulsarSignal.c version 1.40 or higher.
# 3. Make sure gpsEpochStartTimeSec == gpsStartTimeSec = start time of the first BLK of data (i.e., the first SFT) and that gpsEpochStartTimeNan == 0.
#When not running a Monte Carlo simulation set gpsEpochStartTimeSec and gpsEpochStartTimeNan to any T_0 desired, giving the start of the epoch at the SSB.
set duration      1.8000000000000000e+04; #4  REAL8 analysis duration 
#Note that duration is used to find SFTs with start time in the
#interval [gpsStartTimeSec, gpsStartTimeSec+duration-tBLK] until 
#numBLKs SFTs are found. Thus, the actual duration of the
#search is numBLKs*tBLK. See the next two parameters.

set numBLKs                                 10; #5  INT4 input number of blocks of data (e.g., actual number of SFTs used in this job). 
set tBLK                1.8000000000000000e+03; #6  REAL8 time baseline of input BLKs (e.g., of SFTs). 
set tEffBLK             1.8000000000000000e+03; #7  REAL8 effective time baseline of input BLKs (e.g., not tBLK if oversampling used). 
set f0BLK               3.0011000000000001e+02; #8  REAL8 start frequency of the input BLKs. 
set bandBLK             1.7999999999999999e-01; #9  REAL8 frequency band of input BLKs. 
set nBinsPerBLK                            324; #10 INT4 number of frequency bins one BLKs. 
#Note that nBinsPerBLK takes precedence. An error is thrown if this does not correspond to tEffBLK*bandBLK rounded to the nearest integer. 

set numBLKsPerSTK                            1; #11 INT4 number BLKs used to make one STK. 
set tEffSTK             1.8000000000000000e+03; #12 REAL8 effective time baseline of STKs (deltaF = 1/tEffSTK). 
set f0STK               3.0011000000000001e+02; #13 REAL8 start frequency of STKs. 
set bandSTK             1.7999999999999999e-01; #14 REAL8 frequency band of STKs. 
set nBinsPerSTK                            324; #15 INT4 number of frequency bins in one STK. 
#Note that nBinsPerSTK takes precedence. An error is thrown if this does not correspond to tEffSTK*bandSTK rounded to the nearest integer. 

set numSTKsPerSUM                           10; #16 INT4 number of STKs used to make one SUM. 
set tEffSUM             1.8000000000000000e+03; #17 REAL8 effective time baseline of SUMs (deltaF = 1/tEffSUM). 
set f0SUM               3.0017500000000001e+02; #18 REAL8 start frequency of SUMs. 
set bandSUM             5.0000000000000003e-02; #19 REAL8 frequency band of SUMs. 
set nBinsPerSUM                             90; #20 INT4 number of frequency bins in one SUM. 
#Note that nBinsPerSUM takes precedence. An error is thrown if this does not correspond to tEffSUM*bandSUM rounded to the nearest integer. 
#Since the entire frequency band slides together, bandSUM cannot exceed 1.0/((v_Earth/c)_max*tEffSTK),
#where (v_Earth/c)_max =  1.0600000000000000e-04. This keeps the maximum error in the number of bins to slide less than or equal to 0.5 bins. 

set ifoNickName                             H1; #21 CHAR* H2, H1, L1, or G1. 
set IFO                                    LHO; #22 CHAR* LHO, LLO, or GEO. 
set patchName                       testPulsar; #23 CHAR* a name to identify this search (e.g., S2 Galactic Center).

set maxMCinterations                         1; #24 INT4 maximum number of times to iterate entire Monte Carlo Simulation. 

set priorResultsFile     None; #25 CHAR* file with the loudest event and estimated UL from a prior step in the pipeline. 
set parameterSpaceFile   None; #26 CHAR* file with parameter space data 

set maxMCErr     5.0000000000000001e-03; #27 REAL8 maximum absolute error allowed when testing for convergence of confidence when iterating Monte Carlo. 

set parameterSpaceFlag                       0; #28 INT2 how to generate parameter space. 
#The parameterSpaceFlag options are: 
# if parameterSpaceFlag >= 0 generate sky positions uniformly on the sphere and spindowns without using parameter space metric.
# if (parameterSpaceFlag & 1 > 0) rotate skyPosData into coordinates with Earth's average acceleration at the pole.
# if (parameterSpaceFlag & 2) > 0 rotate skyPosData into galactic plane.

set stackTypeFlag                            0; #29 INT2 how to generate STKs from BLKs. 
set Dterms                                   3; #30 INT4 number of terms for Dirichlet kernel (when generating the F-stat or fake SFTs with a signal). 
# Note that 0 means stacks are PSDs from SFTs (the only option currently supported); 1 means stacks are F-statistic from SFTs. 

set thresholdFlag                            1; #31 INT2 how to apply the thresholds. 
set threshold1          2.7999999523162842e+00; #32 REAL4 peak found if power is above this. 
set threshold2          1.0700000524520874e+00; #33 REAL4 peak ends if power drops below this. 
set threshold3          2.0000000298023224e-01; #34 REAL4 ratio peak height to valley depth that indicates a new peak rather than subpeak in a cluster. 
set threshold4          0.0000000000000000e+00; #35 REAL4 unused (except when testFlag & 2 > 0; see below).
set threshold5          0.0000000000000000e+00; #36 REAL4 unused (except when testFlag & 1 > 0).
#Also see below how threshold3, threhold4, and threshold5 are used when (debugOptionFlag & 64) > 0 
set maxWidthBins                             3; #37 REAL4 maximum width in bins. 
#The thresholdFlag rules are: 
# if (thresholdFlag <= 0) do not analyze SUMs for peaks about threshold,
# if (thresholdFlag > 0) analyze SUMs for peaks above threshold,
# if (thresholdFlag & 2 > 0) find peaks above threshold with width less than maxWidthBins; else find peaks above threshold of any width,
# if (thresholdFlag & 4 > 0) ignore overlap events within maxWidthBins of edge of SUM band (useful when overlapping adjacent search bands by 2*maxWidthBins),
# if (thresholdFlag & 8 > 0) then update pw_mean_thissum, pw_stddev_thissum, pwr_snr ignoring peak bins.

set weightFlag                               0; #38 INT2 how to weight STKs. 
#The weightFlag rules are: 
# if (weightFlag & 1 > 0) use powerFlux style weights; must using running median (see normalizationFlag rules),
# if (weightFlag & 2 > 0) include beam pattern F_+ in calculation of weights,
# if (weightFlag & 4 > 0) include beam pattern F_x in calculation of weights,
# if (weightFlag & 8 > 0) rescale the input BLK data (SFTs) with the inverse mean of the absolute value of this data, [fabs(Re(BLKData)) + fabs(Im(BLKData))]/2, to prevent dynamic range issues.
# if (weightFlag & 16 > 0) save medians and weight SFTs with inverse medians; must using running median (see normalizationFlag rules).
# This last option will reuse the medians which can speed up Monte Carlo Simulations. However one must test what bias this introduces by also running the MC with this option off.

set orientationAngle     0.0000000000000000e+00; #39 REAL8 orientation angle in radians used to find F_+ and F_x when used to weight STKs or if using fixed polarization for a Monte Carlo Simulation. 
set cosInclinationAngle  0.0000000000000000e+00; #40 REAL8 cosine inclination angle if using fixed value for a Monte Carlo Simulation. 

set normalizationFlag                        4; #41 INT2 what normalization to do. 
set f0NRM               3.0011000000000001e+02; #42 REAL8 frequency to start with when finding norms. 
set bandNRM             1.7999999999999999e-01; #43 REAL8 frequency band to use when finding norms. 
set nBinsPerNRM                             50; #44 INT4 number of frequency bins to use when finding norms. 
set normalizationParameter  0.0000000000000000e+00; #45 REAL4 see uses below. 
#The normalizationFlag rules are: 
# if (normalizationFlag & 1) > 0 normalize STKs using mean, but if (normalizationFlag & 4) > 0, running median takes precedence,
# if (normalizationFlag & 2) > 0 normalize BLKs else normalize STKs, 
# if (normalizationFlag & 4) > 0 normalize STKs using running median (or use medians in weights when weightFlag > 0), 
# The running median block size is given by nBinsPerNRM.
# If normalizing with the running median and normalizationParameter > 0, this is used to correct bias in the median to get the mean; otherwise LALRngMedBias is used to correct this bias.
# if (normalizationFlag & 8) > 0 normalize with veto on power above normalizationParameter = max_power_allowed/mean_power.
# if (normalizationFlag & 16) > 0 then output into .Sh file GPS startTime and PSD estimate for each SFT.
# if (normalizationFlag & 32) > 0 then ignore bins using info in linesAndHarmonicsFile.
# if (normalizationFlag & 64) > 0 then clean SFTs using info in linesAndHarmonicsFile before normalizing.
# Note that the (normalizationFlag & 32) > 0 and (normalizationFlag & 64) > 0 options can be set independently.
# WARNING: if searching for very young pulsars with frequencies that change significantly in less that 8 minutes due to spindown or spinup, or if gpsEpochStartTimeSec is larger than gpsStartTimeSec + duration/2, check how maxSpindownFreqShift and maxSpinupFreqShift are used in the code before cleaning SFTs.

set testFlag                                 0; #46 INT2 specify test case.
# if ((testFlag & 1) > 0) output Hough number counts instead of power; use threshold5 for Hough cutoff.
# if ((testFlag & 2) > 0) inject fake signals and run Monte Carlo Simulation; use threshold4 for h_0.
# if ((testFlag & 4) > 0) use LALComputeSkyAndZeroPsiAMResponse and LALFastGeneratePulsarSFTs instead of LALGeneratePulsarSignal and LALSignalToSFTs during Monte Carlo Simulations. See LAL inject package.
# if ((testFlag & 8) > 0) use fixed orientationAngle and cosInclinationAngle set above during Monte Carlo Simulations.
# if ((testFlag & 16) > 0) use results from prior jobs in the pipeline and report on current Monte Carlo results.
# if ((testFlag & 32) > 0) break out of iterated Monte Carlo Simulation if desired confidence found;
#  else will run all iterations using rescaleMCFraction to rescale injected amplitudes and linearly interpolate to find UL.
# if ((testFlag & 64) > 0) search surrounding parameters space pts during Monte Carlo Simulations; else search nearest only.
# if ((testFlag & 128) > 0) speed up Monte Carlo Simulations by injecting into middle of a band with nBinsPerBLK - nBinsPerSUM bins only.
# The prior results must be given in the priorResultsFile set above.
# The maximum number of iterations is given by maxMCinterations set above.
# The maximum absolute error allowed when testing for convergence of confidence when iterating the Monte Carlo is set by maxMCErr above.
# The loudest event, upper limits and confidence are reported in the searchresults_stackslidemontecarlo table in the xml file.

set linesAndHarmonicsFile None; #47 CHAR* file with instrument line and harmonic spectral disturbances data.

set outputSUMFlag                            2; #48 INT2 whether to output SUMs e.g., in ascii. 
#The outputSUMFlag rules are: 
# if (outputSUMFlag <= 0) do not output any SUMs,
# if (outputSUMFlag > 0) output ascii files with sums (if ComputeStackSlide sums compiled with ascii output enabled; see preprocessor flags),
# if ((outputSUMFlag & 2) > 0) output frequency and power into ascii sum files; else output power only. 

set outputEventFlag                          2; #49 INT2 determines xml output of process, event, and summary tables. 
set keepThisNumber                           1; #50 INT4 how many events to keep (used when keeping loudest events). 
#The outputEventFlag rules: 
# if (outputEventFlag <= 0) do not output xml file,
# if (outputEventFlag > 0) output xml file.
# if (((outputEventFlag & 2) > 0) && (keepThisNumber > 0)) keep only keepThisNumber loudest events based on this criteria: 
#  keep the loudest event for every eventBandWidth = bandSUM/keepThisNumber, which is the same as, 
#  keep the loudest event for every nBinsPerOutputEvent = nBinsPerSUM/keepThisNumber; 
#  thus if keepThisNumber == 1 then we only output the loudest event; if keepThisNumber == nBinsPerSUM we output the loudest event for every bin.
# if ((outputEventFlag & 4) > 0) the loudest event from each template (i.e., each sky position and set of spindown parameters) is output. 
# if ((outputEventFlag & 8) > 0) and not running a Monte Carlo Simulation, write the loudest event to the priorResultsFile for use by later Monte Carlo Simulation; if running MC, produce estimated UL based on loudest event from priorResultsFile.
#  In this case the parameterMC must be set to the desired confidence, threshold4 to the first guess for the UL, and rescaleMCFraction will be used as the initial uncertainty in the UL.
# if ((outputEventFlag & 16) > 0) if running a Monte Carlo Simulation, write loudest event for each injection to xml file. (The default is not write these during an MC to save disk space.)

set startRA             0.0000000000000000e+00; #51 REAL8 start right ascension in radians. 
set stopRA              0.0000000000000000e+00; #52 REAL8 end right ascension in radians. 
set deltaRA             0.0000000000000000e+00; #53 REAL8 delta right ascension in radians. 
set numRA                                    1; #54 INT4 number of right ascensions for DEC = 0.  
#Note that deltaRA >= 0.0 must be true, otherwise an error is thrown! 
#An error is thrown if deltaRA is not consistent with numRA and [startRA stopRA) for DEC = 0.
#For each declination, deltaRA = input deltaRA/cos(DEC); numRA = ceil((stopRA-startRA)/deltaRA); deltaRA = (stopRA-startRA)/numRA is used to cover interval [startRA stopRA). 

set startDec            0.0000000000000000e+00; #55 REAL8 start declination in radians. 
set stopDec             0.0000000000000000e+00; #56 REAL8 end declination in radians. 
set deltaDec            0.0000000000000000e+00; #57 REAL8 delta declination in radians. 
set numDec                                   1; #58 INT4 number of declinations. 
#Note that deltaDec >= 0.0 must be true, otherwise an error is thrown! 
#Note that numDec takes precedence; an error is thrown if this is not consistent with deltaDec and either the interval [startDec, stopDec) or [startDec, stopDec].
#The DECs are generated by DEC = startDec + i*deltaDec for i = 0 to numDec - 1. 

set numSpinDown                              1; #59 INT4 number of spindown parameters to include in the search. 
#Note when numSpinDown > 0 that derivs are generated by FDerivN = startFDerivN + i*deltaFDerivN for i = 0 to numFDerivN - 1. 
#In this case deltaFDerivN <= 0.0 must be true for N odd and deltaFDerivN >= 0.0 must be true for N even, otherwise an error is thrown! 
#Note that numFDerivN takes precedence; an error is thrown if this is not consistent with deltaFDerivN and either the interval [startFDerivN, stopFDerivN) or [startFDerivN, stopFDerivN].

set startFDeriv1        0.0000000000000000e+00; #60 REAL8 start 1st deriv of freq in Hz/s. 
set stopFDeriv1         0.0000000000000000e+00; #61 REAL8 end 1st deriv of freq in Hz/s. 
set deltaFDeriv1        0.0000000000000000e+00; #62 REAL8 delta 1st deriv of freq in Hz/s. 
set numFDeriv1                               1; #63 INT4 number 1st derivs of freq. 

set startFDeriv2        0.0000000000000000e+00; #64 REAL8 start 2nd deriv of freq in Hz/s^2. 
set stopFDeriv2         0.0000000000000000e+00; #65 REAL8 end 2nd deriv of freq in Hz/s^2. 
set deltaFDeriv2        0.0000000000000000e+00; #66 REAL8 delta 2nd deriv of freq in Hz/s^2. 
set numFDeriv2                               0; #67 INT4 number 2nd derivs of freq. 

set startFDeriv3        0.0000000000000000e+00; #68 REAL8 start 3rd deriv of freq in Hz/s^3. 
set stopFDeriv3         0.0000000000000000e+00; #69 REAL8 end 3rd deriv of freq in Hz/s^3. 
set deltaFDeriv3        0.0000000000000000e+00; #70 REAL8 delta 3rd deriv of freq in Hz/s^3. 
set numFDeriv3                               0; #71 INT4 number of 3rd derivs of freq. 

set startFDeriv4        0.0000000000000000e+00; #72 REAL8 start 4th deriv of freq in Hz/s^4. 
set stopFDeriv4         0.0000000000000000e+00; #73 REAL8 end 4th deriv of freq in Hz/s^4. 
set deltaFDeriv4        0.0000000000000000e+00; #74 REAL8 delta 4th deriv of freq in Hz/s^4. 
set numFDeriv4                               0; #75 INT4 number of 4th derivs of freq. 

set numMCInjections                          0; #76 INT4 number of Monte Carlo injections to do when (testFlag & 2) > 0.
set numMCRescalings                          0; #77 INT4 number of times to rescale signal injection to run multiple Monte Carlo simulations in parallel. 
set rescaleMCFraction   0.0000000000000000e+00; #78 REAL8 fraction to change injected amplitude by with each rescaling. 
set parameterMC         0.0000000000000000e+00; #79 REAL8 if (outputEventFlag & 8) > 0 the parameterMC must be set to the desired confidence. 

set sunEdatFile          sun00-04.dat; #80 CHAR* name of ascii file with sun ephemeris data. 
set earthEdatFile      earth00-04.dat; #81 CHAR* name of ascii file with earth ephemeris data. 

set sftDirectory       ../*SFT.*; #82 CHAR* path and pattern to match to find input data. 

set outputFile         myout.txt; #83 CHAR* name of output file (.xml is appended to this name for xml output). 

set debugOptionFlag                          1; #84 INT2 debugging information to print to stdout. 
# if (debugOptionFlag & 1) > 0 then print command line arguments.
# if (debugOptionFlag == 1) then print command line arguments and abort!
# if (debugOptionFlag & 2) > 0 then print table with events (isolated case only).
# if (debugOptionFlag & 4) > 0 then print sky grid and spindown grid with debugging information.
# if (debugOptionFlag & 8) > 0 then the STK bin with max power is set to 1, all other to 0.
# if (debugOptionFlag & 16) > 0 also set to 1 one bin to either side of the bin with maxPwr.
# if (debugOptionFlag & 32) > 0 print Monte Carlo Simulation results to stdout.
# if (debugOptionFlag & 64) > 0 generated SUMs with an estimate of StackSlide Power for a given source.
#Must also use the (weightFlag & 16) > 0 option; the (weightFlag & 8) > 0 option is recommended.
#Must set threshold3 to the value of 2.0/(f_s*f_s*tBLK), where f_s is the effective sample rate of the input data.
#Must set threshold4 = A_+, threhold5 = A_x, and orientationAngle = polarization angle of the source for which to estimate the power.
#In addition, if (debugOptionFlag & 2) > 0, these are output to stdout for the time stamps of the input BLKs: A_+, F_+(midpoint time), A_x, F_x(midpoint time), sqrt(Sn) estimated from the running median, the bin mismatch, the SNR squared d2, and the binoffset.
#The estimated power is output for each template based on the other options for sky position, spindown values, and frequency.
# if (debugOptionFlag & 128) > 0 creates SUMs from the STKs without sliding (isolated case only).
# if (debugOptionFlag & 256) > 0 then print the factor used to rescale BLKs to prevent dynamic range issues; see discussion of weightFlag & 8 > 0 above.
# Use of the debugOptionFlag provides an easy way to validate the StackSlide code! 
# For fake data with a signal and no noise, run on the exact template for the signal with the 
# debugOptionFlag bit for 8, or 8 and 16, set. The StackSlide power should equal the number of SFTs,
# to within ~4 percent, for debugOptionFlag & 8 > 0 and exactly equal this for debugOptionFlag & 24 > 0.
