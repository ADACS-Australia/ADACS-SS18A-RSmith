# This file defines a ComputeStackSlideSUM job
#
# Author Greg Mendell
#
# Note that runComputeStackSlideSUM.tclsh first sources the tempate_file and then the job_file (e.g, this file).
# Thus set filter parameters that change often in the template_file and use these to set the rest in a corresponding job_file.
# See README_CommandLineArgument for a complete description of the ComputeStackSlideSums command line arguments.
# See README_ComputeStackSlideSums for further details.

# REVISIONS:
# 01/20/04 gam; Change unusedFlag2 to threshold3.
# 01/21/04 gam; Note that code finds peaks in SUMs only if thresholdFlag > 0; must set threshold1, threshold2, and threshold3.
# 01/21/04 gam; if outputFlag == 1 then output just SUM power; if outputFlag == 2 output frequency and power.
# 01/27/04 gam; Change unusedFlag1, unusedParam1 and unusedParam2 to threshold4, threshold5, and threshold6.
#               When thresholdFlag == 1 then threshold4 = fraction minimum power in a cluster must be below subpeak to count as new peak;
#               threshold5 = false alarm rate associated with threshold1; threshold6 could used for a time based cut.
# 01/27/04 gam; Create new job file, runStackSlideSearch.job, that allows template space and thresholds
#               to be defined in template_file sourced by runComputeStackSlideSUM.tclsh
# 02/02/04 gam; fix bug, set stopDec to $templateStopDec.
# 02/17/04 gam; Change outputFlag to outputSUMFlag; add outputEventFlag and keepThisNumber
#               (Remove windowFilterParam2 and windowFilterParam3)
# 02/20/04 gam; replace threshold6 with INT4 maxWidthBins = maximum width of peak; used if (thresholdFlag & 2) > 0.
# 02/20/04 gam; threshold3 is now fracPwDrop used to indicate peak is new peak and not subpeak in a cluster; threshold4 and 5 are unused
# 02/27/04 gam; Remove \" \" from all arguments.
# 03/03/04 gam; change windowFilterParam1 to normalizationThreshold
# 03/10/04 gam; Change fOffset to bring in only 10 extra bin for spindown for better normalization of the noise.
# 04/14/04 gam; if (params->normalizationFlag & 4) > 0 normalize STKs using running median
# 05/05/04 gam; Change normalizationThreshold to normalizationParameter.  If normalizing with running median use this to correct bias in median to get mean.
# 07/09/04 gam; set normalizationParameter 0.0 below; this is now set using LALRngMedBias in the C code to correct bias in the median.
# 10/28/04 gam; change unused windowFilterFlag to REAL8 orientationAngle used to find F_+ and F_x with weightFlag or MC with fixed polarization angle
# 12/06/04 gam; add gpsEpochStartTimeNan; get gpsEpochStartTime, gpsEpochStartTimeNan, and gpsStartTime from command line;
# 12/06/04 gam; change calibrationFlag to cosInclinationAngle
# 01/06/05 gam; Use better estimate of maximum of Earth's orbital velocity over c to make code more efficient.
#               But also include searchRunningMedianBlockSize extra bins for running median normalization
#               Also, use abs(maximum spindown) to add extra bins for spindown
# 01/06/05 gam; Use length of tEffBLK to determine how to round BLK start frequency and band.
# 05/13/05 gam; add searchParameterSpaceFlag
# 05/14/05 gam; Change numSUMsPerCall to linesAndHarmonicsFile; file with instrument line and harmonic spectral disturbances data.
# 07/17/05 gam; Change ...Deriv5 command line arguments to ones that control new Monte Carlo (MC) options
# 09/07/05 gam; Change searchMaxMCfracErr to absolute error searchMaxMCErr
# 09/08/05 gam; Add searchDterms with default equal to 32, which gives Dterms used with MC fast SFT generation and LALDemod.
# 12/15/05 gam; set nBinsPerNRM to $searchRunningMedianBlockSize unless $searchNormalizationFlag & 1 indicate using mean as norm.

set maxEarthOrbVelOverC 1.1e-4; # Should be overestimate by 10%.

set maxBinaryOrbitSemiMajorAxisOverC 1.623;

set OrbitalVelocity 9.3e-5;

if {[string range $IFONICKNAME 0 0] == "H"} {
    set IFOName "LHO";
} elseif {[string range $IFONICKNAME 0 0] == "L"} {
    set IFOName "LLO";        
} elseif {[string range $IFONICKNAME 0 0] == "G"} {
    set IFOName "GEO";    
}

if {$NUMSFTS < 1} {
  PrintError "No SFTs found for IFO = $INTERFEROMETER FRAME_TYPE = $FRAME_TYPE start_time = $ANALYSIS_START_TIME stop_time = $stopSec";
}

###################### SET FILTER PARAMETERS #####################################

set gpsEpochStartTime $templateGPSEpochStartTime; # 12/06/04 gam; UINT4 GPS seconds at the detector giving SSB epoch reference time.
set gpsEpochStartTimeNan $templateGPSEpochStartTimeNan; # 12/06/04 gam; UINT4 GPS nanoseconds at the detector giving SSB epoch reference time.

set gpsStartTimeSec $ANALYSIS_START_TIME;  # GPS start time of data requested, seconds 
# set gpsStartTimeNan 0;                   # 12/06/04 gam; # GPS start time of data requested, nanoseconds
# set sampleRate 4096;                     # 12/06/04 gam; # Sample rate of time domain data
set duration $SAMPLE_TIME;                 # Duration in seconds that search code will run on.

# NOTE THAT THIS JOB ASSUMES INPUT BLKS OF DATA ARE SFTs
set numBLKs $NUMSFTS;                           # Actual number of input SFTs
set tBLK    $INPUTSFTTIME;                          # Duration in seconds of data used to generate one SFT
set tEffBLK $INPUTSFTTIME;                          # Used to get dfBLK = 1/tEffBLK = BLK frequency step size.
#set f0BLK   $INPUTSUMF0;                       # Start frequency of the input SFTs
#set bandBLK $INPUTSUMBAND;                     # Band width of the input SFTs.
#set nBinsPerBLK [expr $tEffBLK*$INPUTSUMBAND]; # Number of input frequency bins in one BLK
# Adjust f0BLK and bandBLK to bring in extra bins for sliding.  Overestimate maximum possible doppler shift (5.0e-4*f0)
#set fOffset [expr 5.0e-4*$INPUTSUMF0 + ($duration/$tBLK)/(1.0*$tEffBLK)]; # 03/10/04 gam;
# 03/10/04 gam; Change fOffset to bring in only 10 extra bin for spindown for better normalization of the noise.
# set fOffset [expr 5.0e-4*($INPUTSUMF0 + $INPUTSUMBAND) + 20.0/(1.0*$tEffBLK)];
# 01/06/05 gam; compute offset more accurately
set extraBandDueToSpindown [expr $templateNumSpinDown*abs($templateStopFDeriv1)*$SAMPLE_TIME];
set fOffset [expr $maxEarthOrbVelOverC*($INPUTSUMF0 + $INPUTSUMBAND) + $OrbitalVelocity*$maxBinaryOrbitSemiMajorAxisOverC*($INPUTSUMF0 + $INPUTSUMBAND) + $extraBandDueToSpindown + $searchRunningMedianBlockSize/(1.0*$tEffBLK)];

# 01/06/05 gam; round depending on SFT time:
if {$tEffBLK == 1800} {
   set roundWithThisFactor 100.0;
} elseif {$tEffBLK == 60} {
   set roundWithThisFactor 10.0;
} else {
   set roundWithThisFactor $INPUTSFTTIME;
}

set f0BLK   [expr $INPUTSUMF0 - $fOffset];    # Start frequency of the input SFTs
#set f0BLK   [expr (floor($f0BLK*100.0))/100.0]; # 01/06/05 gam;
set f0BLK   [expr (floor($f0BLK*$roundWithThisFactor))/$roundWithThisFactor];
if {$f0BLK < 0.0} {
  PrintError "Computed f0BLK = $f0BLK is too small to allow sliding. Increase f0BLK.";
}
set bandBLK [expr $INPUTSUMBAND + 2.0*$fOffset];  # Band width of the input SFTs.
#set bandBLK [expr (ceil($bandBLK*100.0))/100.0]; # 01/06/05 gam;
set bandBLK [expr (ceil($bandBLK*$roundWithThisFactor))/$roundWithThisFactor];
set nBinsPerBLK [expr floor($tEffBLK*$bandBLK + 0.5)]; # Number of frequency bins in one SUM

set numBLKsPerSTK  1;                          # Number of BLKs to use to make one STK
set tEffSTK $INPUTSFTTIME;                          # Used to get dfSTK = 1/tEffSTK = STK frequency step size.
#set f0STK   $INPUTSUMF0;                       # Start frequency of the input SFTs
#set bandSTK $INPUTSUMBAND;                     # Band width of the input SFTs.
#set nBinsPerSTK [expr $tEffBLK*$INPUTSUMBAND]; # Number of frequency bins in one STK
set f0STK   $f0BLK;                            # Start frequency of the input SFTs
set bandSTK $bandBLK;                          # Band width of the input SFTs.
set nBinsPerSTK $nBinsPerBLK; # Number of frequency bins in one STK

set numSTKsPerSUM [expr $duration/$tBLK];      # Number of STKs that fit into one SUM (Not the actual number of STKs)
set tEffSUM $INPUTSFTTIME;                          # Used to get dfSTK = 1/tEffSTK = STK frequency step size.
set f0SUM   $INPUTSUMF0;                       # Start frequency of the input SFTs
set bandSUM $INPUTSUMBAND;                     # Band width of the input SFTs.
set nBinsPerSUM [expr $tEffSUM*$INPUTSUMBAND]; # Number of frequency bins in one SUM
# Instead decrease f0BLK and increase bandBLK above.
# Adjust f0SUM and bandSUM to allow extra bins in STKs for sliding; need $numSTKsPerSUM extra bins either side.
#set fOffset [expr (1.0*$numSTKsPerSUM)/$tEffSTK];
#set f0SUM   [expr $f0STK + $fOffset];        # Start frequency of the input SFTs
#if {$f0SUM >= [expr $f0STK + $bandSTK]} {
#  PrintError "Computed f0SUM = $f0SUM is too large and bandSTK = $bandSTK is too small to allow sliding.  Increase bandSTK ";
#}
#set bandSUM [expr $bandSTK - 2.0*$fOffset];  # Band width of the input SFTs.
#if {$bandSUM <= 0.0} {
#  PrintError "bandSUM = $bandSUM too small to allow sliding.  Increase bandSTK ";
#}
#set nBinsPerSUM [expr floor($tEffSUM*$bandSUM + 0.5)]; # Number of frequency bins in one SUM

#set ifoNickName "\"$IFONICKNAME\"";           # H1, H2, or L1 # 02/27/04 gam
#set IFO         "\"$IFOName\"";               # LHO or LLO # 02/27/04 gam
set ifoNickName "$IFONICKNAME";                # H1, H2, or L1
set IFO         "$IFOName";                    # LHO or LLO
set patchName   $targetName;                   # Identifies the target of the search

set maxMCinterations $searchMaxMCinterations; # 05/25/05 gam;

set priorResultsFile $searchPriorResultsFile;      # 05/24/05 gam;
set parameterSpaceFile $searchParameterSpaceFile;  # 05/24/05 gam;

set maxMCErr $searchMaxMCErr; # 05/25/05 gam;

set numMCInjections $searchNumMCInjections;     # 07/17/05 gam;
set numMCRescalings $searchNumMCRescalings;     # 07/17/05 gam;
set rescaleMCFraction $searchRescaleMCFraction; # 07/17/05 gam;
set parameterMC $searchParameterMC;             # 07/17/05 gam;

# set parameterSpaceFlag 0; # 0 = generate flat param space from inputs; 1 = use input param space points; 2 = generate param space metric
set parameterSpaceFlag $searchParameterSpaceFlag; # 05/13/05 gam

set stackTypeFlag  0;     # 0 = STKs are PSDs from SFTs; 1 = STKs are F-stat from SFTs.
#set Dterms 32;            # Terms to use in direchlet kernel in LALDemod (when STKs are F-stat)
set Dterms $searchDterms; # 09/08/05 gam;

# 01/20/04 gam; Change unusedFlag2 to threshold3.
# 01/21/04 gam; Note that code finds peaks in SUMs only if thresholdFlag > 0; must set threshold1, threshold2, and threshold3.
# 01/27/04 gam; The searchThreshold params must be set in the template_file sourced by runComputeStackSlideSUM.tclsh.
set thresholdFlag $searchThresholdFlag;
set threshold1 $searchThreshold1;
set threshold2 $searchThreshold2;
set threshold3 $searchThreshold3;
set threshold4 $searchThreshold4;
set threshold5 $searchThreshold5;
set maxWidthBins $searchMaxWidthBins;  # 02/20/04 gam

# set calibrationFlag -1;    # 12/06/04 gam # -1 = BLKs aready calibrated; 0 = leave BLKs uncalibrated; 1 = calibrate BLKs

set weightFlag $searchWeightFlag;         # Flag that determines weighting of BLKs (e.g., with a,b or F_+, F_x) 

set orientationAngle  $searchOrientationAngle;    # 10/28/04 gam; used to find F_+ and F_x with weightFlag or MC with fixed polarization angle
set cosInclinationAngle $searchCosInclinationAngle

set testFlag       $searchTestFlag;        # Flag > 0 if code is running in test mode.
set normalizationParameter $searchRunningMedianBlockSize;

#set windowFilterFlag   0;  # Flags and params that determine windowing of BLKs # 10/28/04 gam
#set windowFilterParam1 0; # 03/03/04 gam
#set windowFilterParam2 0; # 02/17/04 gam
#set windowFilterParam3 0; # 02/17/04 gam 

# 03/03/04 gam; if (params->normalizationFlag & 8) > 0 normalize with veto on power above normalizationThreshold = max_power_allowed/mean_power
# 05/05/04 gam; Change normalizationThreshold to normalizationParameter.  If normalizing with running median use this to correct bias in median to get mean.
set normalizationFlag $searchNormalizationFlag;  # -1 = BLKs already normalized; 0 = do not normalize; > 0 normalize with mean power.
#set f0NRM $INPUTSUMF0;       # Start frequency of the input SFTs
#set bandNRM $INPUTSUMBAND;   # Band width of the input SFTs.
#set nBinsPerNRM [expr $tEffBLK*$INPUTSUMBAND]; # Number of input frequency bins in one NRM
set f0NRM $f0BLK;             # Start frequency of the input SFTs
set bandNRM $bandBLK;         # Band width of the input SFTs.
set doRunningMedian [expr $searchNormalizationFlag & 4]; # 04/14/04 gam;
set useMeanForNorm [expr $searchNormalizationFlag & 1]; # 12/15/04 gam;
set useCutOff [expr $searchNormalizationFlag & 8]; # 05/05/04 gam;
#puts "doRunningMedian = $doRunningMedian";
#puts "useMeanForNorm = $useMeanForNorm";
if { ($useMeanForNorm > 0) && !($doRunningMedian > 0) } {
  # 12/15/05 gam; use the entire band iff not using running median and using mean is specified:
  set nBinsPerNRM $nBinsPerBLK; # Number of input frequency bins in one NRM  
} else {
  # 12/15/05 gam; this is the default:
  set nBinsPerNRM $searchRunningMedianBlockSize; # 04/14/04 gam; This is the blocksize to use with the running median code.
}
set normalizationParameter $searchNormalizationParameter; # 12/06/04 gam; # 03/03/04 gam; # 05/05/04 gam; moved here from below.
#set normalizationThreshold $searchNormalizationThreshold; # 05/05/04 gam;

# set testFlag       0;        # Flag > 0 if code is running in test mode.
set testFlag $searchTestFlag;  # 12/06/04 gam; if flag > 0 code is running in test mode.

set numSUMsPerCall 1;        # Number of SUMs to output each call to LALApplySearch.
set linesAndHarmonicsFile $searchLinesAndHarmonicsFile;  # 05/14/05 gam; Change numSUMsPerCall to linesAndHarmonicsFile; file with instrument line and harmonic spectral disturbances data.

#set outputFlag     2;       # 0 = do not output SUMs; 01/21/04 gam; if outputFlag == 1 then output just SUM power; if outputFlag == 2 output frequency and power.
# 02/17/04 gam; replace with these:
set outputSUMFlag  $searchOutputSUMFlag;
set outputEventFlag $searchOutputEventFlag;
if {$searchKeepThisNumber == "all"} {
   set keepThisNumber $nBinsPerSUM;  # default is keep loudest for each frequency bin analyzed. 
} else {
   set keepThisNumber $searchKeepThisNumber;
}

#set unusedFlag1    0; # 01/27/04 gam
#set unusedParam1   0; # 01/27/04 gam
# set unusedFlag2    0; # 01/20/04 gam; Change unusedFlag2 to threshold3.
#set unusedParam2   0; # 01/27/04 gam

# 01/27/04 gam; template parameters must be set in template_file sourced by runComputeStackSlideSUM.tclsh

set startRA $templateStartRA;
set stopRA  $templateStopRA;
set deltaRA $templateDeltaRA;
set numRA   $templateNumRA;

set startDec $templateStartDec;
set stopDec  $templateStopDec; # 02/02/04 gam
set deltaDec $templateDeltaDec;
set numDec   $templateNumDec;

set numSpinDown $templateNumSpinDown;

set startFDeriv1 $templateStartFDeriv1;
set stopFDeriv1  $templateStopFDeriv1;
set deltaFDeriv1 $templateDeltaFDeriv1;
set numFDeriv1   $templateNumFDeriv1;

set startFDeriv2 $templateStartFDeriv2;
set stopFDeriv2  $templateStopFDeriv2;
set deltaFDeriv2 $templateDeltaFDeriv2;
set numFDeriv2   $templateNumFDeriv2;

set startFDeriv3 $templateStartFDeriv3;
set stopFDeriv3  $templateStopFDeriv3;
set deltaFDeriv3 $templateDeltaFDeriv3;
set numFDeriv3   $templateNumFDeriv3;

set startFDeriv4 $templateStartFDeriv4;
set stopFDeriv4  $templateStopFDeriv4;
set deltaFDeriv4 $templateDeltaFDeriv4;
set numFDeriv4   $templateNumFDeriv4;

#set startFDeriv5 $templateStartFDeriv5;
#set stopFDeriv5  $templateStopFDeriv5;
#set deltaFDeriv5 $templateDeltaFDeriv5;
#set numFDeriv5   $templateNumFDeriv5;

set binaryFlag          $testbinaryFlag
set OrbitalEccentricity $templateOrbitalEccentricity;
set alphaSX1            $templatealphaSX1;
set deltaSX1            $templatedeltaSX1;
set ArgPeriapse         $templateArgPeriapse;   #argument of periapsis, cen be set to 0 for circular orbit 
set TperiapseSSBSec     $templateTperiapseSSBSec;
set TperiapseSSBNanoSec $templateTperiapseSSBNanoSec;
set SMAcentral          $templateSMAcentral;    #central value of semi major axis in parameter space
set deltaSMA            $templatedeltaSMA;
set nMaxSMA             $templatenMaxSMA;
set nMaxTperi           $templatenMaxTperi;
#set templateNumSpinDown 1; 

#set templateStartFDeriv1 0;
#set templateStopFDeriv1  0;
#set templateDeltaFDeriv1 0;
#set templateNumFDeriv1   1;

set FILTERPARAMS "$gpsEpochStartTime $gpsEpochStartTimeNan $gpsStartTimeSec $duration $numBLKs $tBLK $tEffBLK $f0BLK $bandBLK $nBinsPerBLK $numBLKsPerSTK $tEffSTK $f0STK $bandSTK $nBinsPerSTK $numSTKsPerSUM $tEffSUM $f0SUM $bandSUM $nBinsPerSUM $ifoNickName $IFO $patchName $maxMCinterations $priorResultsFile $parameterSpaceFile $maxMCErr $parameterSpaceFlag $stackTypeFlag $Dterms $thresholdFlag $threshold1 $threshold2 $threshold3 $threshold4 $threshold5 $maxWidthBins $weightFlag $orientationAngle $cosInclinationAngle $normalizationFlag $f0NRM $bandNRM $nBinsPerNRM $normalizationParameter $testFlag $linesAndHarmonicsFile $outputSUMFlag $outputEventFlag $keepThisNumber $startRA $stopRA $deltaRA $numRA $startDec $stopDec $deltaDec $numDec $numSpinDown $startFDeriv1 $stopFDeriv1 $deltaFDeriv1 $numFDeriv1 $startFDeriv2 $stopFDeriv2 $deltaFDeriv2 $numFDeriv2 $startFDeriv3 $stopFDeriv3 $deltaFDeriv3 $numFDeriv3 $startFDeriv4 $stopFDeriv4 $deltaFDeriv4 $numFDeriv4 $numMCInjections $numMCRescalings $rescaleMCFraction $parameterMC";

set FILTERBINARYPARAMS "$binaryFlag $OrbitalEccentricity $alphaSX1 $deltaSX1 $ArgPeriapse $TperiapseSSBSec $TperiapseSSBNanoSec $SMAcentral $deltaSMA $nMaxSMA $nMaxTperi"
