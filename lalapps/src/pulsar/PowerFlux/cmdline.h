/** @file cmdline.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.22.2
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt by Lorenzo Bettini */

#ifndef CMDLINE_H
#define CMDLINE_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_PACKAGE PACKAGE
#endif

#ifndef CMDLINE_PARSER_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#ifdef PACKAGE_NAME
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE_NAME
#else
#define CMDLINE_PARSER_PACKAGE_NAME PACKAGE
#endif
#endif

#ifndef CMDLINE_PARSER_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_VERSION VERSION
#endif

/** @brief Where the command line options are stored */
struct gengetopt_args_info
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char ** config_arg;	/**< @brief configuration file (in gengetopt format) to pass parameters.  */
  char ** config_orig;	/**< @brief configuration file (in gengetopt format) to pass parameters original value given at command line.  */
  unsigned int config_min; /**< @brief configuration file (in gengetopt format) to pass parameters's minimum occurreces */
  unsigned int config_max; /**< @brief configuration file (in gengetopt format) to pass parameters's maximum occurreces */
  const char *config_help; /**< @brief configuration file (in gengetopt format) to pass parameters help description.  */
  char * label_arg;	/**< @brief arbitrary string to be printed in the beginning of PowerFlux log file (default='').  */
  char * label_orig;	/**< @brief arbitrary string to be printed in the beginning of PowerFlux log file original value given at command line.  */
  const char *label_help; /**< @brief arbitrary string to be printed in the beginning of PowerFlux log file help description.  */
  char * sky_grid_arg;	/**< @brief sky grid type (arcsin, plain_rectangular, sin_theta) (default='sin_theta').  */
  char * sky_grid_orig;	/**< @brief sky grid type (arcsin, plain_rectangular, sin_theta) original value given at command line.  */
  const char *sky_grid_help; /**< @brief sky grid type (arcsin, plain_rectangular, sin_theta) help description.  */
  char * skymap_orientation_arg;	/**< @brief orientation of produced skymaps: equatorial, ecliptic, band_axis (default='equatorial').  */
  char * skymap_orientation_orig;	/**< @brief orientation of produced skymaps: equatorial, ecliptic, band_axis original value given at command line.  */
  const char *skymap_orientation_help; /**< @brief orientation of produced skymaps: equatorial, ecliptic, band_axis help description.  */
  char * skyband_method_arg;	/**< @brief method of assigning band numbers: angle, S (default='S').  */
  char * skyband_method_orig;	/**< @brief method of assigning band numbers: angle, S original value given at command line.  */
  const char *skyband_method_help; /**< @brief method of assigning band numbers: angle, S help description.  */
  int nskybands_arg;	/**< @brief split sky in this many bands for logging maximum upper limits (default='11').  */
  char * nskybands_orig;	/**< @brief split sky in this many bands for logging maximum upper limits original value given at command line.  */
  const char *nskybands_help; /**< @brief split sky in this many bands for logging maximum upper limits help description.  */
  double large_S_arg;	/**< @brief value of S to consider good enough.  */
  char * large_S_orig;	/**< @brief value of S to consider good enough original value given at command line.  */
  const char *large_S_help; /**< @brief value of S to consider good enough help description.  */
  char * band_axis_arg;	/**< @brief which band axis to use for splitting sky into bands (perpendicular to band axis) (possible values: equatorial, auto, explicit(float,float,float) (default='auto').  */
  char * band_axis_orig;	/**< @brief which band axis to use for splitting sky into bands (perpendicular to band axis) (possible values: equatorial, auto, explicit(float,float,float) original value given at command line.  */
  const char *band_axis_help; /**< @brief which band axis to use for splitting sky into bands (perpendicular to band axis) (possible values: equatorial, auto, explicit(float,float,float) help description.  */
  double band_axis_norm_arg;	/**< @brief norm of band axis vector to use in S value calculation.  */
  char * band_axis_norm_orig;	/**< @brief norm of band axis vector to use in S value calculation original value given at command line.  */
  const char *band_axis_norm_help; /**< @brief norm of band axis vector to use in S value calculation help description.  */
  char * sky_marks_file_arg;	/**< @brief file describing how to mark up a sky.  */
  char * sky_marks_file_orig;	/**< @brief file describing how to mark up a sky original value given at command line.  */
  const char *sky_marks_file_help; /**< @brief file describing how to mark up a sky help description.  */
  int fine_factor_arg;	/**< @brief make fine grid this times finer (default='5').  */
  char * fine_factor_orig;	/**< @brief make fine grid this times finer original value given at command line.  */
  const char *fine_factor_help; /**< @brief make fine grid this times finer help description.  */
  double skymap_resolution_arg;	/**< @brief specify skymap resolution explicitly.  */
  char * skymap_resolution_orig;	/**< @brief specify skymap resolution explicitly original value given at command line.  */
  const char *skymap_resolution_help; /**< @brief specify skymap resolution explicitly help description.  */
  double skymap_resolution_ratio_arg;	/**< @brief adjust default coarseness of the grid by this factor (default='1.0').  */
  char * skymap_resolution_ratio_orig;	/**< @brief adjust default coarseness of the grid by this factor original value given at command line.  */
  const char *skymap_resolution_ratio_help; /**< @brief adjust default coarseness of the grid by this factor help description.  */
  double small_weight_ratio_arg;	/**< @brief ratio that determines which weight is too small to include in max statistics (default='0.2').  */
  char * small_weight_ratio_orig;	/**< @brief ratio that determines which weight is too small to include in max statistics original value given at command line.  */
  const char *small_weight_ratio_help; /**< @brief ratio that determines which weight is too small to include in max statistics help description.  */
  double strain_norm_factor_arg;	/**< @brief strain normalization factor to prevent overflowing of the exponent (default='1e-20').  */
  char * strain_norm_factor_orig;	/**< @brief strain normalization factor to prevent overflowing of the exponent original value given at command line.  */
  const char *strain_norm_factor_help; /**< @brief strain normalization factor to prevent overflowing of the exponent help description.  */
  char * lock_file_arg;	/**< @brief file to lock when reading SFTs in order to globally serialize disk access.  */
  char * lock_file_orig;	/**< @brief file to lock when reading SFTs in order to globally serialize disk access original value given at command line.  */
  const char *lock_file_help; /**< @brief file to lock when reading SFTs in order to globally serialize disk access help description.  */
  int enable_dataset_locking_arg;	/**< @brief set to 1 to enable dataset level locking (default='1').  */
  char * enable_dataset_locking_orig;	/**< @brief set to 1 to enable dataset level locking original value given at command line.  */
  const char *enable_dataset_locking_help; /**< @brief set to 1 to enable dataset level locking help description.  */
  int retry_delay_arg;	/**< @brief number of seconds to wait before retrying I/O (default='2').  */
  char * retry_delay_orig;	/**< @brief number of seconds to wait before retrying I/O original value given at command line.  */
  const char *retry_delay_help; /**< @brief number of seconds to wait before retrying I/O help description.  */
  int lock_retry_delay_arg;	/**< @brief number of seconds to wait before trying to acquire lock again (default='10').  */
  char * lock_retry_delay_orig;	/**< @brief number of seconds to wait before trying to acquire lock again original value given at command line.  */
  const char *lock_retry_delay_help; /**< @brief number of seconds to wait before trying to acquire lock again help description.  */
  char * dataset_arg;	/**< @brief dataset file.  */
  char * dataset_orig;	/**< @brief dataset file original value given at command line.  */
  const char *dataset_help; /**< @brief dataset file help description.  */
  int initial_dataset_seed_arg;	/**< @brief initial seed to use for generating gaussian data (default='12345').  */
  char * initial_dataset_seed_orig;	/**< @brief initial seed to use for generating gaussian data original value given at command line.  */
  const char *initial_dataset_seed_help; /**< @brief initial seed to use for generating gaussian data help description.  */
  char * input_format_arg;	/**< @brief format of input files (GEO, SFT, Power) (default='GEO').  */
  char * input_format_orig;	/**< @brief format of input files (GEO, SFT, Power) original value given at command line.  */
  const char *input_format_help; /**< @brief format of input files (GEO, SFT, Power) help description.  */
  char * dump_data_arg;	/**< @brief file to output loaded SFT data into, for testing.  */
  char * dump_data_orig;	/**< @brief file to output loaded SFT data into, for testing original value given at command line.  */
  const char *dump_data_help; /**< @brief file to output loaded SFT data into, for testing help description.  */
  char * dump_sftv2_arg;	/**< @brief directory to output loaded data, together with dataset description.  */
  char * dump_sftv2_orig;	/**< @brief directory to output loaded data, together with dataset description original value given at command line.  */
  const char *dump_sftv2_help; /**< @brief directory to output loaded data, together with dataset description help description.  */
  char * output_arg;	/**< @brief output directory.  */
  char * output_orig;	/**< @brief output directory original value given at command line.  */
  const char *output_help; /**< @brief output directory help description.  */
  char * ephemeris_path_arg;	/**< @brief path to detresponse program from lalapps.  */
  char * ephemeris_path_orig;	/**< @brief path to detresponse program from lalapps original value given at command line.  */
  const char *ephemeris_path_help; /**< @brief path to detresponse program from lalapps help description.  */
  char * earth_ephemeris_arg;	/**< @brief Earth ephemeris file, overrides ephemeris-path argument.  */
  char * earth_ephemeris_orig;	/**< @brief Earth ephemeris file, overrides ephemeris-path argument original value given at command line.  */
  const char *earth_ephemeris_help; /**< @brief Earth ephemeris file, overrides ephemeris-path argument help description.  */
  char * sun_ephemeris_arg;	/**< @brief Sun ephemeris file, overrides ephemeris-path argument.  */
  char * sun_ephemeris_orig;	/**< @brief Sun ephemeris file, overrides ephemeris-path argument original value given at command line.  */
  const char *sun_ephemeris_help; /**< @brief Sun ephemeris file, overrides ephemeris-path argument help description.  */
  int first_bin_arg;	/**< @brief first frequency bin in the band to be analyzed.  */
  char * first_bin_orig;	/**< @brief first frequency bin in the band to be analyzed original value given at command line.  */
  const char *first_bin_help; /**< @brief first frequency bin in the band to be analyzed help description.  */
  int nbins_arg;	/**< @brief number of frequency bins to analyze (default='501').  */
  char * nbins_orig;	/**< @brief number of frequency bins to analyze original value given at command line.  */
  const char *nbins_help; /**< @brief number of frequency bins to analyze help description.  */
  int side_cut_arg;	/**< @brief number of bins to cut from each side due to corruption from doppler shifts.  */
  char * side_cut_orig;	/**< @brief number of bins to cut from each side due to corruption from doppler shifts original value given at command line.  */
  const char *side_cut_help; /**< @brief number of bins to cut from each side due to corruption from doppler shifts help description.  */
  double expected_timebase_arg;	/**< @brief expected timebase in months (default='6').  */
  char * expected_timebase_orig;	/**< @brief expected timebase in months original value given at command line.  */
  const char *expected_timebase_help; /**< @brief expected timebase in months help description.  */
  int hist_bins_arg;	/**< @brief number of bins to use when producing histograms (default='200').  */
  char * hist_bins_orig;	/**< @brief number of bins to use when producing histograms original value given at command line.  */
  const char *hist_bins_help; /**< @brief number of bins to use when producing histograms help description.  */
  char * detector_arg;	/**< @brief detector location (i.e. LHO or LLO), passed to detresponse.  */
  char * detector_orig;	/**< @brief detector location (i.e. LHO or LLO), passed to detresponse original value given at command line.  */
  const char *detector_help; /**< @brief detector location (i.e. LHO or LLO), passed to detresponse help description.  */
  double doppler_multiplier_arg;	/**< @brief a constant to multiply Doppler shifts by (1.0 corresponds to standard physics) (default='1.0').  */
  char * doppler_multiplier_orig;	/**< @brief a constant to multiply Doppler shifts by (1.0 corresponds to standard physics) original value given at command line.  */
  const char *doppler_multiplier_help; /**< @brief a constant to multiply Doppler shifts by (1.0 corresponds to standard physics) help description.  */
  double spindown_start_time_arg;	/**< @brief specify spindown start time in GPS sec. Assumed to be the first SFT segment by default.  */
  char * spindown_start_time_orig;	/**< @brief specify spindown start time in GPS sec. Assumed to be the first SFT segment by default original value given at command line.  */
  const char *spindown_start_time_help; /**< @brief specify spindown start time in GPS sec. Assumed to be the first SFT segment by default help description.  */
  double frequency_offset_arg;	/**< @brief (small) frequency offset - used to achieve fractional bin shifts (default='0.0').  */
  char * frequency_offset_orig;	/**< @brief (small) frequency offset - used to achieve fractional bin shifts original value given at command line.  */
  const char *frequency_offset_help; /**< @brief (small) frequency offset - used to achieve fractional bin shifts help description.  */
  double spindown_start_arg;	/**< @brief first spindown value to process (default='0.0').  */
  char * spindown_start_orig;	/**< @brief first spindown value to process original value given at command line.  */
  const char *spindown_start_help; /**< @brief first spindown value to process help description.  */
  double spindown_step_arg;	/**< @brief step for processing multiple spindown values (default='5e-10').  */
  char * spindown_step_orig;	/**< @brief step for processing multiple spindown values original value given at command line.  */
  const char *spindown_step_help; /**< @brief step for processing multiple spindown values help description.  */
  int spindown_count_arg;	/**< @brief how many separate spindown values to process (default='1').  */
  char * spindown_count_orig;	/**< @brief how many separate spindown values to process original value given at command line.  */
  const char *spindown_count_help; /**< @brief how many separate spindown values to process help description.  */
  double fdotdot_arg;	/**< @brief second frequency derivative (default='0.0').  */
  char * fdotdot_orig;	/**< @brief second frequency derivative original value given at command line.  */
  const char *fdotdot_help; /**< @brief second frequency derivative help description.  */
  double orientation_arg;	/**< @brief additional orientation phase, specifying 0.7853 will turn plus into cross (default='0').  */
  char * orientation_orig;	/**< @brief additional orientation phase, specifying 0.7853 will turn plus into cross original value given at command line.  */
  const char *orientation_help; /**< @brief additional orientation phase, specifying 0.7853 will turn plus into cross help description.  */
  int nlinear_polarizations_arg;	/**< @brief even number of linear polarizations to profile, distributed uniformly between 0 and PI/2 (default='4').  */
  char * nlinear_polarizations_orig;	/**< @brief even number of linear polarizations to profile, distributed uniformly between 0 and PI/2 original value given at command line.  */
  const char *nlinear_polarizations_help; /**< @brief even number of linear polarizations to profile, distributed uniformly between 0 and PI/2 help description.  */
  int no_demodulation_arg;	/**< @brief do not perform demodulation stage, analyze background only (default='0').  */
  char * no_demodulation_orig;	/**< @brief do not perform demodulation stage, analyze background only original value given at command line.  */
  const char *no_demodulation_help; /**< @brief do not perform demodulation stage, analyze background only help description.  */
  int no_decomposition_arg;	/**< @brief do not perform noise decomposition stage, output simple statistics only (default='0').  */
  char * no_decomposition_orig;	/**< @brief do not perform noise decomposition stage, output simple statistics only original value given at command line.  */
  const char *no_decomposition_help; /**< @brief do not perform noise decomposition stage, output simple statistics only help description.  */
  int no_candidates_arg;	/**< @brief do not perform analysis to identify candidates (default='0').  */
  char * no_candidates_orig;	/**< @brief do not perform analysis to identify candidates original value given at command line.  */
  const char *no_candidates_help; /**< @brief do not perform analysis to identify candidates help description.  */
  int no_am_response_arg;	/**< @brief force AM_response() function to return 1.0 irrespective of the arguments (default='0').  */
  char * no_am_response_orig;	/**< @brief force AM_response() function to return 1.0 irrespective of the arguments original value given at command line.  */
  const char *no_am_response_help; /**< @brief force AM_response() function to return 1.0 irrespective of the arguments help description.  */
  int no_secondary_skymaps_arg;	/**< @brief do not store values not essential for upper limits and followup (default='0').  */
  char * no_secondary_skymaps_orig;	/**< @brief do not store values not essential for upper limits and followup original value given at command line.  */
  const char *no_secondary_skymaps_help; /**< @brief do not store values not essential for upper limits and followup help description.  */
  char * averaging_mode_arg;	/**< @brief 1 - use one bin, 3 - average 3, matched - use 7 bin matched filter (default='1').  */
  char * averaging_mode_orig;	/**< @brief 1 - use one bin, 3 - average 3, matched - use 7 bin matched filter original value given at command line.  */
  const char *averaging_mode_help; /**< @brief 1 - use one bin, 3 - average 3, matched - use 7 bin matched filter help description.  */
  int subtract_background_arg;	/**< @brief subtract rank 1 matrix in order to flatten noise spectrum (default='0').  */
  char * subtract_background_orig;	/**< @brief subtract rank 1 matrix in order to flatten noise spectrum original value given at command line.  */
  const char *subtract_background_help; /**< @brief subtract rank 1 matrix in order to flatten noise spectrum help description.  */
  int do_cutoff_arg;	/**< @brief neglect contribution from SFT with high effective noise level (default='1').  */
  char * do_cutoff_orig;	/**< @brief neglect contribution from SFT with high effective noise level original value given at command line.  */
  const char *do_cutoff_help; /**< @brief neglect contribution from SFT with high effective noise level help description.  */
  int filter_lines_arg;	/**< @brief perform detection of lines in background noise and veto corresponding frequency bins (default='1').  */
  char * filter_lines_orig;	/**< @brief perform detection of lines in background noise and veto corresponding frequency bins original value given at command line.  */
  const char *filter_lines_help; /**< @brief perform detection of lines in background noise and veto corresponding frequency bins help description.  */
  int ks_test_arg;	/**< @brief perform Kolmogorov-Smirnov test for normality of averaged powers (default='1').  */
  char * ks_test_orig;	/**< @brief perform Kolmogorov-Smirnov test for normality of averaged powers original value given at command line.  */
  const char *ks_test_help; /**< @brief perform Kolmogorov-Smirnov test for normality of averaged powers help description.  */
  int compute_betas_arg;	/**< @brief compute beta coefficients as described in PowerFlux polarizations document (default='0').  */
  char * compute_betas_orig;	/**< @brief compute beta coefficients as described in PowerFlux polarizations document original value given at command line.  */
  const char *compute_betas_help; /**< @brief compute beta coefficients as described in PowerFlux polarizations document help description.  */
  char * upper_limit_comp_arg;	/**< @brief upper limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) (default='Hann').  */
  char * upper_limit_comp_orig;	/**< @brief upper limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) original value given at command line.  */
  const char *upper_limit_comp_help; /**< @brief upper limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) help description.  */
  char * lower_limit_comp_arg;	/**< @brief lower limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) (default='Hann').  */
  char * lower_limit_comp_orig;	/**< @brief lower limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) original value given at command line.  */
  const char *lower_limit_comp_help; /**< @brief lower limit compensation factor - used to account for windowing in SFTs (possible values: Hann, flat, arbitrary number) help description.  */
  char * write_dat_arg;	/**< @brief regular expression describing which *.dat files to write (default='.*').  */
  char * write_dat_orig;	/**< @brief regular expression describing which *.dat files to write original value given at command line.  */
  const char *write_dat_help; /**< @brief regular expression describing which *.dat files to write help description.  */
  char * write_png_arg;	/**< @brief regular expression describing which *.png files to write (default='.*').  */
  char * write_png_orig;	/**< @brief regular expression describing which *.png files to write original value given at command line.  */
  const char *write_png_help; /**< @brief regular expression describing which *.png files to write help description.  */
  int dump_points_arg;	/**< @brief output averaged power bins for each point in the sky (default='0').  */
  char * dump_points_orig;	/**< @brief output averaged power bins for each point in the sky original value given at command line.  */
  const char *dump_points_help; /**< @brief output averaged power bins for each point in the sky help description.  */
  int dump_candidates_arg;	/**< @brief output SFT data for first N candidates (default='0').  */
  char * dump_candidates_orig;	/**< @brief output SFT data for first N candidates original value given at command line.  */
  const char *dump_candidates_help; /**< @brief output SFT data for first N candidates help description.  */
  double focus_ra_arg;	/**< @brief focus computation on a circular area with center at this RA.  */
  char * focus_ra_orig;	/**< @brief focus computation on a circular area with center at this RA original value given at command line.  */
  const char *focus_ra_help; /**< @brief focus computation on a circular area with center at this RA help description.  */
  double focus_dec_arg;	/**< @brief focus computation on a circular area with center at this DEC.  */
  char * focus_dec_orig;	/**< @brief focus computation on a circular area with center at this DEC original value given at command line.  */
  const char *focus_dec_help; /**< @brief focus computation on a circular area with center at this DEC help description.  */
  double focus_radius_arg;	/**< @brief focus computation on a circular area with this radius.  */
  char * focus_radius_orig;	/**< @brief focus computation on a circular area with this radius original value given at command line.  */
  const char *focus_radius_help; /**< @brief focus computation on a circular area with this radius help description.  */
  double only_large_cos_arg;	/**< @brief restrict computation to points on the sky with cos of angle to band axis larger than a given number.  */
  char * only_large_cos_orig;	/**< @brief restrict computation to points on the sky with cos of angle to band axis larger than a given number original value given at command line.  */
  const char *only_large_cos_help; /**< @brief restrict computation to points on the sky with cos of angle to band axis larger than a given number help description.  */
  const char *fake_linear_help; /**< @brief Inject linearly polarized fake signal help description.  */
  const char *fake_circular_help; /**< @brief Inject circularly polarized fake signal help description.  */
  double fake_ref_time_arg;	/**< @brief time of signal start (default='0').  */
  char * fake_ref_time_orig;	/**< @brief time of signal start original value given at command line.  */
  const char *fake_ref_time_help; /**< @brief time of signal start help description.  */
  double fake_ra_arg;	/**< @brief RA of fake signal to inject (default='3.14').  */
  char * fake_ra_orig;	/**< @brief RA of fake signal to inject original value given at command line.  */
  const char *fake_ra_help; /**< @brief RA of fake signal to inject help description.  */
  double fake_dec_arg;	/**< @brief DEC of fake signal to inject (default='0.0').  */
  char * fake_dec_orig;	/**< @brief DEC of fake signal to inject original value given at command line.  */
  const char *fake_dec_help; /**< @brief DEC of fake signal to inject help description.  */
  double fake_iota_arg;	/**< @brief iota of fake signal to inject (default='0.0').  */
  char * fake_iota_orig;	/**< @brief iota of fake signal to inject original value given at command line.  */
  const char *fake_iota_help; /**< @brief iota of fake signal to inject help description.  */
  double fake_psi_arg;	/**< @brief orientation of fake signal to inject (default='0.0').  */
  char * fake_psi_orig;	/**< @brief orientation of fake signal to inject original value given at command line.  */
  const char *fake_psi_help; /**< @brief orientation of fake signal to inject help description.  */
  double fake_phi_arg;	/**< @brief phase of fake signal to inject (default='0.0').  */
  char * fake_phi_orig;	/**< @brief phase of fake signal to inject original value given at command line.  */
  const char *fake_phi_help; /**< @brief phase of fake signal to inject help description.  */
  double fake_spindown_arg;	/**< @brief spindown of fake signal to inject (default='0.0').  */
  char * fake_spindown_orig;	/**< @brief spindown of fake signal to inject original value given at command line.  */
  const char *fake_spindown_help; /**< @brief spindown of fake signal to inject help description.  */
  double fake_strain_arg;	/**< @brief amplitude of fake signal to inject (default='1e-23').  */
  char * fake_strain_orig;	/**< @brief amplitude of fake signal to inject original value given at command line.  */
  const char *fake_strain_help; /**< @brief amplitude of fake signal to inject help description.  */
  double fake_freq_arg;	/**< @brief frequency of fake signal to inject.  */
  char * fake_freq_orig;	/**< @brief frequency of fake signal to inject original value given at command line.  */
  const char *fake_freq_help; /**< @brief frequency of fake signal to inject help description.  */
  double snr_precision_arg;	/**< @brief Assumed level of error in detection strength - used for listing candidates (default='0.2').  */
  char * snr_precision_orig;	/**< @brief Assumed level of error in detection strength - used for listing candidates original value given at command line.  */
  const char *snr_precision_help; /**< @brief Assumed level of error in detection strength - used for listing candidates help description.  */
  int max_candidates_arg;	/**< @brief Do not optimize more than this number of candidates (default='-1').  */
  char * max_candidates_orig;	/**< @brief Do not optimize more than this number of candidates original value given at command line.  */
  const char *max_candidates_help; /**< @brief Do not optimize more than this number of candidates help description.  */
  double min_candidate_snr_arg;	/**< @brief Do not optimize candidates with SNR below this level (default='5.0').  */
  char * min_candidate_snr_orig;	/**< @brief Do not optimize candidates with SNR below this level original value given at command line.  */
  const char *min_candidate_snr_help; /**< @brief Do not optimize candidates with SNR below this level help description.  */
  int output_initial_arg;	/**< @brief write initial candidates into log file (default='0').  */
  char * output_initial_orig;	/**< @brief write initial candidates into log file original value given at command line.  */
  const char *output_initial_help; /**< @brief write initial candidates into log file help description.  */
  int output_optimized_arg;	/**< @brief write optimized (second pass) candidates into log file (default='0').  */
  char * output_optimized_orig;	/**< @brief write optimized (second pass) candidates into log file original value given at command line.  */
  const char *output_optimized_help; /**< @brief write optimized (second pass) candidates into log file help description.  */
  int output_cache_arg;	/**< @brief write out all candidates in cache to log file (default='0').  */
  char * output_cache_orig;	/**< @brief write out all candidates in cache to log file original value given at command line.  */
  const char *output_cache_help; /**< @brief write out all candidates in cache to log file help description.  */
  int extended_test_arg;	/**< @brief Perform extended self test (default='0').  */
  char * extended_test_orig;	/**< @brief Perform extended self test original value given at command line.  */
  const char *extended_test_help; /**< @brief Perform extended self test help description.  */
  int max_sft_report_arg;	/**< @brief Maximum count of SFTs to report with veto information (default='100').  */
  char * max_sft_report_orig;	/**< @brief Maximum count of SFTs to report with veto information original value given at command line.  */
  const char *max_sft_report_help; /**< @brief Maximum count of SFTs to report with veto information help description.  */
  int num_threads_arg;	/**< @brief Use that many threads for computation (default='-1').  */
  char * num_threads_orig;	/**< @brief Use that many threads for computation original value given at command line.  */
  const char *num_threads_help; /**< @brief Use that many threads for computation help description.  */
  int niota_arg;	/**< @brief Number of iota values to use in alignment grid (default='3').  */
  char * niota_orig;	/**< @brief Number of iota values to use in alignment grid original value given at command line.  */
  const char *niota_help; /**< @brief Number of iota values to use in alignment grid help description.  */
  int npsi_arg;	/**< @brief Number of psi values to use in alignment grid (default='6').  */
  char * npsi_orig;	/**< @brief Number of psi values to use in alignment grid original value given at command line.  */
  const char *npsi_help; /**< @brief Number of psi values to use in alignment grid help description.  */
  int nfshift_arg;	/**< @brief Number of sub-bin frequency shifts to sample (default='2').  */
  char * nfshift_orig;	/**< @brief Number of sub-bin frequency shifts to sample original value given at command line.  */
  const char *nfshift_help; /**< @brief Number of sub-bin frequency shifts to sample help description.  */
  int nchunks_arg;	/**< @brief Partition the timebase into this many chunks for sub period analysis (default='5').  */
  char * nchunks_orig;	/**< @brief Partition the timebase into this many chunks for sub period analysis original value given at command line.  */
  const char *nchunks_help; /**< @brief Partition the timebase into this many chunks for sub period analysis help description.  */
  int split_ifos_arg;	/**< @brief Split interferometers in separate chunks (default='1').  */
  char * split_ifos_orig;	/**< @brief Split interferometers in separate chunks original value given at command line.  */
  const char *split_ifos_help; /**< @brief Split interferometers in separate chunks help description.  */
  double weight_cutoff_fraction_arg;	/**< @brief Discard sfts with small weights that contribute this fraction of total weight (default='0.04').  */
  char * weight_cutoff_fraction_orig;	/**< @brief Discard sfts with small weights that contribute this fraction of total weight original value given at command line.  */
  const char *weight_cutoff_fraction_help; /**< @brief Discard sfts with small weights that contribute this fraction of total weight help description.  */
  double per_dataset_weight_cutoff_fraction_arg;	/**< @brief Discard sfts with small weights that contribute this fraction of total weight in each dataset (default='0.04').  */
  char * per_dataset_weight_cutoff_fraction_orig;	/**< @brief Discard sfts with small weights that contribute this fraction of total weight in each dataset original value given at command line.  */
  const char *per_dataset_weight_cutoff_fraction_help; /**< @brief Discard sfts with small weights that contribute this fraction of total weight in each dataset help description.  */
  double power_max_median_factor_arg;	/**< @brief This determines scaling factor between median and maximum of exponentially distributed variable. Used for computing power sum weights (default='0.1').  */
  char * power_max_median_factor_orig;	/**< @brief This determines scaling factor between median and maximum of exponentially distributed variable. Used for computing power sum weights original value given at command line.  */
  const char *power_max_median_factor_help; /**< @brief This determines scaling factor between median and maximum of exponentially distributed variable. Used for computing power sum weights help description.  */
  int tmedian_noise_level_arg;	/**< @brief Use TMedians to estimate noise level (as opposed to in-place standard deviation) (default='1').  */
  char * tmedian_noise_level_orig;	/**< @brief Use TMedians to estimate noise level (as opposed to in-place standard deviation) original value given at command line.  */
  const char *tmedian_noise_level_help; /**< @brief Use TMedians to estimate noise level (as opposed to in-place standard deviation) help description.  */
  double summing_step_arg;	/**< @brief integration step size, in seconds.  */
  char * summing_step_orig;	/**< @brief integration step size, in seconds original value given at command line.  */
  const char *summing_step_help; /**< @brief integration step size, in seconds help description.  */
  int max_first_shift_arg;	/**< @brief larger values accomodate bigger spindown ranges but require more bins to be computed in uncached function (default='10').  */
  char * max_first_shift_orig;	/**< @brief larger values accomodate bigger spindown ranges but require more bins to be computed in uncached function original value given at command line.  */
  const char *max_first_shift_help; /**< @brief larger values accomodate bigger spindown ranges but require more bins to be computed in uncached function help description.  */
  char * statistics_function_arg;	/**< @brief specify statistics postprocessing to apply. Possible values: linear, sorted (default='linear').  */
  char * statistics_function_orig;	/**< @brief specify statistics postprocessing to apply. Possible values: linear, sorted original value given at command line.  */
  const char *statistics_function_help; /**< @brief specify statistics postprocessing to apply. Possible values: linear, sorted help description.  */
  int dump_power_sums_arg;	/**< @brief Write out all power sum data into data.log file. It is recommend to restrict the sky to very few pixels (default='0').  */
  char * dump_power_sums_orig;	/**< @brief Write out all power sum data into data.log file. It is recommend to restrict the sky to very few pixels original value given at command line.  */
  const char *dump_power_sums_help; /**< @brief Write out all power sum data into data.log file. It is recommend to restrict the sky to very few pixels help description.  */
  int compute_skymaps_arg;	/**< @brief allocate memory and compute skymaps with final results (default='0').  */
  char * compute_skymaps_orig;	/**< @brief allocate memory and compute skymaps with final results original value given at command line.  */
  const char *compute_skymaps_help; /**< @brief allocate memory and compute skymaps with final results help description.  */
  int fine_grid_skymarks_arg;	/**< @brief use sky marks from the fine grid, this uses constant spindown (default='0').  */
  char * fine_grid_skymarks_orig;	/**< @brief use sky marks from the fine grid, this uses constant spindown original value given at command line.  */
  const char *fine_grid_skymarks_help; /**< @brief use sky marks from the fine grid, this uses constant spindown help description.  */
  int half_window_arg;	/**< @brief number of bins to exclude to the left and to the right of highest point when computing linear statistics (default='20').  */
  char * half_window_orig;	/**< @brief number of bins to exclude to the left and to the right of highest point when computing linear statistics original value given at command line.  */
  const char *half_window_help; /**< @brief number of bins to exclude to the left and to the right of highest point when computing linear statistics help description.  */
  int tail_veto_arg;	/**< @brief do not report outlier if its frequency is within that many bins from the tail - happens with steep spectrum (default='10').  */
  char * tail_veto_orig;	/**< @brief do not report outlier if its frequency is within that many bins from the tail - happens with steep spectrum original value given at command line.  */
  const char *tail_veto_help; /**< @brief do not report outlier if its frequency is within that many bins from the tail - happens with steep spectrum help description.  */
  int cache_granularity_arg;	/**< @brief granularity of power cache frequency shift resolution, in fractions of a frequency bin (default='-1').  */
  char * cache_granularity_orig;	/**< @brief granularity of power cache frequency shift resolution, in fractions of a frequency bin original value given at command line.  */
  const char *cache_granularity_help; /**< @brief granularity of power cache frequency shift resolution, in fractions of a frequency bin help description.  */
  int sidereal_group_count_arg;	/**< @brief separate SFTs in that many groups by frequency shift.  */
  char * sidereal_group_count_orig;	/**< @brief separate SFTs in that many groups by frequency shift original value given at command line.  */
  const char *sidereal_group_count_help; /**< @brief separate SFTs in that many groups by frequency shift help description.  */
  int time_group_count_arg;	/**< @brief separate SFTs in that many groups by gps time.  */
  char * time_group_count_orig;	/**< @brief separate SFTs in that many groups by gps time original value given at command line.  */
  const char *time_group_count_help; /**< @brief separate SFTs in that many groups by gps time help description.  */
  double phase_mismatch_arg;	/**< @brief maximal phase mismatch over coherence length to assume when using loosely coherent mode (default='1.570796').  */
  char * phase_mismatch_orig;	/**< @brief maximal phase mismatch over coherence length to assume when using loosely coherent mode original value given at command line.  */
  const char *phase_mismatch_help; /**< @brief maximal phase mismatch over coherence length to assume when using loosely coherent mode help description.  */
  int bypass_powersum_cache_arg;	/**< @brief bypass partial power sum cache (default='0').  */
  char * bypass_powersum_cache_orig;	/**< @brief bypass partial power sum cache original value given at command line.  */
  const char *bypass_powersum_cache_help; /**< @brief bypass partial power sum cache help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int config_given ;	/**< @brief Whether config was given.  */
  unsigned int label_given ;	/**< @brief Whether label was given.  */
  unsigned int sky_grid_given ;	/**< @brief Whether sky-grid was given.  */
  unsigned int skymap_orientation_given ;	/**< @brief Whether skymap-orientation was given.  */
  unsigned int skyband_method_given ;	/**< @brief Whether skyband-method was given.  */
  unsigned int nskybands_given ;	/**< @brief Whether nskybands was given.  */
  unsigned int large_S_given ;	/**< @brief Whether large-S was given.  */
  unsigned int band_axis_given ;	/**< @brief Whether band-axis was given.  */
  unsigned int band_axis_norm_given ;	/**< @brief Whether band-axis-norm was given.  */
  unsigned int sky_marks_file_given ;	/**< @brief Whether sky-marks-file was given.  */
  unsigned int fine_factor_given ;	/**< @brief Whether fine-factor was given.  */
  unsigned int skymap_resolution_given ;	/**< @brief Whether skymap-resolution was given.  */
  unsigned int skymap_resolution_ratio_given ;	/**< @brief Whether skymap-resolution-ratio was given.  */
  unsigned int small_weight_ratio_given ;	/**< @brief Whether small-weight-ratio was given.  */
  unsigned int strain_norm_factor_given ;	/**< @brief Whether strain-norm-factor was given.  */
  unsigned int lock_file_given ;	/**< @brief Whether lock-file was given.  */
  unsigned int enable_dataset_locking_given ;	/**< @brief Whether enable-dataset-locking was given.  */
  unsigned int retry_delay_given ;	/**< @brief Whether retry-delay was given.  */
  unsigned int lock_retry_delay_given ;	/**< @brief Whether lock-retry-delay was given.  */
  unsigned int dataset_given ;	/**< @brief Whether dataset was given.  */
  unsigned int initial_dataset_seed_given ;	/**< @brief Whether initial-dataset-seed was given.  */
  unsigned int input_format_given ;	/**< @brief Whether input-format was given.  */
  unsigned int dump_data_given ;	/**< @brief Whether dump-data was given.  */
  unsigned int dump_sftv2_given ;	/**< @brief Whether dump-sftv2 was given.  */
  unsigned int output_given ;	/**< @brief Whether output was given.  */
  unsigned int ephemeris_path_given ;	/**< @brief Whether ephemeris-path was given.  */
  unsigned int earth_ephemeris_given ;	/**< @brief Whether earth-ephemeris was given.  */
  unsigned int sun_ephemeris_given ;	/**< @brief Whether sun-ephemeris was given.  */
  unsigned int first_bin_given ;	/**< @brief Whether first-bin was given.  */
  unsigned int nbins_given ;	/**< @brief Whether nbins was given.  */
  unsigned int side_cut_given ;	/**< @brief Whether side-cut was given.  */
  unsigned int expected_timebase_given ;	/**< @brief Whether expected-timebase was given.  */
  unsigned int hist_bins_given ;	/**< @brief Whether hist-bins was given.  */
  unsigned int detector_given ;	/**< @brief Whether detector was given.  */
  unsigned int doppler_multiplier_given ;	/**< @brief Whether doppler-multiplier was given.  */
  unsigned int spindown_start_time_given ;	/**< @brief Whether spindown-start-time was given.  */
  unsigned int frequency_offset_given ;	/**< @brief Whether frequency-offset was given.  */
  unsigned int spindown_start_given ;	/**< @brief Whether spindown-start was given.  */
  unsigned int spindown_step_given ;	/**< @brief Whether spindown-step was given.  */
  unsigned int spindown_count_given ;	/**< @brief Whether spindown-count was given.  */
  unsigned int fdotdot_given ;	/**< @brief Whether fdotdot was given.  */
  unsigned int orientation_given ;	/**< @brief Whether orientation was given.  */
  unsigned int nlinear_polarizations_given ;	/**< @brief Whether nlinear-polarizations was given.  */
  unsigned int no_demodulation_given ;	/**< @brief Whether no-demodulation was given.  */
  unsigned int no_decomposition_given ;	/**< @brief Whether no-decomposition was given.  */
  unsigned int no_candidates_given ;	/**< @brief Whether no-candidates was given.  */
  unsigned int no_am_response_given ;	/**< @brief Whether no-am-response was given.  */
  unsigned int no_secondary_skymaps_given ;	/**< @brief Whether no-secondary-skymaps was given.  */
  unsigned int averaging_mode_given ;	/**< @brief Whether averaging-mode was given.  */
  unsigned int subtract_background_given ;	/**< @brief Whether subtract-background was given.  */
  unsigned int do_cutoff_given ;	/**< @brief Whether do-cutoff was given.  */
  unsigned int filter_lines_given ;	/**< @brief Whether filter-lines was given.  */
  unsigned int ks_test_given ;	/**< @brief Whether ks-test was given.  */
  unsigned int compute_betas_given ;	/**< @brief Whether compute-betas was given.  */
  unsigned int upper_limit_comp_given ;	/**< @brief Whether upper-limit-comp was given.  */
  unsigned int lower_limit_comp_given ;	/**< @brief Whether lower-limit-comp was given.  */
  unsigned int write_dat_given ;	/**< @brief Whether write-dat was given.  */
  unsigned int write_png_given ;	/**< @brief Whether write-png was given.  */
  unsigned int dump_points_given ;	/**< @brief Whether dump-points was given.  */
  unsigned int dump_candidates_given ;	/**< @brief Whether dump-candidates was given.  */
  unsigned int focus_ra_given ;	/**< @brief Whether focus-ra was given.  */
  unsigned int focus_dec_given ;	/**< @brief Whether focus-dec was given.  */
  unsigned int focus_radius_given ;	/**< @brief Whether focus-radius was given.  */
  unsigned int only_large_cos_given ;	/**< @brief Whether only-large-cos was given.  */
  unsigned int fake_linear_given ;	/**< @brief Whether fake-linear was given.  */
  unsigned int fake_circular_given ;	/**< @brief Whether fake-circular was given.  */
  unsigned int fake_ref_time_given ;	/**< @brief Whether fake-ref-time was given.  */
  unsigned int fake_ra_given ;	/**< @brief Whether fake-ra was given.  */
  unsigned int fake_dec_given ;	/**< @brief Whether fake-dec was given.  */
  unsigned int fake_iota_given ;	/**< @brief Whether fake-iota was given.  */
  unsigned int fake_psi_given ;	/**< @brief Whether fake-psi was given.  */
  unsigned int fake_phi_given ;	/**< @brief Whether fake-phi was given.  */
  unsigned int fake_spindown_given ;	/**< @brief Whether fake-spindown was given.  */
  unsigned int fake_strain_given ;	/**< @brief Whether fake-strain was given.  */
  unsigned int fake_freq_given ;	/**< @brief Whether fake-freq was given.  */
  unsigned int snr_precision_given ;	/**< @brief Whether snr-precision was given.  */
  unsigned int max_candidates_given ;	/**< @brief Whether max-candidates was given.  */
  unsigned int min_candidate_snr_given ;	/**< @brief Whether min-candidate-snr was given.  */
  unsigned int output_initial_given ;	/**< @brief Whether output-initial was given.  */
  unsigned int output_optimized_given ;	/**< @brief Whether output-optimized was given.  */
  unsigned int output_cache_given ;	/**< @brief Whether output-cache was given.  */
  unsigned int extended_test_given ;	/**< @brief Whether extended-test was given.  */
  unsigned int max_sft_report_given ;	/**< @brief Whether max-sft-report was given.  */
  unsigned int num_threads_given ;	/**< @brief Whether num-threads was given.  */
  unsigned int niota_given ;	/**< @brief Whether niota was given.  */
  unsigned int npsi_given ;	/**< @brief Whether npsi was given.  */
  unsigned int nfshift_given ;	/**< @brief Whether nfshift was given.  */
  unsigned int nchunks_given ;	/**< @brief Whether nchunks was given.  */
  unsigned int split_ifos_given ;	/**< @brief Whether split-ifos was given.  */
  unsigned int weight_cutoff_fraction_given ;	/**< @brief Whether weight-cutoff-fraction was given.  */
  unsigned int per_dataset_weight_cutoff_fraction_given ;	/**< @brief Whether per-dataset-weight-cutoff-fraction was given.  */
  unsigned int power_max_median_factor_given ;	/**< @brief Whether power-max-median-factor was given.  */
  unsigned int tmedian_noise_level_given ;	/**< @brief Whether tmedian-noise-level was given.  */
  unsigned int summing_step_given ;	/**< @brief Whether summing-step was given.  */
  unsigned int max_first_shift_given ;	/**< @brief Whether max-first-shift was given.  */
  unsigned int statistics_function_given ;	/**< @brief Whether statistics-function was given.  */
  unsigned int dump_power_sums_given ;	/**< @brief Whether dump-power-sums was given.  */
  unsigned int compute_skymaps_given ;	/**< @brief Whether compute-skymaps was given.  */
  unsigned int fine_grid_skymarks_given ;	/**< @brief Whether fine-grid-skymarks was given.  */
  unsigned int half_window_given ;	/**< @brief Whether half-window was given.  */
  unsigned int tail_veto_given ;	/**< @brief Whether tail-veto was given.  */
  unsigned int cache_granularity_given ;	/**< @brief Whether cache-granularity was given.  */
  unsigned int sidereal_group_count_given ;	/**< @brief Whether sidereal-group-count was given.  */
  unsigned int time_group_count_given ;	/**< @brief Whether time-group-count was given.  */
  unsigned int phase_mismatch_given ;	/**< @brief Whether phase-mismatch was given.  */
  unsigned int bypass_powersum_cache_given ;	/**< @brief Whether bypass-powersum-cache was given.  */

  int injection_group_counter; /**< @brief Counter for group injection */
} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_usage;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser (int argc, char * const *argv,
  struct gengetopt_args_info *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_ext() instead
 */
int cmdline_parser2 (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_ext (int argc, char * const *argv,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_dump(FILE *outfile,
  struct gengetopt_args_info *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_file_save(const char *filename,
  struct gengetopt_args_info *args_info);

/**
 * Print the help
 */
void cmdline_parser_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_params_init(struct cmdline_parser_params *params);

/**
 * Allocates dynamically a cmdline_parser_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_params structure
 */
struct cmdline_parser_params *cmdline_parser_params_create(void);

/**
 * Initializes the passed gengetopt_args_info structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_init (struct gengetopt_args_info *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_free (struct gengetopt_args_info *args_info);

/**
 * The config file parser (deprecated version)
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_config_file() instead
 */
int cmdline_parser_configfile (const char *filename,
  struct gengetopt_args_info *args_info,
  int override, int initialize, int check_required);

/**
 * The config file parser
 * @param filename the name of the config file
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_config_file (const char *filename,
  struct gengetopt_args_info *args_info,
  struct cmdline_parser_params *params);

/**
 * The string parser (interprets the passed string as a command line)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_string (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name);
/**
 * The string parser (version with additional parameters - deprecated)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_string_ext() instead
 */
int cmdline_parser_string2 (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);
/**
 * The string parser (version with additional parameters)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_string_ext (const char *cmdline, struct gengetopt_args_info *args_info,
  const char *prog_name,
  struct cmdline_parser_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_required (struct gengetopt_args_info *args_info,
  const char *prog_name);


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINE_H */
