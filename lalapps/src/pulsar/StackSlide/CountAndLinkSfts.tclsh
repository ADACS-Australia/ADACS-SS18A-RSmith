#!/usr/bin/env tclshexe

# File: CountAndLinkSfts.tclsh Started: 01/23/04
# Author: Greg Mendell

# REVISIONS
# 01/28/04 gam; change sft_directory to sft_path_pattern = path to SFTs plus pattern to match to find SFTs.
# 02/15/05 gam; All options for start_time, duration or end_time, extra_time, sft_version, segment_list.
proc Exit {code} {
     global argv0;
     if {$code > 2} {
           puts "The $argv0 script finished with an error."
        } elseif {$code == 1} {
           # Displayed help.  Just quit without a message.
        } elseif {$code == 2} {
           puts "Script terminated.";
        } else {
           puts "The $argv0 script has finished.";
        }
        exit $code;
}

proc PrintHelp {} {
    global argv0;
    puts " ";
    puts "Counts SFTs within specified time intervals. Makes symbolic links to these SFTs if requested.";
    puts " ";    
    puts "Usage:";
    puts " ";
    puts "$argv0 \[-s <start_time> \[-e <end_time> | -d <duration>\] \[-x <extra_time>\] | -segs <seg_file>\] -b <sft_time_baseline> \[-v <sft_version>\] -p <sft_path_pattern> \[-link\] \[-V\]";
    puts " ";
    puts "To specify one time interval either give the start_time and end_time, the start_time and duration, or the name of a seg_file."
    puts " ";
    puts "To specify the time interval use these options:"
    puts " -s <start_time>                 The GPS start time of the time interval.";
    puts " -e <end_time> or -d <duration>  The GPS end time or duration of the interval.";
    puts " -x <extra_time>                 Optional extra time in seconds to add to the end_time or duration; default is 0."
    puts " ";
    puts "With the above options the time interval searched for SFTs is \[start_time, end_time+extra_time) or \[start_time, start_time + duration +extra_time)."
    puts " ";
    puts "Otherwise, to specify a file with a list of GPS time intervals use this option:"
    puts " ";
    puts "-segs <seg_file>                 A file with a list of GPS segments with two columns giving the start_time end_time of each segment. The code loops over the intervals specified by these."
    puts " ";
    puts "-b <sft_time_baseline>           Time baseline of the SFTs in seconds (e.g, 60 or 1800)."
    puts " ";
    puts "-v <sft_version>                 Optional version of the SFTs (1 or 2); default is 1."
    puts " ";
    puts "-p <sft_path_pattern>            Path to SFTs plus pattern to match to find SFT files.";
    puts " ";
    puts "For example use \"/tmp/*SFT.*\" to find SFTs in the /tmp directory; note \"\" are needed.";
    puts " ";    
    puts "-link                            If -link is given, symbolic links are made to the matching SFTs";
    puts " ";
    puts "-V                               If -V is given, more verbose output is given.";
    puts " ";
    Exit 1;
}

#######################
# MAIN CODE STARTS HERE 
#######################

if { $argc < 1 || $argv == "-h" || $argv == "--help"} {
   PrintHelp;
}

# get the command line arguments
set start_time "";
set end_time "";
set duration "";
set extra_time 0;
set seg_file "";
set sft_time_baseline "";
set sft_version "1";
set sft_path_pattern "";
set LINK 0;
set VERBOSE 0;
set optList [split "-s:-e:-d:-x:-segs:-b:-v:-p:-link:-V" ":"];
set opt "unknown";
foreach element $argv {
        set optInd [lsearch -exact $optList $element];
        if {[lsearch -exact $optList $element] > -1} {
                set opt [lindex $optList $optInd];
                if {$opt == "-link"} {
                   set LINK 1;
                } elseif {$opt == "-V"} {
                   set VERBOSE 1;
                }
        } else {
                if {$opt == "-s"} {
                        set start_time $element;
                } elseif {$opt == "-e"} {
                        set end_time $element;
                } elseif {$opt == "-d"} {
                        set duration $element;
                } elseif {$opt == "-x"} {
                        set extra_time $element;
                } elseif {$opt == "-segs"} {
                        set seg_file $element;
                } elseif {$opt == "-b"} {
                        set sft_time_baseline $element;
                } elseif {$opt == "-v"} {
                        set sft_version $element;
                } elseif {$opt == "-p"} {
                        set sft_path_pattern $element;
                }
                set opt "unknown";
        }
}

# Validate the arguments and set up related values
set segmentList [list ];
if {$seg_file > ""} {
   if {[file exists $seg_file]} {
       # Read the file into buffer.
       set fid [open $seg_file "r"];
       set buffer [read $fid];
       close $fid;
     } else {
       puts "Error: seg_file = $seg_file does not exist.";
       Exit 2;
     }

     foreach line [split $buffer "\n"] {
          set line [string trimleft $line]; #trim leading spaces.
          if {[string index $line 0] == "#" || $line == ""} {
                    # line is blank or a comment, skip
          } else {
            lappend segmentList $line;
          }
     }
} else {
  if {$start_time == ""} {
     puts "Error: missing start_time, or need to give a seg_file.";
     Exit 2;
  }
  if {$end_time > ""} {
     set end_time [expr $end_time + $extra_time];
  } else {
     if {$duration == ""} {
        puts "Error: missing end_time or duration, or need to give a seg_file.";
        Exit 2;
     }
     set end_time [expr $start_time + $duration + $extra_time];
  }
  set duration [expr $end_time - $start_time]; # update duration
  lappend segmentList "$start_time $end_time";
}

if {$sft_time_baseline == ""} {
     puts "Error: missing sft_time_baseline.";
     Exit 2;
}

if {$sft_path_pattern > ""} {
   set sftPathPatternList [split $sft_path_pattern "/"];
} else {
   puts "Error: missing sft_path_pattern.";
   Exit 2;
}
set listLength [llength $sftPathPatternList];
set listLengthm1 [expr $listLength - 1];
set glob_pattern [lindex $sftPathPatternList $listLengthm1];
if {$listLength > 1} {
   set listLengthm2 [expr $listLength - 2];
   set sft_directory [join [lrange $sftPathPatternList 0 $listLengthm2] "/"];
} else {
   set sft_directory ".";
}
if {[string index $sft_directory end] != "/"} { 
   append sft_directory "/"; # Append "/" if needed.
}

# get the list of SFTs
if {[catch {set sft_list [glob $sft_path_pattern]} result]}  {
   puts "Glob of $sft_path_pattern failed:\n$result";
   Exit 3;
}
#puts "$sft_list";

# Check whether to make links.
if {$LINK==1} {
      puts "\nReally make symbolic links here? (y/n) ";
      set ans [gets stdin];
      puts " ";
      if {$ans != "y"} {
         Exit 2;
      }
}

set count 0;
set linkCount 0;
set startGPS -1;
set endGPS -1;
set minStartTime -1;
set maxEndTime -1;
#puts "segmentList = $segmentList"
foreach interval $segmentList {
   set splitInterval [split $interval];
   set start_time [lindex $splitInterval 0];
   set end_time   [lindex $splitInterval 1];
   if {$VERBOSE == 1} {
      puts "Interval start_time = $start_time";
      puts "Interval end_time = $end_time\n";
   }
   if {($minStartTime == -1) || ($start_time < $minStartTime) } {
      set minStartTime $start_time;
   }
   if {$end_time > $maxEndTime} {
      set maxEndTime $end_time;
   }
   foreach fileAndPath $sft_list {
        set sftFileName [lindex [split $fileAndPath "/"] end];
        if {$sft_version == 2} {
           set sftGPSTime "";
           regexp {\-([0-9]+)\-} $sftFileName match sftGPSTime;
        } else {
           set sftGPSTime [lindex [split $sftFileName "."] end];
        }
        set numericGPSTime [string trimleft $sftGPSTime "0"];
        if {$numericGPSTime == ""}  {
           set numericGPSTime "0";
        }
        #puts "sftFileName = $sftFileName";
        #puts "sftGPSTime = $sftGPSTime";
        set numericGPSTimePlusBaseline [expr $numericGPSTime + $sft_time_baseline];
        # The entire duration of the SFT must lie in the time interval
        if {$numericGPSTime >= $start_time && $numericGPSTimePlusBaseline <= $end_time} {
                if {$VERBOSE == 1} {
                   puts "sftFileName = $sftFileName is in the reqested interval(s)";
                }
                incr count;
                if {($startGPS == -1) || ($sftGPSTime < $startGPS) } {
                   set startGPS $sftGPSTime;
                }
                if {$sftGPSTime > $endGPS} {
                   set endGPS $sftGPSTime;
                }
                if {$LINK} {
                    if {[file exists $sftFileName]} {
                       puts "$sftFileName already exists; did not make link.";
                    } else {
                       if {[catch {exec ln -s $fileAndPath $sftFileName} result]}  {
                           puts "Error making link from $sftFileName to $fileAndPath: $result";
                       } else {
                           incr linkCount;
                       }
                    }
                }
       }
   } 
   # end foreach fileAndPath $sft_list
} 
# end foreach start_time end_time $segmentList
if {$LINK}  {
   puts "\nMade $linkCount symbolic links.\n";
}

set duration [expr $maxEndTime - $minStartTime]
puts "\nThe overall interval checked is:"
puts "\n  \[$minStartTime, $maxEndTime) = \[$minStartTime $minStartTime + $duration)\n"
puts "\nThe number of SFTs that match $sft_path_pattern for the overall interval checked is:"
puts "\n  $count\n";
set duration [expr $endGPS - $startGPS + $sft_time_baseline]
puts "For the SFTs that actually match: start_time_first_matching_sft, duration, number_sfts = "
puts "\n  $startGPS $duration $count\n"

Exit 0;
