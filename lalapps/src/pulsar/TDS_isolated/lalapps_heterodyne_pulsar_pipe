#!/usr/bin/python
"""
  lalapps_heterodyne_pulsar_pipe -- pipeline for creating Condor DAG to perform the known pulsar
                                    time domain analysis - coarse or fine heterodyne (with or
                                    without parameter updates)
  
  This has been greatly inspired (well blatently hacked together from) the stochastic pipeline by
  Adam Mercer and the frequency domain binary pulsar search by Chris Messenger.
  
  Matt Pitkin 29/03/06
  
"""

__author__ = 'Matt Pitkin <matthew@astro.gla.ac.uk>'
__date__ = '$Date$'
__version__ = '$Revision$'

# import required modules
import sys
import os
import getopt
import re
import string
import tempfile
import ConfigParser
import exceptions

# append the lalapps python path
# sys.path.append('/home/matthew/lscsoft/lib/python')

# import the lalapps pipeline modules
from glue import pipeline
from lalapps import pulsar_pipeline_utils as ppu

# program usage
def usage():
  msg = """\
Usage: lalapps_heterodyne_pulsar_pipe [options]

  -h, --help               display this message
  -v, --version            print version information and exit
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  -d, --datafind           run ligo_data_find to create frame cache files
                           (required for coarse heterodyne)
  THIS OPTION IS NO LONGER USABLE - CREATE YOUR OWN FRAME CACHE (E.G. USING 
  ligo_data_find) AND ADD TO THE CONFIGURATION FILE
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  -s, --seglist            run LSCsegFind to create a segment list (otherwise
                           attempt to read the segment filename from the
                           configuation file) 
  THIS OPTION IS NO LONGER USABLE - CREATE YOUR OWN SEGMENT LIST (E.G. USING
  ligolw_segment_query) INSTEAD AND ADD TO THE CONFIGURATION FILE
  XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
  -c, --coarse             run lalapps_heterodyne_pulsar in coarse mode
  -f, --fine               run lalapps_heterodyne_pulsar in fine mode
  -u, --update             run lalapps_heterodyne_pulsar in update mode
  -C, --calibrate          run lalapps_heterodyne_pulsar with calibration flag set
  -b, --binary-input       run lalapps_heterodyne_pulsar to read in a binary
                           data file (for fine/update heterodyne mode) 
  -O, --binary-output      run lalapps_heterodyne_pulsar to output to binary
                           file (for coarse, fine or update heterodyne mode) 
  -V, --verbose            run lalapps_heterodyne_pulsar in verbose mode  
  -F, --config-file FILE   use configuration file FILE
  -l, --log-path PATH      directory to write condor log file
  """
  print >> sys.stderr, msg
  
# parse the command line options to figure out what we should do
shortop = "hvds:cfuCF:l:VbO"
longop = [
  "help",
  "version",
  "datafind",
  "seglist",
  "coarse",
  "fine",
  "update",
  "calibrate",
  "config-file=",
  "log-path=",
  "verbose",
  "binary-input",
  "binary-output"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)
  
# default options
config_file = None
# do_datafind = None
do_fine = None
do_coarse = None
do_update = None
do_calibrate = None
config_file = None
log_path = None
do_verbose = None
do_bininput = None
do_binoutput = None

# process options
for o, a in opts:
  if o in ("-v", "--version"):
    print "lalapps_heterodyne_pulsar_pipe version", __version__
    sys.exit(0)
  elif o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-d", "--datafind"):
    print "The -d (--datafind) flag is no longer valid (see --help)"
    do_datafind = 1
  elif o in ("-s", "--seglist"):
    print "The -s (--segment) flag is no longer valid (see --help)"
    sys.exit(0) 
  elif o in ("-c", "--coarse"):
    do_coarse = 1
  elif o in ("-f", "--fine"):
    do_fine = 1
  elif o in ("-u", "--update"):
    do_update = 1
  elif o in ("-C", "--calibrate"):
    do_calibrate = 1
  elif o in ("-F", "--config-file"):
    config_file = a
  elif o in ("-l", "--log-path"):
    log_path = a
  elif o in ("-b", "--binary-input"):
    do_bininput = 1 # set this to read in input data from a binary file
  elif o in ("-O", "--binary-output"):
    do_binoutput = 1 # set this if you want the data outout to a binary file
  elif o in ("-V", "--verbose"):
    do_verbose = 1 # this is the set verbose when running lalapps_heterodyne_pulsar NOT this script
  else:
    print >> sys.stderr, "Unknown option:", o
    usage()
    sys.exit(1)

# test arguments for validity
if not config_file:
  print >> sys.stderr, "No configuration file specified."
  print >> sys.stderr, "Use --config-file FILE to specify location."
  sys.exit(1)

if not log_path:
  print >> sys.stderr, "No log file path specified."
  print >> sys.stderr, "Use --log-path PATH to specify a location."
  sys.exit(1)

# try and make a directory to store the cache files and job logs
#if do_datafind:
#  try: os.mkdir('cache')
#  except: pass

try: os.mkdir('logs')
except: pass

# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(config_file)

# create a log file that the Condor jobs will write to
basename = re.sub(r'\.ini',r'',config_file) # remove .ini from config_file name

logfile = log_path + '/' + basename + '.dag.log'

fh = open(logfile, "w" ) # creates file
fh.close()

# create the DAG writing the log to the specified directory
dag = pipeline.CondorDAG(logfile)
dag.set_dag_file(basename)

# create Condor Jobds that will be used in the dag
# df_job = pipeline.LSCDataFindJob('cache','logs') # data find job
univ = cp.get('condor', 'universe')
coarse_job = ppu.heterodyneJob(cp.get('exec', 'heterodyne'),univ)
fine_job = ppu.heterodyneJob(cp.get('exec', 'heterodyne'),univ)
update_job = ppu.heterodyneJob(cp.get('exec', 'heterodyne'),univ)

# set Condor .sub submit file names
subsuffix = '.sub'
df_job.set_sub_file(basename + '.datafind' + subsuffix)
coarse_job.set_sub_file(basename + subsuffix)
fine_job.set_sub_file(basename +  subsuffix)
update_job.set_sub_file(basename + subsuffix)

# set values from config file
pulsar_param_dir = cp.get('data','pulsar_param_dir')

earth_ephem = cp.get('ephem','earth_ephem')
sun_ephem = cp.get('ephem','sun_ephem')

# actual info on the analysis
tstart = cp.get('input','starttime')
tend = cp.get('input','endtime')
detector = cp.get('input','detector')
filter_knee = cp.get('input','filter_knee')
sample_rate = cp.get('input','sample_rate')
resample_rate = cp.get('input','resample_rate')
channel = cp.get('input','channel')
stddev_thresh = cp.get('input','stddev_thresh')
freq_factor = cp.get('input','freq_factor')
try:
  manual_epoch = cp.get('input','manual_epoch')
except:
  manual_epoch = None

# check that if you're performing a coarse heterodyne, but you're not doing a
# datafind that you have instead supplied a frame cache file
if do_coarse: # and (do_datafind == None)):
  try:
    data_cache = cp.get('data','data_cache')
  
  except:
    print >> sys.stderr, """Can't find a frame cache file, either add data_cache to the [data] section of your configuration file, or rerun with the --datafind argument"""
    sys.exit(1)
  
  # check that the file exists
  if os.path.isfile(data_cache)==False:
    print >> sys.stderr, """The specified data file %s does not exist!""" % data_cache
    sys.exit(1)

if (channel.find('STRAIN') > -1) | (channel.find('DER_DATA_H') > -1) | (channel.find('h_') > -1):
  print >> sys.stderr, """You are looking at calibrated strain data, so read in high-pass frequency and scale factors"""
  high_pass = cp.get('input', 'high_pass')
  scale_fac = cp.get('input', 'scale_fac')

  print >> sys.stderr, "Value of high-pass is %s, value of scale factor is %s" % (high_pass, scale_fac)
  print >> sys.stderr, "If these don't look sensible then rerun"

# default
seg_list_file = None

# output file
output_dir_temp = cp.get('output', 'output_path')
output_dir = output_dir_temp + '/' + tstart + '-' + tend
try: os.mkdir(output_dir) # create output directory using start and end time of data
except: pass

# make DAGs
#if do_datafind:
#  df = pipeline.LSCDataFindNode(df_job)
  
  # set observatory for LSCdataFind
#  if (detector.find('H1') > -1) | (detector.find('H2') > -1):
#    obs = 'H'
#  elif (detector.find('L1') > -1):
#    obs = 'L'
#  elif (detector.find('G1') > -1) | (detector.find('GEO') > -1):
#    obs = 'G'
#  elif (detector.find('V1') > -1) | (detector.find('Virgo') > -1):
#    obs = 'V'
#  else:
#    print >> sys.stderr, """Detector not set in .ini file or not recognised, should be either H1,
#H2, L1, V1, G1 or GEO."""
#    sys.exit(1)
    
#  df.set_observatory(obs)
#  df.set_start(tstart)
#  df.set_end(tend)
 
  # add DAG
#  dag.add_node(df)

# set seglist file from value in the config file
seg_list_file = cp.get('data','seg_list')
  
# see if it exits - if it doesn't give an error
if os.path.isfile(seg_list_file)==False:
  print >> sys.stderr, """No segment list file given in config file - add seg_list argument to
[data] section of .ini file"""
  sys.exit(1)
  
if do_coarse:
  param_files = os.listdir(pulsar_param_dir)
  param_files.sort() # sort the files into alphabetical order
  
  het_flag = 0 # heterodyne flag for a coarse heterodyne
  
  coarse = [] # create list for coarse heterodyne nodes
  
  i = 0
  j = 0
  while i < len(param_files):
    if ".par" in param_files[i]:
      #pulsar = 'J' + re.sub(r'\.par',r'',param_files[i]) # set pulsar name from .par file
      pulsar = re.sub(r'\.par', r'', param_files[i])
      param_file = pulsar_param_dir + '/' + param_files[i]
      
      # add heterodyneNode for DAG
      coarse.append(ppu.heterodyneNode(coarse_job))
      coarse[j].set_het_flag(het_flag)
      coarse[j].set_ifo(detector)
      coarse[j].set_pulsar(pulsar)
      coarse[j].set_param_file(param_file)
      coarse[j].set_freq_factor(freq_factor)
      """
      don't need ephem files in coarse heterodyne YET!!
      coarse[j].set_earth_ephem(earth_ephem)
      coarse[j].set_sun_ephem(sun_ephem)
      """
      if manual_epoch != None:
        coarse[j].set_manual_epoch(manual_epoch)
      coarse[j].set_filter_knee(filter_knee)
      coarse[j].set_sample_rate(sample_rate)
      coarse[j].set_resample_rate(resample_rate)
      
      #if do_datafind:
      #  coarse[j].set_data_file(df.get_output()) # get frame cache from here!
      #else:
      coarse[j].set_data_file(data_cache) # set frame cache to that given in
                                          # config the file
      
      coarse[j].set_seg_list(seg_list_file)
      coarse[j].set_channel(channel)
      
      # if using calibrated data set high-pass freq and scale factor
      if (channel.find('STRAIN') > -1 ) | (channel.find('DER_DATA_H') > -1) | (channel.find('h_') > -1):
        coarse[j].set_scale_fac(scale_fac)
        coarse[j].set_high_pass(high_pass)
      
      coarse[j].set_output_dir(output_dir)
      
      if do_verbose:
        coarse[j].set_verbose()
        
      # only read in from frames for coarse heterodyne - so don't need to ever set bininput
      if do_binoutput:
        coarse[j].set_binoutput()
     
      #if do_datafind:
      #  coarse[j].add_parent(df)
      
      dag.add_node(coarse[j])
      j = j+1
    
    i = i+1

# code to create dag for fine heterodyne
if do_fine or do_update:
  param_files = os.listdir(pulsar_param_dir)
  param_files.sort()
  
  # get updated parameter file
  if do_update:
    pulsar_update_dir = cp.get('data', 'pulsar_update_dir')
  
  input_dir = cp.get('fine','fine_input')
  input_files = os.listdir(input_dir)
  input_files.sort()
  
  # if calibration is being done get the files from the .ini file
  if do_calibrate:
    response_function = cp.get('calibration','response_file')
    coefficient_file = cp.get('calibration','coefficient_file')
    open_loop_gain = cp.get('calibration','open_loop_gain')
    sensing_function = cp.get('calibration','sensing_function')
    
  fine = [] # create list for fine heterodyne nodes
  
  i = 0
  j = 0
  while i < len(param_files):
    if ".par" in param_files[i]:
      pulsar = 'J' + re.sub(r'\.par',r'',param_files[i]) # set pulsar name from .par file
      param_file = pulsar_param_dir + '/' + param_files[i]
      
      # set heterodyne flag
      if do_fine:
        het_flag = 1
      if do_update:
        het_flag = 2
      
      # find correct input file
      k=0
      while k < len(input_files):
        if pulsar in input_files[k]:
          data_file = input_dir + '/' + input_files[k]
          break

        data_file = None
        k = k+1

      # if no file is set then tell me and move onto next pulsar
      if data_file == None:
        print >> sys.stderr, "No file set for PSR %s" % (pulsar)
        i = i+1
        continue 
      
      # add heterodyneNode for DAG
      fine.append(ppu.heterodyneNode(fine_job))
      
      """ 
      if updating parameters check that an updated .par file exists - else just 
      do normal fine heterodyne
      """
      if do_update:
        pulsar_update_file = pulsar_update_dir + '/' + param_files[i]
        if os.path.isfile(pulsar_update_file):
          fine[j].set_param_file_update(pulsar_update_file)
        else:
          print >> sys.stderr, """No updated parameter file exists for PSR%s, just perform fine
heterodyne using old parameters.""" % (pulsar)
          
          # set default null value for the update file as it wil appear in the sub file
          pulsar_update_file = 'none'
          fine[j].set_param_file_update(pulsar_update_file)
          het_flag = 1
      
      fine[j].set_het_flag(het_flag)
      fine[j].set_ifo(detector)
      fine[j].set_pulsar(pulsar)
      fine[j].set_param_file(param_file)
      fine[j].set_freq_factor(freq_factor)
      fine[j].set_ephem_earth_file(earth_ephem)
      fine[j].set_ephem_sun_file(sun_ephem)
      fine[j].set_filter_knee(filter_knee)
      fine[j].set_sample_rate(sample_rate)
      fine[j].set_resample_rate(resample_rate)
      fine[j].set_data_file(data_file)
      fine[j].set_seg_list(seg_list_file)
      if manual_epoch != None:
        fine[j].set_manual_epoch(manual_epoch)
     
      if do_calibrate:
        fine[j].set_calibrate()
        
        if os.path.isfile(response_function): # if thereis a response function file
          fine[j].set_response_function(response_function)
        elif (os.path.isfile(coefficient_file) & os.path.isfile(open_loop_gain) & \
os.path.isfile(sensing_function)):
          fine[j].set_coefficient_file(coefficient_file)
          fine[j].set_open_loop_gain(open_loop_gain)
          fine[j].set_sensing_function(sensing_function)
          fine[j].set_channel(channel)
        else:
          print >> sys.stderr, "Could not find any calibration files! Check .ini file."
          sys.exit(1)
      
      if do_verbose:
        fine[j].set_verbose()
          
      if do_bininput:
        fine[j].set_bininput()
        
      if do_binoutput:
        fine[j].set_binoutput()
        
      # if a value of the standard deviation threshold is set add the arg
      if stddev_thresh != '':
        fine[j].set_stddev_thresh(stddev_thresh)
      
      fine[j].set_output_dir(output_dir)
      
      dag.add_node(fine[j])
      j = j+1
      
    i = i+1

# write out DAG
dag.write_sub_files()
dag.write_dag()

sys.exit(0)
