#!/usr/bin/python
"""
  lalapps_pulsar_parameter_estimation -- pipeline for creating Condor DAG to
                                         perform pulsar parameter estimation
                                         for the time domain analysis

  This has been greatly inspired (well blatently hacked together from) the stochastic pipeline by
  Adam Mercer and the frequency domain binary pulsar search by Chris Messenger.

  Matt Pitkin 07/03/08

"""

__author__ = 'Matt Pitkin <matthew@astro.gla.ac.uk>'
__date__ = '$Date$'
__version__ = '$Revision$'

# import required modules
import sys
import os
import getopt
import re
import string
import tempfile
import ConfigParser
import exceptions

# append the lalapps python path
sys.path.append('/home/matthew/lscsoft/lib/python')

# import the lalapps pipeline modules
from glue import pipeline
import pulsar_parameter_estimation

# program usage
def usage():
  msg = """\
Usage: lalapps_pulsar_parameter_estimation_pipe [options]

  -h, --help               display this message
  -v, --version            print version information and exit
  -V, --verbose            run lalapps_heterodyne_pulsar in verbose mode  
  -F, --config-file FILE   use configuration file FILE
  -l, --log-path PATH      directory to write condor log file
  -u, --ul                 output the upper limit
  -m, --mcmc               perform search as an MCMC
  -c, --covariance         use covariance file if available
  -o, --only-joint         only output the joint posterior (for MCMC with
                           multiple detectors)
  -p, --use-priors         use priors on the pulsar parameters
  """
  print >> sys.stderr, msg

# parse the command line options to figure out what we should do
shortop = "hvF:l:Vumcop"
longop = [
  "help",
  "version",
  "config-file=",
  "log-path=",
  "verbose",
  "ul",
  "mcmc",
  "covariance",
  "only-joint",
  "use-priors"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

# default options
config_file = None
log_path = None
do_verbose = None
do_ul = None
do_mcmc = None
do_cov = None
do_only = None
do_priors = None

# process options
for o, a in opts:
  if o in ("-v", "--version"):
    print "lalapps_pulsar_parameter_estimation_pipe version", __version__
    sys.exit(0)
  elif o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-F", "--config-file"):
    config_file = a
  elif o in ("-l", "--log-path"):
    log_path = a
  elif o in ("-V", "--verbose"):
    do_verbose = 1 # this is the set verbose when running lalapps_heterodyne_pulsar NOT this script
  elif o in ("-u", "--ul"):
    do_ul = 1 # output the upper limit
  elif o in ("-m", "--mcmc"):
    do_mcmc = 1 # perform mcmc
  elif o in ("-c", "--covariance"): 
    do_cov = 1 # see if there is a covariance matrix
  elif o in ("-o", "--only-joint"):
    do_only = 1; # only perform the joint posterior for MCMC
  elif o in ("-p", "--use-priors"):
    do_priors = 1;
  else:
    print >> sys.stderr, "Unknown option:", o
    usage()
    sys.exit(1)

# test arguments for validity
if not config_file:
  print >> sys.stderr, "No configuration file specified."
  print >> sys.stderr, "Use --config-file FILE to specify location."
  sys.exit(1)

if not log_path:
  print >> sys.stderr, "No log file path specified."
  print >> sys.stderr, "Use --log-path PATH to specify a location."
  sys.exit(1)

# try and make a directory to store the cache files and job logs
try: os.mkdir('logs')
except: pass

# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(config_file)

# create a log file that the Condor jobs will write to
basename = re.sub(r'\.ini',r'',config_file) # remove .ini from config_file name

logfile = log_path + '/' + basename + '.dag.log'

fh = open(logfile, "w" ) # creates file
fh.close()

# create the DAG writing the log to the specified directory
dag = pipeline.CondorDAG(logfile)
dag.set_dag_file(basename)

# create Condor Jobs that will be used in the dag
parameter_job = pulsar_parameter_estimation.parameterJob(cp)

# create a parameter job that will be used if we have a covariance file
if do_cov:
  param_job_cov = pulsar_parameter_estimation.parameterJob(cp)

# set Condor .sub submit file name
parameter_job.set_sub_file(basename + '.sub')

if do_cov:
  param_job_cov.set_sub_file(basename + '_cov.sub')

# set values from config file
pulsar_param_dir = cp.get('data','pulsar_param_dir')
input_dir = cp.get('data','input_dir')

# actual info on the analysis
detectors = cp.get('input','detectors')
minh0 = cp.get('input','minh0')
maxh0 = cp.get('input','maxh0')
h0steps = cp.get('input','h0steps')
phi0steps = cp.get('input','phi0steps')
psisteps = cp.get('input','psisteps')
cisteps = cp.get('input','cisteps')

if do_ul:
  dob_ul = cp.get('input','dob_ul')

# get prior values if given
if do_priors:
  h0pri = cp.get('priors','h0prior')
  h0mean = cp.get('priors','h0mean')
  h0sig = cp.get('priors','h0sig')
  phipri = cp.get('priors','phiprior')
  phimean = cp.get('priors','phimean')
  phisig = cp.get('priors','phisig')
  psipri = cp.get('priors','psiprior')
  psimean = cp.get('priors','psimean')
  psisig = cp.get('priors','psisig')
  iotapri = cp.get('priors','iotaprior')
  iotamean = cp.get('priors','iotamean')
  iotasig = cp.get('priors','iotasig')

output_dir = cp.get('output','output_path')

# get the list of pulsar parameter files
param_files = os.listdir(pulsar_param_dir)
param_files.sort() # sort the files into alphabetical order

# check what the MCMC parameters are
if do_mcmc:
  iterations = cp.get('mcmc','iterations') # number of MCMC iterations
  burnin = cp.get('mcmc','burn_in') # number of burn iterations for MCMC
  temperature = cp.get('mcmc','temperature') # temperature of burn in  
  outputrate = cp.get('mcmc','output_rate') # output rate of MCMC chain

  h0width = cp.get('mcmc','h0_width') # width of h0 proposal
  phiwidth = cp.get('mcmc','phi_width') # width of phi0 proposal
  psiwidth = cp.get('mcmc','psi_width') # width of psi proposal
  ciwidth = cp.get('mcmc','ci_width') # width of cos(iota) proposal

  # test if variables defined
  try:
    h0width
  except NameError:
    h0width = None

  try:
    phiwidth
  except NameError:
    phiwidth = None

  try:
    psiwidth
  except NameError:
    psiwidth = None

  try:
    ciwidth
  except NameError:
    ciwidth = None

  if do_cov:
    covdir = cp.get('mcmc','cov_dir') # directory containing cov matrices  
    earth = cp.get('mcmc','earth_ephem') # Earth ephemeris
    sun = cp.get('mcmc','sun_ephem') # Sun ephemeris

    cov_files = os.listdir(covdir)
    cov_files.sort()

    if len(cov_files) > 0:
      pulsarsCov = [] # initialise a list

# find which detectors we have
if 'H1' in detectors:
  input_dir_det = input_dir + '/dataH1'
if 'H2' in detectors:
  input_dir_det = input_dir + '/dataH2'
if 'L1' in detectors:
  input_dir_det = input_dir + '/dataL1'
if 'G1' in detectors:
  input_dir_det = input_dir + '/dataG1'
if 'V1' in detectors:
  input_dir_det = input_dir + '/dataV1'

# get the list of fine heterodyned data files
input_files = os.listdir(input_dir_det)
input_files.sort()

pulsars = [] # create list for parameter estimation nodes

i = 0
j = 0
count1 = 0
count2 = 0
while i < len(param_files):
  if ".par" in param_files[i]:
    pulsar = 'J' + re.sub(r'\.par',r'',param_files[i]) # set pulsar name from
    param_file = pulsar_param_dir + '/' + param_files[i]

    # find whether an input file exists for that pulsar
    k=0
    while k < len(input_files):
      if pulsar in input_files[k]:
        data_file = 1
        break

      data_file = None
      k = k+1

    # if no file is set then tell me and move onto next pulsar
    if data_file == None:
      print >> sys.stderr, "No file set for PSR %s" % (pulsar)
      i = i+1
      continue 

    if do_mcmc:
      # if there is a covariance matrix set this
      m=0
      if do_cov:
        while m < len(cov_files):
          if ".mat" in cov_files[m]:
            p = 'J' + re.sub(r'\.mat',r'',cov_files[m])

            if pulsar == p:
              # add parameterNode for covariance job
              pulsarsCov.append(pulsar_parameter_estimation.parameterNode(param_job_cov))
              cov_file = covdir + '/' + cov_files[m]
              pulsarsCov[count2].set_covfile(cov_file)

              pulsarsCov[count2].set_earth(earth)
              pulsarsCov[count2].set_sun(sun)

              pulsarsCov[count2].set_mcmc()
              pulsarsCov[count2].set_iterations(iterations)
              pulsarsCov[count2].set_burnin(burnin)
              pulsarsCov[count2].set_temperature(temperature)
              pulsarsCov[count2].set_outputrate(outputrate)

              pulsarsCov[count2].set_detectors(detectors)
              pulsarsCov[count2].set_param_file(param_file)
              pulsarsCov[count2].set_pulsar(pulsar)
              pulsarsCov[count2].set_input_dir(input_dir)
              pulsarsCov[count2].set_output_dir(output_dir)

              if do_only:
                pulsarsCov[count2].set_onlyjoint()

              if do_priors:
                pulsarsCov[count2].set_usepriors()

                if "uniform" in h0pri or "jeffreys" in h0pri:
                  pulsarsCov[count2].set_h0prior(h0pri)

                if "gaussian" in h0pri:
                  pulsarsCov[count2].set_h0prior(h0pri)
                  pulsarsCov[count2].set_h0mean(h0mean)
                  pulsarsCov[count2].set_h0sig(h0sig)

                if "uniform" in phipri:
                  pulsarsCov[count2].set_phiprior(phipri)

                if "gaussian" in phipri:
                  pulsarsCov[count2].set_phiprior(phipri)
                  pulsarsCov[count2].set_phimean(phimean)
                  pulsarsCov[count2].set_phisig(phisig)

                if "uniform" in psipri:
                  pulsarsCov[count2].set_psiprior(psipri)

                if "gaussian" in psipri:
                  pulsarsCov[count2].set_psiprior(psipri)
                  pulsarsCov[count2].set_psimean(psimean)
                  pulsarsCov[count2].set_psisig(psisig)

                if "uniform" in iotapri:
                  pulsarsCov[count2].set_iotaprior(iotapri)

                if "gaussian" in iotapri:
                  pulsarsCov[count2].set_iotaprior(iotapri)
                  pulsarsCov[count2].set_iotamean(iotamean)
                  pulsarsCov[count2].set_iotasig(iotasig)

              if h0width:
                pulsarsCov[count2].set_h0width(h0width)

              if phiwidth:
                pulsarsCov[count2].set_phiwidth(phiwidth)

              if psiwidth:
                pulsarsCov[count2].set_psiwidth(psiwidth)

              if ciwidth:
                pulsarsCov[count2].set_ciwidth(ciwidth)

              if do_verbose:
                pulsarsCov[count2].set_verbose()

              dag.add_node(pulsarsCov[count2])
              count2 = count2 + 1
              break;

            # if no covariance file has been found do 4 param MCMC
            if m == len(cov_files) - 1:
              pulsars.append(pulsar_parameter_estimation.parameterNode(parameter_job))

              if do_only:
                pulsars[count1].set_onlyjoint()

              pulsars[count1].set_mcmc()
              pulsars[count1].set_iterations(iterations)
              pulsars[count1].set_burnin(burnin)
              pulsars[count1].set_temperature(temperature)
              pulsars[count1].set_outputrate(outputrate)

              pulsars[count1].set_detectors(detectors)
              pulsars[count1].set_param_file(param_file)
              pulsars[count1].set_pulsar(pulsar)
              pulsars[count1].set_input_dir(input_dir)
              pulsars[count1].set_output_dir(output_dir)

              # set priors
              if do_priors:
                pulsars[count1].set_usepriors()

                if "uniform" in h0pri or "jeffreys" in h0pri:
                  pulsars[count1].set_h0prior(h0pri)

                if "gaussian" in h0pri:
                  pulsars[count1].set_h0prior(h0pri)
                  pulsars[count1].set_h0mean(h0mean)
                  pulsars[count1].set_h0sig(h0sig)

                if "uniform" in phipri:
                  pulsars[count1].set_phiprior(phipri)

                if "gaussian" in phipri:
                  pulsars[count1].set_phiprior(phipri)
                  pulsars[count1].set_phimean(phimean)
                  pulsars[count1].set_phisig(phisig)

                if "uniform" in psipri:
                  pulsars[count1].set_psiprior(psipri)

                if "gaussian" in psipri:
                  pulsars[count1].set_psiprior(psipri)
                  pulsars[count1].set_psimean(psimean)
                  pulsars[count1].set_psisig(psisig)

                if "uniform" in iotapri:
                  pulsars[count1].set_iotaprior(iotapri)

                if "gaussian" in iotapri:
                  pulsars[count1].set_iotaprior(iotapri)
                  pulsars[count1].set_iotamean(iotamean)
                  pulsars[count1].set_iotasig(iotasig)

              if h0width:
                pulsars[count1].set_h0width(h0width)

              if phiwidth:
                pulsars[count1].set_phiwidth(phiwidth)

              if psiwidth:
                pulsars[count1].set_psiwidth(psiwidth)

              if ciwidth:
                pulsars[count1].set_ciwidth(ciwidth)

              dag.add_node(pulsars[count1])
              count1 = count1 + 1
              break
          m = m + 1

      else:
        pulsars.append(pulsar_parameter_estimation.parameterNode(parameter_job))

        if do_only:
          pulsars[count1].set_onlyjoint()

        pulsars[count1].set_mcmc()
        pulsars[count1].set_iterations(iterations)
        pulsars[count1].set_burnin(burnin)
        pulsars[count1].set_temperature(temperature)
        pulsars[count1].set_outputrate(outputrate)

        pulsars[count1].set_detectors(detectors)
        pulsars[count1].set_param_file(param_file)
        pulsars[count1].set_pulsar(pulsar)
        pulsars[count1].set_input_dir(input_dir)
        pulsars[count1].set_output_dir(output_dir)

        # set priors
        if do_priors:
          pulsars[count1].set_usepriors()

          if "uniform" in h0pri or "jeffreys" in h0pri:
            pulsars[count1].set_h0prior(h0pri)

          if "gaussian" in h0pri:
            pulsars[count1].set_h0prior(h0pri)
            pulsars[count1].set_h0mean(h0mean)
            pulsars[count1].set_h0sig(h0sig)

          if "uniform" in phipri:
            pulsars[count1].set_phiprior(phipri)

          if "gaussian" in phipri:
            pulsars[count1].set_phiprior(phipri)
            pulsars[count1].set_phimean(phimean)
            pulsars[count1].set_phisig(phisig)

          if "uniform" in psipri:
            pulsars[count1].set_psiprior(psipri)

          if "gaussian" in psipri:
            pulsars[count1].set_psiprior(psipri)
            pulsars[count1].set_psimean(psimean)
            pulsars[count1].set_psisig(psisig)

          if "uniform" in iotapri:
            pulsars[count1].set_iotaprior(iotapri)

          if "gaussian" in iotapri:
            pulsars[count1].set_iotaprior(iotapri)
            pulsars[count1].set_iotamean(iotamean)
            pulsars[count1].set_iotasig(iotasig)

        if h0width:
          pulsars[count1].set_h0width(h0width)

        if phiwidth:
          pulsars[count1].set_phiwidth(phiwidth)

        if psiwidth:
          pulsars[count1].set_psiwidth(psiwidth)

        if ciwidth:
          pulsars[count1].set_ciwidth(ciwidth)

        dag.add_node(pulsars[count1])
        count1 = count1 + 1

    else: # add a regular job
      pulsars.append(pulsar_parameter_estimation.parameterNode(parameter_job))

      pulsars[j].set_detectors(detectors)
      pulsars[j].set_param_file(param_file)
      pulsars[j].set_pulsar(pulsar)
      pulsars[j].set_input_dir(input_dir)
      pulsars[j].set_output_dir(output_dir)
      if len(maxh0) > 0: 
        pulsars[j].set_maxh0(maxh0)
      if len(minh0) > 0:
        pulsars[j].set_minh0(minh0)
      if len(h0steps) > 0:
        pulsars[j].set_h0steps(h0steps)
      if len(phi0steps) > 0:
        pulsars[j].set_phi0steps(phi0steps)
      if len(cisteps) > 0:
        pulsars[j].set_cisteps(cisteps)
      if len(psisteps) > 0:
        pulsars[j].set_psisteps(psisteps)

      # set priors
      if do_priors:
        pulsars[j].set_usepriors()

        if "uniform" in h0pri or "jeffreys" in h0pri:
          pulsars[j].set_h0prior(h0pri)

        if "gaussian" in h0pri:
          pulsars[j].set_h0prior(h0pri)
          pulsars[j].set_h0mean(h0mean)
          pulsars[j].set_h0sig(h0sig)

        if "uniform" in phipri:
          pulsars[j].set_phiprior(phipri)

        if "gaussian" in phipri:
          pulsars[j].set_phiprior(phipri)
          pulsars[j].set_phimean(phimean)
          pulsars[j].set_phisig(phisig)

        if "uniform" in psipri:
          pulsars[j].set_psiprior(psipri)

        if "gaussian" in psipri:
          pulsars[j].set_psiprior(psipri)
          pulsars[j].set_psimean(psimean)
          pulsars[j].set_psisig(psisig)

        if "uniform" in iotapri:
          pulsars[j].set_iotaprior(iotapri)

        if "gaussian" in iotapri:
          pulsars[j].set_iotaprior(iotapri)
          pulsars[j].set_iotamean(iotamean)
          pulsars[j].set_iotasig(iotasig)

      if do_ul:
        pulsars[j].set_ul(dob_ul)

      if do_verbose:
        pulsars[j].set_verbose()

      dag.add_node(pulsars[j])
    j = j+1

  i = i+1 

  print >> sys.stderr, "Set dag job for pulsar %s" % (pulsar)

# write out DAG
dag.write_sub_files()
dag.write_dag()

sys.exit(0)
