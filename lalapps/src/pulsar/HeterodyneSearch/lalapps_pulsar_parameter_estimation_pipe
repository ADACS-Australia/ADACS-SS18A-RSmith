#!/usr/bin/env python
"""
  lalapps_pulsar_parameter_estimation -- pipeline for creating Condor DAG to
                                         perform pulsar parameter estimation
                                         for the time domain analysis

  This has been greatly inspired (well blatently hacked together from) the stochastic pipeline by
  Adam Mercer and the frequency domain binary pulsar search by Chris Messenger.

  Matt Pitkin 07/03/08

"""

__author__ = 'Matt Pitkin <matthew@astro.gla.ac.uk>'
__date__ = '$Date$'
__version__ = '$Revision$'

# import required modules
import sys
import os
import getopt
import re
import string
import tempfile
import ConfigParser
import exceptions

# import the lalapps pipeline modules
from glue import pipeline
import pulsar_parameter_estimation as ppe

from lalapps import pulsarpputils as pppu

# program usage
def usage():
  msg = """\
Usage: lalapps_pulsar_parameter_estimation_pipe [options]

  -h, --help               display this message
  -v, --version            print version information and exit
  -V, --verbose            run lalapps_heterodyne_pulsar in verbose mode
  -F, --config-file FILE   use configuration file FILE
  -l, --log-path PATH      directory to write condor log file
  -u, --ul                 output the upper limit
  -m, --mcmc               perform search as an MCMC
  -c, --covariance         use covariance file if available
  -o, --only-joint         only output the joint posterior (for MCMC with
                           multiple detectors)
  -p, --use-priors         use priors on the pulsar parameters
  """
  print >> sys.stderr, msg

# parse the command line options to figure out what we should do
shortop = "hvF:l:Vumcop"
longop = [
  "help",
  "version",
  "config-file=",
  "log-path=",
  "verbose",
  "ul",
  "mcmc",
  "covariance",
  "only-joint",
  "use-priors"
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

# default options
config_file = None
log_path = None
do_verbose = None
do_ul = None
do_mcmc = None
do_cov = None
do_only = None
do_priors = None

# process options
for o, a in opts:
  if o in ("-v", "--version"):
    print "lalapps_pulsar_parameter_estimation_pipe version", __version__
    sys.exit(0)
  elif o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-F", "--config-file"):
    config_file = a
  elif o in ("-l", "--log-path"):
    log_path = a
  elif o in ("-V", "--verbose"):
    do_verbose = 1 # this is the set verbose when running lalapps_heterodyne_pulsar NOT this script
  elif o in ("-u", "--ul"):
    do_ul = 1 # output the upper limit
  elif o in ("-m", "--mcmc"):
    do_mcmc = 1 # perform mcmc
  elif o in ("-c", "--covariance"):
    do_cov = 1 # see if there is a covariance matrix
  elif o in ("-o", "--only-joint"):
    do_only = 1; # only perform the joint posterior for MCMC
  elif o in ("-p", "--use-priors"):
    do_priors = 1;
  else:
    print >> sys.stderr, "Unknown option:", o
    usage()
    sys.exit(1)

# test arguments for validity
if not config_file:
  print >> sys.stderr, "No configuration file specified."
  print >> sys.stderr, "Use --config-file FILE to specify location."
  sys.exit(1)

if not log_path:
  print >> sys.stderr, "No log file path specified."
  print >> sys.stderr, "Use --log-path PATH to specify a location."
  sys.exit(1)

# try and make a directory to store the cache files and job logs
try: os.mkdir('logs')
except: pass

# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(config_file)

# create a log file that the Condor jobs will write to
basename = re.sub(r'\.ini',r'',config_file) # remove .ini from config_file name

logfile = log_path + '/' + basename + '.dag.log'

fh = open(logfile, "w" ) # creates file
fh.close()

# create the DAG writing the log to the specified directory
dag = pipeline.CondorDAG(logfile)
dag.set_dag_file(basename)

# create Condor Jobs that will be used in the dag
parameter_job = ppe.parameterJob(cp)

# create a parameter job that will be used if we have a covariance file
if do_cov:
  param_job_cov = ppe.parameterJob(cp)

# set Condor .sub submit file name
parameter_job.set_sub_file(basename + '.sub')

if do_cov:
  param_job_cov.set_sub_file(basename + '_cov.sub')

# set values from config file
try:
  pulsar_param_dir = cp.get('data','pulsar_param_dir')
except:
  print >> sys.stderr, "Must have a pulsar_param_dir in [data] field!"
  sys.exit(0)

try:
  input_dir = cp.get('data','input_dir')
except:
  print >> sys.stderr, "Must have a input_dir in [data] field!"
  sys.exit(0)

# actual info on the analysis
try:
  detectors = cp.get('input','detectors')
except:
  print >> sys.stderr, "Must have a detectors in [input] field!"
  sys.exit(0)

try:
  minh0 = cp.get('input','minh0')
except:
  minh0 = None

try:
  maxh0 = cp.get('input','maxh0')
except:
  maxh0 = None

try:
  h0steps = cp.get('input','h0steps')
except:
  h0steps = None

try:
  phi0steps = cp.get('input','phi0steps')
except:
  phi0steps = None

try:
  psisteps = cp.get('input','psisteps')
except:
  psisteps = None

try:
  cisteps = cp.get('input','cisteps')
except:
  cisteps = None

try:
  chunkmin = cp.get('input','chunkmin')
except:
  chunkmin = None

try:
  chunkmax = cp.get('input','chunkmax')
except:
  chunkmax = None

if do_ul:
  try:
    dob_ul = cp.get('input','dob_ul')
  except:
    dob_ul = None

# get prior values if given
if do_priors:
  try:
    h0priordir = cp.get('priors', 'priordir')
  except:
    h0priordir = None

  try:
    h0pri = cp.get('priors','h0prior')
  except:
    h0pri = []

  try:
    h0mean = cp.get('priors','h0mean')
  except:
    h0mean = None

  try:
    h0sig = cp.get('priors','h0sig')
  except:
    h0sig = None

  try:
    phipri = cp.get('priors','phiprior')
  except:
    phipri = []

  try:
    phimean = cp.get('priors','phimean')
  except:
    phimean = None

  try:
    phisig = cp.get('priors','phisig')
  except:
    phisig = None

  try:
    psipri = cp.get('priors','psiprior')
  except:
    psipri = []

  try:
    psimean = cp.get('priors','psimean')
  except:
    psimean = None

  try:
    psisig = cp.get('priors','psisig')
  except:
    psisig = None

  try:
    iotapri = cp.get('priors','iotaprior')
  except:
    iotapri = []

  try:
    iotamean = cp.get('priors','iotamean')
  except:
    iotamean = None

  try:
    iotasig = cp.get('priors','iotasig')
  except:
    iotasig = None

output_dir = cp.get('output','output_path')

# get the list of pulsar parameter files
param_files = os.listdir(pulsar_param_dir)
param_files.sort() # sort the files into alphabetical order

# check what the MCMC parameters are
if do_mcmc:
  try:
    iterations = cp.get('mcmc','iterations') # number of MCMC iterations
  except:
    iterations = None

  try:
    burnin = cp.get('mcmc','burn_in') # number of burn iterations for MCMC
  except:
    burnin = None

  try:
    temperature = cp.get('mcmc','temperature') # temperature of burn in
  except:
    temperature = None

  try:
    outputrate = cp.get('mcmc','output_rate') # output rate of MCMC chain
  except:
    outputrate = None

  try:
    h0width = cp.get('mcmc','h0_width') # width of h0 proposal
  except:
    h0width = None

  try:
    phiwidth = cp.get('mcmc','phi_width') # width of phi0 proposal
  except:
    phiwidth = None

  try:
    psiwidth = cp.get('mcmc','psi_width') # width of psi proposal
  except:
    psiwidth = None

  try:
    ciwidth = cp.get('mcmc','ci_width') # width of cos(iota) proposal
  except:
    ciwidth = None

  ephempath = None
  if do_cov:
    try:
      covdir = cp.get('mcmc','cov_dir') # directory containing cov matrices
    except:
      covdir = None
      cov_files = []

    try:
      ephempath = cp.get('mcmc','ephem_path') # path to Earth and Sun ephemeris
    except:
      print >> sys.stderr, "Cannot find an ephemeris path value"
      sys.exit(0)

    if covdir:
      cov_files = os.listdir(covdir)
      cov_files.sort()

      if len(cov_files) > 0:
        pulsarsCov = [] # initialise a list

    # list for pulsars with no cov file, but using variances from par file
    pulsarsCov2 = []

# find which detectors we have
if 'H1' in detectors:
  input_dir_det = input_dir + '/dataH1'
if 'H2' in detectors:
  input_dir_det = input_dir + '/dataH2'
if 'L1' in detectors:
  input_dir_det = input_dir + '/dataL1'
if 'G1' in detectors:
  input_dir_det = input_dir + '/dataG1'
if 'V1' in detectors:
  input_dir_det = input_dir + '/dataV1'

# get the list of fine heterodyned data files
input_files = os.listdir(input_dir_det)
input_files.sort()

# get the list of h0 prior files if set
if do_priors and h0priordir:
  try:
    h0priorfiles = os.listdir(h0priordir)
  except:
    print >> sys.stderr, "Cannot list prior file directory %s" % h0priordir
    sys.exit(0)

  # sort the files
  h0priorfiles.sort()

pulsars = [] # create list for parameter estimation nodes

i = 0
j = 0
count1 = 0
count2 = 0
count3 = 0
while i < len(param_files):
  if ".par" in param_files[i]:
    param_file = pulsar_param_dir + '/' + param_files[i]

    # set pulsar name from PSRJ name in the par file
    try:
      par = pppu.psr_par(param_file)
      pulsar = par['PSRJ']
    except:
      print >> sys.stderr, "Could not read PSRJ from %s" % param_file

    # find whether an input file exists for that pulsar
    k=0
    while k < len(input_files):
      if pulsar in input_files[k]:
        data_file = 1
        break

      data_file = None
      k = k+1

    # if no file is set then tell me and move onto next pulsar
    if data_file == None:
      print >> sys.stderr, "No file set for PSR %s" % (pulsar)
      i = i+1
      continue

    # find if there is a h0 prior file for this pulsar
    if do_priors:
      if h0priordir:
        h0priorfile = None

        for f in h0priorfiles:
          if pulsar in f:
            h0priorfile = h0priordir+'/'+f
            break

      if h0priorfile == None:
        h0priorfile = 'None' # just set the file name to None

    units = None
    ephem = None

    if do_mcmc:
      ephem = par['EPHEM']
      units = par['UNITS']

      if ephempath:
        if ephem is None:
          ephem = 'DE405' # default to DE405

        if 'DE200' in ephem:
          eephem = ephempath + '/earth00-19-DE200.dat.gz'
          sephem = ephempath + '/sun00-19-DE200.dat.gz'
        elif 'DE405' in ephem:
          eephem = ephempath + '/earth00-19-DE405.dat.gz'
          sephem = ephempath + '/sun00-19-DE405.dat.gz'
        elif 'DE414' in ephem:
          eephem = ephempath + '/earth00-19-DE414.dat.gz'
          sephem = ephempath + '/sun00-19-DE414.dat.gz'

        if units is None:
          units = []

        # check time correction file to use
        if 'TDB' in units:
          tephem = ephempath + '/tdb_2000-2019.dat.gz'
        else:
          tephem = ephempath + '/te405_2000-2019.dat.gz'

      # if there is a covariance matrix set this
      m=0
      if do_cov:
        cov_file = None

        for f in cov_files:
          if ".mat" in f:
            p = 'J' + re.sub(r'\.mat',r'',f)

            if pulsar == p:
              # add parameterNode for covariance job
              pulsarsCov.append(ppe.parameterNode(param_job_cov))
              cov_file = covdir + '/' + f
              pulsarsCov[count2].set_covfile(cov_file)

              pulsarsCov[count2].set_earth(eephem)
              pulsarsCov[count2].set_sun(sephem)
              pulsarsCov[count2].set_ephem_time(tephem)

              pulsarsCov[count2].set_mcmc()
              if iterations:
                pulsarsCov[count2].set_iterations(iterations)
              if burnin:
                pulsarsCov[count2].set_burnin(burnin)
              if temperature:
                pulsarsCov[count2].set_temperature(temperature)
              if outputrate:
                pulsarsCov[count2].set_outputrate(outputrate)

              pulsarsCov[count2].set_detectors(detectors)
              pulsarsCov[count2].set_param_file(param_file)
              pulsarsCov[count2].set_pulsar(pulsar)
              pulsarsCov[count2].set_input_dir(input_dir)
              pulsarsCov[count2].set_output_dir(output_dir)

              if do_only:
                pulsarsCov[count2].set_onlyjoint()

              if do_priors:
                pulsarsCov[count2].set_usepriors()

                if h0priordir and h0priorfile:
                  pulsarsCov[count2].set_priorfile(h0priorfile)
                elif "uniform" in h0pri or "jeffreys" in h0pri:
                  pulsarsCov[count2].set_h0prior(h0pri)

                if "gaussian" in h0pri:
                  pulsarsCov[count2].set_h0prior(h0pri)
                  pulsarsCov[count2].set_h0mean(h0mean)
                  pulsarsCov[count2].set_h0sig(h0sig)

                if "uniform" in phipri:
                  pulsarsCov[count2].set_phiprior(phipri)

                if "gaussian" in phipri:
                  pulsarsCov[count2].set_phiprior(phipri)
                  pulsarsCov[count2].set_phimean(phimean)
                  pulsarsCov[count2].set_phisig(phisig)

                if "uniform" in psipri:
                  pulsarsCov[count2].set_psiprior(psipri)

                if "gaussian" in psipri:
                  pulsarsCov[count2].set_psiprior(psipri)
                  pulsarsCov[count2].set_psimean(psimean)
                  pulsarsCov[count2].set_psisig(psisig)

                if "uniform" in iotapri:
                  pulsarsCov[count2].set_iotaprior(iotapri)

                if "gaussian" in iotapri:
                  pulsarsCov[count2].set_iotaprior(iotapri)
                  pulsarsCov[count2].set_iotamean(iotamean)
                  pulsarsCov[count2].set_iotasig(iotasig)

              if h0width:
                pulsarsCov[count2].set_h0width(h0width)

              if phiwidth:
                pulsarsCov[count2].set_phiwidth(phiwidth)

              if psiwidth:
                pulsarsCov[count2].set_psiwidth(psiwidth)

              if ciwidth:
                pulsarsCov[count2].set_ciwidth(ciwidth)

              if chunkmin:
                pulsarsCov[count2].set_chunk_min(chunkmin)

              if chunkmax:
                pulsarsCov[count2].set_chunk_max(chunkmax)

              if do_verbose:
                pulsarsCov[count2].set_verbose()

              dag.add_node(pulsarsCov[count2])
              count2 = count2 + 1
              break;

        # if no covariance file just use uncorrelated uncertainties from the par file
        if cov_file == None:
          pulsarsCov2.append(ppe.parameterNode(parameter_job))

          if do_only:
            pulsarsCov2[count3].set_onlyjoint()

          pulsarsCov2[count3].set_mcmc()
          if iterations:
            pulsarsCov2[count3].set_iterations(iterations)
          if burnin:
            pulsarsCov2[count3].set_burnin(burnin)
          if temperature:
            pulsarsCov2[count3].set_temperature(temperature)
          if outputrate:
            pulsarsCov2[count3].set_outputrate(outputrate)

          pulsarsCov2[count3].set_detectors(detectors)
          pulsarsCov2[count3].set_param_file(param_file)
          pulsarsCov2[count3].set_pulsar(pulsar)
          pulsarsCov2[count3].set_input_dir(input_dir)
          pulsarsCov2[count3].set_output_dir(output_dir)

          if ephempath:
            pulsarsCov2[count3].set_earth(eephem)
            pulsarsCov2[count3].set_sun(sephem)
            pulsarsCov2[count3].set_ephem_time(tephem)

          # set priors
          if do_priors:
            pulsarsCov2[count3].set_usepriors()

            if h0priordir and h0priorfile:
              pulsarsCov2[count3].set_priorfile(h0priorfile)
            elif "uniform" in h0pri or "jeffreys" in h0pri:
              pulsarsCov2[count3].set_h0prior(h0pri)

            if "gaussian" in h0pri:
              pulsarsCov2[count3].set_h0prior(h0pri)
              pulsarsCov2[count3].set_h0mean(h0mean)
              pulsarsCov2[count3].set_h0sig(h0sig)

            if "uniform" in phipri:
              pulsarsCov2[count3].set_phiprior(phipri)

            if "gaussian" in phipri:
              pulsarsCov2[count3].set_phiprior(phipri)
              pulsarsCov2[count3].set_phimean(phimean)
              pulsarsCov2[count3].set_phisig(phisig)

            if "uniform" in psipri:
              pulsarsCov2[count3].set_psiprior(psipri)

            if "gaussian" in psipri:
              pulsarsCov2[count3].set_psiprior(psipri)
              pulsarsCov2[count3].set_psimean(psimean)
              pulsarsCov2[count3].set_psisig(psisig)

            if "uniform" in iotapri:
              pulsarsCov2[count3].set_iotaprior(iotapri)

            if "gaussian" in iotapri:
              pulsarsCov2[count3].set_iotaprior(iotapri)
              pulsarsCov2[count3].set_iotamean(iotamean)
              pulsarsCov2[count3].set_iotasig(iotasig)

          if h0width:
            pulsarsCov2[count3].set_h0width(h0width)

          if phiwidth:
            pulsarsCov2[count3].set_phiwidth(phiwidth)

          if psiwidth:
            pulsarsCov2[count3].set_psiwidth(psiwidth)

          if ciwidth:
            pulsarsCov2[count3].set_ciwidth(ciwidth)

          if chunkmin:
            pulsarsCov2[count3].set_chunk_min(chunkmin)

          if chunkmax:
            pulsarsCov2[count3].set_chunk_max(chunkmax)

          # use cov
          pulsarsCov2[count3].set_usecov()

          dag.add_node(pulsarsCov2[count3])
          count3 = count3 + 1

      else:
        pulsars.append(ppe.parameterNode(parameter_job))

        if do_only:
          pulsars[count1].set_onlyjoint()

        pulsars[count1].set_mcmc()
        if iterations:
          pulsars[count1].set_iterations(iterations)
        if burnin:
          pulsars[count1].set_burnin(burnin)
        if temperature:
          pulsars[count1].set_temperature(temperature)
        if outputrate:
          pulsars[count1].set_outputrate(outputrate)

        pulsars[count1].set_detectors(detectors)
        pulsars[count1].set_param_file(param_file)
        pulsars[count1].set_pulsar(pulsar)
        pulsars[count1].set_input_dir(input_dir)
        pulsars[count1].set_output_dir(output_dir)

        # set priors
        if do_priors:
          pulsars[count1].set_usepriors()

          if h0priordir and h0priorfile:
            pulsars[count1].set_priorfile(h0priorfile)
          elif "uniform" in h0pri or "jeffreys" in h0pri:
            pulsars[count1].set_h0prior(h0pri)

          if "gaussian" in h0pri:
            pulsars[count1].set_h0prior(h0pri)
            pulsars[count1].set_h0mean(h0mean)
            pulsars[count1].set_h0sig(h0sig)

          if "uniform" in phipri:
            pulsars[count1].set_phiprior(phipri)

          if "gaussian" in phipri:
            pulsars[count1].set_phiprior(phipri)
            pulsars[count1].set_phimean(phimean)
            pulsars[count1].set_phisig(phisig)

          if "uniform" in psipri:
            pulsars[count1].set_psiprior(psipri)

          if "gaussian" in psipri:
            pulsars[count1].set_psiprior(psipri)
            pulsars[count1].set_psimean(psimean)
            pulsars[count1].set_psisig(psisig)

          if "uniform" in iotapri:
            pulsars[count1].set_iotaprior(iotapri)

          if "gaussian" in iotapri:
            pulsars[count1].set_iotaprior(iotapri)
            pulsars[count1].set_iotamean(iotamean)
            pulsars[count1].set_iotasig(iotasig)

        if h0width:
          pulsars[count1].set_h0width(h0width)

        if phiwidth:
          pulsars[count1].set_phiwidth(phiwidth)

        if psiwidth:
          pulsars[count1].set_psiwidth(psiwidth)

        if ciwidth:
          pulsars[count1].set_ciwidth(ciwidth)

        if chunkmin:
          pulsars[count1].set_chunk_min(chunkmin)

        if chunkmax:
          pulsars[count1].set_chunk_max(chunkmax)

        dag.add_node(pulsars[count1])
        count1 = count1 + 1

    else: # add a regular job
      pulsars.append(ppe.parameterNode(parameter_job))

      pulsars[j].set_detectors(detectors)
      pulsars[j].set_param_file(param_file)
      pulsars[j].set_pulsar(pulsar)
      pulsars[j].set_input_dir(input_dir)
      pulsars[j].set_output_dir(output_dir)
      if maxh0:
        pulsars[j].set_maxh0(maxh0)
      if minh0:
        pulsars[j].set_minh0(minh0)
      if h0steps:
        pulsars[j].set_h0steps(h0steps)
      if phi0steps:
        pulsars[j].set_phi0steps(phi0steps)
      if cisteps:
        pulsars[j].set_cisteps(cisteps)
      if psisteps:
        pulsars[j].set_psisteps(psisteps)
      if chunkmin:
        pulsars[j].set_chunk_min(chunkmin)
      if chunkmax:
        pulsars[j].set_chunk_max(chunkmax)

      # set priors
      if do_priors:
        pulsars[j].set_usepriors()

        if h0priordir and h0priorfile:
          pulsars[j].set_h0priorfile(h0priorfile)
        elif "uniform" in h0pri or "jeffreys" in h0pri:
          pulsars[j].set_h0prior(h0pri)

        if "gaussian" in h0pri:
          pulsars[j].set_h0prior(h0pri)
          pulsars[j].set_h0mean(h0mean)
          pulsars[j].set_h0sig(h0sig)

        if "uniform" in phipri:
          pulsars[j].set_phiprior(phipri)

        if "gaussian" in phipri:
          pulsars[j].set_phiprior(phipri)
          pulsars[j].set_phimean(phimean)
          pulsars[j].set_phisig(phisig)

        if "uniform" in psipri:
          pulsars[j].set_psiprior(psipri)

        if "gaussian" in psipri:
          pulsars[j].set_psiprior(psipri)
          pulsars[j].set_psimean(psimean)
          pulsars[j].set_psisig(psisig)

        if "uniform" in iotapri:
          pulsars[j].set_iotaprior(iotapri)

        if "gaussian" in iotapri:
          pulsars[j].set_iotaprior(iotapri)
          pulsars[j].set_iotamean(iotamean)
          pulsars[j].set_iotasig(iotasig)

      if do_ul:
        pulsars[j].set_ul(dob_ul)

      if do_verbose:
        pulsars[j].set_verbose()

      dag.add_node(pulsars[j])
    j = j+1

  i = i+1

  print >> sys.stderr, "Set dag job for pulsar %s" % (pulsar)

# write out DAG
dag.write_sub_files()
dag.write_dag()

sys.exit(0)
