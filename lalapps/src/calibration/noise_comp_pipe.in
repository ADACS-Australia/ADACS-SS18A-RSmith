#!/usr/bin/env @PYTHONPROG@
"""
boise_comp_pipe - standalone noise comparison pipeline driver script

$Id$

This script produces the condor submit and dag files to run
the noise comparison between h(t) and calibrated DARM_ERR
"""

__author__ = 'Xavier Siemens<siemens@gravity.phys.uwm.edu>'
__date__ = '$Date$'
__version__ = '$Revision$'[11:-2]


# import standard modules and append the lalapps prefix to the python path
import sys, os, shutil 
import getopt, re, string
import tempfile
import ConfigParser
sys.path.append('@PYTHONLIBDIR@')

# import the modules we need to build the pipeline
from glue import pipeline
import strain

def usage():
  msg = """\
Usage: lalapps_noisecomp_pipe [options]

  -h, --help               display this message
  -v, --version            print version information and exit
  -S, --segment-file       segments file
  -f, --dag-file           basename for .dag file (excluding the .dag)
"""
  print >> sys.stderr, msg

# parse the command line options to figure out what we should do
shortop = "hv:S:f:"
longop = [
  "help",
  "version",
  "segment-file=",
  "dag-file=",
  ]

try:
  opts, args = getopt.getopt(sys.argv[1:], shortop, longop)
except getopt.GetoptError:
  usage()
  sys.exit(1)

config_file = None
log_path = None
basename = None
segment_filename = None

for o, a in opts:
  if o in ("-v", "--version"):
    print "$Id$"
    sys.exit(0)
  elif o in ("-h", "--help"):
    usage()
    sys.exit(0)
  elif o in ("-S", "--segment-file"):
    segment_filename = a
  elif o in ("-f", "--dag-file"):
    basename = os.path.splitext(a)[0]
    config_file = a	
  else:
    print >> sys.stderr, "Unknown option:", o
    usage()
    sys.exit(1)

#log_path = '/usr1/siemens/'
log_path = '/tmp/'
df_pad=128

if not config_file:
  print >> sys.stderr, "No configuration file specified."
  print >> sys.stderr, "Use --help for usage details."
  sys.exit(1)

if not segment_filename:
  print >> sys.stderr, "No segment filename specified."
  print >> sys.stderr, "Use --help for usage details."
  sys.exit(1)

if not basename:
  print >> sys.stderr, "No dag file base name specified."
  print >> sys.stderr, "Use --help for usage details."
  sys.exit(1)

# try and make a directory to store the cache files and job logs
try: os.mkdir('logs')
except: pass

try: os.mkdir('cache')
except: pass

# create the config parser object and read in the ini file
cp = ConfigParser.ConfigParser()
cp.read(config_file)

# create a log file that the Condor jobs will write to
tempfile.tempdir = log_path
tempfile.template = basename + '.log'
logfile = tempfile.mktemp()
fh = open( logfile, "w" )
fh.close()

# create the DAG writing the log to the specified directory
dag = pipeline.CondorDAG(logfile)
dag.set_dag_file(basename)

# create the Condor jobs that will be used in the DAG
df_job = pipeline.LSCDataFindJob('cache','logs',cp)
noise_job = strain.NoiseJob(cp)

# submit files
subsuffix = '.sub'
df_job.set_sub_file( basename + '.datafind'+ subsuffix )
noise_job.set_sub_file( basename + '.noisecomp' + subsuffix )
  
# get the pad and chunk lengths from the values in the ini file
length = int(cp.get('pipeline', 'segment-length'))

# read science segs that are greater or equal to a chunk from the input file
data = pipeline.ScienceData()
data.read(segment_filename,0)

# create the chunks from the science segments
data.make_chunks(length,0,0,0,0)
data.make_short_chunks_from_unused(0,0,0,0,0)
#make_short_chunks_from_unused(self, min_length, overlap=0, play=0, sl=0, excl_play=0)
#I don't really know why the min length needs to be set to 0 but it does.

# get the ifo to filter
ifo = cp.get('pipeline','ifo')
datatype_hoft = cp.get('input','type-hoft')
datatype_derr = cp.get('input','type-derr')

# create all the LSCdataFind jobs to run in sequence
prev_df1 = None
prev_df2 = None
segment_no = -1
for seg in data: 
  segment_no = segment_no + 1
  # find all the h(t) data
  df1 = pipeline.LSCDataFindNode(df_job)
  df1.set_start(str( int(seg.start())-df_pad ) )
  df1.set_end(str( int(seg.end())+df_pad )  )
  df1.set_observatory(ifo[0])
  df1.set_type(datatype_hoft)
  df1.set_name("df1_"+ifo+"_"+str(segment_no))
  
  if prev_df1: 
    df1.add_parent(prev_df1)
  dag.add_node(df1)
  prev_df1 = df1

  # find all the DARM_ERR data
  df2 = pipeline.LSCDataFindNode(df_job)
  df2.set_start(str( int(seg.start())-df_pad ) )
  df2.set_end(str( int(seg.end())+df_pad )  )
  df2.set_observatory(ifo[0])
  df2.set_type(datatype_derr)
  df2.set_name("df2_"+ifo+"_"+str(segment_no))
  
  if prev_df2: 
    df2.add_parent(prev_df2)
  dag.add_node(df2)
  prev_df2 = df2

  #noise jobs
  chunk_number=-1
  for chunk in seg:
    chunk_number=chunk_number+1

    #make the directory where the data's going to go
    gps_str=str(chunk.start())
      
    #Noise job for first ifo  
    noise1 = strain.NoiseNode(noise_job)
    noise1.set_start(chunk.start())
    noise1.set_end(chunk.end())
    noise1.add_var_opt('hoft-cache',df1.get_output()) 
    noise1.add_var_opt('derr-cache',df2.get_output())
    noise1.add_var_opt('output-file','out-'+gps_str+'-'+str(len(chunk))+'.txt')
    noise1.set_name("noise_"+ifo+"_"+str(segment_no)+"_"+str(chunk_number))
    noise1.add_parent(df1)
    noise1.add_parent(df2)
    dag.add_node(noise1)

# write out the DAG
dag.write_sub_files()
dag.write_dag()

# write out a log file for this script
log_fh = open(basename + '.pipeline.log', 'w')
  
log_fh.write( "$Id$" + "\n\n" )
log_fh.write( "Invoked with arguments:\n" )
for o, a in opts:
  log_fh.write( o + ' ' + a + '\n' )
log_fh.write( "\n" )
log_fh.write( "Parsed " + str(len(data)) + " science segments\n" )
total_data = 0
for seg in data:
  for chunk in seg:
    total_data += len(chunk)
print >> log_fh, "total data =", total_data

print >> log_fh, "\n===========================================\n"
print >> log_fh, data
for seg in data:
  print >> log_fh, seg
  for chunk in seg:
    print >> log_fh, chunk, 'length', int(chunk.end())-int(chunk.start())
    endgps=chunk.end()

if 1:
  # write a message telling the user that the DAG has been written
  print "\nCreated a DAG file which can be submitted by executing"
  print "\n   condor_submit_dag", dag.get_dag_file()
  print """\nfrom a condor submit machine (e.g. hydra.phys.uwm.edu)\n
  If you are running LSCdataFind jobs, do not forget to initialize your grid 
  proxy certificate on the condor submit machine by running the commands
  
  unset X509_USER_PROXY
  grid-proxy-init -hours 72

  Enter your pass phrase when promted. The proxy will be valid for 72 hours. 
  If you expect the LSCdataFind jobs to take longer to complete, increase the
  time specified in the -hours option to grid-proxy-init. You can check that 
  the grid proxy has been sucessfully created by executing the command:

  grid-cert-info -all -file /tmp/x509up_u`id -u`
  
  This will also give the expiry time of the proxy. You should also make sure
  that the environment variable LSC_DATAFIND_SERVER is set the hostname and
  optional port of server to query. For example on the UWM medusa cluster this
  you should use

  export LSC_DATAFIND_SERVER=dataserver.phys.uwm.edu

  Contact the administrator of your cluster to find the hostname and port of the
  LSCdataFind server.
  """

sys.exit(0)

