#!/bin/sh

# Run uninstalled scripts in a correctly set-up environment
# Author: Karl Wette, 2014

# parse command line
if test $# -lt 2; then
    echo "usage: $0 [--verbose] \$(LIBTOOL) \$(LIBS) <command> <arguments...>" >&2
    exit 1
fi
verbose=no
if test "x$1" = "x--verbose"; then
    verbose=yes
    shift
fi
libtool="$1"
shift
libs="$1"
shift
cmd="$1"
if test "x$1" = x; then
    cmd=false
else
    shift
    while test "x$1" != x; do
        cmd="${cmd} '$1'"
        shift
    done
fi

# recursively build unique list of all libtool libraries
oldlibs="${libs}"
while :; do

    # store the dependency libraries from 'oldlibs' in 'newlibs'
    newlibs=
    for oldlib in ${oldlibs}; do

        # extract 'dependency_libs' value from 'oldlib'
        if test ! -f "${oldlib}"; then
            echo "$0: ${oldlib} is not a file" >&2
            exit 1
        fi
        oldlibdeps=`. ${oldlib}; echo ${dependency_libs}`

        # add each dependency library to 'newlibs', excluding system libraries
        for newlib in ${oldlibdeps}; do
            case ${newlib} in
                /lib/*|/usr/*|/opt/*)
                    ;;
                *.la)
                    if test "x${newlibs}" = x; then
                        newlibs="${newlib}"
                    else
                        newlibs="${newlibs} ${newlib}"
                    fi
                    ;;
            esac
        done

    done

    # if 'newlibs' is empty, no more libraries, so break
    if test "x${newlibs}" = x; then
        break
    fi

    # otherwise, add any library in 'newlibs' to 'libs', ignoring duplicates
    for newlib in ${newlibs}; do
        case " ${libs} " in
            *" ${newlib} "*)
                ;;
            *)
                libs="${libs} ${newlib}"
                ;;
        esac
    done

    # start over by looking for the dependency libraries of 'newlibs'
    oldlibs="${newlibs}"

done

# build libtool command line
ltcmd="${libtool} --mode=execute"
for lib in ${libs}; do
    ltcmd="${ltcmd} -dlopen ${lib}"
done

# print verbose information
if test "x${verbose}" = xyes; then
    echo "========== $0 =========="
    eval "${ltcmd} env" 2>/dev/null | sed -n -e '/^LAL/p;/PATH=/p' | sed -e 's/^/environment: /'
    echo "command: ${ltcmd} ${cmd}"
    echo "---------- $0 ----------"
    echo
fi

# run command under libtool
eval "${ltcmd} ${cmd}"
