AC_PREREQ([2.63])
AC_INIT([lalpulsar],[1.4.0.1],[lal-discuss@gravity.phys.uwm.edu])
AM_CONFIG_HEADER([include/config.h src/LALPulsarConfig.h])
AC_CONFIG_SRCDIR([src/ComputeFstat.c])
AC_CONFIG_AUX_DIR([gnuscripts])
AC_CONFIG_MACRO_DIR([gnuscripts])
AC_CONFIG_FILES([ \
  lalpulsar.spec \
  lalpulsar.pc \
  Makefile \
  gnuscripts/Makefile \
  debian/Makefile \
  include/Makefile \
  include/lal/Makefile \
  src/Makefile \
  swig/Makefile \
  swig/octave/Makefile \
  swig/python/Makefile \
  test/Makefile
])
AM_INIT_AUTOMAKE([1.11 foreign color-tests parallel-tests])

AC_CANONICAL_HOST

LALSUITE_ARG_VAR
LALSUITE_DISTCHECK_CONFIGURE_FLAGS

# set library api info
# 1. start with version information of "0:0:0" for each libtool library
# 2. update the version information only immediately before a public
#    release of your software. More frequent updates are unnecessary,
#    and only guarantee that the current interface number gets larger
#    faster.
# 3. if the library source code has changed at all since the last
#    update, then increment revision ("c:r:a" becomes "c:r+1:a").
# 4. if any interfaces have been added, removed, or changed since the
#    last update, increment current, and set revision to 0.
# 5. if any interfaces have been added since the last public release,
#    then increment age.
# 6. if any interfaces have been removed since the last public release,
#    then set age to 0.
AC_SUBST([LIBCURRENT],[3])
AC_SUBST([LIBREVISION],[0])
AC_SUBST([LIBAGE],[0])
AC_SUBST([LIBVERSION],[${LIBCURRENT}:${LIBREVISION}:${LIBAGE}])

# nightly build
LALSUITE_ENABLE_NIGHTLY

# enable LALXML support
LALSUITE_ENABLE_LALXML

# debug
LALSUITE_ENABLE_DEBUG

# boinc
LALSUITE_ENABLE_BOINC

# enable strict gcc flags
LALSUITE_ENABLE_GCC_FLAGS

LALSUITE_SWIG_REQUIRE_CXX

# put version/configure info in config header
lalpulsar_version_major=`echo "$VERSION" | cut -d. -f1`
lalpulsar_version_minor=`echo "$VERSION" | cut -d. -f2`
lalpulsar_version_micro=`echo "$VERSION" | cut -d. -f3`
lalpulsar_version_devel=`echo "$VERSION" | cut -d. -f4-`
test -z "$lalpulsar_version_micro" && lalpulsar_version_micro=0
test -z "$lalpulsar_version_devel" && lalpulsar_version_devel=0
lalpulsar_configure_date=`date +"%Y-%m-%dT%H:%M:%S%z"`
AC_DEFINE_UNQUOTED([LALPULSAR_VERSION],["$VERSION"],[LALPulsar Version])
AC_DEFINE_UNQUOTED([LALPULSAR_VERSION_MAJOR],[$lalpulsar_version_major],
                   [LALPulsar Version Major Number])
AC_DEFINE_UNQUOTED([LALPULSAR_VERSION_MINOR],[$lalpulsar_version_minor],
                   [LALPulsar Version Minor Number])
AC_DEFINE_UNQUOTED([LALPULSAR_VERSION_MICRO],[$lalpulsar_version_micro],
                   [LALPulsar Version Micro Number])
AC_DEFINE_UNQUOTED([LALPULSAR_VERSION_DEVEL],[$lalpulsar_version_devel],
                   [LALPulsar Version Devel Number])
AC_DEFINE_UNQUOTED([LALPULSAR_CONFIGURE_ARGS],["$ac_configure_args"],
                   [LALPulsar Configure Arguments])
AC_DEFINE_UNQUOTED([LALPULSAR_CONFIGURE_DATE],["$lalpulsar_configure_date"],
                   [LALPulsar Configure Date])

# workaround broken libtool multilib support on sl6
LALSUITE_MULTILIB_LIBTOOL_HACK

# use silent build rules
AM_SILENT_RULES([yes])

# check for C/C++ compilers
LALSUITE_PROG_CC_CXX

# checks for programs
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_AWK
AC_PROG_SED
AM_PATH_PYTHON([2.6],,[AC_MSG_ERROR([Python-2.6, or higher, is required])])

# check for supported mac os x version
LALSUITE_OSX_VERSION_CHECK

# link tests using libtool
LALSUITE_USE_LIBTOOL

# check for header files
AC_HEADER_STDC

# check for required libraries
AC_CHECK_LIB([m],[main],,[AC_MSG_ERROR([could not find the math library])])

# check for gsl
PKG_CHECK_MODULES([GSL],[gsl],[true],[false])
CPPFLAGS="$CPPFLAGS $GSL_CFLAGS"
LIBS="$LIBS $GSL_LIBS"
AC_CHECK_LIB([gslcblas],[main],,[AC_MSG_ERROR([could not find the gsl library])])
AC_CHECK_LIB([gsl],[gsl_strerror],,[AC_MSG_ERROR([could not find the gsl library])])
LALSUITE_ENABLE_FAST_GSL

# check for gsl headers
AC_CHECK_HEADERS([gsl/gsl_errno.h],,[AC_MSG_ERROR([could not find the gsl/gsl_errno.h header])])

if test "$lalxml" = "true"; then
  # check for libxml2
  PKG_CHECK_MODULES([LIBXML2],[libxml-2.0 >= 2.6],[true],[false])
  CPPFLAGS="$CPPFLAGS $LIBXML2_CFLAGS"
  LIBS="$LIBS $LIBXML2_LIBS"
  AC_CHECK_LIB([xml2],[xmlInitParser],,[AC_MSG_WARN([cannot find the xml2 library])])
fi

# for boinc enabled build do checks for lal in c++ mode
if test "${boinc}" = "true" ; then
  AC_LANG_PUSH([C++])
fi

# check for lal libraries and headers
LALSUITE_CHECK_LIB([LAL],[6.7.0],[LALVersion],[lal/LALStdio.h])

# check that lal has been buil with boinc support, for boinc build
if test "${boinc}" = "true" ; then
  LALSUITE_CHECK_BOINC
fi

# check for lalsupport, needed for test suite
LALSUITE_CHECK_LIB([LALSupport],[6.7.0],[LALOpenDataFile],[lal/FileIO.h])

# back to c mode
if test "${boinc}" = "true" ; then
  AC_LANG_POP([C++])
fi

# check for lalxml
LALSUITE_CHECK_OPT_LIB([LALXML],[1.1.3],[XLALXMLFilePrintElements],[lal/LALXML.h])

# check for SWIG wrapping
LALSUITE_ENABLE_SWIG
if test "$lalxml" = "true"; then
   LALSUITE_SWIG_USE([LALXML])
fi

# add gcc specific flags
if test "$GCC" = yes; then
  CFLAGS="$CFLAGS $lal_gcc_flags"

  # add mac os x specific flags
  if test "x$MACOSX_VERSION" != "x"; then
    CFLAGS="$CFLAGS -mmacosx-version-min=10.4"
  fi
fi

# output
LAL_HEADER_LINK=${ac_aux_dir}/header-link.mk
AC_SUBST_FILE([LAL_HEADER_LINK])
AC_PROG_MAKE_SET
AC_OUTPUT
echo "
=================================================================

        LALPulsar has now been successfully configured:

            LALXML library support is $LALXML_ENABLE_VAL
            SWIG wrappings for Octave are $SWIG_OCTAVE_ENABLE_VAL
            SWIG wrappings for Python are $SWIG_PYTHON_ENABLE_VAL

        and will be installed under the directory:

            ${prefix}

        Now run 'make' to build LALPulsar
        and run 'make install' to install LALPulsar

================================================================="
