%!PS-Adobe-3.0 EPSF-3.0
%%Title: (resamp_100x2_start.pdf)
%%Version: 1 4
%%CreationDate: (D:20030806154228Z)
%%DocumentData: Clean7Bit
%%BoundingBox: 50 13 550 406
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
50 13 moveto 550 13 lineto 550 406 lineto 50 406 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[ 32 /space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus
/comma/minus/period/slash/zero/one
/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal
/greater/question/at/A/B/C
/D/E/F/G/H/I
/J/K/L/M/N/O
/P/Q/R/S/T/U
/V/W/X/Y/Z/bracketleft
/backslash/bracketright/asciicircum/underscore/quoteleft/a
/b/c/d/e/f/g
/h/i/j/k/l/m
/n/o/p/q/r/s
/t/u/v/w/x/y
/z/braceleft/bar/braceright/asciitilde/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/exclamdown/cent/sterling
/fraction/yen/florin/section/currency/quotesingle
/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
/.notdef/endash/dagger/daggerdbl/periodcentered/.notdef
/paragraph/bullet/quotesinglbase/quotedblbase/quotedblright/guillemotright
/ellipsis/perthousand/.notdef/questiondown/.notdef/grave
/acute/circumflex/tilde/macron/breve/dotaccent
/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/emdash/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/AE/.notdef/ordfeminine/.notdef/.notdef
/.notdef/.notdef/Lslash/Oslash/OE/ordmasculine
/.notdef/.notdef/.notdef/.notdef/.notdef/ae
/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
/lslash/oslash/oe/germandbls/.notdef/.notdef
/.notdef/.notdef
/N8/Helvetica -1 TZ
%%IncludeResource Helvetica-BoldOblique
[/N20/Helvetica-BoldOblique -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
50 13 500 393 rectclip
50 13 500 393 re
W
n
0.100006 0 0 0.100006 0 0 cm
q
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
748.333 474.167 4466.67 3521.67 re
1 setgray
S
[5 40 ] 0 d
3.33333 w
n
1027.5 474.167 m
1027.5 3995.83 l
0  setgray
S
n
1027.5 3995.83 m
1027.5 3995.83 l
S
n
2423.33 474.167 m
2423.33 3995.83 l
S
n
2423.33 3995.83 m
2423.33 3995.83 l
S
n
3819.17 474.167 m
3819.17 3995.83 l
S
n
3819.17 3995.83 m
3819.17 3995.83 l
S
n
5215 474.167 m
5215 3995.83 l
S
n
5215 3995.83 m
5215 3995.83 l
S
n
748.333 474.167 m
5215 474.167 l
S
n
5215 474.167 m
5215 474.167 l
S
n
748.333 1061.67 m
5215 1061.67 l
S
n
5215 1061.67 m
5215 1061.67 l
S
n
748.333 1648.33 m
5215 1648.33 l
S
n
5215 1648.33 m
5215 1648.33 l
S
n
748.333 2235 m
5215 2235 l
S
n
5215 2235 m
5215 2235 l
S
n
748.333 2822.5 m
5215 2822.5 l
S
n
5215 2822.5 m
5215 2822.5 l
S
n
748.333 3409.17 m
5215 3409.17 l
S
n
5215 3409.17 m
5215 3409.17 l
S
n
748.333 3995.83 m
5215 3995.83 l
S
n
5215 3995.83 m
5215 3995.83 l
S
[] 0 d
5 w
n
748.333 474.167 m
5215 474.167 l
S
n
748.333 3995.83 m
5215 3995.83 l
S
n
748.333 474.167 m
748.333 3995.83 l
S
n
5215 474.167 m
5215 3995.83 l
S
n
748.333 474.167 m
5215 474.167 l
S
n
748.333 474.167 m
748.333 3995.83 l
S
n
1027.5 474.167 m
1027.5 519.167 l
S
n
1027.5 3995.83 m
1027.5 3951.67 l
S
q
10 0 0 10 0 0 cm
94.4167 35.3333 m
/N8 10 Tf
(100)
[5.56 5.56 5.56 ] pdfxs
Q
n
2423.33 474.167 m
2423.33 519.167 l
S
n
2423.33 3995.83 m
2423.33 3951.67 l
S
q
10 0 0 10 0 0 cm
224.333 35.3333 m
/N8 10 Tf
(100.005)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
3819.17 474.167 m
3819.17 519.167 l
S
n
3819.17 3995.83 m
3819.17 3951.67 l
S
q
10 0 0 10 0 0 cm
366.667 35.3333 m
/N8 10 Tf
(100.01)
[5.56 5.56 5.56 2.78 5.56 5.56 ] pdfxs
Q
n
5215 474.167 m
5215 519.167 l
S
n
5215 3995.83 m
5215 3951.67 l
S
q
10 0 0 10 0 0 cm
503.5 35.3333 m
/N8 10 Tf
(100.015)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
748.333 474.167 m
793.333 474.167 l
S
n
5215 474.167 m
5170.83 474.167 l
S
q
10 0 0 10 0 0 cm
52.3333 43.75 m
/N8 10 Tf
(-1.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
748.333 1061.67 m
793.333 1061.67 l
S
n
5215 1061.67 m
5170.83 1061.67 l
S
q
10 0 0 10 0 0 cm
60.6667 102.5 m
/N8 10 Tf
(-1)
[5.84 5.56 ] pdfxs
Q
n
748.333 1648.33 m
793.333 1648.33 l
S
n
5215 1648.33 m
5170.83 1648.33 l
S
q
10 0 0 10 0 0 cm
52.3333 161.167 m
/N8 10 Tf
(-0.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
748.333 2235 m
793.333 2235 l
S
n
5215 2235 m
5170.83 2235 l
S
q
10 0 0 10 0 0 cm
66.5 219.833 m
/N8 10 Tf
(0) show
Q
n
748.333 2822.5 m
793.333 2822.5 l
S
n
5215 2822.5 m
5170.83 2822.5 l
S
q
10 0 0 10 0 0 cm
58.1667 278.583 m
/N8 10 Tf
(0.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
748.333 3409.17 m
793.333 3409.17 l
S
n
5215 3409.17 m
5170.83 3409.17 l
S
q
10 0 0 10 0 0 cm
66.5 337.25 m
/N8 10 Tf
(1) show
Q
n
748.333 3995.83 m
793.333 3995.83 l
S
n
5215 3995.83 m
5170.83 3995.83 l
S
q
10 0 0 10 0 0 cm
58.1667 395.917 m
/N8 10 Tf
(1.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
748.333 474.167 m
5215 474.167 l
S
n
748.333 3995.83 m
5215 3995.83 l
S
n
748.333 474.167 m
748.333 3995.83 l
S
n
5215 474.167 m
5215 3995.83 l
S
Q
q
n
748 473 m
748 3996 l
5216 3996 l
5216 473 l
h
W
n
5 w
1 j
n
3532.5 1529.17 m
3550 1565 l
3566.67 1602.5 l
3584.17 1640.83 l
3600.83 1680.83 l
3617.5 1720.83 l
3635 1761.67 l
3651.67 1802.5 l
3669.17 1845 l
3685.83 1887.5 l
3703.33 1930.83 l
3720 1975 l
3737.5 2019.17 l
3754.17 2063.33 l
3770.83 2107.5 l
3788.33 2152.5 l
3805 2197.5 l
3822.5 2242.5 l
3839.17 2287.5 l
3856.67 2332.5 l
3873.33 2377.5 l
3890.83 2421.67 l
3907.5 2465.83 l
3924.16 2510 l
3941.66 2553.33 l
3958.33 2596.67 l
3975.83 2639.17 l
3992.5 2681.67 l
4010 2722.5 l
4026.66 2763.33 l
4044.16 2803.33 l
4060.83 2841.66 l
4077.5 2880 l
4095 2917.5 l
4111.66 2953.33 l
4129.16 2988.33 l
4145.83 3022.5 l
4163.33 3055 l
4180 3086.66 l
4197.5 3117.5 l
4214.16 3146.66 l
4230.83 3174.16 l
4248.33 3200 l
4265 3225 l
4282.5 3248.33 l
4299.16 3270.83 l
4316.66 3290.83 l
4333.33 3310 l
4350.83 3327.5 l
4367.5 3343.33 l
4385 3357.5 l
4401.66 3370 l
4418.33 3380 l
4435.83 3389.16 l
4452.5 3396.66 l
4470 3402.5 l
4486.66 3406.66 l
4504.16 3409.16 l
4520.83 3409.16 l
4538.33 3408.33 l
4554.99 3405 l
4571.66 3400.83 l
4589.16 3394.16 l
4605.83 3385.83 l
4623.33 3376.66 l
4639.99 3365 l
4657.49 3351.66 l
4674.16 3336.66 l
4691.66 3320.83 l
4708.33 3302.5 l
4724.99 3283.33 l
4742.49 3262.5 l
4759.16 3239.16 l
4776.66 3215.83 l
4793.33 3190 l
4810.83 3163.33 l
4827.49 3135 l
4844.99 3105 l
4861.66 3074.17 l
4878.33 3042.5 l
4895.83 3009.17 l
4912.49 2974.17 l
4929.99 2939.17 l
4946.66 2902.5 l
4964.16 2865 l
4980.83 2826.67 l
4998.33 2787.5 l
5014.99 2746.67 l
5031.66 2705.83 l
5049.16 2665 l
5065.83 2622.5 l
5083.33 2580 l
5099.99 2536.67 l
5117.49 2492.5 l
5134.16 2448.33 l
5151.66 2404.17 l
5168.32 2359.17 l
5185.82 2315 l
5202.49 2270 l
5215.82 2235 l
1 0 0 setrgbcolor
S
n
1845.83 3366.67 m
1862.5 3354.17 l
1880 3339.17 l
1896.67 3323.33 l
1914.17 3305.83 l
1930.83 3286.67 l
1948.33 3265.83 l
1965 3243.33 l
1982.5 3219.17 l
1999.17 3194.17 l
2015.83 3167.5 l
2033.33 3139.17 l
2050 3110 l
2067.5 3079.17 l
2084.17 3047.5 l
2101.67 3014.17 l
2118.33 2980 l
2135.83 2945 l
2152.5 2908.33 l
2169.16 2870.83 l
2186.66 2832.5 l
2203.33 2793.34 l
2220.83 2753.34 l
2237.5 2712.5 l
2255 2671.67 l
2271.66 2629.17 l
2289.16 2586.67 l
2305.83 2543.34 l
2322.5 2500 l
2340 2455.84 l
2356.66 2410.84 l
2374.16 2366.67 l
2390.83 2321.67 l
2408.33 2276.67 l
2425 2231.67 l
2442.5 2186.67 l
2459.16 2141.67 l
2475.83 2096.67 l
2493.33 2052.5 l
2510 2008.34 l
2527.5 1964.17 l
2544.16 1920.84 l
2561.66 1877.5 l
2578.33 1835 l
2595.83 1792.5 l
2612.5 1751.67 l
2629.16 1710.84 l
2646.66 1670.84 l
2663.33 1631.67 l
2680.83 1594.17 l
2697.5 1556.67 l
2715 1520 l
2731.66 1485 l
2749.16 1450.84 l
2765.83 1418.34 l
2783.33 1386.67 l
2799.99 1355.84 l
2816.66 1326.67 l
2834.16 1299.17 l
2850.83 1272.5 l
2868.33 1247.5 l
2884.99 1224.17 l
2902.49 1201.67 l
2919.16 1181.67 l
2936.66 1162.5 l
2953.33 1145 l
2969.99 1129.17 l
2987.49 1115 l
3004.16 1102.5 l
3021.66 1090.84 l
3038.33 1081.67 l
3055.83 1074.17 l
3072.49 1068.34 l
3089.99 1064.17 l
3106.66 1062.51 l
3123.33 1061.67 l
3140.83 1062.51 l
3157.49 1065.01 l
3174.99 1070.01 l
3191.66 1075.84 l
3209.16 1084.17 l
3225.83 1093.34 l
3243.33 1105.01 l
3259.99 1118.34 l
3276.66 1132.5 l
3294.16 1149.17 l
3310.83 1166.67 l
3328.33 1185.84 l
3344.99 1206.67 l
3362.49 1229.17 l
3379.16 1253.34 l
3396.66 1279.17 l
3413.32 1305.84 l
3429.99 1333.34 l
3447.49 1363.34 l
3464.16 1394.17 l
3481.66 1425.84 l
3498.32 1459.17 l
3515.82 1493.34 l
3532.49 1529.17 l
S
n
1027.5 2235 m
1045 2280.83 l
1061.67 2325 l
1079.17 2370 l
1095.83 2415 l
1113.33 2459.17 l
1130 2503.33 l
1147.5 2546.67 l
1164.17 2590 l
1181.67 2632.5 l
1198.33 2675 l
1215 2715.83 l
1232.5 2756.67 l
1249.17 2796.67 l
1266.67 2835.83 l
1283.33 2874.17 l
1300.83 2911.67 l
1317.5 2947.5 l
1335 2982.5 l
1351.67 3016.67 l
1368.33 3050 l
1385.83 3081.67 l
1402.5 3112.5 l
1420 3141.66 l
1436.66 3170 l
1454.16 3195.83 l
1470.83 3221.66 l
1488.33 3245 l
1505 3267.5 l
1521.66 3288.33 l
1539.16 3307.5 l
1555.83 3325 l
1573.33 3340.83 l
1590 3355 l
1607.5 3367.5 l
1624.16 3379.16 l
1641.66 3388.33 l
1658.33 3395.83 l
1675 3401.66 l
1692.5 3405.83 l
1709.16 3408.33 l
1726.66 3409.16 l
1743.33 3408.33 l
1760.83 3405.83 l
1777.5 3401.66 l
1795 3395 l
1811.66 3387.5 l
1828.33 3378.33 l
1845.83 3366.66 l
S
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
1057.5 2235 m
1057.5 2218.43 1044.07 2205 1027.5 2205 c
1010.93 2205 997.5 2218.43 997.5 2235 c
997.5 2251.57 1010.93 2265 1027.5 2265 c
1044.07 2265 1057.5 2251.57 1057.5 2235 c
0 0 1 setrgbcolor
S
n
1091.67 2235 m
1091.67 2218.43 1078.23 2205 1061.67 2205 c
1045.1 2205 1031.67 2218.43 1031.67 2235 c
1031.67 2251.57 1045.1 2265 1061.67 2265 c
1078.23 2265 1091.67 2251.57 1091.67 2235 c
S
n
1125.83 2235 m
1125.83 2218.43 1112.4 2205 1095.83 2205 c
1079.26 2205 1065.83 2218.43 1065.83 2235 c
1065.83 2251.57 1079.26 2265 1095.83 2265 c
1112.4 2265 1125.83 2251.57 1125.83 2235 c
S
n
1160 2235 m
1160 2218.43 1146.57 2205 1130 2205 c
1113.43 2205 1100 2218.43 1100 2235 c
1100 2251.57 1113.43 2265 1130 2265 c
1146.57 2265 1160 2251.57 1160 2235 c
S
n
1194.17 2235 m
1194.17 2218.43 1180.73 2205 1164.17 2205 c
1147.6 2205 1134.17 2218.43 1134.17 2235 c
1134.17 2251.57 1147.6 2265 1164.17 2265 c
1180.73 2265 1194.17 2251.57 1194.17 2235 c
S
n
1228.33 2235 m
1228.33 2218.43 1214.9 2205 1198.33 2205 c
1181.76 2205 1168.33 2218.43 1168.33 2235 c
1168.33 2251.57 1181.76 2265 1198.33 2265 c
1214.9 2265 1228.33 2251.57 1228.33 2235 c
S
n
1262.5 2235 m
1262.5 2218.43 1249.07 2205 1232.5 2205 c
1215.93 2205 1202.5 2218.43 1202.5 2235 c
1202.5 2251.57 1215.93 2265 1232.5 2265 c
1249.07 2265 1262.5 2251.57 1262.5 2235 c
S
n
1296.67 2235 m
1296.67 2218.43 1283.23 2205 1266.67 2205 c
1250.1 2205 1236.67 2218.43 1236.67 2235 c
1236.67 2251.57 1250.1 2265 1266.67 2265 c
1283.23 2265 1296.67 2251.57 1296.67 2235 c
S
n
1330.83 2235 m
1330.83 2218.43 1317.4 2205 1300.83 2205 c
1284.26 2205 1270.83 2218.43 1270.83 2235 c
1270.83 2251.57 1284.26 2265 1300.83 2265 c
1317.4 2265 1330.83 2251.57 1330.83 2235 c
S
n
1365 2235 m
1365 2218.43 1351.57 2205 1335 2205 c
1318.43 2205 1305 2218.43 1305 2235 c
1305 2251.57 1318.43 2265 1335 2265 c
1351.57 2265 1365 2251.57 1365 2235 c
S
n
1398.33 3050 m
1398.33 3033.43 1384.9 3020 1368.33 3020 c
1351.76 3020 1338.33 3033.43 1338.33 3050 c
1338.33 3066.57 1351.76 3080 1368.33 3080 c
1384.9 3080 1398.33 3066.57 1398.33 3050 c
S
n
1432.5 3112.5 m
1432.5 3095.93 1419.07 3082.5 1402.5 3082.5 c
1385.93 3082.5 1372.5 3095.93 1372.5 3112.5 c
1372.5 3129.07 1385.93 3142.5 1402.5 3142.5 c
1419.07 3142.5 1432.5 3129.07 1432.5 3112.5 c
S
n
1466.67 3170 m
1466.67 3153.43 1453.23 3140 1436.67 3140 c
1420.1 3140 1406.67 3153.43 1406.67 3170 c
1406.67 3186.57 1420.1 3200 1436.67 3200 c
1453.23 3200 1466.67 3186.57 1466.67 3170 c
S
n
1500.83 3221.67 m
1500.83 3205.1 1487.4 3191.67 1470.83 3191.67 c
1454.26 3191.67 1440.83 3205.1 1440.83 3221.67 c
1440.83 3238.23 1454.26 3251.67 1470.83 3251.67 c
1487.4 3251.67 1500.83 3238.23 1500.83 3221.67 c
S
n
1535 3267.5 m
1535 3250.93 1521.57 3237.5 1505 3237.5 c
1488.43 3237.5 1475 3250.93 1475 3267.5 c
1475 3284.07 1488.43 3297.5 1505 3297.5 c
1521.57 3297.5 1535 3284.07 1535 3267.5 c
S
n
1569.17 3307.5 m
1569.17 3290.93 1555.73 3277.5 1539.17 3277.5 c
1522.6 3277.5 1509.17 3290.93 1509.17 3307.5 c
1509.17 3324.07 1522.6 3337.5 1539.17 3337.5 c
1555.73 3337.5 1569.17 3324.07 1569.17 3307.5 c
S
n
1603.33 3340.83 m
1603.33 3324.26 1589.9 3310.83 1573.33 3310.83 c
1556.76 3310.83 1543.33 3324.26 1543.33 3340.83 c
1543.33 3357.4 1556.76 3370.83 1573.33 3370.83 c
1589.9 3370.83 1603.33 3357.4 1603.33 3340.83 c
S
n
1637.5 3367.5 m
1637.5 3350.93 1624.07 3337.5 1607.5 3337.5 c
1590.93 3337.5 1577.5 3350.93 1577.5 3367.5 c
1577.5 3384.07 1590.93 3397.5 1607.5 3397.5 c
1624.07 3397.5 1637.5 3384.07 1637.5 3367.5 c
S
n
1671.67 3388.33 m
1671.67 3371.76 1658.23 3358.33 1641.67 3358.33 c
1625.1 3358.33 1611.67 3371.76 1611.67 3388.33 c
1611.67 3404.9 1625.1 3418.33 1641.67 3418.33 c
1658.23 3418.33 1671.67 3404.9 1671.67 3388.33 c
S
n
1705 3401.67 m
1705 3385.1 1691.57 3371.67 1675 3371.67 c
1658.43 3371.67 1645 3385.1 1645 3401.67 c
1645 3418.23 1658.43 3431.67 1675 3431.67 c
1691.57 3431.67 1705 3418.23 1705 3401.67 c
S
n
1739.17 3408.33 m
1739.17 3391.76 1725.74 3378.33 1709.17 3378.33 c
1692.6 3378.33 1679.17 3391.76 1679.17 3408.33 c
1679.17 3424.9 1692.6 3438.33 1709.17 3438.33 c
1725.74 3438.33 1739.17 3424.9 1739.17 3408.33 c
S
n
1773.33 3408.33 m
1773.33 3391.76 1759.9 3378.33 1743.33 3378.33 c
1726.76 3378.33 1713.33 3391.76 1713.33 3408.33 c
1713.33 3424.9 1726.76 3438.33 1743.33 3438.33 c
1759.9 3438.33 1773.33 3424.9 1773.33 3408.33 c
S
n
1807.5 3401.67 m
1807.5 3385.1 1794.07 3371.67 1777.5 3371.67 c
1760.93 3371.67 1747.5 3385.1 1747.5 3401.67 c
1747.5 3418.23 1760.93 3431.67 1777.5 3431.67 c
1794.07 3431.67 1807.5 3418.23 1807.5 3401.67 c
S
n
1841.67 3387.5 m
1841.67 3370.93 1828.24 3357.5 1811.67 3357.5 c
1795.1 3357.5 1781.67 3370.93 1781.67 3387.5 c
1781.67 3404.07 1795.1 3417.5 1811.67 3417.5 c
1828.24 3417.5 1841.67 3404.07 1841.67 3387.5 c
S
n
1875.83 3366.67 m
1875.83 3350.1 1862.4 3336.67 1845.83 3336.67 c
1829.26 3336.67 1815.83 3350.1 1815.83 3366.67 c
1815.83 3383.23 1829.26 3396.67 1845.83 3396.67 c
1862.4 3396.67 1875.83 3383.23 1875.83 3366.67 c
S
n
1910 3340 m
1910 3323.43 1896.57 3310 1880 3310 c
1863.43 3310 1850 3323.43 1850 3340 c
1850 3356.57 1863.43 3370 1880 3370 c
1896.57 3370 1910 3356.57 1910 3340 c
S
n
1944.17 3305.83 m
1944.17 3289.26 1930.74 3275.83 1914.17 3275.83 c
1897.6 3275.83 1884.17 3289.26 1884.17 3305.83 c
1884.17 3322.4 1897.6 3335.83 1914.17 3335.83 c
1930.74 3335.83 1944.17 3322.4 1944.17 3305.83 c
S
n
1978.33 3265.83 m
1978.33 3249.26 1964.9 3235.83 1948.33 3235.83 c
1931.76 3235.83 1918.33 3249.26 1918.33 3265.83 c
1918.33 3282.4 1931.76 3295.83 1948.33 3295.83 c
1964.9 3295.83 1978.33 3282.4 1978.33 3265.83 c
S
n
2012.5 3219.17 m
2012.5 3202.6 1999.07 3189.17 1982.5 3189.17 c
1965.93 3189.17 1952.5 3202.6 1952.5 3219.17 c
1952.5 3235.73 1965.93 3249.17 1982.5 3249.17 c
1999.07 3249.17 2012.5 3235.73 2012.5 3219.17 c
S
n
2045.83 3167.5 m
2045.83 3150.93 2032.4 3137.5 2015.83 3137.5 c
1999.26 3137.5 1985.83 3150.93 1985.83 3167.5 c
1985.83 3184.07 1999.26 3197.5 2015.83 3197.5 c
2032.4 3197.5 2045.83 3184.07 2045.83 3167.5 c
S
n
2080 3110 m
2080 3093.43 2066.57 3080 2050 3080 c
2033.43 3080 2020 3093.43 2020 3110 c
2020 3126.57 2033.43 3140 2050 3140 c
2066.57 3140 2080 3126.57 2080 3110 c
S
n
2114.17 3047.5 m
2114.17 3030.93 2100.74 3017.5 2084.17 3017.5 c
2067.6 3017.5 2054.17 3030.93 2054.17 3047.5 c
2054.17 3064.07 2067.6 3077.5 2084.17 3077.5 c
2100.74 3077.5 2114.17 3064.07 2114.17 3047.5 c
S
n
2148.33 2980 m
2148.33 2963.43 2134.9 2950 2118.33 2950 c
2101.76 2950 2088.33 2963.43 2088.33 2980 c
2088.33 2996.57 2101.76 3010 2118.33 3010 c
2134.9 3010 2148.33 2996.57 2148.33 2980 c
S
n
2182.5 2908.33 m
2182.5 2891.76 2169.07 2878.33 2152.5 2878.33 c
2135.93 2878.33 2122.5 2891.76 2122.5 2908.33 c
2122.5 2924.9 2135.93 2938.33 2152.5 2938.33 c
2169.07 2938.33 2182.5 2924.9 2182.5 2908.33 c
S
n
2216.67 2832.5 m
2216.67 2815.93 2203.24 2802.5 2186.67 2802.5 c
2170.1 2802.5 2156.67 2815.93 2156.67 2832.5 c
2156.67 2849.07 2170.1 2862.5 2186.67 2862.5 c
2203.24 2862.5 2216.67 2849.07 2216.67 2832.5 c
S
n
2250.83 2753.33 m
2250.83 2736.76 2237.4 2723.33 2220.83 2723.33 c
2204.26 2723.33 2190.83 2736.76 2190.83 2753.33 c
2190.83 2769.9 2204.26 2783.33 2220.83 2783.33 c
2237.4 2783.33 2250.83 2769.9 2250.83 2753.33 c
S
n
2285 2671.67 m
2285 2655.1 2271.57 2641.67 2255 2641.67 c
2238.43 2641.67 2225 2655.1 2225 2671.67 c
2225 2688.23 2238.43 2701.67 2255 2701.67 c
2271.57 2701.67 2285 2688.23 2285 2671.67 c
S
n
2319.17 2586.67 m
2319.17 2570.1 2305.74 2556.67 2289.17 2556.67 c
2272.6 2556.67 2259.17 2570.1 2259.17 2586.67 c
2259.17 2603.23 2272.6 2616.67 2289.17 2616.67 c
2305.74 2616.67 2319.17 2603.23 2319.17 2586.67 c
S
n
2352.5 2500 m
2352.5 2483.43 2339.07 2470 2322.5 2470 c
2305.93 2470 2292.5 2483.43 2292.5 2500 c
2292.5 2516.57 2305.93 2530 2322.5 2530 c
2339.07 2530 2352.5 2516.57 2352.5 2500 c
S
n
2386.67 2411.67 m
2386.67 2395.1 2373.24 2381.67 2356.67 2381.67 c
2340.1 2381.67 2326.67 2395.1 2326.67 2411.67 c
2326.67 2428.23 2340.1 2441.67 2356.67 2441.67 c
2373.24 2441.67 2386.67 2428.23 2386.67 2411.67 c
S
n
2420.83 2321.67 m
2420.83 2305.1 2407.4 2291.67 2390.83 2291.67 c
2374.26 2291.67 2360.83 2305.1 2360.83 2321.67 c
2360.83 2338.23 2374.26 2351.67 2390.83 2351.67 c
2407.4 2351.67 2420.83 2338.23 2420.83 2321.67 c
S
n
2455 2231.67 m
2455 2215.1 2441.57 2201.67 2425 2201.67 c
2408.43 2201.67 2395 2215.1 2395 2231.67 c
2395 2248.23 2408.43 2261.67 2425 2261.67 c
2441.57 2261.67 2455 2248.23 2455 2231.67 c
S
n
2489.17 2141.67 m
2489.17 2125.1 2475.74 2111.67 2459.17 2111.67 c
2442.6 2111.67 2429.17 2125.1 2429.17 2141.67 c
2429.17 2158.23 2442.6 2171.67 2459.17 2171.67 c
2475.74 2171.67 2489.17 2158.23 2489.17 2141.67 c
S
n
2523.33 2052.5 m
2523.33 2035.93 2509.9 2022.5 2493.33 2022.5 c
2476.76 2022.5 2463.33 2035.93 2463.33 2052.5 c
2463.33 2069.07 2476.76 2082.5 2493.33 2082.5 c
2509.9 2082.5 2523.33 2069.07 2523.33 2052.5 c
S
n
2557.5 1964.17 m
2557.5 1947.6 2544.07 1934.17 2527.5 1934.17 c
2510.93 1934.17 2497.5 1947.6 2497.5 1964.17 c
2497.5 1980.73 2510.93 1994.17 2527.5 1994.17 c
2544.07 1994.17 2557.5 1980.73 2557.5 1964.17 c
S
n
2591.67 1877.5 m
2591.67 1860.93 2578.24 1847.5 2561.67 1847.5 c
2545.1 1847.5 2531.67 1860.93 2531.67 1877.5 c
2531.67 1894.07 2545.1 1907.5 2561.67 1907.5 c
2578.24 1907.5 2591.67 1894.07 2591.67 1877.5 c
S
n
2625.83 1792.5 m
2625.83 1775.93 2612.4 1762.5 2595.83 1762.5 c
2579.26 1762.5 2565.83 1775.93 2565.83 1792.5 c
2565.83 1809.07 2579.26 1822.5 2595.83 1822.5 c
2612.4 1822.5 2625.83 1809.07 2625.83 1792.5 c
S
n
2659.17 1710.83 m
2659.17 1694.26 2645.74 1680.83 2629.17 1680.83 c
2612.6 1680.83 2599.17 1694.26 2599.17 1710.83 c
2599.17 1727.4 2612.6 1740.83 2629.17 1740.83 c
2645.74 1740.83 2659.17 1727.4 2659.17 1710.83 c
S
n
2693.33 1631.67 m
2693.33 1615.1 2679.9 1601.67 2663.33 1601.67 c
2646.76 1601.67 2633.33 1615.1 2633.33 1631.67 c
2633.33 1648.23 2646.76 1661.67 2663.33 1661.67 c
2679.9 1661.67 2693.33 1648.23 2693.33 1631.67 c
S
n
2727.5 1556.67 m
2727.5 1540.1 2714.07 1526.67 2697.5 1526.67 c
2680.93 1526.67 2667.5 1540.1 2667.5 1556.67 c
2667.5 1573.23 2680.93 1586.67 2697.5 1586.67 c
2714.07 1586.67 2727.5 1573.23 2727.5 1556.67 c
S
n
2761.67 1485 m
2761.67 1468.43 2748.24 1455 2731.67 1455 c
2715.1 1455 2701.67 1468.43 2701.67 1485 c
2701.67 1501.57 2715.1 1515 2731.67 1515 c
2748.24 1515 2761.67 1501.57 2761.67 1485 c
S
n
2795.83 1418.33 m
2795.83 1401.76 2782.4 1388.33 2765.83 1388.33 c
2749.26 1388.33 2735.83 1401.76 2735.83 1418.33 c
2735.83 1434.9 2749.26 1448.33 2765.83 1448.33 c
2782.4 1448.33 2795.83 1434.9 2795.83 1418.33 c
S
n
2830 1355.83 m
2830 1339.26 2816.57 1325.83 2800 1325.83 c
2783.43 1325.83 2770 1339.26 2770 1355.83 c
2770 1372.4 2783.43 1385.83 2800 1385.83 c
2816.57 1385.83 2830 1372.4 2830 1355.83 c
S
n
2864.17 1299.17 m
2864.17 1282.6 2850.74 1269.17 2834.17 1269.17 c
2817.6 1269.17 2804.17 1282.6 2804.17 1299.17 c
2804.17 1315.73 2817.6 1329.17 2834.17 1329.17 c
2850.74 1329.17 2864.17 1315.73 2864.17 1299.17 c
S
n
2898.33 1247.5 m
2898.33 1230.93 2884.9 1217.5 2868.33 1217.5 c
2851.76 1217.5 2838.33 1230.93 2838.33 1247.5 c
2838.33 1264.07 2851.76 1277.5 2868.33 1277.5 c
2884.9 1277.5 2898.33 1264.07 2898.33 1247.5 c
S
n
2932.5 1201.67 m
2932.5 1185.1 2919.07 1171.67 2902.5 1171.67 c
2885.93 1171.67 2872.5 1185.1 2872.5 1201.67 c
2872.5 1218.23 2885.93 1231.67 2902.5 1231.67 c
2919.07 1231.67 2932.5 1218.23 2932.5 1201.67 c
S
n
2966.67 1161.67 m
2966.67 1145.1 2953.24 1131.67 2936.67 1131.67 c
2920.1 1131.67 2906.67 1145.1 2906.67 1161.67 c
2906.67 1178.23 2920.1 1191.67 2936.67 1191.67 c
2953.24 1191.67 2966.67 1178.23 2966.67 1161.67 c
S
n
3000 1129.17 m
3000 1112.6 2986.57 1099.17 2970 1099.17 c
2953.43 1099.17 2940 1112.6 2940 1129.17 c
2940 1145.73 2953.43 1159.17 2970 1159.17 c
2986.57 1159.17 3000 1145.73 3000 1129.17 c
S
n
3034.17 1101.67 m
3034.17 1085.1 3020.74 1071.67 3004.17 1071.67 c
2987.6 1071.67 2974.17 1085.1 2974.17 1101.67 c
2974.17 1118.23 2987.6 1131.67 3004.17 1131.67 c
3020.74 1131.67 3034.17 1118.23 3034.17 1101.67 c
S
n
3068.33 1081.67 m
3068.33 1065.1 3054.9 1051.67 3038.33 1051.67 c
3021.76 1051.67 3008.33 1065.1 3008.33 1081.67 c
3008.33 1098.23 3021.76 1111.67 3038.33 1111.67 c
3054.9 1111.67 3068.33 1098.23 3068.33 1081.67 c
S
n
3102.5 1068.33 m
3102.5 1051.76 3089.07 1038.33 3072.5 1038.33 c
3055.93 1038.33 3042.5 1051.76 3042.5 1068.33 c
3042.5 1084.9 3055.93 1098.33 3072.5 1098.33 c
3089.07 1098.33 3102.5 1084.9 3102.5 1068.33 c
S
n
3136.67 1061.67 m
3136.67 1045.1 3123.24 1031.67 3106.67 1031.67 c
3090.1 1031.67 3076.67 1045.1 3076.67 1061.67 c
3076.67 1078.23 3090.1 1091.67 3106.67 1091.67 c
3123.24 1091.67 3136.67 1078.23 3136.67 1061.67 c
S
n
3170.83 1062.5 m
3170.83 1045.93 3157.4 1032.5 3140.83 1032.5 c
3124.26 1032.5 3110.83 1045.93 3110.83 1062.5 c
3110.83 1079.07 3124.26 1092.5 3140.83 1092.5 c
3157.4 1092.5 3170.83 1079.07 3170.83 1062.5 c
S
n
3205 1070 m
3205 1053.43 3191.57 1040 3175 1040 c
3158.43 1040 3145 1053.43 3145 1070 c
3145 1086.57 3158.43 1100 3175 1100 c
3191.57 1100 3205 1086.57 3205 1070 c
S
n
3239.17 1084.17 m
3239.17 1067.6 3225.74 1054.17 3209.17 1054.17 c
3192.6 1054.17 3179.17 1067.6 3179.17 1084.17 c
3179.17 1100.73 3192.6 1114.17 3209.17 1114.17 c
3225.74 1114.17 3239.17 1100.73 3239.17 1084.17 c
S
n
3273.33 1105 m
3273.33 1088.43 3259.9 1075 3243.33 1075 c
3226.76 1075 3213.33 1088.43 3213.33 1105 c
3213.33 1121.57 3226.76 1135 3243.33 1135 c
3259.9 1135 3273.33 1121.57 3273.33 1105 c
S
n
3306.67 1132.5 m
3306.67 1115.93 3293.24 1102.5 3276.67 1102.5 c
3260.1 1102.5 3246.67 1115.93 3246.67 1132.5 c
3246.67 1149.07 3260.1 1162.5 3276.67 1162.5 c
3293.24 1162.5 3306.67 1149.07 3306.67 1132.5 c
S
n
3340.83 1166.67 m
3340.83 1150.1 3327.4 1136.67 3310.83 1136.67 c
3294.26 1136.67 3280.83 1150.1 3280.83 1166.67 c
3280.83 1183.23 3294.26 1196.67 3310.83 1196.67 c
3327.4 1196.67 3340.83 1183.23 3340.83 1166.67 c
S
n
3375 1206.67 m
3375 1190.1 3361.57 1176.67 3345 1176.67 c
3328.43 1176.67 3315 1190.1 3315 1206.67 c
3315 1223.23 3328.43 1236.67 3345 1236.67 c
3361.57 1236.67 3375 1223.23 3375 1206.67 c
S
n
3409.17 1253.33 m
3409.17 1236.76 3395.74 1223.33 3379.17 1223.33 c
3362.6 1223.33 3349.17 1236.76 3349.17 1253.33 c
3349.17 1269.9 3362.6 1283.33 3379.17 1283.33 c
3395.74 1283.33 3409.17 1269.9 3409.17 1253.33 c
S
n
3443.33 1305.83 m
3443.33 1289.26 3429.9 1275.83 3413.33 1275.83 c
3396.77 1275.83 3383.33 1289.26 3383.33 1305.83 c
3383.33 1322.4 3396.77 1335.83 3413.33 1335.83 c
3429.9 1335.83 3443.33 1322.4 3443.33 1305.83 c
S
n
3477.5 1363.33 m
3477.5 1346.76 3464.07 1333.33 3447.5 1333.33 c
3430.93 1333.33 3417.5 1346.76 3417.5 1363.33 c
3417.5 1379.9 3430.93 1393.33 3447.5 1393.33 c
3464.07 1393.33 3477.5 1379.9 3477.5 1363.33 c
S
n
3511.67 1425.83 m
3511.67 1409.26 3498.24 1395.83 3481.67 1395.83 c
3465.1 1395.83 3451.67 1409.26 3451.67 1425.83 c
3451.67 1442.4 3465.1 1455.83 3481.67 1455.83 c
3498.24 1455.83 3511.67 1442.4 3511.67 1425.83 c
S
n
3545.83 1493.33 m
3545.83 1476.76 3532.4 1463.33 3515.83 1463.33 c
3499.27 1463.33 3485.83 1476.76 3485.83 1493.33 c
3485.83 1509.9 3499.27 1523.33 3515.83 1523.33 c
3532.4 1523.33 3545.83 1509.9 3545.83 1493.33 c
S
n
3580 1565 m
3580 1548.43 3566.57 1535 3550 1535 c
3533.43 1535 3520 1548.43 3520 1565 c
3520 1581.57 3533.43 1595 3550 1595 c
3566.57 1595 3580 1581.57 3580 1565 c
S
n
3614.17 1640.83 m
3614.17 1624.26 3600.74 1610.83 3584.17 1610.83 c
3567.6 1610.83 3554.17 1624.26 3554.17 1640.83 c
3554.17 1657.4 3567.6 1670.83 3584.17 1670.83 c
3600.74 1670.83 3614.17 1657.4 3614.17 1640.83 c
S
n
3647.5 1720.83 m
3647.5 1704.26 3634.07 1690.83 3617.5 1690.83 c
3600.93 1690.83 3587.5 1704.26 3587.5 1720.83 c
3587.5 1737.4 3600.93 1750.83 3617.5 1750.83 c
3634.07 1750.83 3647.5 1737.4 3647.5 1720.83 c
S
n
3681.67 1802.5 m
3681.67 1785.93 3668.24 1772.5 3651.67 1772.5 c
3635.1 1772.5 3621.67 1785.93 3621.67 1802.5 c
3621.67 1819.07 3635.1 1832.5 3651.67 1832.5 c
3668.24 1832.5 3681.67 1819.07 3681.67 1802.5 c
S
n
3715.83 1887.5 m
3715.83 1870.93 3702.4 1857.5 3685.83 1857.5 c
3669.27 1857.5 3655.83 1870.93 3655.83 1887.5 c
3655.83 1904.07 3669.27 1917.5 3685.83 1917.5 c
3702.4 1917.5 3715.83 1904.07 3715.83 1887.5 c
S
n
3750 1975 m
3750 1958.43 3736.57 1945 3720 1945 c
3703.43 1945 3690 1958.43 3690 1975 c
3690 1991.57 3703.43 2005 3720 2005 c
3736.57 2005 3750 1991.57 3750 1975 c
S
n
3784.17 2063.33 m
3784.17 2046.76 3770.74 2033.33 3754.17 2033.33 c
3737.6 2033.33 3724.17 2046.76 3724.17 2063.33 c
3724.17 2079.9 3737.6 2093.33 3754.17 2093.33 c
3770.74 2093.33 3784.17 2079.9 3784.17 2063.33 c
S
n
3818.33 2152.5 m
3818.33 2135.93 3804.9 2122.5 3788.33 2122.5 c
3771.77 2122.5 3758.33 2135.93 3758.33 2152.5 c
3758.33 2169.07 3771.77 2182.5 3788.33 2182.5 c
3804.9 2182.5 3818.33 2169.07 3818.33 2152.5 c
S
n
3852.5 2242.5 m
3852.5 2225.93 3839.07 2212.5 3822.5 2212.5 c
3805.93 2212.5 3792.5 2225.93 3792.5 2242.5 c
3792.5 2259.07 3805.93 2272.5 3822.5 2272.5 c
3839.07 2272.5 3852.5 2259.07 3852.5 2242.5 c
S
n
3886.67 2332.5 m
3886.67 2315.93 3873.24 2302.5 3856.67 2302.5 c
3840.1 2302.5 3826.67 2315.93 3826.67 2332.5 c
3826.67 2349.07 3840.1 2362.5 3856.67 2362.5 c
3873.24 2362.5 3886.67 2349.07 3886.67 2332.5 c
S
n
3920.83 2421.67 m
3920.83 2405.1 3907.4 2391.67 3890.83 2391.67 c
3874.27 2391.67 3860.83 2405.1 3860.83 2421.67 c
3860.83 2438.23 3874.27 2451.67 3890.83 2451.67 c
3907.4 2451.67 3920.83 2438.23 3920.83 2421.67 c
S
n
3954.17 2510 m
3954.17 2493.43 3940.74 2480 3924.17 2480 c
3907.6 2480 3894.17 2493.43 3894.17 2510 c
3894.17 2526.57 3907.6 2540 3924.17 2540 c
3940.74 2540 3954.17 2526.57 3954.17 2510 c
S
n
3988.33 2596.67 m
3988.33 2580.1 3974.9 2566.67 3958.33 2566.67 c
3941.77 2566.67 3928.33 2580.1 3928.33 2596.67 c
3928.33 2613.23 3941.77 2626.67 3958.33 2626.67 c
3974.9 2626.67 3988.33 2613.23 3988.33 2596.67 c
S
n
4022.5 2681.67 m
4022.5 2665.1 4009.07 2651.67 3992.5 2651.67 c
3975.93 2651.67 3962.5 2665.1 3962.5 2681.67 c
3962.5 2698.23 3975.93 2711.67 3992.5 2711.67 c
4009.07 2711.67 4022.5 2698.23 4022.5 2681.67 c
S
n
4056.67 2763.33 m
4056.67 2746.76 4043.24 2733.33 4026.67 2733.33 c
4010.1 2733.33 3996.67 2746.76 3996.67 2763.33 c
3996.67 2779.9 4010.1 2793.33 4026.67 2793.33 c
4043.24 2793.33 4056.67 2779.9 4056.67 2763.33 c
S
n
4090.83 2842.5 m
4090.83 2825.93 4077.4 2812.5 4060.83 2812.5 c
4044.27 2812.5 4030.83 2825.93 4030.83 2842.5 c
4030.83 2859.07 4044.27 2872.5 4060.83 2872.5 c
4077.4 2872.5 4090.83 2859.07 4090.83 2842.5 c
S
n
4125 2917.5 m
4125 2900.93 4111.57 2887.5 4095 2887.5 c
4078.43 2887.5 4065 2900.93 4065 2917.5 c
4065 2934.07 4078.43 2947.5 4095 2947.5 c
4111.57 2947.5 4125 2934.07 4125 2917.5 c
S
n
4159.17 2988.33 m
4159.17 2971.76 4145.74 2958.33 4129.17 2958.33 c
4112.6 2958.33 4099.17 2971.76 4099.17 2988.33 c
4099.17 3004.9 4112.6 3018.33 4129.17 3018.33 c
4145.74 3018.33 4159.17 3004.9 4159.17 2988.33 c
S
n
4193.33 3055 m
4193.33 3038.43 4179.9 3025 4163.33 3025 c
4146.77 3025 4133.33 3038.43 4133.33 3055 c
4133.33 3071.57 4146.77 3085 4163.33 3085 c
4179.9 3085 4193.33 3071.57 4193.33 3055 c
S
n
4227.5 3117.5 m
4227.5 3100.93 4214.07 3087.5 4197.5 3087.5 c
4180.93 3087.5 4167.5 3100.93 4167.5 3117.5 c
4167.5 3134.07 4180.93 3147.5 4197.5 3147.5 c
4214.07 3147.5 4227.5 3134.07 4227.5 3117.5 c
S
n
4260.83 3174.17 m
4260.83 3157.6 4247.4 3144.17 4230.83 3144.17 c
4214.27 3144.17 4200.83 3157.6 4200.83 3174.17 c
4200.83 3190.73 4214.27 3204.17 4230.83 3204.17 c
4247.4 3204.17 4260.83 3190.73 4260.83 3174.17 c
S
n
4295 3225 m
4295 3208.43 4281.57 3195 4265 3195 c
4248.43 3195 4235 3208.43 4235 3225 c
4235 3241.57 4248.43 3255 4265 3255 c
4281.57 3255 4295 3241.57 4295 3225 c
S
n
4329.17 3270.83 m
4329.17 3254.26 4315.74 3240.83 4299.17 3240.83 c
4282.6 3240.83 4269.17 3254.26 4269.17 3270.83 c
4269.17 3287.4 4282.6 3300.83 4299.17 3300.83 c
4315.74 3300.83 4329.17 3287.4 4329.17 3270.83 c
S
n
4363.33 3310 m
4363.33 3293.43 4349.9 3280 4333.33 3280 c
4316.77 3280 4303.33 3293.43 4303.33 3310 c
4303.33 3326.57 4316.77 3340 4333.33 3340 c
4349.9 3340 4363.33 3326.57 4363.33 3310 c
S
n
4397.5 3343.33 m
4397.5 3326.76 4384.07 3313.33 4367.5 3313.33 c
4350.93 3313.33 4337.5 3326.76 4337.5 3343.33 c
4337.5 3359.9 4350.93 3373.33 4367.5 3373.33 c
4384.07 3373.33 4397.5 3359.9 4397.5 3343.33 c
S
n
4431.67 3370 m
4431.67 3353.43 4418.24 3340 4401.67 3340 c
4385.1 3340 4371.67 3353.43 4371.67 3370 c
4371.67 3386.57 4385.1 3400 4401.67 3400 c
4418.24 3400 4431.67 3386.57 4431.67 3370 c
S
n
4465.83 3390 m
4465.83 3373.43 4452.4 3360 4435.83 3360 c
4419.27 3360 4405.83 3373.43 4405.83 3390 c
4405.83 3406.57 4419.27 3420 4435.83 3420 c
4452.4 3420 4465.83 3406.57 4465.83 3390 c
S
n
4500 3402.5 m
4500 3385.93 4486.57 3372.5 4470 3372.5 c
4453.43 3372.5 4440 3385.93 4440 3402.5 c
4440 3419.07 4453.43 3432.5 4470 3432.5 c
4486.57 3432.5 4500 3419.07 4500 3402.5 c
S
n
4534.17 3409.17 m
4534.17 3392.6 4520.74 3379.17 4504.17 3379.17 c
4487.6 3379.17 4474.17 3392.6 4474.17 3409.17 c
4474.17 3425.73 4487.6 3439.17 4504.17 3439.17 c
4520.74 3439.17 4534.17 3425.73 4534.17 3409.17 c
S
n
4568.33 3408.33 m
4568.33 3391.76 4554.9 3378.33 4538.33 3378.33 c
4521.77 3378.33 4508.33 3391.76 4508.33 3408.33 c
4508.33 3424.9 4521.77 3438.33 4538.33 3438.33 c
4554.9 3438.33 4568.33 3424.9 4568.33 3408.33 c
S
n
4601.67 3400.83 m
4601.67 3384.26 4588.24 3370.83 4571.67 3370.83 c
4555.1 3370.83 4541.67 3384.26 4541.67 3400.83 c
4541.67 3417.4 4555.1 3430.83 4571.67 3430.83 c
4588.24 3430.83 4601.67 3417.4 4601.67 3400.83 c
S
n
4635.83 3385.83 m
4635.83 3369.26 4622.4 3355.83 4605.83 3355.83 c
4589.27 3355.83 4575.83 3369.26 4575.83 3385.83 c
4575.83 3402.4 4589.27 3415.83 4605.83 3415.83 c
4622.4 3415.83 4635.83 3402.4 4635.83 3385.83 c
S
n
4670 3365 m
4670 3348.43 4656.57 3335 4640 3335 c
4623.43 3335 4610 3348.43 4610 3365 c
4610 3381.57 4623.43 3395 4640 3395 c
4656.57 3395 4670 3381.57 4670 3365 c
S
n
4704.17 3337.5 m
4704.17 3320.93 4690.74 3307.5 4674.17 3307.5 c
4657.6 3307.5 4644.17 3320.93 4644.17 3337.5 c
4644.17 3354.07 4657.6 3367.5 4674.17 3367.5 c
4690.74 3367.5 4704.17 3354.07 4704.17 3337.5 c
S
n
4738.33 3302.5 m
4738.33 3285.93 4724.9 3272.5 4708.33 3272.5 c
4691.77 3272.5 4678.33 3285.93 4678.33 3302.5 c
4678.33 3319.07 4691.77 3332.5 4708.33 3332.5 c
4724.9 3332.5 4738.33 3319.07 4738.33 3302.5 c
S
n
4772.5 3262.5 m
4772.5 3245.93 4759.07 3232.5 4742.5 3232.5 c
4725.93 3232.5 4712.5 3245.93 4712.5 3262.5 c
4712.5 3279.07 4725.93 3292.5 4742.5 3292.5 c
4759.07 3292.5 4772.5 3279.07 4772.5 3262.5 c
S
n
4806.67 3215.83 m
4806.67 3199.26 4793.24 3185.83 4776.67 3185.83 c
4760.1 3185.83 4746.67 3199.26 4746.67 3215.83 c
4746.67 3232.4 4760.1 3245.83 4776.67 3245.83 c
4793.24 3245.83 4806.67 3232.4 4806.67 3215.83 c
S
n
4840.83 3163.33 m
4840.83 3146.76 4827.4 3133.33 4810.83 3133.33 c
4794.27 3133.33 4780.83 3146.76 4780.83 3163.33 c
4780.83 3179.9 4794.27 3193.33 4810.83 3193.33 c
4827.4 3193.33 4840.83 3179.9 4840.83 3163.33 c
S
n
4875 3105 m
4875 3088.43 4861.57 3075 4845 3075 c
4828.43 3075 4815 3088.43 4815 3105 c
4815 3121.57 4828.43 3135 4845 3135 c
4861.57 3135 4875 3121.57 4875 3105 c
S
n
4908.33 3042.5 m
4908.33 3025.93 4894.9 3012.5 4878.33 3012.5 c
4861.77 3012.5 4848.33 3025.93 4848.33 3042.5 c
4848.33 3059.07 4861.77 3072.5 4878.33 3072.5 c
4894.9 3072.5 4908.33 3059.07 4908.33 3042.5 c
S
n
4942.5 2975 m
4942.5 2958.43 4929.07 2945 4912.5 2945 c
4895.93 2945 4882.5 2958.43 4882.5 2975 c
4882.5 2991.57 4895.93 3005 4912.5 3005 c
4929.07 3005 4942.5 2991.57 4942.5 2975 c
S
n
4976.67 2902.5 m
4976.67 2885.93 4963.24 2872.5 4946.67 2872.5 c
4930.1 2872.5 4916.67 2885.93 4916.67 2902.5 c
4916.67 2919.07 4930.1 2932.5 4946.67 2932.5 c
4963.24 2932.5 4976.67 2919.07 4976.67 2902.5 c
S
n
5010.83 2826.67 m
5010.83 2810.1 4997.4 2796.67 4980.83 2796.67 c
4964.27 2796.67 4950.83 2810.1 4950.83 2826.67 c
4950.83 2843.23 4964.27 2856.67 4980.83 2856.67 c
4997.4 2856.67 5010.83 2843.23 5010.83 2826.67 c
S
n
5045 2747.5 m
5045 2730.93 5031.57 2717.5 5015 2717.5 c
4998.43 2717.5 4985 2730.93 4985 2747.5 c
4985 2764.07 4998.43 2777.5 5015 2777.5 c
5031.57 2777.5 5045 2764.07 5045 2747.5 c
S
n
5079.17 2665 m
5079.17 2648.43 5065.74 2635 5049.17 2635 c
5032.6 2635 5019.17 2648.43 5019.17 2665 c
5019.17 2681.57 5032.6 2695 5049.17 2695 c
5065.74 2695 5079.17 2681.57 5079.17 2665 c
S
n
5113.33 2580 m
5113.33 2563.43 5099.9 2550 5083.33 2550 c
5066.77 2550 5053.33 2563.43 5053.33 2580 c
5053.33 2596.57 5066.77 2610 5083.33 2610 c
5099.9 2610 5113.33 2596.57 5113.33 2580 c
S
n
5147.5 2492.5 m
5147.5 2475.93 5134.07 2462.5 5117.5 2462.5 c
5100.93 2462.5 5087.5 2475.93 5087.5 2492.5 c
5087.5 2509.07 5100.93 2522.5 5117.5 2522.5 c
5134.07 2522.5 5147.5 2509.07 5147.5 2492.5 c
S
n
5181.67 2404.17 m
5181.67 2387.6 5168.24 2374.17 5151.67 2374.17 c
5135.1 2374.17 5121.67 2387.6 5121.67 2404.17 c
5121.67 2420.73 5135.1 2434.17 5151.67 2434.17 c
5168.24 2434.17 5181.67 2420.73 5181.67 2404.17 c
S
n
5215.83 2315 m
5215.83 2298.43 5202.4 2285 5185.83 2285 c
5169.27 2285 5155.83 2298.43 5155.83 2315 c
5155.83 2331.57 5169.27 2345 5185.83 2345 c
5202.4 2345 5215.83 2331.57 5215.83 2315 c
S
n
1006.67 2303.33 m
1048.33 2261.67 l
0 0.498032 0  setrgbcolor
S
n
1048.33 2303.33 m
1006.67 2261.67 l
S
n
1040.83 2372.5 m
1082.5 2330.83 l
S
n
1082.5 2372.5 m
1040.83 2330.83 l
S
n
1075 2435.83 m
1116.67 2394.17 l
S
n
1116.67 2435.83 m
1075 2394.17 l
S
n
1109.17 2524.17 m
1150.83 2482.5 l
S
n
1150.83 2524.17 m
1109.17 2482.5 l
S
n
1143.33 2610.83 m
1185 2569.17 l
S
n
1185 2610.83 m
1143.33 2569.17 l
S
n
1177.5 2695.83 m
1219.17 2654.17 l
S
n
1219.17 2695.83 m
1177.5 2654.17 l
S
n
1211.67 2777.5 m
1253.33 2735.83 l
S
n
1253.33 2777.5 m
1211.67 2735.83 l
S
n
1245.83 2856.67 m
1287.5 2815 l
S
n
1287.5 2856.67 m
1245.83 2815 l
S
n
1280 2932.5 m
1321.67 2890.83 l
S
n
1321.67 2932.5 m
1280 2890.83 l
S
n
1314.17 3003.33 m
1355.83 2961.67 l
S
n
1355.83 3003.33 m
1314.17 2961.67 l
S
n
1347.5 3070.83 m
1389.17 3029.17 l
S
n
1389.17 3070.83 m
1347.5 3029.17 l
S
n
1381.67 3133.33 m
1423.33 3091.67 l
S
n
1423.33 3133.33 m
1381.67 3091.67 l
S
n
1415.83 3190.83 m
1457.5 3149.17 l
S
n
1457.5 3190.83 m
1415.83 3149.17 l
S
n
1450 3242.5 m
1491.67 3200.83 l
S
n
1491.67 3242.5 m
1450 3200.83 l
S
n
1484.17 3288.33 m
1525.83 3246.67 l
S
n
1525.83 3288.33 m
1484.17 3246.67 l
S
n
1518.33 3328.33 m
1560 3286.67 l
S
n
1560 3328.33 m
1518.33 3286.67 l
S
n
1552.5 3361.67 m
1594.17 3320 l
S
n
1594.17 3361.67 m
1552.5 3320 l
S
n
1586.67 3388.33 m
1628.33 3346.67 l
S
n
1628.33 3388.33 m
1586.67 3346.67 l
S
n
1620.83 3409.17 m
1662.5 3367.5 l
S
n
1662.5 3409.17 m
1620.83 3367.5 l
S
n
1654.17 3422.5 m
1695.83 3380.83 l
S
n
1695.83 3422.5 m
1654.17 3380.83 l
S
n
1688.33 3429.17 m
1730 3387.5 l
S
n
1730 3429.17 m
1688.33 3387.5 l
S
n
1722.5 3429.17 m
1764.17 3387.5 l
S
n
1764.17 3429.17 m
1722.5 3387.5 l
S
n
1756.67 3422.5 m
1798.33 3380.83 l
S
n
1798.33 3422.5 m
1756.67 3380.83 l
S
n
1790.83 3408.33 m
1832.5 3366.67 l
S
n
1832.5 3408.33 m
1790.83 3366.67 l
S
n
1825 3387.5 m
1866.67 3345.83 l
S
n
1866.67 3387.5 m
1825 3345.83 l
S
n
1859.17 3360 m
1900.83 3318.33 l
S
n
1900.83 3360 m
1859.17 3318.33 l
S
n
1893.33 3326.67 m
1935 3285 l
S
n
1935 3326.67 m
1893.33 3285 l
S
n
1927.5 3286.67 m
1969.17 3245 l
S
n
1969.17 3286.67 m
1927.5 3245 l
S
n
1961.67 3240 m
2003.33 3198.33 l
S
n
2003.33 3240 m
1961.67 3198.33 l
S
n
1995 3188.33 m
2036.67 3146.67 l
S
n
2036.67 3188.33 m
1995 3146.67 l
S
n
2029.17 3130.83 m
2070.83 3089.17 l
S
n
2070.83 3130.83 m
2029.17 3089.17 l
S
n
2063.33 3068.33 m
2105 3026.67 l
S
n
2105 3068.33 m
2063.33 3026.67 l
S
n
2097.5 3000.83 m
2139.17 2959.17 l
S
n
2139.17 3000.83 m
2097.5 2959.17 l
S
n
2131.67 2929.17 m
2173.33 2887.5 l
S
n
2173.33 2929.17 m
2131.67 2887.5 l
S
n
2165.83 2853.33 m
2207.5 2811.67 l
S
n
2207.5 2853.33 m
2165.83 2811.67 l
S
n
2200 2774.17 m
2241.67 2732.5 l
S
n
2241.67 2774.17 m
2200 2732.5 l
S
n
2234.17 2692.5 m
2275.83 2650.83 l
S
n
2275.83 2692.5 m
2234.17 2650.83 l
S
n
2268.33 2607.5 m
2310 2565.83 l
S
n
2310 2607.5 m
2268.33 2565.83 l
S
n
2301.67 2520.83 m
2343.33 2479.17 l
S
n
2343.33 2520.83 m
2301.67 2479.17 l
S
n
2335.83 2431.67 m
2377.5 2390 l
S
n
2377.5 2431.67 m
2335.83 2390 l
S
n
2370 2342.5 m
2411.67 2300.83 l
S
n
2411.67 2342.5 m
2370 2300.83 l
S
n
2404.17 2252.5 m
2445.83 2210.83 l
S
n
2445.83 2252.5 m
2404.17 2210.83 l
S
n
2438.33 2162.5 m
2480 2120.83 l
S
n
2480 2162.5 m
2438.33 2120.83 l
S
n
2472.5 2073.33 m
2514.17 2031.67 l
S
n
2514.17 2073.33 m
2472.5 2031.67 l
S
n
2506.67 1985 m
2548.33 1943.33 l
S
n
2548.33 1985 m
2506.67 1943.33 l
S
n
2540.83 1898.33 m
2582.5 1856.67 l
S
n
2582.5 1898.33 m
2540.83 1856.67 l
S
n
2575 1813.33 m
2616.67 1771.67 l
S
n
2616.67 1813.33 m
2575 1771.67 l
S
n
2608.33 1731.67 m
2650 1690 l
S
n
2650 1731.67 m
2608.33 1690 l
S
n
2642.5 1652.5 m
2684.17 1610.83 l
S
n
2684.17 1652.5 m
2642.5 1610.83 l
S
n
2676.67 1577.5 m
2718.33 1535.83 l
S
n
2718.33 1577.5 m
2676.67 1535.83 l
S
n
2710.83 1505.83 m
2752.5 1464.17 l
S
n
2752.5 1505.83 m
2710.83 1464.17 l
S
n
2745 1439.17 m
2786.67 1397.5 l
S
n
2786.67 1439.17 m
2745 1397.5 l
S
n
2779.17 1376.67 m
2820.83 1335 l
S
n
2820.83 1376.67 m
2779.17 1335 l
S
n
2813.33 1320 m
2855 1278.33 l
S
n
2855 1320 m
2813.33 1278.33 l
S
n
2847.5 1268.33 m
2889.17 1226.67 l
S
n
2889.17 1268.33 m
2847.5 1226.67 l
S
n
2881.67 1222.5 m
2923.33 1180.83 l
S
n
2923.33 1222.5 m
2881.67 1180.83 l
S
n
2915.83 1183.33 m
2957.5 1141.67 l
S
n
2957.5 1183.33 m
2915.83 1141.67 l
S
n
2949.17 1150 m
2990.83 1108.33 l
S
n
2990.83 1150 m
2949.17 1108.33 l
S
n
2983.33 1123.33 m
3025 1081.67 l
S
n
3025 1123.33 m
2983.33 1081.67 l
S
n
3017.5 1102.5 m
3059.17 1060.83 l
S
n
3059.17 1102.5 m
3017.5 1060.83 l
S
n
3051.67 1089.17 m
3093.33 1047.5 l
S
n
3093.33 1089.17 m
3051.67 1047.5 l
S
n
3085.83 1083.33 m
3127.5 1041.67 l
S
n
3127.5 1083.33 m
3085.83 1041.67 l
S
n
3120 1083.33 m
3161.67 1041.67 l
S
n
3161.67 1083.33 m
3120 1041.67 l
S
n
3154.17 1090.83 m
3195.83 1049.17 l
S
n
3195.83 1090.83 m
3154.17 1049.17 l
S
n
3188.33 1105 m
3230 1063.33 l
S
n
3230 1105 m
3188.33 1063.33 l
S
n
3222.5 1125.83 m
3264.17 1084.17 l
S
n
3264.17 1125.83 m
3222.5 1084.17 l
S
n
3255.83 1153.33 m
3297.5 1111.67 l
S
n
3297.5 1153.33 m
3255.83 1111.67 l
S
n
3290 1187.5 m
3331.67 1145.83 l
S
n
3331.67 1187.5 m
3290 1145.83 l
S
n
3324.17 1227.5 m
3365.83 1185.83 l
S
n
3365.83 1227.5 m
3324.17 1185.83 l
S
n
3358.33 1274.17 m
3400 1232.5 l
S
n
3400 1274.17 m
3358.33 1232.5 l
S
n
3392.5 1326.67 m
3434.17 1285 l
S
n
3434.17 1326.67 m
3392.5 1285 l
S
n
3426.67 1384.17 m
3468.33 1342.5 l
S
n
3468.33 1384.17 m
3426.67 1342.5 l
S
n
3460.83 1446.67 m
3502.5 1405 l
S
n
3502.5 1446.67 m
3460.83 1405 l
S
n
3495 1514.17 m
3536.67 1472.5 l
S
n
3536.67 1514.17 m
3495 1472.5 l
S
n
3529.17 1585.83 m
3570.83 1544.17 l
S
n
3570.83 1585.83 m
3529.17 1544.17 l
S
n
3563.33 1661.67 m
3605 1620 l
S
n
3605 1661.67 m
3563.33 1620 l
S
n
3596.67 1741.67 m
3638.33 1700 l
S
n
3638.33 1741.67 m
3596.67 1700 l
S
n
3630.83 1823.33 m
3672.5 1781.67 l
S
n
3672.5 1823.33 m
3630.83 1781.67 l
S
n
3665 1908.33 m
3706.67 1866.67 l
S
n
3706.67 1908.33 m
3665 1866.67 l
S
n
3699.17 1995.83 m
3740.83 1954.17 l
S
n
3740.83 1995.83 m
3699.17 1954.17 l
S
n
3733.33 2084.17 m
3775 2042.5 l
S
n
3775 2084.17 m
3733.33 2042.5 l
S
n
3767.5 2173.33 m
3809.17 2131.67 l
S
n
3809.17 2173.33 m
3767.5 2131.67 l
S
n
3801.67 2263.33 m
3843.33 2221.67 l
S
n
3843.33 2263.33 m
3801.67 2221.67 l
S
n
3835.83 2353.33 m
3877.5 2311.67 l
S
n
3877.5 2353.33 m
3835.83 2311.67 l
S
n
3870 2442.5 m
3911.67 2400.83 l
S
n
3911.67 2442.5 m
3870 2400.83 l
S
n
3903.33 2530.83 m
3945 2489.17 l
S
n
3945 2530.83 m
3903.33 2489.17 l
S
n
3937.5 2617.5 m
3979.17 2575.83 l
S
n
3979.17 2617.5 m
3937.5 2575.83 l
S
n
3971.67 2702.5 m
4013.33 2660.83 l
S
n
4013.33 2702.5 m
3971.67 2660.83 l
S
n
4005.83 2784.17 m
4047.5 2742.5 l
S
n
4047.5 2784.17 m
4005.83 2742.5 l
S
n
4040 2862.5 m
4081.67 2820.83 l
S
n
4081.67 2862.5 m
4040 2820.83 l
S
n
4074.17 2938.33 m
4115.83 2896.67 l
S
n
4115.83 2938.33 m
4074.17 2896.67 l
S
n
4108.33 3009.17 m
4150 2967.5 l
S
n
4150 3009.17 m
4108.33 2967.5 l
S
n
4142.5 3075.83 m
4184.17 3034.17 l
S
n
4184.17 3075.83 m
4142.5 3034.17 l
S
n
4176.67 3138.33 m
4218.33 3096.67 l
S
n
4218.33 3138.33 m
4176.67 3096.67 l
S
n
4210 3195 m
4251.67 3153.33 l
S
n
4251.67 3195 m
4210 3153.33 l
S
n
4244.17 3245.83 m
4285.83 3204.17 l
S
n
4285.83 3245.83 m
4244.17 3204.17 l
S
n
4278.33 3291.67 m
4320 3250 l
S
n
4320 3291.67 m
4278.33 3250 l
S
n
4312.5 3330.83 m
4354.17 3289.17 l
S
n
4354.17 3330.83 m
4312.5 3289.17 l
S
n
4346.67 3364.17 m
4388.33 3322.5 l
S
n
4388.33 3364.17 m
4346.67 3322.5 l
S
n
4380.83 3390.83 m
4422.5 3349.17 l
S
n
4422.5 3390.83 m
4380.83 3349.17 l
S
n
4415 3410 m
4456.67 3368.33 l
S
n
4456.67 3410 m
4415 3368.33 l
S
n
4449.17 3423.33 m
4490.83 3381.67 l
S
n
4490.83 3423.33 m
4449.17 3381.67 l
S
n
4483.33 3430 m
4525 3388.33 l
S
n
4525 3430 m
4483.33 3388.33 l
S
n
4517.5 3429.17 m
4559.17 3387.5 l
S
n
4559.17 3429.17 m
4517.5 3387.5 l
S
n
4550.83 3421.67 m
4592.5 3380 l
S
n
4592.5 3421.67 m
4550.83 3380 l
S
n
4585 3406.67 m
4626.67 3365 l
S
n
4626.67 3406.67 m
4585 3365 l
S
n
4619.17 3385.83 m
4660.83 3344.17 l
S
n
4660.83 3385.83 m
4619.17 3344.17 l
S
n
4653.33 3357.5 m
4695 3315.83 l
S
n
4695 3357.5 m
4653.33 3315.83 l
S
n
4687.5 3323.33 m
4729.17 3281.67 l
S
n
4729.17 3323.33 m
4687.5 3281.67 l
S
n
4721.67 3283.33 m
4763.33 3241.67 l
S
n
4763.33 3283.33 m
4721.67 3241.67 l
S
n
4755.83 3236.67 m
4797.5 3195 l
S
n
4797.5 3236.67 m
4755.83 3195 l
S
n
4790 3184.17 m
4831.67 3142.5 l
S
n
4831.67 3184.17 m
4790 3142.5 l
S
n
4824.17 3125.83 m
4865.83 3084.17 l
S
n
4865.83 3125.83 m
4824.17 3084.17 l
S
n
4857.5 3063.33 m
4899.17 3021.67 l
S
n
4899.17 3063.33 m
4857.5 3021.67 l
S
n
4891.67 2995 m
4933.33 2953.33 l
S
n
4933.33 2995 m
4891.67 2953.33 l
S
n
4925.83 2923.33 m
4967.5 2881.67 l
S
n
4967.5 2923.33 m
4925.83 2881.67 l
S
n
4960 2847.5 m
5001.67 2805.83 l
S
n
5001.67 2847.5 m
4960 2805.83 l
S
n
4994.17 2767.5 m
5035.83 2725.83 l
S
n
5035.83 2767.5 m
4994.17 2725.83 l
S
n
5028.33 2685.83 m
5070 2644.17 l
S
n
5070 2685.83 m
5028.33 2644.17 l
S
n
5062.5 2600.83 m
5104.17 2559.17 l
S
n
5104.17 2600.83 m
5062.5 2559.17 l
S
n
5096.67 2513.33 m
5138.33 2471.67 l
S
n
5138.33 2513.33 m
5096.67 2471.67 l
S
n
5130.83 2425 m
5172.5 2383.33 l
S
n
5172.5 2425 m
5130.83 2383.33 l
S
n
5165 2335.83 m
5206.67 2294.17 l
S
n
5206.67 2335.83 m
5165 2294.17 l
S
n
2840 3581.67 2325.83 364.167 re
1 setgray
eofill
n
2840 3581.67 2325.83 364.167 re
S
n
2840 3581.67 m
5165.83 3581.67 l
0  setgray
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
q
10 0 0 10 0 0 cm
311.75 384.417 m
/N8 10 Tf
(100Hz sine wave sampled at 16384Hz)
[5.56 5.56 5.56 7.21985 5 2.78 5 2.21985 5.56 5.56 2.78 
7.21985 5.56 5 5.56 2.78 5 5.56 8.32993 5.56 2.21985 5.56 
5.56 2.78 5.56 2.78 2.78 5.56 5.56 5.56 5.56 5.56 7.21985 
5 ] pdfxs
311.75 372.917 m
(Resampled to 8192Hz using LDAS filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 5.56 7.21985 6.66992 6.66992 2.78 2.78 2.21985 
2.21985 2.78 5.56 3.32993 ] pdfxs
311.75 361.417 m
(Resampled to 8192Hz using Butterworth filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 6.66992 5.56 2.78 2.78 5.56 3.32993 7.21985 
5.56 3.32993 2.78 5.56 2.78 2.78 2.21985 2.21985 2.78 5.56 3.32993 
] pdfxs
Q
Q
q
n
2840 3580 m
2840 3946 l
5167 3946 l
5167 3580 l
h
W
n
5 w
1 j
n
2895 3877.5 m
3061.67 3877.5 l
1 0 0 setrgbcolor
S
Q
q
n
2917 3700 m
2917 3824 l
3040 3824 l
3040 3700 l
h
W
n
5 w
1 j
n
3008.33 3762.5 m
3008.33 3745.93 2994.9 3732.5 2978.33 3732.5 c
2961.76 3732.5 2948.33 3745.93 2948.33 3762.5 c
2948.33 3779.07 2961.76 3792.5 2978.33 3792.5 c
2994.9 3792.5 3008.33 3779.07 3008.33 3762.5 c
0 0 1 setrgbcolor
S
Q
q
n
2917 3585 m
2917 3708 l
3040 3708 l
3040 3585 l
h
W
n
5 w
1 j
n
2957.5 3667.5 m
2999.17 3625.83 l
0 0.498032 0 setrgbcolor
S
n
2999.17 3667.5 m
2957.5 3625.83 l
S
Q
q
q
10 0 0 10 0 0 cm
0 setgray
396 18 m
/N20 10 Tf
(Student Version of MATLAB)
[6.66992 3.32993 6.10992 6.10992 5.56 6.10992 3.32993 2.78 6.66992 5.56 3.88992 
5.56 2.78 6.10992 6.10992 2.78 6.10992 3.32993 2.78 8.32993 7.21985 6.10992 
6.10992 7.21985 7.21985 ] pdfxs
Q
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%+ font Helvetica-BoldOblique
%%EOF
