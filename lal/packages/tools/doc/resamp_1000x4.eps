%!PS-Adobe-3.0 EPSF-3.0
%%Title: (resamp_1000x4.pdf)
%%Version: 1 4
%%CreationDate: (D:20030806155122Z)
%%DocumentData: Clean7Bit
%%BoundingBox: 50 13 550 406
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
50 13 moveto 550 13 lineto 550 406 lineto 50 406 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[ 32 /space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus
/comma/minus/period/slash/zero/one
/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal
/greater/question/at/A/B/C
/D/E/F/G/H/I
/J/K/L/M/N/O
/P/Q/R/S/T/U
/V/W/X/Y/Z/bracketleft
/backslash/bracketright/asciicircum/underscore/quoteleft/a
/b/c/d/e/f/g
/h/i/j/k/l/m
/n/o/p/q/r/s
/t/u/v/w/x/y
/z/braceleft/bar/braceright/asciitilde/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/exclamdown/cent/sterling
/fraction/yen/florin/section/currency/quotesingle
/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
/.notdef/endash/dagger/daggerdbl/periodcentered/.notdef
/paragraph/bullet/quotesinglbase/quotedblbase/quotedblright/guillemotright
/ellipsis/perthousand/.notdef/questiondown/.notdef/grave
/acute/circumflex/tilde/macron/breve/dotaccent
/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/emdash/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/AE/.notdef/ordfeminine/.notdef/.notdef
/.notdef/.notdef/Lslash/Oslash/OE/ordmasculine
/.notdef/.notdef/.notdef/.notdef/.notdef/ae
/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
/lslash/oslash/oe/germandbls/.notdef/.notdef
/.notdef/.notdef
/N8/Helvetica -1 TZ
%%IncludeResource Helvetica-BoldOblique
[/N20/Helvetica-BoldOblique -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
50 13 500 393 rectclip
50 13 500 393 re
W
n
0.100006 0 0 0.100006 0 0 cm
q
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
749.167 474.167 4466.67 3521.67 re
1 setgray
S
[5 40 ] 0 d
3.33333 w
n
749.167 474.167 m
749.167 3995.83 l
0  setgray
S
n
749.167 3995.83 m
749.167 3995.83 l
S
n
1865 474.167 m
1865 3995.83 l
S
n
1865 3995.83 m
1865 3995.83 l
S
n
2981.67 474.167 m
2981.67 3995.83 l
S
n
2981.67 3995.83 m
2981.67 3995.83 l
S
n
4098.33 474.167 m
4098.33 3995.83 l
S
n
4098.33 3995.83 m
4098.33 3995.83 l
S
n
5215 474.167 m
5215 3995.83 l
S
n
5215 3995.83 m
5215 3995.83 l
S
n
749.167 474.167 m
5215.83 474.167 l
S
n
5215.83 474.167 m
5215.83 474.167 l
S
n
749.167 1061.67 m
5215.83 1061.67 l
S
n
5215.83 1061.67 m
5215.83 1061.67 l
S
n
749.167 1648.33 m
5215.83 1648.33 l
S
n
5215.83 1648.33 m
5215.83 1648.33 l
S
n
749.167 2235 m
5215.83 2235 l
S
n
5215.83 2235 m
5215.83 2235 l
S
n
749.167 2822.5 m
5215.83 2822.5 l
S
n
5215.83 2822.5 m
5215.83 2822.5 l
S
n
749.167 3409.17 m
5215.83 3409.17 l
S
n
5215.83 3409.17 m
5215.83 3409.17 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
5215.83 3995.83 m
5215.83 3995.83 l
S
[] 0 d
5 w
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
5215.83 474.167 m
5215.83 3995.83 l
S
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
749.167 474.167 m
749.167 519.167 l
S
n
749.167 3995.83 m
749.167 3951.67 l
S
q
10 0 0 10 0 0 cm
56.9167 35.3333 m
/N8 10 Tf
(100.005)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
1865 474.167 m
1865 519.167 l
S
n
1865 3995.83 m
1865 3951.67 l
S
q
10 0 0 10 0 0 cm
171.25 35.3333 m
/N8 10 Tf
(100.01)
[5.56 5.56 5.56 2.78 5.56 5.56 ] pdfxs
Q
n
2981.67 474.167 m
2981.67 519.167 l
S
n
2981.67 3995.83 m
2981.67 3951.67 l
S
q
10 0 0 10 0 0 cm
280.167 35.3333 m
/N8 10 Tf
(100.015)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
4098.33 474.167 m
4098.33 519.167 l
S
n
4098.33 3995.83 m
4098.33 3951.67 l
S
q
10 0 0 10 0 0 cm
394.583 35.3333 m
/N8 10 Tf
(100.02)
[5.56 5.56 5.56 2.78 5.56 5.56 ] pdfxs
Q
n
5215 474.167 m
5215 519.167 l
S
n
5215 3995.83 m
5215 3951.67 l
S
q
10 0 0 10 0 0 cm
503.5 35.3333 m
/N8 10 Tf
(100.025)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
749.167 474.167 m
793.333 474.167 l
S
n
5215.83 474.167 m
5170.83 474.167 l
S
q
10 0 0 10 0 0 cm
52.3333 43.75 m
/N8 10 Tf
(-1.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
749.167 1061.67 m
793.333 1061.67 l
S
n
5215.83 1061.67 m
5170.83 1061.67 l
S
q
10 0 0 10 0 0 cm
60.6667 102.5 m
/N8 10 Tf
(-1)
[5.84 5.56 ] pdfxs
Q
n
749.167 1648.33 m
793.333 1648.33 l
S
n
5215.83 1648.33 m
5170.83 1648.33 l
S
q
10 0 0 10 0 0 cm
52.3333 161.167 m
/N8 10 Tf
(-0.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
749.167 2235 m
793.333 2235 l
S
n
5215.83 2235 m
5170.83 2235 l
S
q
10 0 0 10 0 0 cm
66.5 219.833 m
/N8 10 Tf
(0) show
Q
n
749.167 2822.5 m
793.333 2822.5 l
S
n
5215.83 2822.5 m
5170.83 2822.5 l
S
q
10 0 0 10 0 0 cm
58.1667 278.583 m
/N8 10 Tf
(0.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
749.167 3409.17 m
793.333 3409.17 l
S
n
5215.83 3409.17 m
5170.83 3409.17 l
S
q
10 0 0 10 0 0 cm
66.5 337.25 m
/N8 10 Tf
(1) show
Q
n
749.167 3995.83 m
793.333 3995.83 l
S
n
5215.83 3995.83 m
5170.83 3995.83 l
S
q
10 0 0 10 0 0 cm
58.1667 395.917 m
/N8 10 Tf
(1.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
5215.83 474.167 m
5215.83 3995.83 l
S
Q
q
n
749 473 m
749 3996 l
5217 3996 l
5217 473 l
h
W
n
5 w
1 j
n
3871.67 2102.5 m
3885 2548.33 l
3898.33 2949.17 l
3912.5 3245.83 l
3925.83 3395.83 l
3939.17 3377.5 l
3953.33 3193.33 l
3966.67 2869.17 l
3980.83 2454.17 l
3994.17 2006.67 l
4007.5 1592.5 l
4021.67 1271.67 l
4035 1090.83 l
4048.33 1076.67 l
4062.5 1230 l
4075.83 1530 l
4089.17 1932.5 l
4103.33 2379.17 l
4116.66 2805 l
4130 3147.5 l
4144.16 3357.5 l
4157.5 3405 l
4171.66 3282.5 l
4185 3007.5 l
4198.33 2620.83 l
4212.5 2177.5 l
4225.83 1743.33 l
4239.16 1380 l
4253.33 1141.67 l
4266.66 1061.67 l
4280 1152.5 l
4294.16 1400 l
4307.5 1770 l
4320.83 2206.67 l
4335 2647.5 l
4348.33 3029.17 l
4362.5 3295 l
4375.83 3407.5 l
4389.16 3349.17 l
4403.33 3129.17 l
4416.66 2779.17 l
4430 2350.83 l
4444.16 1905 l
4457.5 1507.5 l
4470.83 1215.83 l
4485 1072.5 l
4498.33 1097.5 l
4511.66 1288.33 l
4525.83 1616.67 l
4539.16 2035 l
4553.33 2481.67 l
4566.66 2893.33 l
4579.99 3209.17 l
4594.16 3384.17 l
4607.49 3391.67 l
4620.83 3230.83 l
4634.99 2925.83 l
4648.33 2520.83 l
4661.66 2074.17 l
4675.83 1650.83 l
4689.16 1312.5 l
4702.49 1108.33 l
4716.66 1067.5 l
4729.99 1196.67 l
4744.16 1476.67 l
4757.49 1867.5 l
4770.83 2310.83 l
4784.99 2744.17 l
4798.33 3102.5 l
4811.66 3335.83 l
4825.83 3409.17 l
4839.16 3311.67 l
4852.49 3057.5 l
4866.66 2685 l
4879.99 2245.83 l
4893.33 1805.83 l
4907.49 1428.33 l
4920.82 1168.33 l
4934.99 1062.5 l
4948.32 1127.5 l
4961.66 1353.33 l
4975.82 1707.5 l
4989.16 2138.33 l
5002.49 2583.33 l
5016.66 2977.5 l
5029.99 3264.17 l
5043.32 3400.83 l
5057.49 3368.33 l
5070.82 3171.67 l
5084.16 2839.17 l
5098.32 2418.33 l
5111.66 1970.83 l
5125.82 1562.5 l
5139.16 1251.67 l
5152.49 1083.33 l
5166.66 1082.5 l
5179.99 1249.17 l
5193.32 1559.17 l
5207.49 1967.5 l
5216.66 2263.33 l
1 0 0 setrgbcolor
S
n
2521.67 1799.17 m
2535.83 2239.17 l
2549.17 2678.33 l
2562.5 3052.5 l
2576.67 3308.33 l
2590 3408.33 l
2603.33 3338.33 l
2617.5 3107.5 l
2630.83 2750 l
2644.17 2318.33 l
2658.33 1874.17 l
2671.67 1482.5 l
2685.83 1200 l
2699.17 1068.33 l
2712.5 1105.83 l
2726.67 1307.5 l
2740 1644.17 l
2753.33 2066.67 l
2767.5 2513.33 l
2780.83 2920 l
2794.16 3227.5 l
2808.33 3390 l
2821.66 3385 l
2835 3213.33 l
2849.16 2899.17 l
2862.5 2489.17 l
2876.66 2041.67 l
2890 1622.5 l
2903.33 1292.5 l
2917.5 1099.17 l
2930.83 1071.67 l
2944.16 1212.5 l
2958.33 1501.67 l
2971.66 1898.33 l
2985 2343.33 l
2999.16 2772.5 l
3012.5 3124.17 l
3025.83 3346.67 l
3040 3407.5 l
3053.33 3298.33 l
3067.5 3034.17 l
3080.83 2654.17 l
3094.16 2214.17 l
3108.33 1775.83 l
3121.66 1405 l
3135 1155 l
3149.16 1061.67 l
3162.49 1139.17 l
3175.83 1375 l
3189.99 1736.67 l
3203.33 2170.83 l
3217.49 2614.17 l
3230.83 3002.5 l
3244.16 3279.17 l
3258.33 3404.17 l
3271.66 3360 l
3284.99 3151.67 l
3299.16 2810.83 l
3312.49 2386.67 l
3325.83 1940 l
3339.99 1535.83 l
3353.33 1234.17 l
3366.66 1077.5 l
3380.83 1089.17 l
3394.16 1267.5 l
3408.33 1585.83 l
3421.66 1999.17 l
3434.99 2446.67 l
3449.16 2863.33 l
3462.49 3189.17 l
3475.83 3375.83 l
3489.99 3397.5 l
3503.33 3250 l
3516.66 2955 l
3530.83 2555.83 l
3544.16 2110 l
3557.49 1681.67 l
3571.66 1335 l
3584.99 1118.33 l
3599.16 1064.17 l
3612.49 1180.83 l
3625.82 1450 l
3639.99 1833.33 l
3653.32 2275 l
3666.66 2710.83 l
3680.82 3078.33 l
3694.16 3322.5 l
3707.49 3409.17 l
3721.66 3325 l
3734.99 3083.33 l
3748.32 2717.5 l
3762.49 2282.5 l
3775.82 1840 l
3789.99 1455 l
3803.32 1183.33 l
3816.66 1065 l
3830.82 1116.67 l
3844.16 1330 l
3857.49 1675.83 l
3871.66 2102.5 l
S
n
1172.5 1527.5 m
1185.83 1929.17 l
1200 2375.83 l
1213.33 2801.67 l
1226.67 3145 l
1240.83 3356.67 l
1254.17 3405 l
1267.5 3284.17 l
1281.67 3010 l
1295 2624.17 l
1308.33 2181.67 l
1322.5 1746.67 l
1335.83 1382.5 l
1350 1142.5 l
1363.33 1061.67 l
1376.67 1150.83 l
1390.83 1397.5 l
1404.16 1766.67 l
1417.5 2203.33 l
1431.66 2644.17 l
1445 3026.67 l
1458.33 3293.33 l
1472.5 3406.67 l
1485.83 3350 l
1499.16 3131.67 l
1513.33 2782.5 l
1526.66 2354.17 l
1540.83 1908.33 l
1554.16 1510 l
1567.5 1217.5 l
1581.66 1072.5 l
1595 1096.67 l
1608.33 1285.83 l
1622.5 1613.33 l
1635.83 2030.83 l
1649.16 2478.33 l
1663.33 2890.83 l
1676.66 3207.5 l
1690 3383.33 l
1704.16 3391.67 l
1717.5 3233.33 l
1731.66 2929.17 l
1745 2524.17 l
1758.33 2077.5 l
1772.5 1653.33 l
1785.83 1314.17 l
1799.16 1109.17 l
1813.33 1067.5 l
1826.66 1195 l
1839.99 1474.17 l
1854.16 1864.17 l
1867.49 2307.5 l
1880.83 2740.83 l
1894.99 3100 l
1908.33 3334.17 l
1922.49 3409.17 l
1935.83 3313.33 l
1949.16 3060 l
1963.33 2688.33 l
1976.66 2250 l
1989.99 1809.17 l
2004.16 1430.83 l
2017.49 1170 l
2030.83 1063.33 l
2044.99 1126.67 l
2058.33 1351.67 l
2071.66 1704.17 l
2085.83 2135 l
2099.16 2580 l
2113.33 2974.17 l
2126.66 3262.5 l
2139.99 3400.83 l
2154.16 3370 l
2167.49 3174.17 l
2180.83 2841.67 l
2194.99 2421.67 l
2208.32 1975 l
2221.66 1565 l
2235.82 1253.33 l
2249.16 1084.17 l
2262.49 1081.67 l
2276.66 1247.5 l
2289.99 1556.67 l
2304.16 1964.17 l
2317.49 2410.83 l
2330.82 2832.5 l
2344.99 3167.5 l
2358.32 3366.67 l
2371.66 3401.67 l
2385.82 3267.5 l
2399.16 2982.5 l
2412.49 2590 l
2426.66 2145.83 l
2439.99 1714.17 l
2453.32 1358.33 l
2467.49 1130 l
2480.82 1062.5 l
2494.99 1165 l
2508.32 1423.33 l
2521.66 1799.17 l
S
n
749.167 2235.83 m
750 2271.67 l
763.333 2707.5 l
777.5 3075.83 l
790.833 3321.67 l
804.166 3409.17 l
818.333 3326.67 l
831.666 3085.83 l
844.999 2720.83 l
859.166 2285.83 l
872.499 1843.33 l
885.832 1457.5 l
899.999 1185 l
913.332 1065 l
926.665 1115 l
940.832 1328.33 l
954.165 1672.5 l
968.331 2099.17 l
981.665 2545 l
994.998 2945.83 l
1009.16 3244.17 l
1022.5 3395.83 l
1035.83 3378.33 l
1050 3195 l
1063.33 2872.5 l
1076.66 2457.5 l
1090.83 2010 l
1104.16 1595 l
1117.5 1273.33 l
1131.66 1091.67 l
1145 1075.83 l
1159.16 1228.33 l
1172.5 1527.5 l
S
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
807.5 3076.67 m
807.5 3060.1 794.068 3046.67 777.5 3046.67 c
760.932 3046.67 747.5 3060.1 747.5 3076.67 c
747.5 3093.23 760.932 3106.67 777.5 3106.67 c
794.068 3106.67 807.5 3093.23 807.5 3076.67 c
0 0 1 setrgbcolor
S
n
861.667 3086.67 m
861.667 3070.1 848.235 3056.67 831.667 3056.67 c
815.098 3056.67 801.667 3070.1 801.667 3086.67 c
801.667 3103.23 815.098 3116.67 831.667 3116.67 c
848.235 3116.67 861.667 3103.23 861.667 3086.67 c
S
n
915.833 1456.67 m
915.833 1440.1 902.402 1426.67 885.833 1426.67 c
869.265 1426.67 855.833 1440.1 855.833 1456.67 c
855.833 1473.23 869.265 1486.67 885.833 1486.67 c
902.402 1486.67 915.833 1473.23 915.833 1456.67 c
S
n
970.833 1326.67 m
970.833 1310.1 957.402 1296.67 940.833 1296.67 c
924.265 1296.67 910.833 1310.1 910.833 1326.67 c
910.833 1343.23 924.265 1356.67 940.833 1356.67 c
957.402 1356.67 970.833 1343.23 970.833 1326.67 c
S
n
1025 2947.5 m
1025 2930.93 1011.57 2917.5 995 2917.5 c
978.432 2917.5 965 2930.93 965 2947.5 c
965 2964.07 978.432 2977.5 995 2977.5 c
1011.57 2977.5 1025 2964.07 1025 2947.5 c
S
n
1080 3196.67 m
1080 3180.1 1066.57 3166.67 1050 3166.67 c
1033.43 3166.67 1020 3180.1 1020 3196.67 c
1020 3213.23 1033.43 3226.67 1050 3226.67 c
1066.57 3226.67 1080 3213.23 1080 3196.67 c
S
n
1134.17 1594.17 m
1134.17 1577.6 1120.73 1564.17 1104.17 1564.17 c
1087.6 1564.17 1074.17 1577.6 1074.17 1594.17 c
1074.17 1610.73 1087.6 1624.17 1104.17 1624.17 c
1120.73 1624.17 1134.17 1610.73 1134.17 1594.17 c
S
n
1189.17 1227.5 m
1189.17 1210.93 1175.73 1197.5 1159.17 1197.5 c
1142.6 1197.5 1129.17 1210.93 1129.17 1227.5 c
1129.17 1244.07 1142.6 1257.5 1159.17 1257.5 c
1175.73 1257.5 1189.17 1244.07 1189.17 1227.5 c
S
n
1243.33 2802.5 m
1243.33 2785.93 1229.9 2772.5 1213.33 2772.5 c
1196.76 2772.5 1183.33 2785.93 1183.33 2802.5 c
1183.33 2819.07 1196.76 2832.5 1213.33 2832.5 c
1229.9 2832.5 1243.33 2819.07 1243.33 2802.5 c
S
n
1297.5 3285.83 m
1297.5 3269.26 1284.07 3255.83 1267.5 3255.83 c
1250.93 3255.83 1237.5 3269.26 1237.5 3285.83 c
1237.5 3302.4 1250.93 3315.83 1267.5 3315.83 c
1284.07 3315.83 1297.5 3302.4 1297.5 3285.83 c
S
n
1352.5 1745.83 m
1352.5 1729.26 1339.07 1715.83 1322.5 1715.83 c
1305.93 1715.83 1292.5 1729.26 1292.5 1745.83 c
1292.5 1762.4 1305.93 1775.83 1322.5 1775.83 c
1339.07 1775.83 1352.5 1762.4 1352.5 1745.83 c
S
n
1406.67 1149.17 m
1406.67 1132.6 1393.23 1119.17 1376.67 1119.17 c
1360.1 1119.17 1346.67 1132.6 1346.67 1149.17 c
1346.67 1165.73 1360.1 1179.17 1376.67 1179.17 c
1393.23 1179.17 1406.67 1165.73 1406.67 1149.17 c
S
n
1461.67 2645 m
1461.67 2628.43 1448.23 2615 1431.67 2615 c
1415.1 2615 1401.67 2628.43 1401.67 2645 c
1401.67 2661.57 1415.1 2675 1431.67 2675 c
1448.23 2675 1461.67 2661.57 1461.67 2645 c
S
n
1515.83 3351.67 m
1515.83 3335.1 1502.4 3321.67 1485.83 3321.67 c
1469.26 3321.67 1455.83 3335.1 1455.83 3351.67 c
1455.83 3368.23 1469.26 3381.67 1485.83 3381.67 c
1502.4 3381.67 1515.83 3368.23 1515.83 3351.67 c
S
n
1570.83 1908.33 m
1570.83 1891.76 1557.4 1878.33 1540.83 1878.33 c
1524.26 1878.33 1510.83 1891.76 1510.83 1908.33 c
1510.83 1924.9 1524.26 1938.33 1540.83 1938.33 c
1557.4 1938.33 1570.83 1924.9 1570.83 1908.33 c
S
n
1625 1095 m
1625 1078.43 1611.57 1065 1595 1065 c
1578.43 1065 1565 1078.43 1565 1095 c
1565 1111.57 1578.43 1125 1595 1125 c
1611.57 1125 1625 1111.57 1625 1095 c
S
n
1679.17 2479.17 m
1679.17 2462.6 1665.73 2449.17 1649.17 2449.17 c
1632.6 2449.17 1619.17 2462.6 1619.17 2479.17 c
1619.17 2495.73 1632.6 2509.17 1649.17 2509.17 c
1665.73 2509.17 1679.17 2495.73 1679.17 2479.17 c
S
n
1734.17 3393.33 m
1734.17 3376.76 1720.73 3363.33 1704.17 3363.33 c
1687.6 3363.33 1674.17 3376.76 1674.17 3393.33 c
1674.17 3409.9 1687.6 3423.33 1704.17 3423.33 c
1720.73 3423.33 1734.17 3409.9 1734.17 3393.33 c
S
n
1788.33 2077.5 m
1788.33 2060.93 1774.9 2047.5 1758.33 2047.5 c
1741.76 2047.5 1728.33 2060.93 1728.33 2077.5 c
1728.33 2094.07 1741.76 2107.5 1758.33 2107.5 c
1774.9 2107.5 1788.33 2094.07 1788.33 2077.5 c
S
n
1843.33 1065.83 m
1843.33 1049.26 1829.9 1035.83 1813.33 1035.83 c
1796.76 1035.83 1783.33 1049.26 1783.33 1065.83 c
1783.33 1082.4 1796.76 1095.83 1813.33 1095.83 c
1829.9 1095.83 1843.33 1082.4 1843.33 1065.83 c
S
n
1897.5 2307.5 m
1897.5 2290.93 1884.07 2277.5 1867.5 2277.5 c
1850.93 2277.5 1837.5 2290.93 1837.5 2307.5 c
1837.5 2324.07 1850.93 2337.5 1867.5 2337.5 c
1884.07 2337.5 1897.5 2324.07 1897.5 2307.5 c
S
n
1952.5 3410.83 m
1952.5 3394.26 1939.07 3380.83 1922.5 3380.83 c
1905.93 3380.83 1892.5 3394.26 1892.5 3410.83 c
1892.5 3427.4 1905.93 3440.83 1922.5 3440.83 c
1939.07 3440.83 1952.5 3427.4 1952.5 3410.83 c
S
n
2006.67 2250 m
2006.67 2233.43 1993.24 2220 1976.67 2220 c
1960.1 2220 1946.67 2233.43 1946.67 2250 c
1946.67 2266.57 1960.1 2280 1976.67 2280 c
1993.24 2280 2006.67 2266.57 2006.67 2250 c
S
n
2060.83 1061.67 m
2060.83 1045.1 2047.4 1031.67 2030.83 1031.67 c
2014.26 1031.67 2000.83 1045.1 2000.83 1061.67 c
2000.83 1078.23 2014.26 1091.67 2030.83 1091.67 c
2047.4 1091.67 2060.83 1078.23 2060.83 1061.67 c
S
n
2115.83 2134.17 m
2115.83 2117.6 2102.4 2104.17 2085.83 2104.17 c
2069.26 2104.17 2055.83 2117.6 2055.83 2134.17 c
2055.83 2150.73 2069.26 2164.17 2085.83 2164.17 c
2102.4 2164.17 2115.83 2150.73 2115.83 2134.17 c
S
n
2170 3402.5 m
2170 3385.93 2156.57 3372.5 2140 3372.5 c
2123.43 3372.5 2110 3385.93 2110 3402.5 c
2110 3419.07 2123.43 3432.5 2140 3432.5 c
2156.57 3432.5 2170 3419.07 2170 3402.5 c
S
n
2225 2422.5 m
2225 2405.93 2211.57 2392.5 2195 2392.5 c
2178.43 2392.5 2165 2405.93 2165 2422.5 c
2165 2439.07 2178.43 2452.5 2195 2452.5 c
2211.57 2452.5 2225 2439.07 2225 2422.5 c
S
n
2279.17 1082.5 m
2279.17 1065.93 2265.74 1052.5 2249.17 1052.5 c
2232.6 1052.5 2219.17 1065.93 2219.17 1082.5 c
2219.17 1099.07 2232.6 1112.5 2249.17 1112.5 c
2265.74 1112.5 2279.17 1099.07 2279.17 1082.5 c
S
n
2334.17 1964.17 m
2334.17 1947.6 2320.74 1934.17 2304.17 1934.17 c
2287.6 1934.17 2274.17 1947.6 2274.17 1964.17 c
2274.17 1980.73 2287.6 1994.17 2304.17 1994.17 c
2320.74 1994.17 2334.17 1980.73 2334.17 1964.17 c
S
n
2388.33 3368.33 m
2388.33 3351.76 2374.9 3338.33 2358.33 3338.33 c
2341.76 3338.33 2328.33 3351.76 2328.33 3368.33 c
2328.33 3384.9 2341.76 3398.33 2358.33 3398.33 c
2374.9 3398.33 2388.33 3384.9 2388.33 3368.33 c
S
n
2442.5 2590.83 m
2442.5 2574.26 2429.07 2560.83 2412.5 2560.83 c
2395.93 2560.83 2382.5 2574.26 2382.5 2590.83 c
2382.5 2607.4 2395.93 2620.83 2412.5 2620.83 c
2429.07 2620.83 2442.5 2607.4 2442.5 2590.83 c
S
n
2497.5 1128.33 m
2497.5 1111.76 2484.07 1098.33 2467.5 1098.33 c
2450.93 1098.33 2437.5 1111.76 2437.5 1128.33 c
2437.5 1144.9 2450.93 1158.33 2467.5 1158.33 c
2484.07 1158.33 2497.5 1144.9 2497.5 1128.33 c
S
n
2551.67 1799.17 m
2551.67 1782.6 2538.24 1769.17 2521.67 1769.17 c
2505.1 1769.17 2491.67 1782.6 2491.67 1799.17 c
2491.67 1815.73 2505.1 1829.17 2521.67 1829.17 c
2538.24 1829.17 2551.67 1815.73 2551.67 1799.17 c
S
n
2606.67 3310 m
2606.67 3293.43 2593.24 3280 2576.67 3280 c
2560.1 3280 2546.67 3293.43 2546.67 3310 c
2546.67 3326.57 2560.1 3340 2576.67 3340 c
2593.24 3340 2606.67 3326.57 2606.67 3310 c
S
n
2660.83 2750.83 m
2660.83 2734.26 2647.4 2720.83 2630.83 2720.83 c
2614.26 2720.83 2600.83 2734.26 2600.83 2750.83 c
2600.83 2767.4 2614.26 2780.83 2630.83 2780.83 c
2647.4 2780.83 2660.83 2767.4 2660.83 2750.83 c
S
n
2715.83 1198.33 m
2715.83 1181.76 2702.4 1168.33 2685.83 1168.33 c
2669.26 1168.33 2655.83 1181.76 2655.83 1198.33 c
2655.83 1214.9 2669.26 1228.33 2685.83 1228.33 c
2702.4 1228.33 2715.83 1214.9 2715.83 1198.33 c
S
n
2770 1643.33 m
2770 1626.76 2756.57 1613.33 2740 1613.33 c
2723.43 1613.33 2710 1626.76 2710 1643.33 c
2710 1659.9 2723.43 1673.33 2740 1673.33 c
2756.57 1673.33 2770 1659.9 2770 1643.33 c
S
n
2824.17 3228.33 m
2824.17 3211.76 2810.74 3198.33 2794.17 3198.33 c
2777.6 3198.33 2764.17 3211.76 2764.17 3228.33 c
2764.17 3244.9 2777.6 3258.33 2794.17 3258.33 c
2810.74 3258.33 2824.17 3244.9 2824.17 3228.33 c
S
n
2879.17 2900.83 m
2879.17 2884.26 2865.74 2870.83 2849.17 2870.83 c
2832.6 2870.83 2819.17 2884.26 2819.17 2900.83 c
2819.17 2917.4 2832.6 2930.83 2849.17 2930.83 c
2865.74 2930.83 2879.17 2917.4 2879.17 2900.83 c
S
n
2933.33 1290.83 m
2933.33 1274.26 2919.9 1260.83 2903.33 1260.83 c
2886.76 1260.83 2873.33 1274.26 2873.33 1290.83 c
2873.33 1307.4 2886.76 1320.83 2903.33 1320.83 c
2919.9 1320.83 2933.33 1307.4 2933.33 1290.83 c
S
n
2988.33 1500.83 m
2988.33 1484.26 2974.9 1470.83 2958.33 1470.83 c
2941.76 1470.83 2928.33 1484.26 2928.33 1500.83 c
2928.33 1517.4 2941.76 1530.83 2958.33 1530.83 c
2974.9 1530.83 2988.33 1517.4 2988.33 1500.83 c
S
n
3042.5 3125.83 m
3042.5 3109.26 3029.07 3095.83 3012.5 3095.83 c
2995.93 3095.83 2982.5 3109.26 2982.5 3125.83 c
2982.5 3142.4 2995.93 3155.83 3012.5 3155.83 c
3029.07 3155.83 3042.5 3142.4 3042.5 3125.83 c
S
n
3097.5 3035.83 m
3097.5 3019.26 3084.07 3005.83 3067.5 3005.83 c
3050.93 3005.83 3037.5 3019.26 3037.5 3035.83 c
3037.5 3052.4 3050.93 3065.83 3067.5 3065.83 c
3084.07 3065.83 3097.5 3052.4 3097.5 3035.83 c
S
n
3151.67 1404.17 m
3151.67 1387.6 3138.24 1374.17 3121.67 1374.17 c
3105.1 1374.17 3091.67 1387.6 3091.67 1404.17 c
3091.67 1420.73 3105.1 1434.17 3121.67 1434.17 c
3138.24 1434.17 3151.67 1420.73 3151.67 1404.17 c
S
n
3205.83 1374.17 m
3205.83 1357.6 3192.4 1344.17 3175.83 1344.17 c
3159.26 1344.17 3145.83 1357.6 3145.83 1374.17 c
3145.83 1390.73 3159.26 1404.17 3175.83 1404.17 c
3192.4 1404.17 3205.83 1390.73 3205.83 1374.17 c
S
n
3260.83 3003.33 m
3260.83 2986.76 3247.4 2973.33 3230.83 2973.33 c
3214.26 2973.33 3200.83 2986.76 3200.83 3003.33 c
3200.83 3019.9 3214.26 3033.33 3230.83 3033.33 c
3247.4 3033.33 3260.83 3019.9 3260.83 3003.33 c
S
n
3315 3153.33 m
3315 3136.76 3301.57 3123.33 3285 3123.33 c
3268.43 3123.33 3255 3136.76 3255 3153.33 c
3255 3169.9 3268.43 3183.33 3285 3183.33 c
3301.57 3183.33 3315 3169.9 3315 3153.33 c
S
n
3370 1535 m
3370 1518.43 3356.57 1505 3340 1505 c
3323.43 1505 3310 1518.43 3310 1535 c
3310 1551.57 3323.43 1565 3340 1565 c
3356.57 1565 3370 1551.57 3370 1535 c
S
n
3424.17 1265.83 m
3424.17 1249.26 3410.74 1235.83 3394.17 1235.83 c
3377.6 1235.83 3364.17 1249.26 3364.17 1265.83 c
3364.17 1282.4 3377.6 1295.83 3394.17 1295.83 c
3410.74 1295.83 3424.17 1282.4 3424.17 1265.83 c
S
n
3479.17 2864.17 m
3479.17 2847.6 3465.74 2834.17 3449.17 2834.17 c
3432.6 2834.17 3419.17 2847.6 3419.17 2864.17 c
3419.17 2880.73 3432.6 2894.17 3449.17 2894.17 c
3465.74 2894.17 3479.17 2880.73 3479.17 2864.17 c
S
n
3533.33 3250.83 m
3533.33 3234.26 3519.9 3220.83 3503.33 3220.83 c
3486.77 3220.83 3473.33 3234.26 3473.33 3250.83 c
3473.33 3267.4 3486.77 3280.83 3503.33 3280.83 c
3519.9 3280.83 3533.33 3267.4 3533.33 3250.83 c
S
n
3587.5 1681.67 m
3587.5 1665.1 3574.07 1651.67 3557.5 1651.67 c
3540.93 1651.67 3527.5 1665.1 3527.5 1681.67 c
3527.5 1698.23 3540.93 1711.67 3557.5 1711.67 c
3574.07 1711.67 3587.5 1698.23 3587.5 1681.67 c
S
n
3642.5 1179.17 m
3642.5 1162.6 3629.07 1149.17 3612.5 1149.17 c
3595.93 1149.17 3582.5 1162.6 3582.5 1179.17 c
3582.5 1195.73 3595.93 1209.17 3612.5 1209.17 c
3629.07 1209.17 3642.5 1195.73 3642.5 1179.17 c
S
n
3696.67 2711.67 m
3696.67 2695.1 3683.24 2681.67 3666.67 2681.67 c
3650.1 2681.67 3636.67 2695.1 3636.67 2711.67 c
3636.67 2728.23 3650.1 2741.67 3666.67 2741.67 c
3683.24 2741.67 3696.67 2728.23 3696.67 2711.67 c
S
n
3751.67 3326.67 m
3751.67 3310.1 3738.24 3296.67 3721.67 3296.67 c
3705.1 3296.67 3691.67 3310.1 3691.67 3326.67 c
3691.67 3343.23 3705.1 3356.67 3721.67 3356.67 c
3738.24 3356.67 3751.67 3343.23 3751.67 3326.67 c
S
n
3805.83 1839.17 m
3805.83 1822.6 3792.4 1809.17 3775.83 1809.17 c
3759.27 1809.17 3745.83 1822.6 3745.83 1839.17 c
3745.83 1855.73 3759.27 1869.17 3775.83 1869.17 c
3792.4 1869.17 3805.83 1855.73 3805.83 1839.17 c
S
n
3860.83 1115 m
3860.83 1098.43 3847.4 1085 3830.83 1085 c
3814.27 1085 3800.83 1098.43 3800.83 1115 c
3800.83 1131.57 3814.27 1145 3830.83 1145 c
3847.4 1145 3860.83 1131.57 3860.83 1115 c
S
n
3915 2549.17 m
3915 2532.6 3901.57 2519.17 3885 2519.17 c
3868.43 2519.17 3855 2532.6 3855 2549.17 c
3855 2565.73 3868.43 2579.17 3885 2579.17 c
3901.57 2579.17 3915 2565.73 3915 2549.17 c
S
n
3969.17 3379.17 m
3969.17 3362.6 3955.74 3349.17 3939.17 3349.17 c
3922.6 3349.17 3909.17 3362.6 3909.17 3379.17 c
3909.17 3395.73 3922.6 3409.17 3939.17 3409.17 c
3955.74 3409.17 3969.17 3395.73 3969.17 3379.17 c
S
n
4024.17 2005.83 m
4024.17 1989.26 4010.74 1975.83 3994.17 1975.83 c
3977.6 1975.83 3964.17 1989.26 3964.17 2005.83 c
3964.17 2022.4 3977.6 2035.83 3994.17 2035.83 c
4010.74 2035.83 4024.17 2022.4 4024.17 2005.83 c
S
n
4078.33 1075 m
4078.33 1058.43 4064.9 1045 4048.33 1045 c
4031.77 1045 4018.33 1058.43 4018.33 1075 c
4018.33 1091.57 4031.77 1105 4048.33 1105 c
4064.9 1105 4078.33 1091.57 4078.33 1075 c
S
n
4133.33 2379.17 m
4133.33 2362.6 4119.9 2349.17 4103.33 2349.17 c
4086.77 2349.17 4073.33 2362.6 4073.33 2379.17 c
4073.33 2395.73 4086.77 2409.17 4103.33 2409.17 c
4119.9 2409.17 4133.33 2395.73 4133.33 2379.17 c
S
n
4187.5 3406.67 m
4187.5 3390.1 4174.07 3376.67 4157.5 3376.67 c
4140.93 3376.67 4127.5 3390.1 4127.5 3406.67 c
4127.5 3423.23 4140.93 3436.67 4157.5 3436.67 c
4174.07 3436.67 4187.5 3423.23 4187.5 3406.67 c
S
n
4242.5 2177.5 m
4242.5 2160.93 4229.07 2147.5 4212.5 2147.5 c
4195.93 2147.5 4182.5 2160.93 4182.5 2177.5 c
4182.5 2194.07 4195.93 2207.5 4212.5 2207.5 c
4229.07 2207.5 4242.5 2194.07 4242.5 2177.5 c
S
n
4296.67 1060 m
4296.67 1043.43 4283.24 1030 4266.67 1030 c
4250.1 1030 4236.67 1043.43 4236.67 1060 c
4236.67 1076.57 4250.1 1090 4266.67 1090 c
4283.24 1090 4296.67 1076.57 4296.67 1060 c
S
n
4350.83 2206.67 m
4350.83 2190.1 4337.4 2176.67 4320.83 2176.67 c
4304.27 2176.67 4290.83 2190.1 4290.83 2206.67 c
4290.83 2223.23 4304.27 2236.67 4320.83 2236.67 c
4337.4 2236.67 4350.83 2223.23 4350.83 2206.67 c
S
n
4405.83 3409.17 m
4405.83 3392.6 4392.4 3379.17 4375.83 3379.17 c
4359.27 3379.17 4345.83 3392.6 4345.83 3409.17 c
4345.83 3425.73 4359.27 3439.17 4375.83 3439.17 c
4392.4 3439.17 4405.83 3425.73 4405.83 3409.17 c
S
n
4460 2350.83 m
4460 2334.26 4446.57 2320.83 4430 2320.83 c
4413.43 2320.83 4400 2334.26 4400 2350.83 c
4400 2367.4 4413.43 2380.83 4430 2380.83 c
4446.57 2380.83 4460 2367.4 4460 2350.83 c
S
n
4515 1070.83 m
4515 1054.26 4501.57 1040.83 4485 1040.83 c
4468.43 1040.83 4455 1054.26 4455 1070.83 c
4455 1087.4 4468.43 1100.83 4485 1100.83 c
4501.57 1100.83 4515 1087.4 4515 1070.83 c
S
n
4569.17 2034.17 m
4569.17 2017.6 4555.74 2004.17 4539.17 2004.17 c
4522.6 2004.17 4509.17 2017.6 4509.17 2034.17 c
4509.17 2050.73 4522.6 2064.17 4539.17 2064.17 c
4555.74 2064.17 4569.17 2050.73 4569.17 2034.17 c
S
n
4624.17 3385.83 m
4624.17 3369.26 4610.74 3355.83 4594.17 3355.83 c
4577.6 3355.83 4564.17 3369.26 4564.17 3385.83 c
4564.17 3402.4 4577.6 3415.83 4594.17 3415.83 c
4610.74 3415.83 4624.17 3402.4 4624.17 3385.83 c
S
n
4678.33 2520.83 m
4678.33 2504.26 4664.9 2490.83 4648.33 2490.83 c
4631.77 2490.83 4618.33 2504.26 4618.33 2520.83 c
4618.33 2537.4 4631.77 2550.83 4648.33 2550.83 c
4664.9 2550.83 4678.33 2537.4 4678.33 2520.83 c
S
n
4732.5 1106.67 m
4732.5 1090.1 4719.07 1076.67 4702.5 1076.67 c
4685.93 1076.67 4672.5 1090.1 4672.5 1106.67 c
4672.5 1123.23 4685.93 1136.67 4702.5 1136.67 c
4719.07 1136.67 4732.5 1123.23 4732.5 1106.67 c
S
n
4787.5 1866.67 m
4787.5 1850.1 4774.07 1836.67 4757.5 1836.67 c
4740.93 1836.67 4727.5 1850.1 4727.5 1866.67 c
4727.5 1883.23 4740.93 1896.67 4757.5 1896.67 c
4774.07 1896.67 4787.5 1883.23 4787.5 1866.67 c
S
n
4841.67 3337.5 m
4841.67 3320.93 4828.24 3307.5 4811.67 3307.5 c
4795.1 3307.5 4781.67 3320.93 4781.67 3337.5 c
4781.67 3354.07 4795.1 3367.5 4811.67 3367.5 c
4828.24 3367.5 4841.67 3354.07 4841.67 3337.5 c
S
n
4896.67 2685 m
4896.67 2668.43 4883.24 2655 4866.67 2655 c
4850.1 2655 4836.67 2668.43 4836.67 2685 c
4836.67 2701.57 4850.1 2715 4866.67 2715 c
4883.24 2715 4896.67 2701.57 4896.67 2685 c
S
n
4950.83 1166.67 m
4950.83 1150.1 4937.4 1136.67 4920.83 1136.67 c
4904.27 1136.67 4890.83 1150.1 4890.83 1166.67 c
4890.83 1183.23 4904.27 1196.67 4920.83 1196.67 c
4937.4 1196.67 4950.83 1183.23 4950.83 1166.67 c
S
n
5005.83 1706.67 m
5005.83 1690.1 4992.4 1676.67 4975.83 1676.67 c
4959.27 1676.67 4945.83 1690.1 4945.83 1706.67 c
4945.83 1723.23 4959.27 1736.67 4975.83 1736.67 c
4992.4 1736.67 5005.83 1723.23 5005.83 1706.67 c
S
n
5060 3265 m
5060 3248.43 5046.57 3235 5030 3235 c
5013.43 3235 5000 3248.43 5000 3265 c
5000 3281.57 5013.43 3295 5030 3295 c
5046.57 3295 5060 3281.57 5060 3265 c
S
n
5114.17 2840 m
5114.17 2823.43 5100.74 2810 5084.17 2810 c
5067.6 2810 5054.17 2823.43 5054.17 2840 c
5054.17 2856.57 5067.6 2870 5084.17 2870 c
5100.74 2870 5114.17 2856.57 5114.17 2840 c
S
n
5169.17 1250 m
5169.17 1233.43 5155.74 1220 5139.17 1220 c
5122.6 1220 5109.17 1233.43 5109.17 1250 c
5109.17 1266.57 5122.6 1280 5139.17 1280 c
5155.74 1280 5169.17 1266.57 5169.17 1250 c
S
n
5223.33 1558.33 m
5223.33 1541.76 5209.9 1528.33 5193.33 1528.33 c
5176.77 1528.33 5163.33 1541.76 5163.33 1558.33 c
5163.33 1574.9 5176.77 1588.33 5193.33 1588.33 c
5209.9 1588.33 5223.33 1574.9 5223.33 1558.33 c
S
n
756.667 3096.67 m
798.333 3055 l
0 0.498032 0  setrgbcolor
S
n
798.333 3096.67 m
756.667 3055 l
S
n
810.833 3106.67 m
852.5 3065 l
S
n
852.5 3106.67 m
810.833 3065 l
S
n
865 1478.33 m
906.667 1436.67 l
S
n
906.667 1478.33 m
865 1436.67 l
S
n
920 1349.17 m
961.667 1307.5 l
S
n
961.667 1349.17 m
920 1307.5 l
S
n
974.167 2966.67 m
1015.83 2925 l
S
n
1015.83 2966.67 m
974.167 2925 l
S
n
1029.17 3215.83 m
1070.83 3174.17 l
S
n
1070.83 3215.83 m
1029.17 3174.17 l
S
n
1083.33 1615.83 m
1125 1574.17 l
S
n
1125 1615.83 m
1083.33 1574.17 l
S
n
1138.33 1249.17 m
1180 1207.5 l
S
n
1180 1249.17 m
1138.33 1207.5 l
S
n
1192.5 2822.5 m
1234.17 2780.83 l
S
n
1234.17 2822.5 m
1192.5 2780.83 l
S
n
1246.67 3305 m
1288.33 3263.33 l
S
n
1288.33 3305 m
1246.67 3263.33 l
S
n
1301.67 1767.5 m
1343.33 1725.83 l
S
n
1343.33 1767.5 m
1301.67 1725.83 l
S
n
1355.83 1171.67 m
1397.5 1130 l
S
n
1397.5 1171.67 m
1355.83 1130 l
S
n
1410.83 2665 m
1452.5 2623.33 l
S
n
1452.5 2665 m
1410.83 2623.33 l
S
n
1465 3370.83 m
1506.67 3329.17 l
S
n
1506.67 3370.83 m
1465 3329.17 l
S
n
1520 1929.17 m
1561.67 1887.5 l
S
n
1561.67 1929.17 m
1520 1887.5 l
S
n
1574.17 1117.5 m
1615.83 1075.83 l
S
n
1615.83 1117.5 m
1574.17 1075.83 l
S
n
1628.33 2499.17 m
1670 2457.5 l
S
n
1670 2499.17 m
1628.33 2457.5 l
S
n
1683.33 3412.5 m
1725 3370.83 l
S
n
1725 3412.5 m
1683.33 3370.83 l
S
n
1737.5 2098.33 m
1779.17 2056.67 l
S
n
1779.17 2098.33 m
1737.5 2056.67 l
S
n
1792.5 1088.33 m
1834.17 1046.67 l
S
n
1834.17 1088.33 m
1792.5 1046.67 l
S
n
1846.67 2328.33 m
1888.33 2286.67 l
S
n
1888.33 2328.33 m
1846.67 2286.67 l
S
n
1901.67 3430 m
1943.33 3388.33 l
S
n
1943.33 3430 m
1901.67 3388.33 l
S
n
1955.83 2270.83 m
1997.5 2229.17 l
S
n
1997.5 2270.83 m
1955.83 2229.17 l
S
n
2010 1084.17 m
2051.67 1042.5 l
S
n
2051.67 1084.17 m
2010 1042.5 l
S
n
2065 2155.83 m
2106.67 2114.17 l
S
n
2106.67 2155.83 m
2065 2114.17 l
S
n
2119.17 3421.67 m
2160.83 3380 l
S
n
2160.83 3421.67 m
2119.17 3380 l
S
n
2174.17 2442.5 m
2215.83 2400.83 l
S
n
2215.83 2442.5 m
2174.17 2400.83 l
S
n
2228.33 1105 m
2270 1063.33 l
S
n
2270 1105 m
2228.33 1063.33 l
S
n
2283.33 1985 m
2325 1943.33 l
S
n
2325 1985 m
2283.33 1943.33 l
S
n
2337.5 3387.5 m
2379.17 3345.83 l
S
n
2379.17 3387.5 m
2337.5 3345.83 l
S
n
2391.67 2610.83 m
2433.33 2569.17 l
S
n
2433.33 2610.83 m
2391.67 2569.17 l
S
n
2446.67 1150.83 m
2488.33 1109.17 l
S
n
2488.33 1150.83 m
2446.67 1109.17 l
S
n
2500.83 1820 m
2542.5 1778.33 l
S
n
2542.5 1820 m
2500.83 1778.33 l
S
n
2555.83 3329.17 m
2597.5 3287.5 l
S
n
2597.5 3329.17 m
2555.83 3287.5 l
S
n
2610 2770.83 m
2651.67 2729.17 l
S
n
2651.67 2770.83 m
2610 2729.17 l
S
n
2665 1220.83 m
2706.67 1179.17 l
S
n
2706.67 1220.83 m
2665 1179.17 l
S
n
2719.17 1665 m
2760.83 1623.33 l
S
n
2760.83 1665 m
2719.17 1623.33 l
S
n
2773.33 3248.33 m
2815 3206.67 l
S
n
2815 3248.33 m
2773.33 3206.67 l
S
n
2828.33 2920 m
2870 2878.33 l
S
n
2870 2920 m
2828.33 2878.33 l
S
n
2882.5 1313.33 m
2924.17 1271.67 l
S
n
2924.17 1313.33 m
2882.5 1271.67 l
S
n
2937.5 1522.5 m
2979.17 1480.83 l
S
n
2979.17 1522.5 m
2937.5 1480.83 l
S
n
2991.67 3145 m
3033.33 3103.33 l
S
n
3033.33 3145 m
2991.67 3103.33 l
S
n
3046.67 3055 m
3088.33 3013.33 l
S
n
3088.33 3055 m
3046.67 3013.33 l
S
n
3100.83 1425.83 m
3142.5 1384.17 l
S
n
3142.5 1425.83 m
3100.83 1384.17 l
S
n
3155 1395.83 m
3196.67 1354.17 l
S
n
3196.67 1395.83 m
3155 1354.17 l
S
n
3210 3023.33 m
3251.67 2981.67 l
S
n
3251.67 3023.33 m
3210 2981.67 l
S
n
3264.17 3172.5 m
3305.83 3130.83 l
S
n
3305.83 3172.5 m
3264.17 3130.83 l
S
n
3319.17 1556.67 m
3360.83 1515 l
S
n
3360.83 1556.67 m
3319.17 1515 l
S
n
3373.33 1288.33 m
3415 1246.67 l
S
n
3415 1288.33 m
3373.33 1246.67 l
S
n
3428.33 2884.17 m
3470 2842.5 l
S
n
3470 2884.17 m
3428.33 2842.5 l
S
n
3482.5 3270.83 m
3524.17 3229.17 l
S
n
3524.17 3270.83 m
3482.5 3229.17 l
S
n
3536.67 1702.5 m
3578.33 1660.83 l
S
n
3578.33 1702.5 m
3536.67 1660.83 l
S
n
3591.67 1201.67 m
3633.33 1160 l
S
n
3633.33 1201.67 m
3591.67 1160 l
S
n
3645.83 2731.67 m
3687.5 2690 l
S
n
3687.5 2731.67 m
3645.83 2690 l
S
n
3700.83 3345.83 m
3742.5 3304.17 l
S
n
3742.5 3345.83 m
3700.83 3304.17 l
S
n
3755 1860.83 m
3796.67 1819.17 l
S
n
3796.67 1860.83 m
3755 1819.17 l
S
n
3810 1137.5 m
3851.67 1095.83 l
S
n
3851.67 1137.5 m
3810 1095.83 l
S
n
3864.17 2569.17 m
3905.83 2527.5 l
S
n
3905.83 2569.17 m
3864.17 2527.5 l
S
n
3918.33 3398.33 m
3960 3356.67 l
S
n
3960 3398.33 m
3918.33 3356.67 l
S
n
3973.33 2027.5 m
4015 1985.83 l
S
n
4015 2027.5 m
3973.33 1985.83 l
S
n
4027.5 1097.5 m
4069.17 1055.83 l
S
n
4069.17 1097.5 m
4027.5 1055.83 l
S
n
4082.5 2400 m
4124.17 2358.33 l
S
n
4124.17 2400 m
4082.5 2358.33 l
S
n
4136.67 3425.83 m
4178.33 3384.17 l
S
n
4178.33 3425.83 m
4136.67 3384.17 l
S
n
4191.67 2198.33 m
4233.33 2156.67 l
S
n
4233.33 2198.33 m
4191.67 2156.67 l
S
n
4245.83 1082.5 m
4287.5 1040.83 l
S
n
4287.5 1082.5 m
4245.83 1040.83 l
S
n
4300 2227.5 m
4341.67 2185.83 l
S
n
4341.67 2227.5 m
4300 2185.83 l
S
n
4355 3428.33 m
4396.67 3386.67 l
S
n
4396.67 3428.33 m
4355 3386.67 l
S
n
4409.17 2371.67 m
4450.83 2330 l
S
n
4450.83 2371.67 m
4409.17 2330 l
S
n
4464.17 1093.33 m
4505.83 1051.67 l
S
n
4505.83 1093.33 m
4464.17 1051.67 l
S
n
4518.33 2055.83 m
4560 2014.17 l
S
n
4560 2055.83 m
4518.33 2014.17 l
S
n
4573.33 3405 m
4615 3363.33 l
S
n
4615 3405 m
4573.33 3363.33 l
S
n
4627.5 2541.67 m
4669.17 2500 l
S
n
4669.17 2541.67 m
4627.5 2500 l
S
n
4681.67 1129.17 m
4723.33 1087.5 l
S
n
4723.33 1129.17 m
4681.67 1087.5 l
S
n
4736.67 1888.33 m
4778.33 1846.67 l
S
n
4778.33 1888.33 m
4736.67 1846.67 l
S
n
4790.83 3356.67 m
4832.5 3315 l
S
n
4832.5 3356.67 m
4790.83 3315 l
S
n
4845.83 2705.83 m
4887.5 2664.17 l
S
n
4887.5 2705.83 m
4845.83 2664.17 l
S
n
4900 1189.17 m
4941.67 1147.5 l
S
n
4941.67 1189.17 m
4900 1147.5 l
S
n
4955 1728.33 m
4996.67 1686.67 l
S
n
4996.67 1728.33 m
4955 1686.67 l
S
n
5009.17 3285 m
5050.83 3243.33 l
S
n
5050.83 3285 m
5009.17 3243.33 l
S
n
5063.33 2860 m
5105 2818.33 l
S
n
5105 2860 m
5063.33 2818.33 l
S
n
5118.33 1272.5 m
5160 1230.83 l
S
n
5160 1272.5 m
5118.33 1230.83 l
S
n
5172.5 1580 m
5214.17 1538.33 l
S
n
5214.17 1580 m
5172.5 1538.33 l
S
n
2840 3581.67 2325.83 364.167 re
1 setgray
eofill
n
2840 3581.67 2325.83 364.167 re
S
n
2840 3581.67 m
5165.83 3581.67 l
0  setgray
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
q
10 0 0 10 0 0 cm
311.75 384.417 m
/N8 10 Tf
(1000Hz sine wave sampled at 16384Hz)
[5.56 5.56 5.56 5.56 7.21985 5 2.78 5 2.21985 5.56 5.56 
2.78 7.21985 5.56 5 5.56 2.78 5 5.56 8.32993 5.56 2.21985 
5.56 5.56 2.78 5.56 2.78 2.78 5.56 5.56 5.56 5.56 5.56 
7.21985 5 ] pdfxs
311.75 372.917 m
(Resampled to 4096Hz using LDAS filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 5.56 7.21985 6.66992 6.66992 2.78 2.78 2.21985 
2.21985 2.78 5.56 3.32993 ] pdfxs
311.75 361.417 m
(Resampled to 4096Hz using Butterworth filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 6.66992 5.56 2.78 2.78 5.56 3.32993 7.21985 
5.56 3.32993 2.78 5.56 2.78 2.78 2.21985 2.21985 2.78 5.56 3.32993 
] pdfxs
Q
Q
q
n
2840 3580 m
2840 3946 l
5167 3946 l
5167 3580 l
h
W
n
5 w
1 j
n
2895 3877.5 m
3061.67 3877.5 l
1 0 0 setrgbcolor
S
Q
q
n
2917 3700 m
2917 3824 l
3040 3824 l
3040 3700 l
h
W
n
5 w
1 j
n
3008.33 3762.5 m
3008.33 3745.93 2994.9 3732.5 2978.33 3732.5 c
2961.76 3732.5 2948.33 3745.93 2948.33 3762.5 c
2948.33 3779.07 2961.76 3792.5 2978.33 3792.5 c
2994.9 3792.5 3008.33 3779.07 3008.33 3762.5 c
0 0 1 setrgbcolor
S
Q
q
n
2917 3585 m
2917 3708 l
3040 3708 l
3040 3585 l
h
W
n
5 w
1 j
n
2957.5 3667.5 m
2999.17 3625.83 l
0 0.498032 0 setrgbcolor
S
n
2999.17 3667.5 m
2957.5 3625.83 l
S
Q
q
q
10 0 0 10 0 0 cm
0 setgray
396 18 m
/N20 10 Tf
(Student Version of MATLAB)
[6.66992 3.32993 6.10992 6.10992 5.56 6.10992 3.32993 2.78 6.66992 5.56 3.88992 
5.56 2.78 6.10992 6.10992 2.78 6.10992 3.32993 2.78 8.32993 7.21985 6.10992 
6.10992 7.21985 7.21985 ] pdfxs
Q
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%+ font Helvetica-BoldOblique
%%EOF
