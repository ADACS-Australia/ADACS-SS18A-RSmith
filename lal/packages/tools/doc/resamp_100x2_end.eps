%!PS-Adobe-3.0 EPSF-3.0
%%Title: (resamp_100x2_end.pdf)
%%Version: 1 4
%%CreationDate: (D:20030806154319Z)
%%DocumentData: Clean7Bit
%%BoundingBox: 50 13 542 406
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%+ procset (Adobe Acrobat - type operators) 1.2 0
%%EndComments
50 13 moveto 542 13 lineto 542 406 lineto 50 406 lineto closepath clip newpath
%%BeginProlog
%%EndProlog
%%BeginSetup
%%BeginResource: file Pscript_CFF PSVER
userdict/ct_CffDict 6 dict put ct_CffDict begin/F0Subr{systemdict/internaldict
known{1183615869 systemdict/internaldict get exec/FlxProc known{save true}{
false}ifelse}{userdict/internaldict known not{userdict/internaldict{count 0 eq
{/internaldict errordict/invalidaccess get exec}if dup type/integertype ne{
/internaldict errordict/invalidaccess get exec}if dup 1183615869 eq{pop 0}{
/internaldict errordict/invalidaccess get exec}ifelse}dup 14 get 1 25 dict put
bind executeonly put}if 1183615869 userdict/internaldict get exec/FlxProc
known{save true}{false}ifelse}ifelse[systemdict/internaldict known not{100
dict/begin cvx/mtx matrix/def cvx}if systemdict/currentpacking known{
currentpacking true setpacking}if{systemdict/internaldict known{1183615869
systemdict/internaldict get exec dup/$FlxDict known not{dup dup length exch
maxlength eq{pop userdict dup/$FlxDict known not{100 dict begin/mtx matrix def
dup/$FlxDict currentdict put end}if}{100 dict begin/mtx matrix def dup
/$FlxDict currentdict put end}ifelse}if/$FlxDict get begin}if grestore/exdef{
exch def}def/dmin exch abs 100 div def/epX exdef/epY exdef/c4y2 exdef/c4x2
exdef/c4y1 exdef/c4x1 exdef/c4y0 exdef/c4x0 exdef/c3y2 exdef/c3x2 exdef/c3y1
exdef/c3x1 exdef/c3y0 exdef/c3x0 exdef/c1y2 exdef/c1x2 exdef/c2x2 c4x2 def
/c2y2 c4y2 def/yflag c1y2 c3y2 sub abs c1x2 c3x2 sub abs gt def/PickCoords{{
c1x0 c1y0 c1x1 c1y1 c1x2 c1y2 c2x0 c2y0 c2x1 c2y1 c2x2 c2y2}{c3x0 c3y0 c3x1
c3y1 c3x2 c3y2 c4x0 c4y0 c4x1 c4y1 c4x2 c4y2}ifelse/y5 exdef/x5 exdef/y4 exdef
/x4 exdef/y3 exdef/x3 exdef/y2 exdef/x2 exdef/y1 exdef/x1 exdef/y0 exdef/x0
exdef}def mtx currentmatrix pop mtx 0 get abs 1e-05 lt mtx 3 get abs 1e-05 lt
or{/flipXY -1 def}{mtx 1 get abs 1e-05 lt mtx 2 get abs 1e-05 lt or{/flipXY 1
def}{/flipXY 0 def}ifelse}ifelse/erosion 1 def systemdict/internaldict known{
1183615869 systemdict/internaldict get exec dup/erosion known{/erosion get
/erosion exch def}{pop}ifelse}if yflag{flipXY 0 eq c3y2 c4y2 eq or{false
PickCoords}{/shrink c3y2 c4y2 eq{0}{c1y2 c4y2 sub c3y2 c4y2 sub div abs}ifelse
def/yshrink{c4y2 sub shrink mul c4y2 add}def/c1y0 c3y0 yshrink def/c1y1 c3y1
yshrink def/c2y0 c4y0 yshrink def/c2y1 c4y1 yshrink def/c1x0 c3x0 def/c1x1
c3x1 def/c2x0 c4x0 def/c2x1 c4x1 def/dY 0 c3y2 c1y2 sub round dtransform
flipXY 1 eq{exch}if pop abs def dY dmin lt PickCoords y2 c1y2 sub abs .001 gt{
c1x2 c1y2 transform flipXY 1 eq{exch}if/cx exch def/cy exch def/dY 0 y2 c1y2
sub round dtransform flipXY 1 eq{exch}if pop def dY round dup 0 ne{/dY exdef}{
pop dY 0 lt{-1}{1}ifelse/dY exdef}ifelse/erode PaintType 2 ne erosion .5 ge
and def erode{/cy cy .5 sub def}if/ey cy dY add def/ey ey ceiling ey sub ey
floor add def erode{/ey ey .5 add def}if ey cx flipXY 1 eq{exch}if itransform
exch pop y2 sub/eShift exch def/y1 y1 eShift add def/y2 y2 eShift add def/y3
y3 eShift add def}if}ifelse}{flipXY 0 eq c3x2 c4x2 eq or{false PickCoords}{
/shrink c3x2 c4x2 eq{0}{c1x2 c4x2 sub c3x2 c4x2 sub div abs}ifelse def/xshrink
{c4x2 sub shrink mul c4x2 add}def/c1x0 c3x0 xshrink def/c1x1 c3x1 xshrink def
/c2x0 c4x0 xshrink def/c2x1 c4x1 xshrink def/c1y0 c3y0 def/c1y1 c3y1 def/c2y0
c4y0 def/c2y1 c4y1 def/dX c3x2 c1x2 sub round 0 dtransform flipXY -1 eq{exch}
if pop abs def dX dmin lt PickCoords x2 c1x2 sub abs .001 gt{c1x2 c1y2
transform flipXY -1 eq{exch}if/cy exch def/cx exch def/dX x2 c1x2 sub round 0
dtransform flipXY -1 eq{exch}if pop def dX round dup 0 ne{/dX exdef}{pop dX 0
lt{-1}{1}ifelse/dX exdef}ifelse/erode PaintType 2 ne erosion .5 ge and def
erode{/cx cx .5 sub def}if/ex cx dX add def/ex ex ceiling ex sub ex floor add
def erode{/ex ex .5 add def}if ex cy flipXY -1 eq{exch}if itransform pop x2
sub/eShift exch def/x1 x1 eShift add def/x2 x2 eShift add def/x3 x3 eShift add
def}if}ifelse}ifelse x2 x5 eq y2 y5 eq or{x5 y5 lineto}{x0 y0 x1 y1 x2 y2
curveto x3 y3 x4 y4 x5 y5 curveto}ifelse epY epX}systemdict/currentpacking
known{exch setpacking}if/exec cvx/end cvx]cvx executeonly exch{pop true exch
restore}{systemdict/internaldict known not{1183615869 userdict/internaldict
get exec exch/FlxProc exch put true}{1183615869 systemdict/internaldict get
exec dup length exch maxlength eq{false}{1183615869 systemdict/internaldict
get exec exch/FlxProc exch put true}ifelse}ifelse}ifelse{systemdict
/internaldict known{1183615869 systemdict/internaldict get exec/FlxProc get
exec}{1183615869 userdict/internaldict get exec/FlxProc get exec}ifelse}if}
executeonly def/F1Subr{gsave currentpoint newpath moveto}bind def/F2Subr{
currentpoint grestore gsave currentpoint newpath moveto}bind def/HSSubr{
systemdict/internaldict known not{pop 3}{1183615869 systemdict/internaldict
get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck
get exec}{pop 3}ifelse}ifelse}ifelse}bind def end
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 5.0 6
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 160 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/findRes/setSA/pl
%% to keep CoolType entries in GlyphDirProcs safe from collisions with Win PS driver
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil
%%Copyright: Copyright 1993-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 4.0 2
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: l2compat
%%Version: 5.0 10
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: Level 1 emulation of level 2 operators
/setcmykcolor isdefined? not
{
/setcmykcolor {
1 sub 4 1 roll
3 {
3 index add neg dup 0 lt { pop 0 } if
3 1 roll
} repeat
setrgbcolor
pop
} bd
} if
/rectclip isdefined? not
{
/rectclip { newpath re clip newpath } bd
} if
/rectfill isdefined? not
{
/rectfill { gsave newpath re fill grestore } bd
} if
/sethalftone isdefined? not
{
/sethalftone {
begin
HalftoneType 1 eq
{ Frequency Angle /SpotFunction load setscreen }
if
end
} bd
} if
Level1?
{
/pdf_show {show} bd
/xshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xshow
} bd
/yshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_yshow
} bd
/xyshow
{
PDFVars /_pdf_showproc /pdf_show load put
pdf_xyshow
} bd
} if
/getrampcolor {
/indx exch def
[
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
]
L1setcolor
} bd
/sssetbackground { L1setcolor } bd
%%EndResource
%%BeginResource: procset pdf
%%Version: 5.0 7
%%Copyright: Copyright 1998-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_image {{image} /DataSource pdf_dictOp} bd
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 lt
{
c1x c1y r1 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 le
{
c2x c2y r2 360 0 arcn
xMin yMin moveto
xMax yMin lineto
xMax yMax lineto
xMin yMax lineto
xMin yMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
/theta AA 1 AA dup mul sub sqrt div 1 atan def
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round cvi } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
%%EndResource
%%BeginResource: procset sep_ops
%%Version: 4.0 1
%%Copyright: Copyright 1987-1999 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Support for Separations in Level 1, following the conventions of Tech Note 5044
userdict /sep_ops 50 dict dup begin put
/bdef {bind def} bind def
/xdef {exch def} bdef
/colorimagebuffer {
0 1 2 index length 1 sub {
dup 2 index exch get 255 exch sub 2 index 3 1 roll put
} for
} bdef
/addprocs {
[ 3 1 roll
/exec load
dup 3 1 roll
] cvx
} bdef
/L1? {
systemdict /languagelevel known {
systemdict /languagelevel get 2 lt
}{
true
} ifelse
} bdef
/colorexists {
statusdict /processcolors known {
statusdict /processcolors get exec
}{
/deviceinfo where {
pop deviceinfo /Colors known {
deviceinfo /Colors get
statusdict /processcolors {
deviceinfo /Colors known {
deviceinfo /Colors get
}{
1
} ifelse
} put
}{
1
} ifelse
}{
1
} ifelse
} ifelse
1 gt
} bdef
/colorplate colorexists { 0 } { 5 } ifelse def
/negativecolorplate false def
/setcmykcolor where {
pop
gsave
1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
4 {4 copy} repeat
grestore
1 dict begin
/foureq {
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
4 index eq 8 1 roll
pop pop pop pop and and and
} def
1 0 0 0 foureq {/colorplate 1 store} if
0 1 0 0 foureq {/colorplate 2 store} if
0 0 1 0 foureq {/colorplate 3 store} if
0 0 0 1 foureq {/colorplate 4 store} if
0 0 0 0 foureq {/colorplate 6 store} if
end
} if
0 systemdict /currenttransfer get exec exec
1 systemdict /currenttransfer get exec exec
2 copy
eq
{
/colorplate 6 store
pop
/negativecolorplate exch 0.5 lt store
}
{
gt /negativecolorplate exch store
}
ifelse
/findcmykcustomcolor where { pop }
{
/findcmykcustomcolor {
[ 6 1 roll ] readonly
} bdef
} ifelse
/setoverprint where {
pop
}{
/setoverprint {
pop
} bdef
} ifelse
/currentoverprint where {
pop
}{
/currentoverprint {
false
} bdef
} ifelse
/setcustomcolor where {
pop
}{
L1? {
/setcustomcolor {
exch
aload pop pop
4 { 4 index mul 4 1 roll } repeat
5 -1 roll pop
setcmykcolor
} bdef
}{
/setcustomcolor {
exch
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace setcolor
} bdef
} ifelse
} ifelse
/ik 0 def
/iy 0 def
/im 0 def
/ic 0 def
/imagetint {
ic .3 mul
im .59 mul
iy .11 mul
ik add add add dup
1 gt {pop 1} if
} bdef
/setcmykcolor where {
pop
}{
/setcmykcolor {
/ik xdef /iy xdef /im xdef /ic xdef
imagetint
1 exch sub setgray
} bdef
} ifelse
/customcolorimage where {
pop
}{
L1? {
/customcolorimage{
gsave
colorexists {
aload pop pop
/ik xdef /iy xdef /im xdef /ic xdef
currentcolortransfer
{ik mul ik sub 1 add} addprocs
4 1 roll {iy mul iy sub 1 add} addprocs
4 1 roll {im mul im sub 1 add} addprocs
4 1 roll {ic mul ic sub 1 add} addprocs
4 1 roll setcolortransfer
/magentabuf 0 string def
/yellowbuf 0 string def
/blackbuf 0 string def
{
colorimagebuffer dup length magentabuf length ne
{
dup length dup dup
/magentabuf exch string def
/yellowbuf exch string def
/blackbuf exch string def
} if
dup magentabuf copy yellowbuf copy
blackbuf copy pop
} addprocs
{magentabuf}{yellowbuf}{blackbuf} true 4 colorimage
}{
aload pop pop /ik xdef /iy xdef /im xdef /ic xdef /tint
imagetint def
currenttransfer
{tint mul 1 tint sub add} addprocs settransfer image
} ifelse
grestore
} bdef
}{
/customcolorimage {
gsave
[ exch /Separation exch dup 4 get exch /DeviceCMYK exch
0 4 getinterval
[ exch /dup load exch cvx {mul exch dup}
/forall load /pop load dup] cvx
] setcolorspace
10 dict begin
/ImageType 1 def
/DataSource exch def
/ImageMatrix exch def
/BitsPerComponent exch def
/Height exch def
/Width exch def
/Decode [1 0] def
currentdict end
image
grestore
} bdef
} ifelse
} ifelse
/setseparationgray where {
pop
}{
L1? {
/setseparationgray { 1 exch sub dup dup dup setcmykcolor } bdef
}{
/setseparationgray {
[/Separation /All /DeviceCMYK {dup dup dup}] setcolorspace
1 exch sub setcolor
} bdef
} ifelse
} ifelse
/separationimage where { pop }
{
/separationimage {
gsave
1 1 1 1 (All)
findcmykcustomcolor customcolorimage
grestore
} bdef
} ifelse
currentdict readonly pop end
%%EndResource
%%BeginResource: procset pdflev15044
%%Version: 5.0 13
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%LanguageLevel: 1
%%Title: PDF operators, Level 1, with emulated separations (TN 5044)
/_ColorSep5044? true dd
/docinitialize {
PDF begin
/_defaulthalftone
/currenthalftone where
{ pop currenthalftone }
{ 4 dict dup begin
currentscreen
/SpotFunction exch def
/Angle exch def
/Frequency exch def
/HalftoneType 1 def
end }
ifelse
dd
/currentcolortransfer where
{ pop /_defaultcolortransfer [ currentcolortransfer ] dd }
{ /_defaultcolortransfer [currenttransfer dup dup dup] dd }
ifelse
end
} bd
/initialize {
/overprintstack null dd
sep_ops begin
50 dict begin
_defaulthalftone sethalftone
} bd
/terminate {
end end
} bd
/currentcolortransfer where
{ pop }
{
/setcolortransfer
{
settransfer pop pop pop
} bd
} ifelse
/pl {
transform
0.25 sub round 0.25 add exch
0.25 sub round 0.25 add exch
itransform
} bd
/m { _sa? { pl } if moveto } bd
/l { _sa? { pl } if lineto } bd
/c
{
_sa? {3 {pl 6 2 roll} repeat} if
curveto
} bd
/ri/pop ld
/setSA { /_sa? xdd } bd
/re
{
_sa?
{
8 dict begin
/:h exch def
/:w exch def
/:y exch def
/:x exch def
:x :y pl
/:ymin exch def /:xmin exch def
:x :w add :y :h add pl
/:ymax exch def /:xmax exch def
:xmin :ymin moveto
:xmax :ymin lineto
:xmax :ymax lineto
:xmin :ymax lineto
closepath
end
}
{
4 2 roll moveto
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
closepath
} ifelse
} bd
/q
{
gsave
[currentoverprint overprintstack] /overprintstack xdd
}
[/overprintstack] bld
/Q
{
overprintstack aload pop /overprintstack xdd setoverprint
grestore
}
[/overprintstack] bld
/AlmostFull?
{ dup maxlength exch length sub 2 le
} bd
/Expand
{ 1 index maxlength mul cvi dict
dup begin exch { def } forall end
} bd
/xput
{ 3 2 roll
dup 3 index known not
{ dup AlmostFull? { 1.5 Expand } if
} if
dup 4 2 roll put
} bd
/defineRes
{ _categories 1 index known not
{ /_categories _categories 2 index 10 dict xput store
} if
_categories exch 2 copy get 5 -1 roll 4 index xput put
} bd
/findRes {
_categories exch get exch get
} bd
/L1setcolor {
aload length
dup 0 eq
{ pop .5 setgray }
{ dup 1 eq
{ pop setgray }
{ 3 eq
{ setrgbcolor }
{ setcmykcolor }
ifelse }
ifelse }
ifelse
} bind dd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
colorplate 0 eq
{
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} if
colorplate 1 ge colorplate 4 le and
{
4 colorplate sub index 4 { exch pop } repeat
concatandsettransfer
} if
colorplate 5 ge
{
0 index 4 { exch pop } repeat
concatandsettransfer
} if
} bd
/tn5044sethalftone
{
begin
HalftoneType 5 eq
{ [/Default /Cyan /Magenta /Yellow /Black /Default /Default /Default]
colorplate get
here not {
/Default here not { currentdict } if
} if
}
{ currentdict }
ifelse
end
begin
/TransferFunction here
{
concatandsettransfer
currentdict dup length dict
begin
{
1 index /TransferFunction ne { def } { pop pop } ifelse
} forall
currentdict
end
}
{
currentdict
} ifelse
end
sethalftone
} bd
/paintimage
{
colorplate 0 eq
{
{ {currentfile cyanstr readstring pop}
{currentfile magentastr readstring pop}
{currentfile yellowstr readstring pop}
{currentfile blackstr readstring pop
currentfile graystr readstring pop pop}
}
{ {currentfile cyanstr readhexstring pop}
{currentfile magentastr readhexstring pop}
{currentfile yellowstr readhexstring pop}
{currentfile blackstr readhexstring pop
currentfile graystr readhexstring pop pop}
} ifelse
true 4 colorimage
}
{
3 dict begin
/binaryOK exch def
[
1 1 5 {
dup
/currentfile cvx
[ /cyanstr /magentastr /yellowstr /blackstr /graystr ]
3 -1 roll 1 sub get cvx
binaryOK { /readstring } { /readhexstring } ifelse cvx
/pop cvx
5 -1 roll
colorplate dup 5 gt { pop 5 } if
eq not { /pop cvx } if
} for
] cvx bind
end
[
colorplate 6 eq {
/pop cvx
negativecolorplate { 0 } { 1 } ifelse
} if
colorplate 4 le
{
1 /exch cvx /sub cvx
} if
colorplate 6 ne
{
systemdict /currenttransfer get exec
aload pop
} if
] cvx
gsave
systemdict /settransfer get exec
systemdict /image get exec
grestore
} ifelse
} bd
%%EndResource
%%BeginResource: procset pdftext
%%Version: 5.0 6
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec
%%IncludeResource Helvetica
[ 32 /space/exclam/quotedbl/numbersign/dollar/percent
/ampersand/quoteright/parenleft/parenright/asterisk/plus
/comma/minus/period/slash/zero/one
/two/three/four/five/six/seven
/eight/nine/colon/semicolon/less/equal
/greater/question/at/A/B/C
/D/E/F/G/H/I
/J/K/L/M/N/O
/P/Q/R/S/T/U
/V/W/X/Y/Z/bracketleft
/backslash/bracketright/asciicircum/underscore/quoteleft/a
/b/c/d/e/f/g
/h/i/j/k/l/m
/n/o/p/q/r/s
/t/u/v/w/x/y
/z/braceleft/bar/braceright/asciitilde/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/exclamdown/cent/sterling
/fraction/yen/florin/section/currency/quotesingle
/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
/.notdef/endash/dagger/daggerdbl/periodcentered/.notdef
/paragraph/bullet/quotesinglbase/quotedblbase/quotedblright/guillemotright
/ellipsis/perthousand/.notdef/questiondown/.notdef/grave
/acute/circumflex/tilde/macron/breve/dotaccent
/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/emdash/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/AE/.notdef/ordfeminine/.notdef/.notdef
/.notdef/.notdef/Lslash/Oslash/OE/ordmasculine
/.notdef/.notdef/.notdef/.notdef/.notdef/ae
/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
/lslash/oslash/oe/germandbls/.notdef/.notdef
/.notdef/.notdef
/N8/Helvetica -1 TZ
%%IncludeResource Helvetica-BoldOblique
[/N20/Helvetica-BoldOblique -1 TZ
PDFVars/TermAll get exec end end

%%EndSetup
PDFVars begin PDF begin PDFVars/InitAll get exec
50 13 492 393 rectclip
50 13 492 393 re
W
n
0.100006 0 0 0.100006 0 0 cm
q
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
749.167 474.167 4466.67 3521.67 re
1 setgray
S
[5 40 ] 0 d
3.33333 w
n
749.167 474.167 m
749.167 3995.83 l
0  setgray
S
n
749.167 3995.83 m
749.167 3995.83 l
S
n
2145 474.167 m
2145 3995.83 l
S
n
2145 3995.83 m
2145 3995.83 l
S
n
3540.83 474.167 m
3540.83 3995.83 l
S
n
3540.83 3995.83 m
3540.83 3995.83 l
S
n
4936.67 474.167 m
4936.67 3995.83 l
S
n
4936.67 3995.83 m
4936.67 3995.83 l
S
n
749.167 474.167 m
5215.83 474.167 l
S
n
5215.83 474.167 m
5215.83 474.167 l
S
n
749.167 1061.67 m
5215.83 1061.67 l
S
n
5215.83 1061.67 m
5215.83 1061.67 l
S
n
749.167 1648.33 m
5215.83 1648.33 l
S
n
5215.83 1648.33 m
5215.83 1648.33 l
S
n
749.167 2235 m
5215.83 2235 l
S
n
5215.83 2235 m
5215.83 2235 l
S
n
749.167 2822.5 m
5215.83 2822.5 l
S
n
5215.83 2822.5 m
5215.83 2822.5 l
S
n
749.167 3409.17 m
5215.83 3409.17 l
S
n
5215.83 3409.17 m
5215.83 3409.17 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
5215.83 3995.83 m
5215.83 3995.83 l
S
[] 0 d
5 w
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
5215.83 474.167 m
5215.83 3995.83 l
S
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
749.167 474.167 m
749.167 519.167 l
S
n
749.167 3995.83 m
749.167 3951.67 l
S
q
10 0 0 10 0 0 cm
56.9167 35.3333 m
/N8 10 Tf
(115.985)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
2145 474.167 m
2145 519.167 l
S
n
2145 3995.83 m
2145 3951.67 l
S
q
10 0 0 10 0 0 cm
199.25 35.3333 m
/N8 10 Tf
(115.99)
[5.56 5.56 5.56 2.78 5.56 5.56 ] pdfxs
Q
n
3540.83 474.167 m
3540.83 519.167 l
S
n
3540.83 3995.83 m
3540.83 3951.67 l
S
q
10 0 0 10 0 0 cm
336.083 35.3333 m
/N8 10 Tf
(115.995)
[5.56 5.56 5.56 2.78 5.56 5.56 5.56 ] pdfxs
Q
n
4936.67 474.167 m
4936.67 519.167 l
S
n
4936.67 3995.83 m
4936.67 3951.67 l
S
q
10 0 0 10 0 0 cm
485.333 35.3333 m
/N8 10 Tf
(116)
[5.56 5.56 5.56 ] pdfxs
Q
n
749.167 474.167 m
793.333 474.167 l
S
n
5215.83 474.167 m
5170.83 474.167 l
S
q
10 0 0 10 0 0 cm
52.3333 43.75 m
/N8 10 Tf
(-1.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
749.167 1061.67 m
793.333 1061.67 l
S
n
5215.83 1061.67 m
5170.83 1061.67 l
S
q
10 0 0 10 0 0 cm
60.6667 102.5 m
/N8 10 Tf
(-1)
[5.84 5.56 ] pdfxs
Q
n
749.167 1648.33 m
793.333 1648.33 l
S
n
5215.83 1648.33 m
5170.83 1648.33 l
S
q
10 0 0 10 0 0 cm
52.3333 161.167 m
/N8 10 Tf
(-0.5)
[5.84 5.56 2.78 5.56 ] pdfxs
Q
n
749.167 2235 m
793.333 2235 l
S
n
5215.83 2235 m
5170.83 2235 l
S
q
10 0 0 10 0 0 cm
66.5 219.833 m
/N8 10 Tf
(0) show
Q
n
749.167 2822.5 m
793.333 2822.5 l
S
n
5215.83 2822.5 m
5170.83 2822.5 l
S
q
10 0 0 10 0 0 cm
58.1667 278.583 m
/N8 10 Tf
(0.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
749.167 3409.17 m
793.333 3409.17 l
S
n
5215.83 3409.17 m
5170.83 3409.17 l
S
q
10 0 0 10 0 0 cm
66.5 337.25 m
/N8 10 Tf
(1) show
Q
n
749.167 3995.83 m
793.333 3995.83 l
S
n
5215.83 3995.83 m
5170.83 3995.83 l
S
q
10 0 0 10 0 0 cm
58.1667 395.917 m
/N8 10 Tf
(1.5)
[5.56 2.78 5.56 ] pdfxs
Q
n
749.167 474.167 m
5215.83 474.167 l
S
n
749.167 3995.83 m
5215.83 3995.83 l
S
n
749.167 474.167 m
749.167 3995.83 l
S
n
5215.83 474.167 m
5215.83 3995.83 l
S
Q
q
n
749 473 m
749 3996 l
5217 3996 l
5217 473 l
h
W
n
5 w
1 j
n
3232.5 2985.83 m
3249.17 2950.83 l
3266.67 2914.17 l
3283.33 2876.67 l
3300.83 2839.17 l
3317.5 2800 l
3335 2760 l
3351.67 2719.17 l
3368.33 2678.33 l
3385.83 2635.83 l
3402.5 2593.33 l
3420 2550 l
3436.67 2506.67 l
3454.17 2462.5 l
3470.83 2418.33 l
3488.33 2374.17 l
3505 2329.17 l
3521.67 2284.17 l
3539.17 2239.17 l
3555.83 2194.17 l
3573.33 2149.17 l
3590 2104.17 l
3607.5 2060 l
3624.16 2015 l
3641.66 1970.83 l
3658.33 1927.5 l
3675 1884.17 l
3692.5 1841.67 l
3709.16 1799.17 l
3726.66 1758.34 l
3743.33 1717.5 l
3760.83 1677.5 l
3777.5 1638.34 l
3795 1600 l
3811.66 1562.5 l
3828.33 1525.84 l
3845.83 1490.84 l
3862.5 1456.67 l
3880 1423.34 l
3896.66 1391.67 l
3914.16 1360.84 l
3930.83 1331.67 l
3948.33 1303.34 l
3965 1276.67 l
3981.66 1251.67 l
3999.16 1227.5 l
4015.83 1205 l
4033.33 1184.17 l
4050 1165 l
4067.5 1147.5 l
4084.16 1131.67 l
4101.66 1116.67 l
4118.33 1104.17 l
4135.83 1092.5 l
4152.5 1083.34 l
4169.16 1075.84 l
4186.66 1069.17 l
4203.33 1065 l
4220.83 1062.5 l
4237.49 1061.67 l
4254.99 1062.5 l
4271.66 1065 l
4289.16 1069.17 l
4305.83 1075 l
4322.49 1082.5 l
4339.99 1091.67 l
4356.66 1103.34 l
4374.16 1115.84 l
4390.83 1130 l
4408.33 1145.84 l
4424.99 1163.34 l
4442.49 1182.5 l
4459.16 1203.34 l
4475.83 1225.84 l
4493.33 1249.17 l
4509.99 1275 l
4527.49 1300.84 l
4544.16 1329.17 l
4561.66 1358.34 l
4578.33 1389.17 l
4595.83 1420.84 l
4612.49 1454.17 l
4629.16 1488.34 l
4646.66 1523.34 l
4663.33 1559.17 l
4680.83 1596.67 l
4697.49 1635 l
4714.99 1674.17 l
4731.66 1714.17 l
4749.16 1755 l
4765.83 1795.84 l
4782.49 1838.34 l
4799.99 1880.84 l
4816.66 1924.17 l
4834.16 1967.5 l
4850.82 2011.67 l
4868.32 2055.83 l
4884.99 2100.83 l
4902.49 2145.83 l
4919.16 2190 l
1 0 0 setrgbcolor
S
n
1545.83 1090.83 m
1562.5 1100.83 l
1579.17 1113.33 l
1596.67 1127.5 l
1613.33 1143.33 l
1630.83 1160.83 l
1647.5 1180 l
1665 1200 l
1681.67 1222.5 l
1699.17 1245.83 l
1715.83 1270.83 l
1733.33 1296.67 l
1750 1324.17 l
1766.67 1353.33 l
1784.17 1384.17 l
1800.83 1415.83 l
1818.33 1448.33 l
1835 1482.5 l
1852.5 1517.5 l
1869.16 1553.33 l
1886.66 1590.83 l
1903.33 1629.17 l
1920 1667.5 l
1937.5 1707.5 l
1954.16 1748.33 l
1971.66 1789.17 l
1988.33 1831.67 l
2005.83 1874.17 l
2022.5 1917.5 l
2040 1960.83 l
2056.66 2005 l
2073.33 2049.16 l
2090.83 2093.33 l
2107.5 2138.33 l
2125 2183.33 l
2141.66 2228.33 l
2159.16 2273.33 l
2175.83 2318.33 l
2193.33 2363.33 l
2210 2407.5 l
2226.66 2451.66 l
2244.16 2495.83 l
2260.83 2540 l
2278.33 2583.33 l
2295 2625.83 l
2312.5 2668.33 l
2329.16 2709.16 l
2346.66 2750 l
2363.33 2790 l
2380 2830 l
2397.5 2868.33 l
2414.16 2905.83 l
2431.66 2941.66 l
2448.33 2977.5 l
2465.83 3011.66 l
2482.49 3045 l
2499.99 3076.66 l
2516.66 3107.5 l
2534.16 3137.5 l
2550.83 3165 l
2567.49 3191.66 l
2584.99 3217.5 l
2601.66 3241.66 l
2619.16 3264.16 l
2635.83 3285 l
2653.33 3304.16 l
2669.99 3321.66 l
2687.49 3338.33 l
2704.16 3352.5 l
2720.83 3365.83 l
2738.33 3377.49 l
2754.99 3386.66 l
2772.49 3394.99 l
2789.16 3400.83 l
2806.66 3405.83 l
2823.33 3408.33 l
2840.83 3409.16 l
2857.49 3408.33 l
2874.16 3406.66 l
2891.66 3402.49 l
2908.33 3396.66 l
2925.83 3389.16 l
2942.49 3380 l
2959.99 3368.33 l
2976.66 3355.83 l
2994.16 3341.66 l
3010.83 3325.83 l
3027.49 3308.33 l
3044.99 3289.16 l
3061.66 3269.16 l
3079.16 3246.66 l
3095.82 3223.33 l
3113.32 3198.33 l
3129.99 3171.66 l
3147.49 3144.16 l
3164.16 3115 l
3180.82 3084.16 l
3198.32 3052.5 l
3214.99 3020 l
3232.49 2985.83 l
S
n
749.167 2235.83 m
761.667 2200.83 l
778.333 2155.83 l
795.833 2111.67 l
812.5 2066.67 l
830 2022.5 l
846.666 1978.33 l
864.166 1934.17 l
880.833 1890.83 l
898.333 1848.33 l
914.999 1805.83 l
932.499 1765 l
949.166 1724.17 l
965.832 1683.33 l
983.332 1644.17 l
999.999 1605.83 l
1017.5 1568.33 l
1034.17 1531.67 l
1051.67 1496.67 l
1068.33 1461.67 l
1085.83 1428.33 l
1102.5 1396.67 l
1119.16 1365.83 l
1136.66 1335.83 l
1153.33 1307.5 l
1170.83 1280.84 l
1187.5 1255 l
1205 1231.67 l
1221.66 1208.34 l
1239.16 1187.5 l
1255.83 1168.34 l
1272.5 1150 l
1290 1134.17 l
1306.66 1119.17 l
1324.16 1105.84 l
1340.83 1094.17 l
1358.33 1085 l
1375 1076.67 l
1392.5 1070 l
1409.16 1065.84 l
1425.83 1062.5 l
1443.33 1061.67 l
1460 1061.67 l
1477.5 1064.17 l
1494.16 1068.34 l
1511.66 1074.17 l
1528.33 1081.67 l
1545.83 1090.84 l
S
Q
q
n
0 0 m
0 4320 l
5764 4320 l
5764 0 l
h
W
n
5 w
1 j
n
808.333 2155.83 m
808.333 2139.26 794.902 2125.83 778.333 2125.83 c
761.765 2125.83 748.333 2139.26 748.333 2155.83 c
748.333 2172.4 761.765 2185.83 778.333 2185.83 c
794.902 2185.83 808.333 2172.4 808.333 2155.83 c
0 0 1 setrgbcolor
S
n
842.5 2066.67 m
842.5 2050.1 829.068 2036.67 812.5 2036.67 c
795.932 2036.67 782.5 2050.1 782.5 2066.67 c
782.5 2083.23 795.932 2096.67 812.5 2096.67 c
829.068 2096.67 842.5 2083.23 842.5 2066.67 c
S
n
876.667 1978.33 m
876.667 1961.76 863.235 1948.33 846.667 1948.33 c
830.098 1948.33 816.667 1961.76 816.667 1978.33 c
816.667 1994.9 830.098 2008.33 846.667 2008.33 c
863.235 2008.33 876.667 1994.9 876.667 1978.33 c
S
n
910.833 1890.83 m
910.833 1874.26 897.402 1860.83 880.833 1860.83 c
864.265 1860.83 850.833 1874.26 850.833 1890.83 c
850.833 1907.4 864.265 1920.83 880.833 1920.83 c
897.402 1920.83 910.833 1907.4 910.833 1890.83 c
S
n
945 1805.83 m
945 1789.26 931.568 1775.83 915 1775.83 c
898.432 1775.83 885 1789.26 885 1805.83 c
885 1822.4 898.432 1835.83 915 1835.83 c
931.568 1835.83 945 1822.4 945 1805.83 c
S
n
979.167 1723.33 m
979.167 1706.76 965.735 1693.33 949.167 1693.33 c
932.598 1693.33 919.167 1706.76 919.167 1723.33 c
919.167 1739.9 932.598 1753.33 949.167 1753.33 c
965.735 1753.33 979.167 1739.9 979.167 1723.33 c
S
n
1013.33 1644.17 m
1013.33 1627.6 999.902 1614.17 983.333 1614.17 c
966.765 1614.17 953.333 1627.6 953.333 1644.17 c
953.333 1660.73 966.765 1674.17 983.333 1674.17 c
999.902 1674.17 1013.33 1660.73 1013.33 1644.17 c
S
n
1047.5 1568.33 m
1047.5 1551.76 1034.07 1538.33 1017.5 1538.33 c
1000.93 1538.33 987.5 1551.76 987.5 1568.33 c
987.5 1584.9 1000.93 1598.33 1017.5 1598.33 c
1034.07 1598.33 1047.5 1584.9 1047.5 1568.33 c
S
n
1081.67 1495.83 m
1081.67 1479.26 1068.23 1465.83 1051.67 1465.83 c
1035.1 1465.83 1021.67 1479.26 1021.67 1495.83 c
1021.67 1512.4 1035.1 1525.83 1051.67 1525.83 c
1068.23 1525.83 1081.67 1512.4 1081.67 1495.83 c
S
n
1115.83 1428.33 m
1115.83 1411.76 1102.4 1398.33 1085.83 1398.33 c
1069.26 1398.33 1055.83 1411.76 1055.83 1428.33 c
1055.83 1444.9 1069.26 1458.33 1085.83 1458.33 c
1102.4 1458.33 1115.83 1444.9 1115.83 1428.33 c
S
n
1149.17 1365.83 m
1149.17 1349.26 1135.73 1335.83 1119.17 1335.83 c
1102.6 1335.83 1089.17 1349.26 1089.17 1365.83 c
1089.17 1382.4 1102.6 1395.83 1119.17 1395.83 c
1135.73 1395.83 1149.17 1382.4 1149.17 1365.83 c
S
n
1183.33 1307.5 m
1183.33 1290.93 1169.9 1277.5 1153.33 1277.5 c
1136.76 1277.5 1123.33 1290.93 1123.33 1307.5 c
1123.33 1324.07 1136.76 1337.5 1153.33 1337.5 c
1169.9 1337.5 1183.33 1324.07 1183.33 1307.5 c
S
n
1217.5 1255 m
1217.5 1238.43 1204.07 1225 1187.5 1225 c
1170.93 1225 1157.5 1238.43 1157.5 1255 c
1157.5 1271.57 1170.93 1285 1187.5 1285 c
1204.07 1285 1217.5 1271.57 1217.5 1255 c
S
n
1251.67 1208.33 m
1251.67 1191.76 1238.23 1178.33 1221.67 1178.33 c
1205.1 1178.33 1191.67 1191.76 1191.67 1208.33 c
1191.67 1224.9 1205.1 1238.33 1221.67 1238.33 c
1238.23 1238.33 1251.67 1224.9 1251.67 1208.33 c
S
n
1285.83 1168.33 m
1285.83 1151.76 1272.4 1138.33 1255.83 1138.33 c
1239.26 1138.33 1225.83 1151.76 1225.83 1168.33 c
1225.83 1184.9 1239.26 1198.33 1255.83 1198.33 c
1272.4 1198.33 1285.83 1184.9 1285.83 1168.33 c
S
n
1320 1133.33 m
1320 1116.76 1306.57 1103.33 1290 1103.33 c
1273.43 1103.33 1260 1116.76 1260 1133.33 c
1260 1149.9 1273.43 1163.33 1290 1163.33 c
1306.57 1163.33 1320 1149.9 1320 1133.33 c
S
n
1354.17 1105.83 m
1354.17 1089.26 1340.73 1075.83 1324.17 1075.83 c
1307.6 1075.83 1294.17 1089.26 1294.17 1105.83 c
1294.17 1122.4 1307.6 1135.83 1324.17 1135.83 c
1340.73 1135.83 1354.17 1122.4 1354.17 1105.83 c
S
n
1388.33 1085 m
1388.33 1068.43 1374.9 1055 1358.33 1055 c
1341.76 1055 1328.33 1068.43 1328.33 1085 c
1328.33 1101.57 1341.76 1115 1358.33 1115 c
1374.9 1115 1388.33 1101.57 1388.33 1085 c
S
n
1422.5 1070 m
1422.5 1053.43 1409.07 1040 1392.5 1040 c
1375.93 1040 1362.5 1053.43 1362.5 1070 c
1362.5 1086.57 1375.93 1100 1392.5 1100 c
1409.07 1100 1422.5 1086.57 1422.5 1070 c
S
n
1455.83 1062.5 m
1455.83 1045.93 1442.4 1032.5 1425.83 1032.5 c
1409.26 1032.5 1395.83 1045.93 1395.83 1062.5 c
1395.83 1079.07 1409.26 1092.5 1425.83 1092.5 c
1442.4 1092.5 1455.83 1079.07 1455.83 1062.5 c
S
n
1490 1061.67 m
1490 1045.1 1476.57 1031.67 1460 1031.67 c
1443.43 1031.67 1430 1045.1 1430 1061.67 c
1430 1078.23 1443.43 1091.67 1460 1091.67 c
1476.57 1091.67 1490 1078.23 1490 1061.67 c
S
n
1524.17 1068.33 m
1524.17 1051.76 1510.73 1038.33 1494.17 1038.33 c
1477.6 1038.33 1464.17 1051.76 1464.17 1068.33 c
1464.17 1084.9 1477.6 1098.33 1494.17 1098.33 c
1510.73 1098.33 1524.17 1084.9 1524.17 1068.33 c
S
n
1558.33 1080.83 m
1558.33 1064.26 1544.9 1050.83 1528.33 1050.83 c
1511.76 1050.83 1498.33 1064.26 1498.33 1080.83 c
1498.33 1097.4 1511.76 1110.83 1528.33 1110.83 c
1544.9 1110.83 1558.33 1097.4 1558.33 1080.83 c
S
n
1592.5 1100.83 m
1592.5 1084.26 1579.07 1070.83 1562.5 1070.83 c
1545.93 1070.83 1532.5 1084.26 1532.5 1100.83 c
1532.5 1117.4 1545.93 1130.83 1562.5 1130.83 c
1579.07 1130.83 1592.5 1117.4 1592.5 1100.83 c
S
n
1626.67 1127.5 m
1626.67 1110.93 1613.23 1097.5 1596.67 1097.5 c
1580.1 1097.5 1566.67 1110.93 1566.67 1127.5 c
1566.67 1144.07 1580.1 1157.5 1596.67 1157.5 c
1613.23 1157.5 1626.67 1144.07 1626.67 1127.5 c
S
n
1660.83 1160.83 m
1660.83 1144.26 1647.4 1130.83 1630.83 1130.83 c
1614.26 1130.83 1600.83 1144.26 1600.83 1160.83 c
1600.83 1177.4 1614.26 1190.83 1630.83 1190.83 c
1647.4 1190.83 1660.83 1177.4 1660.83 1160.83 c
S
n
1695 1200 m
1695 1183.43 1681.57 1170 1665 1170 c
1648.43 1170 1635 1183.43 1635 1200 c
1635 1216.57 1648.43 1230 1665 1230 c
1681.57 1230 1695 1216.57 1695 1200 c
S
n
1729.17 1245.83 m
1729.17 1229.26 1715.73 1215.83 1699.17 1215.83 c
1682.6 1215.83 1669.17 1229.26 1669.17 1245.83 c
1669.17 1262.4 1682.6 1275.83 1699.17 1275.83 c
1715.73 1275.83 1729.17 1262.4 1729.17 1245.83 c
S
n
1763.33 1296.67 m
1763.33 1280.1 1749.9 1266.67 1733.33 1266.67 c
1716.76 1266.67 1703.33 1280.1 1703.33 1296.67 c
1703.33 1313.23 1716.76 1326.67 1733.33 1326.67 c
1749.9 1326.67 1763.33 1313.23 1763.33 1296.67 c
S
n
1796.67 1353.33 m
1796.67 1336.76 1783.24 1323.33 1766.67 1323.33 c
1750.1 1323.33 1736.67 1336.76 1736.67 1353.33 c
1736.67 1369.9 1750.1 1383.33 1766.67 1383.33 c
1783.24 1383.33 1796.67 1369.9 1796.67 1353.33 c
S
n
1830.83 1415.83 m
1830.83 1399.26 1817.4 1385.83 1800.83 1385.83 c
1784.26 1385.83 1770.83 1399.26 1770.83 1415.83 c
1770.83 1432.4 1784.26 1445.83 1800.83 1445.83 c
1817.4 1445.83 1830.83 1432.4 1830.83 1415.83 c
S
n
1865 1482.5 m
1865 1465.93 1851.57 1452.5 1835 1452.5 c
1818.43 1452.5 1805 1465.93 1805 1482.5 c
1805 1499.07 1818.43 1512.5 1835 1512.5 c
1851.57 1512.5 1865 1499.07 1865 1482.5 c
S
n
1899.17 1553.33 m
1899.17 1536.76 1885.74 1523.33 1869.17 1523.33 c
1852.6 1523.33 1839.17 1536.76 1839.17 1553.33 c
1839.17 1569.9 1852.6 1583.33 1869.17 1583.33 c
1885.74 1583.33 1899.17 1569.9 1899.17 1553.33 c
S
n
1933.33 1628.33 m
1933.33 1611.76 1919.9 1598.33 1903.33 1598.33 c
1886.76 1598.33 1873.33 1611.76 1873.33 1628.33 c
1873.33 1644.9 1886.76 1658.33 1903.33 1658.33 c
1919.9 1658.33 1933.33 1644.9 1933.33 1628.33 c
S
n
1967.5 1707.5 m
1967.5 1690.93 1954.07 1677.5 1937.5 1677.5 c
1920.93 1677.5 1907.5 1690.93 1907.5 1707.5 c
1907.5 1724.07 1920.93 1737.5 1937.5 1737.5 c
1954.07 1737.5 1967.5 1724.07 1967.5 1707.5 c
S
n
2001.67 1789.17 m
2001.67 1772.6 1988.24 1759.17 1971.67 1759.17 c
1955.1 1759.17 1941.67 1772.6 1941.67 1789.17 c
1941.67 1805.73 1955.1 1819.17 1971.67 1819.17 c
1988.24 1819.17 2001.67 1805.73 2001.67 1789.17 c
S
n
2035.83 1874.17 m
2035.83 1857.6 2022.4 1844.17 2005.83 1844.17 c
1989.26 1844.17 1975.83 1857.6 1975.83 1874.17 c
1975.83 1890.73 1989.26 1904.17 2005.83 1904.17 c
2022.4 1904.17 2035.83 1890.73 2035.83 1874.17 c
S
n
2070 1960.83 m
2070 1944.26 2056.57 1930.83 2040 1930.83 c
2023.43 1930.83 2010 1944.26 2010 1960.83 c
2010 1977.4 2023.43 1990.83 2040 1990.83 c
2056.57 1990.83 2070 1977.4 2070 1960.83 c
S
n
2103.33 2049.17 m
2103.33 2032.6 2089.9 2019.17 2073.33 2019.17 c
2056.76 2019.17 2043.33 2032.6 2043.33 2049.17 c
2043.33 2065.73 2056.76 2079.17 2073.33 2079.17 c
2089.9 2079.17 2103.33 2065.73 2103.33 2049.17 c
S
n
2137.5 2138.33 m
2137.5 2121.76 2124.07 2108.33 2107.5 2108.33 c
2090.93 2108.33 2077.5 2121.76 2077.5 2138.33 c
2077.5 2154.9 2090.93 2168.33 2107.5 2168.33 c
2124.07 2168.33 2137.5 2154.9 2137.5 2138.33 c
S
n
2171.67 2228.33 m
2171.67 2211.76 2158.24 2198.33 2141.67 2198.33 c
2125.1 2198.33 2111.67 2211.76 2111.67 2228.33 c
2111.67 2244.9 2125.1 2258.33 2141.67 2258.33 c
2158.24 2258.33 2171.67 2244.9 2171.67 2228.33 c
S
n
2205.83 2318.33 m
2205.83 2301.76 2192.4 2288.33 2175.83 2288.33 c
2159.26 2288.33 2145.83 2301.76 2145.83 2318.33 c
2145.83 2334.9 2159.26 2348.33 2175.83 2348.33 c
2192.4 2348.33 2205.83 2334.9 2205.83 2318.33 c
S
n
2240 2407.5 m
2240 2390.93 2226.57 2377.5 2210 2377.5 c
2193.43 2377.5 2180 2390.93 2180 2407.5 c
2180 2424.07 2193.43 2437.5 2210 2437.5 c
2226.57 2437.5 2240 2424.07 2240 2407.5 c
S
n
2274.17 2495.83 m
2274.17 2479.26 2260.74 2465.83 2244.17 2465.83 c
2227.6 2465.83 2214.17 2479.26 2214.17 2495.83 c
2214.17 2512.4 2227.6 2525.83 2244.17 2525.83 c
2260.74 2525.83 2274.17 2512.4 2274.17 2495.83 c
S
n
2308.33 2583.33 m
2308.33 2566.76 2294.9 2553.33 2278.33 2553.33 c
2261.76 2553.33 2248.33 2566.76 2248.33 2583.33 c
2248.33 2599.9 2261.76 2613.33 2278.33 2613.33 c
2294.9 2613.33 2308.33 2599.9 2308.33 2583.33 c
S
n
2342.5 2668.33 m
2342.5 2651.76 2329.07 2638.33 2312.5 2638.33 c
2295.93 2638.33 2282.5 2651.76 2282.5 2668.33 c
2282.5 2684.9 2295.93 2698.33 2312.5 2698.33 c
2329.07 2698.33 2342.5 2684.9 2342.5 2668.33 c
S
n
2376.67 2750 m
2376.67 2733.43 2363.24 2720 2346.67 2720 c
2330.1 2720 2316.67 2733.43 2316.67 2750 c
2316.67 2766.57 2330.1 2780 2346.67 2780 c
2363.24 2780 2376.67 2766.57 2376.67 2750 c
S
n
2410 2830 m
2410 2813.43 2396.57 2800 2380 2800 c
2363.43 2800 2350 2813.43 2350 2830 c
2350 2846.57 2363.43 2860 2380 2860 c
2396.57 2860 2410 2846.57 2410 2830 c
S
n
2444.17 2905.83 m
2444.17 2889.26 2430.74 2875.83 2414.17 2875.83 c
2397.6 2875.83 2384.17 2889.26 2384.17 2905.83 c
2384.17 2922.4 2397.6 2935.83 2414.17 2935.83 c
2430.74 2935.83 2444.17 2922.4 2444.17 2905.83 c
S
n
2478.33 2977.5 m
2478.33 2960.93 2464.9 2947.5 2448.33 2947.5 c
2431.76 2947.5 2418.33 2960.93 2418.33 2977.5 c
2418.33 2994.07 2431.76 3007.5 2448.33 3007.5 c
2464.9 3007.5 2478.33 2994.07 2478.33 2977.5 c
S
n
2512.5 3045 m
2512.5 3028.43 2499.07 3015 2482.5 3015 c
2465.93 3015 2452.5 3028.43 2452.5 3045 c
2452.5 3061.57 2465.93 3075 2482.5 3075 c
2499.07 3075 2512.5 3061.57 2512.5 3045 c
S
n
2546.67 3107.5 m
2546.67 3090.93 2533.24 3077.5 2516.67 3077.5 c
2500.1 3077.5 2486.67 3090.93 2486.67 3107.5 c
2486.67 3124.07 2500.1 3137.5 2516.67 3137.5 c
2533.24 3137.5 2546.67 3124.07 2546.67 3107.5 c
S
n
2580.83 3165 m
2580.83 3148.43 2567.4 3135 2550.83 3135 c
2534.26 3135 2520.83 3148.43 2520.83 3165 c
2520.83 3181.57 2534.26 3195 2550.83 3195 c
2567.4 3195 2580.83 3181.57 2580.83 3165 c
S
n
2615 3217.5 m
2615 3200.93 2601.57 3187.5 2585 3187.5 c
2568.43 3187.5 2555 3200.93 2555 3217.5 c
2555 3234.07 2568.43 3247.5 2585 3247.5 c
2601.57 3247.5 2615 3234.07 2615 3217.5 c
S
n
2649.17 3264.17 m
2649.17 3247.6 2635.74 3234.17 2619.17 3234.17 c
2602.6 3234.17 2589.17 3247.6 2589.17 3264.17 c
2589.17 3280.73 2602.6 3294.17 2619.17 3294.17 c
2635.74 3294.17 2649.17 3280.73 2649.17 3264.17 c
S
n
2683.33 3304.17 m
2683.33 3287.6 2669.9 3274.17 2653.33 3274.17 c
2636.76 3274.17 2623.33 3287.6 2623.33 3304.17 c
2623.33 3320.73 2636.76 3334.17 2653.33 3334.17 c
2669.9 3334.17 2683.33 3320.73 2683.33 3304.17 c
S
n
2717.5 3338.33 m
2717.5 3321.76 2704.07 3308.33 2687.5 3308.33 c
2670.93 3308.33 2657.5 3321.76 2657.5 3338.33 c
2657.5 3354.9 2670.93 3368.33 2687.5 3368.33 c
2704.07 3368.33 2717.5 3354.9 2717.5 3338.33 c
S
n
2750.83 3365.83 m
2750.83 3349.26 2737.4 3335.83 2720.83 3335.83 c
2704.26 3335.83 2690.83 3349.26 2690.83 3365.83 c
2690.83 3382.4 2704.26 3395.83 2720.83 3395.83 c
2737.4 3395.83 2750.83 3382.4 2750.83 3365.83 c
S
n
2785 3386.67 m
2785 3370.1 2771.57 3356.67 2755 3356.67 c
2738.43 3356.67 2725 3370.1 2725 3386.67 c
2725 3403.23 2738.43 3416.67 2755 3416.67 c
2771.57 3416.67 2785 3403.23 2785 3386.67 c
S
n
2819.17 3400.83 m
2819.17 3384.26 2805.74 3370.83 2789.17 3370.83 c
2772.6 3370.83 2759.17 3384.26 2759.17 3400.83 c
2759.17 3417.4 2772.6 3430.83 2789.17 3430.83 c
2805.74 3430.83 2819.17 3417.4 2819.17 3400.83 c
S
n
2853.33 3408.33 m
2853.33 3391.76 2839.9 3378.33 2823.33 3378.33 c
2806.76 3378.33 2793.33 3391.76 2793.33 3408.33 c
2793.33 3424.9 2806.76 3438.33 2823.33 3438.33 c
2839.9 3438.33 2853.33 3424.9 2853.33 3408.33 c
S
n
2887.5 3409.17 m
2887.5 3392.6 2874.07 3379.17 2857.5 3379.17 c
2840.93 3379.17 2827.5 3392.6 2827.5 3409.17 c
2827.5 3425.73 2840.93 3439.17 2857.5 3439.17 c
2874.07 3439.17 2887.5 3425.73 2887.5 3409.17 c
S
n
2921.67 3402.5 m
2921.67 3385.93 2908.24 3372.5 2891.67 3372.5 c
2875.1 3372.5 2861.67 3385.93 2861.67 3402.5 c
2861.67 3419.07 2875.1 3432.5 2891.67 3432.5 c
2908.24 3432.5 2921.67 3419.07 2921.67 3402.5 c
S
n
2955.83 3389.17 m
2955.83 3372.6 2942.4 3359.17 2925.83 3359.17 c
2909.26 3359.17 2895.83 3372.6 2895.83 3389.17 c
2895.83 3405.73 2909.26 3419.17 2925.83 3419.17 c
2942.4 3419.17 2955.83 3405.73 2955.83 3389.17 c
S
n
2990 3369.17 m
2990 3352.6 2976.57 3339.17 2960 3339.17 c
2943.43 3339.17 2930 3352.6 2930 3369.17 c
2930 3385.73 2943.43 3399.17 2960 3399.17 c
2976.57 3399.17 2990 3385.73 2990 3369.17 c
S
n
3024.17 3341.67 m
3024.17 3325.1 3010.74 3311.67 2994.17 3311.67 c
2977.6 3311.67 2964.17 3325.1 2964.17 3341.67 c
2964.17 3358.23 2977.6 3371.67 2994.17 3371.67 c
3010.74 3371.67 3024.17 3358.23 3024.17 3341.67 c
S
n
3057.5 3309.17 m
3057.5 3292.6 3044.07 3279.17 3027.5 3279.17 c
3010.93 3279.17 2997.5 3292.6 2997.5 3309.17 c
2997.5 3325.73 3010.93 3339.17 3027.5 3339.17 c
3044.07 3339.17 3057.5 3325.73 3057.5 3309.17 c
S
n
3091.67 3269.17 m
3091.67 3252.6 3078.24 3239.17 3061.67 3239.17 c
3045.1 3239.17 3031.67 3252.6 3031.67 3269.17 c
3031.67 3285.73 3045.1 3299.17 3061.67 3299.17 c
3078.24 3299.17 3091.67 3285.73 3091.67 3269.17 c
S
n
3125.83 3223.33 m
3125.83 3206.76 3112.4 3193.33 3095.83 3193.33 c
3079.26 3193.33 3065.83 3206.76 3065.83 3223.33 c
3065.83 3239.9 3079.26 3253.33 3095.83 3253.33 c
3112.4 3253.33 3125.83 3239.9 3125.83 3223.33 c
S
n
3160 3171.67 m
3160 3155.1 3146.57 3141.67 3130 3141.67 c
3113.43 3141.67 3100 3155.1 3100 3171.67 c
3100 3188.23 3113.43 3201.67 3130 3201.67 c
3146.57 3201.67 3160 3188.23 3160 3171.67 c
S
n
3194.17 3115 m
3194.17 3098.43 3180.74 3085 3164.17 3085 c
3147.6 3085 3134.17 3098.43 3134.17 3115 c
3134.17 3131.57 3147.6 3145 3164.17 3145 c
3180.74 3145 3194.17 3131.57 3194.17 3115 c
S
n
3228.33 3052.5 m
3228.33 3035.93 3214.9 3022.5 3198.33 3022.5 c
3181.76 3022.5 3168.33 3035.93 3168.33 3052.5 c
3168.33 3069.07 3181.76 3082.5 3198.33 3082.5 c
3214.9 3082.5 3228.33 3069.07 3228.33 3052.5 c
S
n
3262.5 2985.83 m
3262.5 2969.26 3249.07 2955.83 3232.5 2955.83 c
3215.93 2955.83 3202.5 2969.26 3202.5 2985.83 c
3202.5 3002.4 3215.93 3015.83 3232.5 3015.83 c
3249.07 3015.83 3262.5 3002.4 3262.5 2985.83 c
S
n
3296.67 2914.17 m
3296.67 2897.6 3283.24 2884.17 3266.67 2884.17 c
3250.1 2884.17 3236.67 2897.6 3236.67 2914.17 c
3236.67 2930.73 3250.1 2944.17 3266.67 2944.17 c
3283.24 2944.17 3296.67 2930.73 3296.67 2914.17 c
S
n
3330.83 2839.17 m
3330.83 2822.6 3317.4 2809.17 3300.83 2809.17 c
3284.26 2809.17 3270.83 2822.6 3270.83 2839.17 c
3270.83 2855.73 3284.26 2869.17 3300.83 2869.17 c
3317.4 2869.17 3330.83 2855.73 3330.83 2839.17 c
S
n
3365 2760 m
3365 2743.43 3351.57 2730 3335 2730 c
3318.43 2730 3305 2743.43 3305 2760 c
3305 2776.57 3318.43 2790 3335 2790 c
3351.57 2790 3365 2776.57 3365 2760 c
S
n
3398.33 2678.33 m
3398.33 2661.76 3384.9 2648.33 3368.33 2648.33 c
3351.76 2648.33 3338.33 2661.76 3338.33 2678.33 c
3338.33 2694.9 3351.76 2708.33 3368.33 2708.33 c
3384.9 2708.33 3398.33 2694.9 3398.33 2678.33 c
S
n
3432.5 2593.33 m
3432.5 2576.76 3419.07 2563.33 3402.5 2563.33 c
3385.93 2563.33 3372.5 2576.76 3372.5 2593.33 c
3372.5 2609.9 3385.93 2623.33 3402.5 2623.33 c
3419.07 2623.33 3432.5 2609.9 3432.5 2593.33 c
S
n
3466.67 2506.67 m
3466.67 2490.1 3453.24 2476.67 3436.67 2476.67 c
3420.1 2476.67 3406.67 2490.1 3406.67 2506.67 c
3406.67 2523.23 3420.1 2536.67 3436.67 2536.67 c
3453.24 2536.67 3466.67 2523.23 3466.67 2506.67 c
S
n
3500.83 2418.33 m
3500.83 2401.76 3487.4 2388.33 3470.83 2388.33 c
3454.27 2388.33 3440.83 2401.76 3440.83 2418.33 c
3440.83 2434.9 3454.27 2448.33 3470.83 2448.33 c
3487.4 2448.33 3500.83 2434.9 3500.83 2418.33 c
S
n
3535 2329.17 m
3535 2312.6 3521.57 2299.17 3505 2299.17 c
3488.43 2299.17 3475 2312.6 3475 2329.17 c
3475 2345.73 3488.43 2359.17 3505 2359.17 c
3521.57 2359.17 3535 2345.73 3535 2329.17 c
S
n
3569.17 2239.17 m
3569.17 2222.6 3555.74 2209.17 3539.17 2209.17 c
3522.6 2209.17 3509.17 2222.6 3509.17 2239.17 c
3509.17 2255.73 3522.6 2269.17 3539.17 2269.17 c
3555.74 2269.17 3569.17 2255.73 3569.17 2239.17 c
S
n
3603.33 2149.17 m
3603.33 2132.6 3589.9 2119.17 3573.33 2119.17 c
3556.77 2119.17 3543.33 2132.6 3543.33 2149.17 c
3543.33 2165.73 3556.77 2179.17 3573.33 2179.17 c
3589.9 2179.17 3603.33 2165.73 3603.33 2149.17 c
S
n
3637.5 2059.17 m
3637.5 2042.6 3624.07 2029.17 3607.5 2029.17 c
3590.93 2029.17 3577.5 2042.6 3577.5 2059.17 c
3577.5 2075.73 3590.93 2089.17 3607.5 2089.17 c
3624.07 2089.17 3637.5 2075.73 3637.5 2059.17 c
S
n
3671.67 1970.83 m
3671.67 1954.26 3658.24 1940.83 3641.67 1940.83 c
3625.1 1940.83 3611.67 1954.26 3611.67 1970.83 c
3611.67 1987.4 3625.1 2000.83 3641.67 2000.83 c
3658.24 2000.83 3671.67 1987.4 3671.67 1970.83 c
S
n
3705 1884.17 m
3705 1867.6 3691.57 1854.17 3675 1854.17 c
3658.43 1854.17 3645 1867.6 3645 1884.17 c
3645 1900.73 3658.43 1914.17 3675 1914.17 c
3691.57 1914.17 3705 1900.73 3705 1884.17 c
S
n
3739.17 1799.17 m
3739.17 1782.6 3725.74 1769.17 3709.17 1769.17 c
3692.6 1769.17 3679.17 1782.6 3679.17 1799.17 c
3679.17 1815.73 3692.6 1829.17 3709.17 1829.17 c
3725.74 1829.17 3739.17 1815.73 3739.17 1799.17 c
S
n
3773.33 1717.5 m
3773.33 1700.93 3759.9 1687.5 3743.33 1687.5 c
3726.77 1687.5 3713.33 1700.93 3713.33 1717.5 c
3713.33 1734.07 3726.77 1747.5 3743.33 1747.5 c
3759.9 1747.5 3773.33 1734.07 3773.33 1717.5 c
S
n
3807.5 1638.33 m
3807.5 1621.76 3794.07 1608.33 3777.5 1608.33 c
3760.93 1608.33 3747.5 1621.76 3747.5 1638.33 c
3747.5 1654.9 3760.93 1668.33 3777.5 1668.33 c
3794.07 1668.33 3807.5 1654.9 3807.5 1638.33 c
S
n
3841.67 1562.5 m
3841.67 1545.93 3828.24 1532.5 3811.67 1532.5 c
3795.1 1532.5 3781.67 1545.93 3781.67 1562.5 c
3781.67 1579.07 3795.1 1592.5 3811.67 1592.5 c
3828.24 1592.5 3841.67 1579.07 3841.67 1562.5 c
S
n
3875.83 1490.83 m
3875.83 1474.26 3862.4 1460.83 3845.83 1460.83 c
3829.27 1460.83 3815.83 1474.26 3815.83 1490.83 c
3815.83 1507.4 3829.27 1520.83 3845.83 1520.83 c
3862.4 1520.83 3875.83 1507.4 3875.83 1490.83 c
S
n
3910 1423.33 m
3910 1406.76 3896.57 1393.33 3880 1393.33 c
3863.43 1393.33 3850 1406.76 3850 1423.33 c
3850 1439.9 3863.43 1453.33 3880 1453.33 c
3896.57 1453.33 3910 1439.9 3910 1423.33 c
S
n
3944.17 1360.83 m
3944.17 1344.26 3930.74 1330.83 3914.17 1330.83 c
3897.6 1330.83 3884.17 1344.26 3884.17 1360.83 c
3884.17 1377.4 3897.6 1390.83 3914.17 1390.83 c
3930.74 1390.83 3944.17 1377.4 3944.17 1360.83 c
S
n
3978.33 1303.33 m
3978.33 1286.76 3964.9 1273.33 3948.33 1273.33 c
3931.77 1273.33 3918.33 1286.76 3918.33 1303.33 c
3918.33 1319.9 3931.77 1333.33 3948.33 1333.33 c
3964.9 1333.33 3978.33 1319.9 3978.33 1303.33 c
S
n
4011.67 1251.67 m
4011.67 1235.1 3998.24 1221.67 3981.67 1221.67 c
3965.1 1221.67 3951.67 1235.1 3951.67 1251.67 c
3951.67 1268.23 3965.1 1281.67 3981.67 1281.67 c
3998.24 1281.67 4011.67 1268.23 4011.67 1251.67 c
S
n
4045.83 1205 m
4045.83 1188.43 4032.4 1175 4015.83 1175 c
3999.27 1175 3985.83 1188.43 3985.83 1205 c
3985.83 1221.57 3999.27 1235 4015.83 1235 c
4032.4 1235 4045.83 1221.57 4045.83 1205 c
S
n
4080 1165 m
4080 1148.43 4066.57 1135 4050 1135 c
4033.43 1135 4020 1148.43 4020 1165 c
4020 1181.57 4033.43 1195 4050 1195 c
4066.57 1195 4080 1181.57 4080 1165 c
S
n
4114.17 1130.83 m
4114.17 1114.26 4100.74 1100.83 4084.17 1100.83 c
4067.6 1100.83 4054.17 1114.26 4054.17 1130.83 c
4054.17 1147.4 4067.6 1160.83 4084.17 1160.83 c
4100.74 1160.83 4114.17 1147.4 4114.17 1130.83 c
S
n
4148.33 1104.17 m
4148.33 1087.6 4134.9 1074.17 4118.33 1074.17 c
4101.77 1074.17 4088.33 1087.6 4088.33 1104.17 c
4088.33 1120.73 4101.77 1134.17 4118.33 1134.17 c
4134.9 1134.17 4148.33 1120.73 4148.33 1104.17 c
S
n
4182.5 1083.33 m
4182.5 1066.76 4169.07 1053.33 4152.5 1053.33 c
4135.93 1053.33 4122.5 1066.76 4122.5 1083.33 c
4122.5 1099.9 4135.93 1113.33 4152.5 1113.33 c
4169.07 1113.33 4182.5 1099.9 4182.5 1083.33 c
S
n
4216.67 1069.17 m
4216.67 1052.6 4203.24 1039.17 4186.67 1039.17 c
4170.1 1039.17 4156.67 1052.6 4156.67 1069.17 c
4156.67 1085.73 4170.1 1099.17 4186.67 1099.17 c
4203.24 1099.17 4216.67 1085.73 4216.67 1069.17 c
S
n
4250.83 1062.5 m
4250.83 1045.93 4237.4 1032.5 4220.83 1032.5 c
4204.27 1032.5 4190.83 1045.93 4190.83 1062.5 c
4190.83 1079.07 4204.27 1092.5 4220.83 1092.5 c
4237.4 1092.5 4250.83 1079.07 4250.83 1062.5 c
S
n
4285 1062.5 m
4285 1045.93 4271.57 1032.5 4255 1032.5 c
4238.43 1032.5 4225 1045.93 4225 1062.5 c
4225 1079.07 4238.43 1092.5 4255 1092.5 c
4271.57 1092.5 4285 1079.07 4285 1062.5 c
S
n
4319.17 1069.17 m
4319.17 1052.6 4305.74 1039.17 4289.17 1039.17 c
4272.6 1039.17 4259.17 1052.6 4259.17 1069.17 c
4259.17 1085.73 4272.6 1099.17 4289.17 1099.17 c
4305.74 1099.17 4319.17 1085.73 4319.17 1069.17 c
S
n
4352.5 1082.5 m
4352.5 1065.93 4339.07 1052.5 4322.5 1052.5 c
4305.93 1052.5 4292.5 1065.93 4292.5 1082.5 c
4292.5 1099.07 4305.93 1112.5 4322.5 1112.5 c
4339.07 1112.5 4352.5 1099.07 4352.5 1082.5 c
S
n
4386.67 1103.33 m
4386.67 1086.76 4373.24 1073.33 4356.67 1073.33 c
4340.1 1073.33 4326.67 1086.76 4326.67 1103.33 c
4326.67 1119.9 4340.1 1133.33 4356.67 1133.33 c
4373.24 1133.33 4386.67 1119.9 4386.67 1103.33 c
S
n
4420.83 1130 m
4420.83 1113.43 4407.4 1100 4390.83 1100 c
4374.27 1100 4360.83 1113.43 4360.83 1130 c
4360.83 1146.57 4374.27 1160 4390.83 1160 c
4407.4 1160 4420.83 1146.57 4420.83 1130 c
S
n
4455 1163.33 m
4455 1146.76 4441.57 1133.33 4425 1133.33 c
4408.43 1133.33 4395 1146.76 4395 1163.33 c
4395 1179.9 4408.43 1193.33 4425 1193.33 c
4441.57 1193.33 4455 1179.9 4455 1163.33 c
S
n
4489.17 1203.33 m
4489.17 1186.76 4475.74 1173.33 4459.17 1173.33 c
4442.6 1173.33 4429.17 1186.76 4429.17 1203.33 c
4429.17 1219.9 4442.6 1233.33 4459.17 1233.33 c
4475.74 1233.33 4489.17 1219.9 4489.17 1203.33 c
S
n
4523.33 1249.17 m
4523.33 1232.6 4509.9 1219.17 4493.33 1219.17 c
4476.77 1219.17 4463.33 1232.6 4463.33 1249.17 c
4463.33 1265.73 4476.77 1279.17 4493.33 1279.17 c
4509.9 1279.17 4523.33 1265.73 4523.33 1249.17 c
S
n
4557.5 1300.83 m
4557.5 1284.26 4544.07 1270.83 4527.5 1270.83 c
4510.93 1270.83 4497.5 1284.26 4497.5 1300.83 c
4497.5 1317.4 4510.93 1330.83 4527.5 1330.83 c
4544.07 1330.83 4557.5 1317.4 4557.5 1300.83 c
S
n
4591.67 1358.33 m
4591.67 1341.76 4578.24 1328.33 4561.67 1328.33 c
4545.1 1328.33 4531.67 1341.76 4531.67 1358.33 c
4531.67 1374.9 4545.1 1388.33 4561.67 1388.33 c
4578.24 1388.33 4591.67 1374.9 4591.67 1358.33 c
S
n
4625.83 2235 m
4625.83 2218.43 4612.4 2205 4595.83 2205 c
4579.27 2205 4565.83 2218.43 4565.83 2235 c
4565.83 2251.57 4579.27 2265 4595.83 2265 c
4612.4 2265 4625.83 2251.57 4625.83 2235 c
S
n
4659.17 2235 m
4659.17 2218.43 4645.74 2205 4629.17 2205 c
4612.6 2205 4599.17 2218.43 4599.17 2235 c
4599.17 2251.57 4612.6 2265 4629.17 2265 c
4645.74 2265 4659.17 2251.57 4659.17 2235 c
S
n
4693.33 2235 m
4693.33 2218.43 4679.9 2205 4663.33 2205 c
4646.77 2205 4633.33 2218.43 4633.33 2235 c
4633.33 2251.57 4646.77 2265 4663.33 2265 c
4679.9 2265 4693.33 2251.57 4693.33 2235 c
S
n
4727.5 2235 m
4727.5 2218.43 4714.07 2205 4697.5 2205 c
4680.93 2205 4667.5 2218.43 4667.5 2235 c
4667.5 2251.57 4680.93 2265 4697.5 2265 c
4714.07 2265 4727.5 2251.57 4727.5 2235 c
S
n
4761.67 2235 m
4761.67 2218.43 4748.24 2205 4731.67 2205 c
4715.1 2205 4701.67 2218.43 4701.67 2235 c
4701.67 2251.57 4715.1 2265 4731.67 2265 c
4748.24 2265 4761.67 2251.57 4761.67 2235 c
S
n
4795.83 2235 m
4795.83 2218.43 4782.4 2205 4765.83 2205 c
4749.27 2205 4735.83 2218.43 4735.83 2235 c
4735.83 2251.57 4749.27 2265 4765.83 2265 c
4782.4 2265 4795.83 2251.57 4795.83 2235 c
S
n
4830 2235 m
4830 2218.43 4816.57 2205 4800 2205 c
4783.43 2205 4770 2218.43 4770 2235 c
4770 2251.57 4783.43 2265 4800 2265 c
4816.57 2265 4830 2251.57 4830 2235 c
S
n
4864.17 2235 m
4864.17 2218.43 4850.74 2205 4834.17 2205 c
4817.6 2205 4804.17 2218.43 4804.17 2235 c
4804.17 2251.57 4817.6 2265 4834.17 2265 c
4850.74 2265 4864.17 2251.57 4864.17 2235 c
S
n
4898.33 2235 m
4898.33 2218.43 4884.9 2205 4868.33 2205 c
4851.77 2205 4838.33 2218.43 4838.33 2235 c
4838.33 2251.57 4851.77 2265 4868.33 2265 c
4884.9 2265 4898.33 2251.57 4898.33 2235 c
S
n
4932.5 2235 m
4932.5 2218.43 4919.07 2205 4902.5 2205 c
4885.93 2205 4872.5 2218.43 4872.5 2235 c
4872.5 2251.57 4885.93 2265 4902.5 2265 c
4919.07 2265 4932.5 2251.57 4932.5 2235 c
S
n
757.5 2176.67 m
799.167 2135 l
0 0.498032 0  setrgbcolor
S
n
799.167 2176.67 m
757.5 2135 l
S
n
791.667 2087.5 m
833.333 2045.83 l
S
n
833.333 2087.5 m
791.667 2045.83 l
S
n
825.833 1999.17 m
867.5 1957.5 l
S
n
867.5 1999.17 m
825.833 1957.5 l
S
n
860 1911.67 m
901.667 1870 l
S
n
901.667 1911.67 m
860 1870 l
S
n
894.167 1826.67 m
935.833 1785 l
S
n
935.833 1826.67 m
894.167 1785 l
S
n
928.333 1745 m
970 1703.33 l
S
n
970 1745 m
928.333 1703.33 l
S
n
962.5 1665 m
1004.17 1623.33 l
S
n
1004.17 1665 m
962.5 1623.33 l
S
n
996.667 1589.17 m
1038.33 1547.5 l
S
n
1038.33 1589.17 m
996.667 1547.5 l
S
n
1030.83 1517.5 m
1072.5 1475.83 l
S
n
1072.5 1517.5 m
1030.83 1475.83 l
S
n
1065 1449.17 m
1106.67 1407.5 l
S
n
1106.67 1449.17 m
1065 1407.5 l
S
n
1098.33 1386.67 m
1140 1345 l
S
n
1140 1386.67 m
1098.33 1345 l
S
n
1132.5 1328.33 m
1174.17 1286.67 l
S
n
1174.17 1328.33 m
1132.5 1286.67 l
S
n
1166.67 1275.83 m
1208.33 1234.17 l
S
n
1208.33 1275.83 m
1166.67 1234.17 l
S
n
1200.83 1229.17 m
1242.5 1187.5 l
S
n
1242.5 1229.17 m
1200.83 1187.5 l
S
n
1235 1189.17 m
1276.67 1147.5 l
S
n
1276.67 1189.17 m
1235 1147.5 l
S
n
1269.17 1155 m
1310.83 1113.33 l
S
n
1310.83 1155 m
1269.17 1113.33 l
S
n
1303.33 1126.67 m
1345 1085 l
S
n
1345 1126.67 m
1303.33 1085 l
S
n
1337.5 1105.83 m
1379.17 1064.17 l
S
n
1379.17 1105.83 m
1337.5 1064.17 l
S
n
1371.67 1090.83 m
1413.33 1049.17 l
S
n
1413.33 1090.83 m
1371.67 1049.17 l
S
n
1405 1083.33 m
1446.67 1041.67 l
S
n
1446.67 1083.33 m
1405 1041.67 l
S
n
1439.17 1082.5 m
1480.83 1040.83 l
S
n
1480.83 1082.5 m
1439.17 1040.83 l
S
n
1473.33 1089.17 m
1515 1047.5 l
S
n
1515 1089.17 m
1473.33 1047.5 l
S
n
1507.5 1102.5 m
1549.17 1060.83 l
S
n
1549.17 1102.5 m
1507.5 1060.83 l
S
n
1541.67 1121.67 m
1583.33 1080 l
S
n
1583.33 1121.67 m
1541.67 1080 l
S
n
1575.83 1148.33 m
1617.5 1106.67 l
S
n
1617.5 1148.33 m
1575.83 1106.67 l
S
n
1610 1181.67 m
1651.67 1140 l
S
n
1651.67 1181.67 m
1610 1140 l
S
n
1644.17 1220.83 m
1685.83 1179.17 l
S
n
1685.83 1220.83 m
1644.17 1179.17 l
S
n
1678.33 1266.67 m
1720 1225 l
S
n
1720 1266.67 m
1678.33 1225 l
S
n
1712.5 1317.5 m
1754.17 1275.83 l
S
n
1754.17 1317.5 m
1712.5 1275.83 l
S
n
1745.83 1374.17 m
1787.5 1332.5 l
S
n
1787.5 1374.17 m
1745.83 1332.5 l
S
n
1780 1436.67 m
1821.67 1395 l
S
n
1821.67 1436.67 m
1780 1395 l
S
n
1814.17 1503.33 m
1855.83 1461.67 l
S
n
1855.83 1503.33 m
1814.17 1461.67 l
S
n
1848.33 1574.17 m
1890 1532.5 l
S
n
1890 1574.17 m
1848.33 1532.5 l
S
n
1882.5 1650 m
1924.17 1608.33 l
S
n
1924.17 1650 m
1882.5 1608.33 l
S
n
1916.67 1728.33 m
1958.33 1686.67 l
S
n
1958.33 1728.33 m
1916.67 1686.67 l
S
n
1950.83 1810 m
1992.5 1768.33 l
S
n
1992.5 1810 m
1950.83 1768.33 l
S
n
1985 1895 m
2026.67 1853.33 l
S
n
2026.67 1895 m
1985 1853.33 l
S
n
2019.17 1981.67 m
2060.83 1940 l
S
n
2060.83 1981.67 m
2019.17 1940 l
S
n
2052.5 2070 m
2094.17 2028.33 l
S
n
2094.17 2070 m
2052.5 2028.33 l
S
n
2086.67 2159.17 m
2128.33 2117.5 l
S
n
2128.33 2159.17 m
2086.67 2117.5 l
S
n
2120.83 2249.17 m
2162.5 2207.5 l
S
n
2162.5 2249.17 m
2120.83 2207.5 l
S
n
2155 2339.17 m
2196.67 2297.5 l
S
n
2196.67 2339.17 m
2155 2297.5 l
S
n
2189.17 2428.33 m
2230.83 2386.67 l
S
n
2230.83 2428.33 m
2189.17 2386.67 l
S
n
2223.33 2516.67 m
2265 2475 l
S
n
2265 2516.67 m
2223.33 2475 l
S
n
2257.5 2604.17 m
2299.17 2562.5 l
S
n
2299.17 2604.17 m
2257.5 2562.5 l
S
n
2291.67 2689.17 m
2333.33 2647.5 l
S
n
2333.33 2689.17 m
2291.67 2647.5 l
S
n
2325.83 2770.83 m
2367.5 2729.17 l
S
n
2367.5 2770.83 m
2325.83 2729.17 l
S
n
2359.17 2850.83 m
2400.83 2809.17 l
S
n
2400.83 2850.83 m
2359.17 2809.17 l
S
n
2393.33 2926.67 m
2435 2885 l
S
n
2435 2926.67 m
2393.33 2885 l
S
n
2427.5 2998.33 m
2469.17 2956.67 l
S
n
2469.17 2998.33 m
2427.5 2956.67 l
S
n
2461.67 3065.83 m
2503.33 3024.17 l
S
n
2503.33 3065.83 m
2461.67 3024.17 l
S
n
2495.83 3128.33 m
2537.5 3086.67 l
S
n
2537.5 3128.33 m
2495.83 3086.67 l
S
n
2530 3185.83 m
2571.67 3144.17 l
S
n
2571.67 3185.83 m
2530 3144.17 l
S
n
2564.17 3238.33 m
2605.83 3196.67 l
S
n
2605.83 3238.33 m
2564.17 3196.67 l
S
n
2598.33 3285 m
2640 3243.33 l
S
n
2640 3285 m
2598.33 3243.33 l
S
n
2632.5 3325 m
2674.17 3283.33 l
S
n
2674.17 3325 m
2632.5 3283.33 l
S
n
2666.67 3359.17 m
2708.33 3317.5 l
S
n
2708.33 3359.17 m
2666.67 3317.5 l
S
n
2700 3386.67 m
2741.67 3345 l
S
n
2741.67 3386.67 m
2700 3345 l
S
n
2734.17 3407.5 m
2775.83 3365.83 l
S
n
2775.83 3407.5 m
2734.17 3365.83 l
S
n
2768.33 3421.67 m
2810 3380 l
S
n
2810 3421.67 m
2768.33 3380 l
S
n
2802.5 3429.17 m
2844.17 3387.5 l
S
n
2844.17 3429.17 m
2802.5 3387.5 l
S
n
2836.67 3429.17 m
2878.33 3387.5 l
S
n
2878.33 3429.17 m
2836.67 3387.5 l
S
n
2870.83 3423.33 m
2912.5 3381.67 l
S
n
2912.5 3423.33 m
2870.83 3381.67 l
S
n
2905 3410 m
2946.67 3368.33 l
S
n
2946.67 3410 m
2905 3368.33 l
S
n
2939.17 3389.17 m
2980.83 3347.5 l
S
n
2980.83 3389.17 m
2939.17 3347.5 l
S
n
2973.33 3362.5 m
3015 3320.83 l
S
n
3015 3362.5 m
2973.33 3320.83 l
S
n
3006.67 3329.17 m
3048.33 3287.5 l
S
n
3048.33 3329.17 m
3006.67 3287.5 l
S
n
3040.83 3290 m
3082.5 3248.33 l
S
n
3082.5 3290 m
3040.83 3248.33 l
S
n
3075 3244.17 m
3116.67 3202.5 l
S
n
3116.67 3244.17 m
3075 3202.5 l
S
n
3109.17 3192.5 m
3150.83 3150.83 l
S
n
3150.83 3192.5 m
3109.17 3150.83 l
S
n
3143.33 3135.83 m
3185 3094.17 l
S
n
3185 3135.83 m
3143.33 3094.17 l
S
n
3177.5 3073.33 m
3219.17 3031.67 l
S
n
3219.17 3073.33 m
3177.5 3031.67 l
S
n
3211.67 3006.67 m
3253.33 2965 l
S
n
3253.33 3006.67 m
3211.67 2965 l
S
n
3245.83 2935 m
3287.5 2893.33 l
S
n
3287.5 2935 m
3245.83 2893.33 l
S
n
3280 2860 m
3321.67 2818.33 l
S
n
3321.67 2860 m
3280 2818.33 l
S
n
3314.17 2780.83 m
3355.83 2739.17 l
S
n
3355.83 2780.83 m
3314.17 2739.17 l
S
n
3347.5 2699.17 m
3389.17 2657.5 l
S
n
3389.17 2699.17 m
3347.5 2657.5 l
S
n
3381.67 2614.17 m
3423.33 2572.5 l
S
n
3423.33 2614.17 m
3381.67 2572.5 l
S
n
3415.83 2527.5 m
3457.5 2485.83 l
S
n
3457.5 2527.5 m
3415.83 2485.83 l
S
n
3450 2439.17 m
3491.67 2397.5 l
S
n
3491.67 2439.17 m
3450 2397.5 l
S
n
3484.17 2350 m
3525.83 2308.33 l
S
n
3525.83 2350 m
3484.17 2308.33 l
S
n
3518.33 2260 m
3560 2218.33 l
S
n
3560 2260 m
3518.33 2218.33 l
S
n
3552.5 2170 m
3594.17 2128.33 l
S
n
3594.17 2170 m
3552.5 2128.33 l
S
n
3586.67 2080.83 m
3628.33 2039.17 l
S
n
3628.33 2080.83 m
3586.67 2039.17 l
S
n
3620.83 1991.67 m
3662.5 1950 l
S
n
3662.5 1991.67 m
3620.83 1950 l
S
n
3654.17 1905 m
3695.83 1863.33 l
S
n
3695.83 1905 m
3654.17 1863.33 l
S
n
3688.33 1820 m
3730 1778.33 l
S
n
3730 1820 m
3688.33 1778.33 l
S
n
3722.5 1738.33 m
3764.17 1696.67 l
S
n
3764.17 1738.33 m
3722.5 1696.67 l
S
n
3756.67 1659.17 m
3798.33 1617.5 l
S
n
3798.33 1659.17 m
3756.67 1617.5 l
S
n
3790.83 1583.33 m
3832.5 1541.67 l
S
n
3832.5 1583.33 m
3790.83 1541.67 l
S
n
3825 1511.67 m
3866.67 1470 l
S
n
3866.67 1511.67 m
3825 1470 l
S
n
3859.17 1444.17 m
3900.83 1402.5 l
S
n
3900.83 1444.17 m
3859.17 1402.5 l
S
n
3893.33 1381.67 m
3935 1340 l
S
n
3935 1381.67 m
3893.33 1340 l
S
n
3927.5 1324.17 m
3969.17 1282.5 l
S
n
3969.17 1324.17 m
3927.5 1282.5 l
S
n
3960.83 1272.5 m
4002.5 1230.83 l
S
n
4002.5 1272.5 m
3960.83 1230.83 l
S
n
3995 1225.83 m
4036.67 1184.17 l
S
n
4036.67 1225.83 m
3995 1184.17 l
S
n
4029.17 1185.83 m
4070.83 1144.17 l
S
n
4070.83 1185.83 m
4029.17 1144.17 l
S
n
4063.33 1152.5 m
4105 1110.83 l
S
n
4105 1152.5 m
4063.33 1110.83 l
S
n
4097.5 1125 m
4139.17 1083.33 l
S
n
4139.17 1125 m
4097.5 1083.33 l
S
n
4131.67 1104.17 m
4173.33 1062.5 l
S
n
4173.33 1104.17 m
4131.67 1062.5 l
S
n
4165.83 1090 m
4207.5 1048.33 l
S
n
4207.5 1090 m
4165.83 1048.33 l
S
n
4200 1083.33 m
4241.67 1041.67 l
S
n
4241.67 1083.33 m
4200 1041.67 l
S
n
4234.17 1083.33 m
4275.83 1041.67 l
S
n
4275.83 1083.33 m
4234.17 1041.67 l
S
n
4268.33 1090 m
4310 1048.33 l
S
n
4310 1090 m
4268.33 1048.33 l
S
n
4301.67 1103.33 m
4343.33 1061.67 l
S
n
4343.33 1103.33 m
4301.67 1061.67 l
S
n
4335.83 1124.17 m
4377.5 1082.5 l
S
n
4377.5 1124.17 m
4335.83 1082.5 l
S
n
4370 1150.83 m
4411.67 1109.17 l
S
n
4411.67 1150.83 m
4370 1109.17 l
S
n
4404.17 1184.17 m
4445.83 1142.5 l
S
n
4445.83 1184.17 m
4404.17 1142.5 l
S
n
4438.33 1224.17 m
4480 1182.5 l
S
n
4480 1224.17 m
4438.33 1182.5 l
S
n
4472.5 1270 m
4514.17 1228.33 l
S
n
4514.17 1270 m
4472.5 1228.33 l
S
n
4506.67 1321.67 m
4548.33 1280 l
S
n
4548.33 1321.67 m
4506.67 1280 l
S
n
4540.83 1379.17 m
4582.5 1337.5 l
S
n
4582.5 1379.17 m
4540.83 1337.5 l
S
n
4575 1441.67 m
4616.67 1400 l
S
n
4616.67 1441.67 m
4575 1400 l
S
n
4608.33 1509.17 m
4650 1467.5 l
S
n
4650 1509.17 m
4608.33 1467.5 l
S
n
4642.5 1580 m
4684.17 1538.33 l
S
n
4684.17 1580 m
4642.5 1538.33 l
S
n
4676.67 1655.83 m
4718.33 1614.17 l
S
n
4718.33 1655.83 m
4676.67 1614.17 l
S
n
4710.83 1735 m
4752.5 1693.33 l
S
n
4752.5 1735 m
4710.83 1693.33 l
S
n
4745 1817.5 m
4786.67 1775.83 l
S
n
4786.67 1817.5 m
4745 1775.83 l
S
n
4779.17 1901.67 m
4820.83 1860 l
S
n
4820.83 1901.67 m
4779.17 1860 l
S
n
4813.33 1989.17 m
4855 1947.5 l
S
n
4855 1989.17 m
4813.33 1947.5 l
S
n
4847.5 2080.83 m
4889.17 2039.17 l
S
n
4889.17 2080.83 m
4847.5 2039.17 l
S
n
4881.67 2187.5 m
4923.33 2145.83 l
S
n
4923.33 2187.5 m
4881.67 2145.83 l
S
n
2840 3581.67 2325.83 364.167 re
1 setgray
eofill
n
2840 3581.67 2325.83 364.167 re
S
n
2840 3581.67 m
5165.83 3581.67 l
0  setgray
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
2840 3581.67 m
5165.83 3581.67 l
S
n
2840 3945.83 m
5165.83 3945.83 l
S
n
2840 3581.67 m
2840 3945.83 l
S
n
5165.83 3581.67 m
5165.83 3945.83 l
S
q
10 0 0 10 0 0 cm
311.75 384.417 m
/N8 10 Tf
(100Hz sine wave sampled at 16384Hz)
[5.56 5.56 5.56 7.21985 5 2.78 5 2.21985 5.56 5.56 2.78 
7.21985 5.56 5 5.56 2.78 5 5.56 8.32993 5.56 2.21985 5.56 
5.56 2.78 5.56 2.78 2.78 5.56 5.56 5.56 5.56 5.56 7.21985 
5 ] pdfxs
311.75 372.917 m
(Resampled to 8192Hz using LDAS filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 5.56 7.21985 6.66992 6.66992 2.78 2.78 2.21985 
2.21985 2.78 5.56 3.32993 ] pdfxs
311.75 361.417 m
(Resampled to 8192Hz using Butterworth filter)
[7.21985 5.56 5 5.56 8.32993 5.56 2.21985 5.56 5.56 2.78 2.78 
5.56 2.78 5.56 5.56 5.56 5.56 7.21985 5 2.78 5.56 5 
2.21985 5.56 5.56 2.78 6.66992 5.56 2.78 2.78 5.56 3.32993 7.21985 
5.56 3.32993 2.78 5.56 2.78 2.78 2.21985 2.21985 2.78 5.56 3.32993 
] pdfxs
Q
Q
q
n
2840 3580 m
2840 3946 l
5167 3946 l
5167 3580 l
h
W
n
5 w
1 j
n
2895 3877.5 m
3061.67 3877.5 l
1 0 0 setrgbcolor
S
Q
q
n
2917 3700 m
2917 3824 l
3040 3824 l
3040 3700 l
h
W
n
5 w
1 j
n
3008.33 3762.5 m
3008.33 3745.93 2994.9 3732.5 2978.33 3732.5 c
2961.76 3732.5 2948.33 3745.93 2948.33 3762.5 c
2948.33 3779.07 2961.76 3792.5 2978.33 3792.5 c
2994.9 3792.5 3008.33 3779.07 3008.33 3762.5 c
0 0 1 setrgbcolor
S
Q
q
n
2917 3585 m
2917 3708 l
3040 3708 l
3040 3585 l
h
W
n
5 w
1 j
n
2957.5 3667.5 m
2999.17 3625.83 l
0 0.498032 0 setrgbcolor
S
n
2999.17 3667.5 m
2957.5 3625.83 l
S
Q
q
q
10 0 0 10 0 0 cm
0 setgray
396 18 m
/N20 10 Tf
(Student Version of MATLAB)
[6.66992 3.32993 6.10992 6.10992 5.56 6.10992 3.32993 2.78 6.66992 5.56 3.88992 
5.56 2.78 6.10992 6.10992 2.78 6.10992 3.32993 2.78 8.32993 7.21985 6.10992 
6.10992 7.21985 7.21985 ] pdfxs
Q
Q
PDFVars/TermAll get exec end end
%%PageTrailer
%%EndPage
%%Trailer
%%DocumentNeededResources:
%%+ font Helvetica
%%+ font Helvetica-BoldOblique
%%EOF
