#!/bin/sh

## This is a script for the software librarian to use to generate neccessary
## files from the minimal set in the cvs archive.
##
## This script is not to be included in the distribution.
##
## $Id$

## LAL version:
package=lal
version=5.0

## Add a new package here:

# Base (non-conditionally-compiled) packages:
lal_pkg_list_base="std tools sample hello factories vectorops utilities stats inject date tdfilter window fft clremoval stochastic inspiral noisemodels bank ring findchirp pulsar houghpulsar burstsearch tracksearch tfclusters slopefilters waveburst block timefreq"

# Packages compiled only with --enable-mpi
lal_pkg_list_mpi="comm"

# Packages compiled only with --enable-frame
lal_pkg_list_frame="framedata"

# Packages compiled only with --enable-mpi and --enable-frame
lal_pkg_list_frame_mpi=""

# Packages that are omitted
lal_pkg_list_omit=""

## <<<< !!!!  Do not edit below here !!!! >>>> ##

# All packages
lal_pkg_list="$lal_pkg_list_base support $lal_pkg_list_mpi $lal_pkg_list_frame $lal_pkg_list_frame_mpi $lal_pkg_list_omit"

# Help message
helpmsg="Usage $0 [options]
Options: [defaults in brackets after description]"
helpmsg="$helpmsg
  --help                        print this message"
helpmsg="$helpmsg
  --quiet                       omit non-error messages"
helpmsg="$helpmsg
  --verbose                     echo everything that is done"
helpmsg="$helpmsg
  --with-m4=M4                  use GNU-m4 program M4 [m4]"
helpmsg="$helpmsg
  --with-aclocal=ACLOCAL        use aclocal program ACLOCAL [aclocal]"
helpmsg="$helpmsg
  --with-automake=AUTOMAKE      use automake program AUTOMAKE [automake]"
helpmsg="$helpmsg
  --with-autoheader=AUTOHEADER  use autoheader program AUTOHEADER [autoheader]"
helpmsg="$helpmsg
  --with-autoconf=AUTOCONF      use autoconf program AUTOCONF [autoconf]"
helpmsg="$helpmsg
  --include-deps                pass option --include-deps to automake [no]"

INCLUDEDEPS=""

## Process args
verbose="false"
while test $# -gt 0 ; do
  option=$1
  case "$option" in
    -*=*) optarg=`echo "$option" | sed 's/[-_a-zA-Z0-9]*=//'` ;;
    *) optarg= ;;
  esac
  case $option in
    -h | -help | --help ) echo "$helpmsg"; exit 0;;
    -q | -quiet | --quiet ) exec 1>/dev/null;;
    -v | -verb* | --verb* ) verbose="true";;
    -include-deps | --include-deps ) INCLUDEDEPS=" --include-deps";;
    -with-m4=* | --with-m4=* ) M4="$optarg";;
    -with-automake=* | --with-automake=* ) AUTOMAKE="$optarg";;
    -with-aclocal=* | --with-aclocal=* ) ACLOCAL="$optarg";;
    -with-autoconf=* | --with-autoconf=* ) AUTOCONF="$optarg";;
    -with-autoheader=* | --with-autoheader=* ) AUTOHEADER="$optarg";;
    *) echo "unrecognized option $option"; exit 1;;
  esac
  shift
done

test "$verbose" = "true" && set -x

# Unfortunately, GNU-m4 is required... so need to specify this version
M4=${M4:-"m4"}

echo "00boot: creating README.install"

## First generate README.install
test -f README.install || rm -f README.install
cd doc
test -f README.install || rm -f README.install
sed -f scrstrip.sed lal-preinstall-x.sh > lal-preinstall.sh
sed -f texstrip.sed lal-preinstall-x.sh > lal-preinstall.tex
sed -f txtstrip.sed lal-preinstall-x.sh > lal-preinstall.txt
sed -f scrstrip.sed lal-install-x.sh > lal-install.sh
sed -f texstrip.sed lal-install-x.sh > lal-install.tex
sed -f txtstrip.sed lal-install-x.sh > lal-install.txt
chmod +x lal-install.sh
chmod +x lal-preinstall.sh
${M4} install.m4 > README.install
cp -f README.install ..
cd ..


## Function to report failure
fail () {
  echo "00boot: failed $1" >&2
  echo "00boot: failure: consult the file 'README.install' for help" >&2
  exit 1
}


echo "00boot: checking versions of aclocal, automake, autoheader and autoconf"


ACLOCAL=${ACLOCAL:-"aclocal"}
AUTOMAKE=${AUTOMAKE:-"automake"}
AUTOCONF=${AUTOCONF:-"autoconf"}
AUTOHEADER=${AUTOHEADER:-"autoheader"}

automake_version="`$AUTOMAKE --version 2>/dev/null | sed -n '1s/^.* \([0-9.]*\)/\1/p'`"
aclocal_version="`$ACLOCAL --version 2>/dev/null | sed -n '1s/^.* \([0-9.]*\)/\1/p'`"
autoheader_version="`$AUTOHEADER --version 2>/dev/null | sed -n '1s/^.* \([0-9.]*\)/\1/p'`"
autoconf_version="`$AUTOCONF --version 2>/dev/null | sed -n '1s/^.* \([0-9.]*\)/\1/p'`"
if test -z "$aclocal_version"; then
  fail "finding program aclocal"
fi
if test -z "$automake_version"; then
  fail "finding program automake"
fi
if test -z "$autoconf_version"; then
  fail "finding program autoconf"
fi
if test -z "$autoheader_version"; then
  fail "finding program autoheader"
fi
case "$autoconf_version" in
  2.5*)
  CONFIGFILE="configure.ac"
  AUTOCONF25="yes"
  ;;
  2.1*)
  CONFIGFILE="configure.in"
  AUTOCONF25="no"
  ;;
esac

echo "00boot: using:"
printf "00boot:\t%-16s %s\n" "aclocal-$aclocal_version:" "`which $ACLOCAL`"
printf "00boot:\t%-16s %s\n" "automake-$automake_version:" "`which $AUTOMAKE`"
printf "00boot:\t%-16s %s\n" "autoheader-$autoheader_version:" "`which $AUTOHEADER`"
printf "00boot:\t%-16s %s\n" "autoconf-$autoconf_version:" "`which $AUTOCONF`"


echo "00boot: creating configuration file"


## Here is the stuff to make configure.in or configure.ac
rm -f configure.in configure.ac || fail "removing configure.in/configure.ac"

# Preamble
if test "$AUTOCONF25" = "yes" ; then
cat > $CONFIGFILE <<EOF
AC_INIT([$package],[$version],[lal-discuss@gravity.phys.uwm.edu])
AM_INIT_AUTOMAKE([])
AM_CONFIG_HEADER([include/config.h] [include/lal/LALConfig.h])
AH_TOP([
#ifndef CONFIG_H__LAL
#define CONFIG_H__LAL
])
AH_TEMPLATE([LAL_SIZEOF_DOUBLE], [The number of bytes in a double.])
AH_TEMPLATE([LAL_SIZEOF_FLOAT], [The number of bytes in a float.])
AH_TEMPLATE([LAL_SIZEOF_INT], [The number of bytes in a int.])
AH_TEMPLATE([LAL_SIZEOF_LONG], [The number of bytes in a long.])
AH_TEMPLATE([LAL_SIZEOF_LONG_LONG], [The number of bytes in a long long.])
AH_TEMPLATE([LAL_SIZEOF_SHORT], [The number of bytes in a short.])
AH_BOTTOM([
#endif /* CONFIG_H__LAL */
])
EOF
else
cat > $CONFIGFILE <<EOF
dnl Process this file with autoconf to produce a configure script.
AC_INIT(include/config.h.in)
AM_INIT_AUTOMAKE($package, $version)
AM_CONFIG_HEADER(include/config.h include/lal/LALConfig.h)
EOF
fi

# Body
cat >> $CONFIGFILE <<\EOF

LAL_WITH_CC
LAL_WITH_MPICC
LAL_WITH_CFLAGS
LAL_WITH_EXTRA_CFLAGS
LAL_WITH_EXTRA_CPPFLAGS
LAL_WITH_EXTRA_LDFLAGS
LAL_WITH_EXTRA_LIBS
LAL_WITH_GCC_FLAGS

LAL_ENABLE_INTELFFT
LAL_ENABLE_FRAME
LAL_ENABLE_METAIO
LAL_ENABLE_MPI

LAL_ENABLE_DEBUG
LAL_ENABLE_MACROS
LAL_ENABLE_PTHREAD_LOCK
LAL_ENABLE_NIGHTLY

AC_PREFIX_DEFAULT([/opt/lscsoft/lal])

lal_version_major=`echo "$VERSION" | cut -d. -f1`
lal_version_minor=`echo "$VERSION" | cut -d. -f2`
lal_version_micro=`echo "$VERSION" | cut -d. -f3-`
test -z "$lal_version_micro" && lal_version_micro=0
lal_configure_date=`date +"%Y-%m-%dT%H:%M:%S%z"`
lal_cvs_tag=`echo '$Name$' | sed 's/\\$//g' | sed 's/Name: //'`
AC_DEFINE_UNQUOTED(LAL_VERSION, "$VERSION", [LAL Version])
AC_DEFINE_UNQUOTED(LAL_VERSION_MAJOR, $lal_version_major, [LAL Version Major Number] )
AC_DEFINE_UNQUOTED(LAL_VERSION_MINOR, $lal_version_minor, [LAL Version Minor Number] )
AC_DEFINE_UNQUOTED(LAL_VERSION_MICRO, $lal_version_micro, [LAL Version Micro Number] )
AC_DEFINE_UNQUOTED(LAL_CONFIGURE_ARGS, "$ac_configure_args", [LAL Configure Arguments])
AC_DEFINE_UNQUOTED(LAL_CONFIGURE_DATE, "$lal_configure_date", [LAL Configure Date])
AC_DEFINE_UNQUOTED(LAL_CVS_TAG, "$lal_cvs_tag", [LAL CVS Tag])
test "$prefix"="NONE" && lal_prefix="$ac_default_prefix" || lal_prefix="$prefix"
AC_DEFINE_UNQUOTED(LAL_PREFIX, "$lal_prefix", [LAL Install Prefix])

lal_pthread_available="yes"
ACX_PTHREAD( , [lal_pthread_available="no"])
if test "$lal_pthread_lock" = "true" ; then
  if "$lal_pthread_available" = "yes" ; then
    LIBS="$PTHREAD_LIBS $LIBS"
    CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
    CC="$PTHREAD_CC"
  else
    AC_MSG_ERROR([don't know how to compile posix threads])
  fi
fi

dnl Checks for programs.
AC_PROG_AWK
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AM_PROG_LIBTOOL
AC_CHECK_PROGS(M4, gm4 m4, m4)
AC_CHECK_PROGS(LATEX, pdflatex latex, echo)
AC_CHECK_PROGS(MKIND, makeindex, echo)
AC_CHECK_PROGS(DVIPS, dvips, echo)
if test -z "$TEXFLAGS"
then
AC_MSG_CHECKING(if $LATEX accepts --interaction=batchmode)
cat > conflatextest.tex <<\CEOF
\documentclass{article}
\begin{document}
\end{document}
CEOF
if $LATEX conflatextest.tex --interaction=batchmode >/dev/null 2>&1
then
TEXFLAGS="--interaction=batchmode"
AC_MSG_RESULT(yes)
else
TEXFLAGS=""
AC_MSG_RESULT(no)
fi
rm -f conflatextest.*
fi
AC_SUBST(TEXFLAGS)

dnl Set needed compiler flags
AC_MSG_CHECKING([for additional compiler flags])
case "${host_os}" in
  solaris*) CFLAGS="$CFLAGS -D_POSIX_C_SOURCE=200101L"
  AC_MSG_RESULT([-D_POSIX_SOURCE=200101L]);;
  *) AC_MSG_RESULT(none);;
esac

dnl Checks for libraries.
lal_save_LIBS="$LIBS"
AC_CHECK_LIB(m, sin)
dnl if solaris, check for sunmath library
case "${host_os}" in
  solaris*) AC_CHECK_LIB(sunmath, sincosp);;
esac
PKG_CHECK_MODULES(GSL, gsl, [ true ], [ false ])
CPPFLAGS="$CPPFLAGS $GSL_CFLAGS"
LIBS="$LIBS $GSL_LIBS"
AC_CHECK_LIB(gslcblas, main)
AC_CHECK_LIB(gsl, gsl_strerror, , [AC_MSG_ERROR(could not find GSL library)])

dnl Checks for fft libraries.
if test "${intelfft}" = "false" ; then
  fftw3="true"
  PKG_CHECK_MODULES(FFTW3, fftw3 fftw3f, [ true ], [ false ])
  CPPFLAGS="$CPPFLAGS $FFTW3_CFLAGS"
  LIBS="$LIBS $FFTW3_LIBS"
  AC_CHECK_LIB(fftw3f, fftwf_execute_dft, , [AC_MSG_ERROR(could not find fftw3f library)], -lm)
  AC_CHECK_LIB(fftw3, fftw_execute_dft, , [AC_MSG_ERROR(could not find fftw3 library)], -lm)
else
  AC_MSG_WARN(Using Intel FFT routines)
  if test "x${qthread}" = "xtrue" ; then
    LAL_INTEL_MKL_QTHREAD_WARNING
  else
    AC_CHECK_LIB(pthread, pthread_create, , [AC_MSG_ERROR(could not find pthread library)])
  fi
  AC_CHECK_LIB(guide, __kmp_abort, , [AC_MSG_ERROR(could not find guide library included with Intel MKL)])
  AC_CHECK_HEADERS(pthread.h, , [AC_MSG_ERROR(could not find pthread header)])
  if test "${enable_static}" = "yes"; then
    if test "${enable_shared}" = "yes" ; then
      LAL_INTEL_FFT_LIBS_MSG_ERROR
    else
      AC_CHECK_LIB(mkl_ia32, DftiCreateDescriptor, , [AC_MSG_ERROR(could not find the Intel FFT library)])
    fi  
  else
    AC_CHECK_LIB(mkl, DftiCreateDescriptor, , [AC_MSG_ERROR(could not find the Intel FFT library)])
  fi
  AC_CHECK_HEADERS(mkl_fft.h, , [AC_MSG_ERROR(could not find Intel FFT header)])
fi

dnl Checks for optional FrameL and metaio libraries.
if test "${metaio}" = "true"; then
  PKG_CHECK_MODULES(METAIO, libmetaio, [ true ], [ false ])
  lal_pre_metaio_LIBS="$LIBS"
  LIBS="$LIBS $METAIO_LIBS"
  AC_SEARCH_LIBS(MetaioOpen, metaio dataflow, ,
                 [AC_MSG_WARN(disabling metaio support)]
                 [metaio="false"]
                 [LIBS="$lal_pre_metaio_LIBS"])
fi
if test "${frame}" = "true"; then
  PKG_CHECK_MODULES(FRAME, libframe, [ true ], [ false ])
  lal_pre_frame_LIBS="$LIBS"
  LIBS="$LIBS $FRAME_LIBS"
  AC_SEARCH_LIBS(FrLibIni, Frame, ,
                 [AC_MSG_WARN(disabling frame library)]
                 [frame="false"]
                 [LIBS="$lal_pre_frame_LIBS"])
fi


dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h unistd.h getopt.h malloc.h)
case "${host_os}" in
  solaris*) AC_CHECK_HEADERS(sunmath.h);;
esac
AC_CHECK_HEADERS(gsl/gsl_errno.h, , [AC_MSG_ERROR(could not find gsl/gsl_errno.h)])
if test "${intelfft}" = "false" ; then
  AC_CHECK_HEADERS(fftw3.h, , [AC_MSG_ERROR(could not find fftw3.h)])
fi

AC_MSG_CHECKING(for gethostname prototype in unistd.h)
AC_EGREP_HEADER(gethostname, unistd.h,AC_MSG_RESULT(yes)
AC_DEFINE(HAVE_GETHOSTNAME_PROTOTYPE, 1, [Define if gethostname prototype is in unistd.h]), AC_MSG_RESULT(no))

if test "${metaio}" = "true"; then
  lal_pre_metaio_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $METAIO_CFLAGS"
  AC_CHECK_HEADERS(metaio.h, ,
                   [AC_MSG_WARN(disabling metaio support)]
                   [metaio="false"]
                   [CPPFLAGS="$lal_pre_metaio_CPPFLAGS"])
fi
if test "${frame}" = "true"; then
  lal_pre_frame_CPPFLAGS="$CPPFLAGS"
  CPPFLAGS="$CPPFLAGS $FRAME_CFLAGS"
  AC_CHECK_HEADERS(FrameL.h, ,
                   [AC_MSG_WARN(disabling frame library support)]
                   [frame="false"]
                   [CPPFLAGS="$lal_pre_frame_CPPFLAGS"])
fi
if test "${lal_pthread_lock}" = "true"; then
  AC_CHECK_HEADERS(pthread.h, break)
fi


dnl Checks for optional MPI libraries and header files.
if test "${mpi}" = "true"; then
  AC_CHECK_PROGS(MPICC, mpicc hcc, $CC)
  LAL_CHECK_MPI_FLAGS
  lal_pre_mpi_LIBS="$LIBS"
  lal_pre_mpi_CPPFLAGS="$CPPFLAGS"
  lal_pre_mpi_CFLAGS="$CFLAGS"
  LIBS="$LIBS $MPI_LDFLAGS"
  CPPFLAGS="$CPPFLAGS $MPI_CPPFLAGS"
  CFLAGS="$CFLAGS $MPI_CFLAGS"
  AC_SEARCH_LIBS(MPI_Init, mpi, , [AC_MSG_ERROR([can't find MPI library])])
  AC_CHECK_HEADERS(mpi.h, , [AC_MSG_ERROR([can't find mpi.h header])])
  LIBS="$lal_pre_mpi_LIBS"
  CPPFLAGS="$lal_pre_mpi_CPPFLAGS"
  CFLAGS="$lal_pre_mpi_CFLAGS"
else
  MPI_CFLAGS=
  MPI_CPPFLAGS=
  MPI_LDFLAGS=
fi


dnl Define variables describing what was enabled.
if test "${fftw3}" = "true"; then
  AC_DEFINE(LAL_FFTW3_ENABLED, 1, [Define if using fftw3 library])
fi
if test "${metaio}" = "true"; then
  AC_DEFINE(LAL_METAIO_ENABLED, 1, [Define if using MetaIo library])
fi
if test "${frame}" = "true"; then
  AC_DEFINE(LAL_FRAME_ENABLED, 1, [Define if using frame library])
fi
if test "${mpi}" = "true"; then
  AC_DEFINE(LAL_MPI_ENABLED, 1, [Define if using MPI])
fi


dnl Record the libraries needed for linking LAL.
LALLIBADD="$LIBS"
LIBS="$lal_save_LIBS"
AC_SUBST(LALLIBADD)
LAL_LIBADD="$LIBS $LALLIBADD"
AC_SUBST(LAL_LIBADD)
AC_SUBST(MPI_CFLAGS)
AC_SUBST(MPI_CPPFLAGS)
AC_SUBST(MPI_LDFLAGS)
AC_SUBST(LAL_MPI_ENABLED)


dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_BIGENDIAN
AC_C_CONST
AC_C_STRINGIZE
AC_TYPE_SIZE_T
AC_HEADER_TIME
LAL_CHECK_SIZEOF(short, 2)
LAL_CHECK_SIZEOF(int, 4)
LAL_CHECK_SIZEOF(long, 4)
LAL_CHECK_SIZEOF(long long, 8)
LAL_CHECK_SIZEOF(float, 4)
LAL_CHECK_SIZEOF(double, 8)

dnl Checks for library functions.
AC_CHECK_FUNCS(getopt)
AC_CHECK_FUNCS(getopt_long)
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(vsnprintf)
AC_CHECK_FUNCS(putenv)

dnl Set package documentation install path
pkgdocdir="\${prefix}/share/doc/${PACKAGE}-${VERSION}"
AC_SUBST(pkgdocdir)

dnl Setup automake conditionals
AM_CONDITIONAL(FRAME, test x$frame = xtrue)
AM_CONDITIONAL(MPI, test x$mpi = xtrue)
AM_CONDITIONAL(FRAMEANDMPI, test x$frame = xtrue -a x$mpi = xtrue)
AM_CONDITIONAL(METAIO, test x$metaio = xtrue)
AM_CONDITIONAL(INTELFFT, test x$intelfft = xtrue)
AM_CONDITIONAL(QTHREAD, test x$qthread = xtrue)


dnl Configure subdirectory lalapps if present
if test -d $srcdir/lalapps ; then
  lal_build_dir='$(top_builddir)/..'
  LAL_BUILD="true"
  LAL_LIBS=$lal_build_dir/lib/liblal.la
  LAL_CFLAGS=-I$lal_build_dir/include
  LALSUPPORT_LIBS=$lal_build_dir/packages/support/src/liblalsupport.la
  LALSUPPORT_CFLAGS=-I$lal_build_dir/include
  if test x$frame = xtrue ; then
    LALFRAME_LIBS=$lal_build_dir/packages/framedata/src/liblalframe.la
    LALFRAME_CFLAGS=-I$lal_build_dir/include
  else
    LALFRAME_LIBS=""
    LALFRAME_CFLAGS=""
  fi
  if test x$metaio = xtrue ; then
    LALMETAIO_LIBS=$lal_build_dir/packages/support/src/liblalmetaio.la
    LALMETAIO_CFLAGS=-I$lal_build_dir/include
  else
    LALMETAIO_LIBS=""
    LALMETAIO_CFLAGS=""
  fi
  export LAL_BUILD LAL_LIBS LAL_CFLAGS LALSUPPORT_LIBS LALSUPPORT_CFLAGS LALFRAME_LIBS LALFRAME_CFLAGS LALMETAIO_LIBS LALMETAIO_CFLAGS
  AC_CONFIG_SUBDIRS(lalapps)
fi


dnl Add gcc specific flags --- must be done at end or tests will break!
if test "$GCC" = yes; then
  CFLAGS="$CFLAGS $lal_gcc_flags"
fi
EOF

# Substitutions
printf "LIBLISTBASE='" >> $CONFIGFILE
for pkg in $lal_pkg_list_base ; do
  printf "\$(top_builddir)/packages/$pkg/src/lib$pkg.la " >> $CONFIGFILE
done
echo "'" >> $CONFIGFILE

printf "LIBLISTMPI='" >> $CONFIGFILE
for pkg in $lal_pkg_list_mpi ; do
  printf "\$(top_builddir)/packages/$pkg/src/lib$pkg.la " >> $CONFIGFILE
done
echo "'" >> $CONFIGFILE

printf "LIBLISTFRAME='" >> $CONFIGFILE
for pkg in $lal_pkg_list_frame ; do
  printf "\$(top_builddir)/packages/$pkg/src/lib$pkg.la " >> $CONFIGFILE
done
echo "'" >> $CONFIGFILE

printf "LIBLISTMPIFRAME='" >> $CONFIGFILE
for pkg in $lal_pkg_list_mpi_frame ; do
  printf "\$(top_builddir)/packages/$pkg/src/lib$pkg.la " >> $CONFIGFILE
done
echo "'" >> $CONFIGFILE

cat >> $CONFIGFILE <<EOF
if test x\$mpi = xfalse; then
  LIBLISTMPI=
  LIBLISTMPIFRAME=
fi
if test x\$frame = xfalse; then
  LIBLISTFRAME=
  LIBLISTMPIFRAME=
fi
PKGLIST="$lal_pkg_list"
AC_SUBST(PKGLIST)
AC_SUBST(LIBLISTBASE)
AC_SUBST(LIBLISTMPI)
AC_SUBST(LIBLISTFRAME)
AC_SUBST(LIBLISTMPIFRAME)
INCLUDEMKFILE=\$srcdir/misc/include.mk
DOCMKFILE=\$srcdir/misc/doc.mk
DVIMKFILE=\$srcdir/misc/dvi.mk
AC_SUBST_FILE(INCLUDEMKFILE)
AC_SUBST_FILE(DOCMKFILE)
AC_SUBST_FILE(DVIMKFILE)
EOF

# Output
if test "$AUTOCONF25" = "yes"; then
cat >> $CONFIGFILE <<\EOF
AC_OUTPUT_COMMANDS([chmod +x lal-config])
AC_CONFIG_FILES([lal.spec])
AC_CONFIG_FILES([lal.pc])
AC_CONFIG_FILES([lalframe.pc])
AC_CONFIG_FILES([lalmetaio.pc])
AC_CONFIG_FILES([lalmpi.pc])
AC_CONFIG_FILES([lalsupport.pc])
AC_CONFIG_FILES([lal-config])
AC_CONFIG_FILES([Makefile])
AC_CONFIG_FILES([doc/Makefile])
AC_CONFIG_FILES([doc/laldoc/Makefile])
AC_CONFIG_FILES([doc/autodoc/Makefile])
AC_CONFIG_FILES([include/Makefile])
AC_CONFIG_FILES([include/lal/Makefile])
AC_CONFIG_FILES([lib/Makefile])
AC_CONFIG_FILES([misc/Makefile])
AC_CONFIG_FILES([packages/Makefile])
EOF
for pkg in $lal_pkg_list; do
  pkgdir=packages/$pkg
  echo "AC_CONFIG_FILES([$pkgdir/Makefile])" >> $CONFIGFILE
  echo "AC_CONFIG_FILES([$pkgdir/doc/Makefile])" >> $CONFIGFILE
  echo "AC_CONFIG_FILES([$pkgdir/include/Makefile])" >> $CONFIGFILE
  echo "AC_CONFIG_FILES([$pkgdir/src/Makefile])" >> $CONFIGFILE
  echo "AC_CONFIG_FILES([$pkgdir/test/Makefile])" >> $CONFIGFILE
done
echo "AC_OUTPUT" >> $CONFIGFILE
else
cat >> $CONFIGFILE <<\EOF
AC_OUTPUT_COMMANDS([chmod +x lal-config])
AC_OUTPUT([ \
  lal.spec \
  lal.pc \
  lalframe.pc \
  lalmetaio.pc \
  lalmpi.pc \
  lalsupport.pc \
  lal-config \
  Makefile \
  doc/Makefile \
  doc/laldoc/Makefile \
  doc/autodoc/Makefile \
  include/Makefile \
  include/lal/Makefile \
  lib/Makefile \
  misc/Makefile \
  packages/Makefile \
EOF
for pkg in $lal_pkg_list; do
  pkgdir=packages/$pkg
  echo "  $pkgdir/Makefile \\" >> $CONFIGFILE
  echo "  $pkgdir/doc/Makefile \\" >> $CONFIGFILE
  echo "  $pkgdir/include/Makefile \\" >> $CONFIGFILE
  echo "  $pkgdir/src/Makefile \\" >> $CONFIGFILE
  echo "  $pkgdir/test/Makefile \\" >> $CONFIGFILE
done
echo "])" >> $CONFIGFILE
fi

cat >> $CONFIGFILE <<\EOF
frameenabled="`test x${frame} = xtrue && echo "ENABLED" || echo "DISABLED"`"
metaioenabled="`test x${metaio} = xtrue && echo "ENABLED" || echo "DISABLED"`"
mpienabled="`test x${mpi} = xtrue && echo "ENABLED" || echo "DISABLED"`"
echo "
================================================================

        LAL has now been successfully configured:

                LAL Frame library support is $frameenabled
                LAL MetaIo library support is $metaioenabled
                LAL MPI support is $mpienabled

        Now run 'make' to build LAL
 	and run 'make install' to install LAL
        LAL will be installed under the directory:

                $prefix

================================================================="
EOF

## Now generate acinclude.m4 and acconfig.h (if needed)

rm -f acinclude.m4 acconfig.h || fail "removing acinclude.m4 acconfig.h"
cat misc/lal.m4 > acinclude.m4 || fail "creating acinclude.m4"
cat misc/lallibtool.m4 >> acinclude.m4 || fail "creating acinclude.m4"
cat misc/acx_pthread.m4 >> acinclude.m4 || fail "creating acinclude.m4"

if test "$AUTOCONF25" = "yes"; then
  cat misc/pkg.m4 >> acinclude.m4 || fail "creating acinclude.m4"
else
  cat misc/old-pkg.m4 >> acinclude.m4 || fail "creating acinclude.m4"
  cp misc/acconfig.h acconfig.h || fail "creating acconfig.h"
fi


## Now run m4 to generate sources
echo "00boot: creating sources"


cd packages/std/src || fail "creating sources in packages/std/src"
${M4} Grid.m4 > Grid.c || fail "creating sources in packages/std/src"
cd ../../.. || fail "creating sources in packages/std/src"

cd packages/support/src || fail "creating sources in packages/support/src"
${M4} PrintVector.m4 > PrintVector.c || fail "creating sources in packages/support/src"
${M4} PrintTimeSeries.m4 > PrintTimeSeries.c || fail "creating sources in packages/support/src"
${M4} PrintFrequencySeries.m4 > PrintFrequencySeries.c || fail "creating sources in packages/support/src"
${M4} ReadFrequencySeries.m4 > ReadFrequencySeries.c || fail "creating sources in packages/support/src"
${M4} ReadTimeSeries.m4 > ReadTimeSeries.c || fail "creating sources in packages/support/src"
${M4} StreamVectorInput.m4 > StreamVectorInput.c || fail "creating sources in packages/support/src"
${M4} StreamVectorSequenceInput.m4 > StreamVectorSequenceInput.c || fail "creating sources in packages/support/src"
${M4} StreamSequenceInput.m4 > StreamSequenceInput.c || fail "creating sources in packages/support/src"
${M4} StreamSeriesInput.m4 > StreamSeriesInput.c || fail "creating sources in packages/support/src"
${M4} StreamSeriesOutput.m4 > StreamSeriesOutput.c || fail "creating sources in packages/support/src"
${M4} StreamGridInput.m4 > StreamGridInput.c || fail "creating sources in packages/support/src"
${M4} StreamGridOutput.m4 > StreamGridOutput.c || fail "creating sources in packages/support/src"
cd ../../.. || fail "creating sources in packages/support/src"

cd packages/factories/src || fail "creating sources in packages/factories/src"
${M4} VectorFactories.m4 > VectorFactories.c || fail "creating sources in packages/factories/src"
${M4} VectorSequenceFactories.m4 > VectorSequenceFactories.c || fail "creating sources in packages/factories/src"
${M4} ArrayFactories.m4 > ArrayFactories.c || fail "creating sources in packages/factories/src"
${M4} ArraySequenceFactories.m4 > ArraySequenceFactories.c || fail "creating sources in packages/factories/src"
cd ../../..  || fail "creating sources in packages/factories/src"

cd packages/factories/include || fail "creating sources in packages/factories/include"
${M4} SeqFactoriesH.m4 > SeqFactories.h || fail "creating sources in packages/factories/include"
${M4} AVFactoriesH.m4 > AVFactories.h || fail "creating sources in packages/factories/include"
cd ../../.. || fail "creating sources in packages/factories/include"

cd packages/factories/test || fail "creating sources in packages/factories/include"
${M4} VectorFactoriesTest.m4 > VectorFactoriesTest.c || fail "creating sources in packages/factories/test"
${M4} VectorSequenceFactoriesTest.m4 > VectorSequenceFactoriesTest.c || fail "creating sources in packages/factories/test"
${M4} ArrayFactoriesTest.m4 > ArrayFactoriesTest.c || fail "creating sources in packages/factories/test"
${M4} ArraySequenceFactoriesTest.m4 > ArraySequenceFactoriesTest.c || fail "creating sources in packages/factories/test"
cd ../../.. || fail "creating sources in packages/factories/test"

cd packages/vectorops/src || fail "creating sources in packages/vectorops/src"
${M4} MatrixDivide.m4 > MatrixDivide.c || fail "creating sources in packages/vectorops/src"
${M4} MatrixMultiply.m4 > MatrixMultiply.c || fail "creating sources in packages/vectorops/src"
${M4} MatrixPower.m4 > MatrixPower.c || fail "creating sources in packages/vectorops/src"
${M4} MiscMatlab.m4 > MiscMatlab.c || fail "creating sources in packages/vectorops/src"
${M4} VectorIndexRangeC.m4 > VectorIndexRange.c || fail "creating sources in packages/vectorops/src"
cd ../../.. || fail "creating sources in packages/vectorops/src"

cd packages/vectorops/include || fail "creating sources in packages/vectorops/include"
${M4} VectorIndexRangeH.m4 > VectorIndexRange.h || fail "creating sources in packages/vectorops/include"
cd ../../.. || fail "creating sources in packages/vectorops/include"

cd packages/utilities/src || fail "creating sources in packages/vectorops/include"
${M4} MatrixOps.m4 > MatrixOps.c || fail "creating sources in packages/vectorops/src"
cd ../../.. || fail "creating sources in packages/vectorops/include"

cd packages/stats/src || fail "creating sources in packages/stats/src"
${M4} LALMoment.m4 > LALMoment.c || fail "creating sources in packages/stats/src"
cd ../../.. || fail "creating sources in packages/stats/src"

cd packages/comm/src || fail "creating sources in packages/comm/src"
${M4} SendRecv.m4 > SendRecv.c || fail "creating sources in packages/comm/src"
${M4} Exchange.m4 > Exchange.c || fail "creating sources in packages/comm/src"
cd ../../.. || fail "creating sources in packages/comm/src"

cd packages/ring/src || fail "creating sources in packages/ring/src"
${M4} LALRingDown.m4 > LALRingDown.c || fail "creating sources in packages/ring/src"
cd ../../.. || fail "creating sources in packages/ring/src"

cd packages/framedata/src || fail "creating sources in packages/framedata/src"
${M4} FrameSeries.m4 > FrameSeries.c || fail "creating sources in packages/framedata/src"
cd ../../.. || fail "creating sources in packages/framedata/src"

cd packages/pulsar/test || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh earth98.dat > earth98.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh sun98.dat > sun98.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh earth99.dat > earth99.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh sun99.dat > sun99.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh earth00.dat > earth00.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh sun00.dat > sun00.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh earth01.dat > earth01.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh sun01.dat > sun01.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh earth02.dat > earth02.ilwd || fail "creating sources in packages/pulsar/test"
/bin/sh ephemtoilwd.sh sun02.dat > sun02.ilwd || fail "creating sources in packages/pulsar/test"
cd ../../.. || fail "creating sources in packages/pulsar/test"

cd packages/tools/include || fail "creating sources in packages/tools/include"
${M4} FrequencySeries.m4 > FrequencySeries.h || fail "creating sources in packages/tools/include"
${M4} Sequence.m4 > Sequence.h || fail "creating sources in packages/tools/include"
${M4} TimeSeries.m4 > TimeSeries.h || fail "creating sources in packages/tools/include"
cd ../src || fail "creating sources in packages/tools/src"
${M4} FrequencySeries.m4 > FrequencySeries.c || fail "creating sources in packages/tools/src"
${M4} Sequence.m4 > Sequence.c || fail "creating sources in packages/tools/src"
${M4} TimeSeries.m4 > TimeSeries.c || fail "creating sources in packages/tools/src"
cd ../../.. || fail "creating sources in packages/tools/src"

## Generate the Makefile.in's and the configure script

echo "00boot: running aclocal"
$ACLOCAL || fail "aclocal"
echo "00boot: running autoheader"
$AUTOHEADER || fail "autoheader"
echo "00boot: running automake"
$AUTOMAKE $INCLUDEDEPS || fail "automake"
echo "00boot: running autoconf"
$AUTOCONF || fail "autoconf"

## If there is a lalapps subdirectory run 00boot within this directory too
if test -d lalapps ; then
  echo "00boot: running 00boot within lalapps subdir"
  ( cd lalapps && ./00boot )  || fail "lalapps 00boot"
fi

echo "00boot: success"
echo "
=================================================================

        00boot has been run.

        Now run './configure' with appropriate options
        to configure LAL.

        If you are building LAL for use with LALApps, see
        the LALApps README file for futher instructions

        Otherwise consult the file README.install

================================================================="
