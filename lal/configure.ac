AC_INIT([lal],[6.3.2.2],[lal-discuss@gravity.phys.uwm.edu])
AC_CONFIG_HEADERS([include/config.h include/lal/LALConfig.h])
AC_CONFIG_SRCDIR([include/config.h.in])
AC_CONFIG_AUX_DIR([misc])
AC_CONFIG_MACRO_DIR([misc])
AC_CONFIG_FILES([ \
  lal.spec \
  lal.pc \
  lalsupport.pc \
  Makefile \
  debian/Makefile \
  doc/Makefile \
  doc/laldoc/Makefile \
  doc/autodoc/Makefile \
  include/Makefile \
  include/lal/Makefile \
  lib/Makefile \
  misc/Makefile \
  packages/Makefile \
  packages/std/Makefile \
  packages/std/doc/Makefile \
  packages/std/include/Makefile
  packages/std/src/Makefile \
  packages/std/test/Makefile \
  packages/tools/Makefile \
  packages/tools/doc/Makefile \
  packages/tools/include/Makefile \
  packages/tools/src/Makefile \
  packages/tools/test/Makefile \
  packages/factories/Makefile \
  packages/factories/doc/Makefile \
  packages/factories/include/Makefile \
  packages/factories/src/Makefile \
  packages/factories/test/Makefile \
  packages/vectorops/Makefile \
  packages/vectorops/doc/Makefile \
  packages/vectorops/include/Makefile \
  packages/vectorops/src/Makefile \
  packages/vectorops/test/Makefile \
  packages/utilities/Makefile \
  packages/utilities/doc/Makefile \
  packages/utilities/include/Makefile \
  packages/utilities/src/Makefile \
  packages/utilities/test/Makefile \
  packages/stats/Makefile \
  packages/stats/doc/Makefile \
  packages/stats/include/Makefile \
  packages/stats/src/Makefile \
  packages/stats/test/Makefile \
  packages/inject/Makefile \
  packages/inject/doc/Makefile \
  packages/inject/include/Makefile \
  packages/inject/src/Makefile \
  packages/inject/test/Makefile \
  packages/date/Makefile \
  packages/date/doc/Makefile \
  packages/date/include/Makefile \
  packages/date/src/Makefile \
  packages/date/test/Makefile \
  packages/tdfilter/Makefile \
  packages/tdfilter/doc/Makefile \
  packages/tdfilter/include/Makefile \
  packages/tdfilter/src/Makefile \
  packages/tdfilter/test/Makefile \
  packages/window/Makefile \
  packages/window/doc/Makefile \
  packages/window/include/Makefile \
  packages/window/src/Makefile \
  packages/window/test/Makefile \
  packages/fft/Makefile \
  packages/fft/doc/Makefile \
  packages/fft/include/Makefile \
  packages/fft/src/Makefile \
  packages/fft/test/Makefile \
  packages/noisemodels/Makefile \
  packages/noisemodels/doc/Makefile \
  packages/noisemodels/include/Makefile \
  packages/noisemodels/src/Makefile \
  packages/noisemodels/test/Makefile \
  packages/support/Makefile \
  packages/support/doc/Makefile \
  packages/support/include/Makefile \
  packages/support/src/Makefile \
  packages/support/test/Makefile
])
AC_CONFIG_FILES([lal-config],[chmod +x lal-config])
AC_CONFIG_FILES([lib/git_version],[chmod +x lib/git_version])
AM_INIT_AUTOMAKE([foreign])
AH_TOP([
#ifndef CONFIG_H__LAL
#define CONFIG_H__LAL
])
AH_BOTTOM([
#endif /* CONFIG_H__LAL */
])

AC_CANONICAL_HOST

LAL_WITH_CC
LAL_WITH_CFLAGS
LAL_WITH_EXTRA_CFLAGS
LAL_WITH_EXTRA_CPPFLAGS
LAL_WITH_EXTRA_LDFLAGS
LAL_WITH_EXTRA_LIBS

LAL_ENABLE_INTELFFT
LAL_WITH_CUDA
LAL_ENABLE_BOINC
LAL_ENABLE_GCC_FLAGS

LAL_ENABLE_DEBUG
LAL_ENABLE_MACROS
LAL_ENABLE_PTHREAD_LOCK
LAL_ENABLE_NIGHTLY

AC_PREFIX_DEFAULT([/opt/lscsoft/lal])

# get version
lal_version_major=`echo "$VERSION" | cut -d. -f1`
lal_version_minor=`echo "$VERSION" | cut -d. -f2`
lal_version_micro=`echo "$VERSION" | cut -d. -f3`
lal_version_devel=`echo "$VERSION" | cut -d. -f4-`
test -z "$lal_version_micro" && lal_version_micro=0
test -z "$lal_version_devel" && lal_version_devel=0
lal_configure_date=`date +"%Y-%m-%dT%H:%M:%S%z"`
AC_DEFINE_UNQUOTED([LAL_VERSION],["$VERSION"],[LAL Version])
AC_DEFINE_UNQUOTED([LAL_VERSION_MAJOR],[$lal_version_major],[LAL Version Major Number])
AC_DEFINE_UNQUOTED([LAL_VERSION_MINOR],[$lal_version_minor],[LAL Version Minor Number])
AC_DEFINE_UNQUOTED([LAL_VERSION_MICRO],[$lal_version_micro],[LAL Version Micro Number])
AC_DEFINE_UNQUOTED([LAL_VERSION_DEVEL],[$lal_version_devel],[LAL Version Devel Number])
AC_DEFINE_UNQUOTED([LAL_CONFIGURE_ARGS],["$ac_configure_args"],[LAL Configure Arguments])
AC_DEFINE_UNQUOTED([LAL_CONFIGURE_DATE],["$lal_configure_date"],[LAL Configure Date])
test "$prefix"="NONE" && lal_prefix="$ac_default_prefix" || lal_prefix="$prefix"
AC_DEFINE_UNQUOTED([LAL_PREFIX],["$lal_prefix"],[LAL Install Prefix])

# check for pthreads
lal_pthread_available="yes"
ACX_PTHREAD(,[lal_pthread_available="no"])
if test "$lal_pthread_lock" = "true" ; then
  if test "$lal_pthread_available" = "yes" ; then
    LIBS="$PTHREAD_LIBS $LIBS"
    CFLAGS="$CFLAGS $PTHREAD_CFLAGS"
    CC="$PTHREAD_CC"
  else
    AC_MSG_ERROR([do not know how to compile posix threads])
  fi
fi

# check for c compiler
m4_pattern_allow([AC_PROG_CC_C99])
m4_ifdef([AC_PROG_CC_C99],[AC_PROG_CC_C99],[LALSUITE_AC_PROG_CC_C99])

# use silent build rules if appropriate
m4_ifdef([AM_SILENT_RULES],[AM_SILENT_RULES([yes])],)

# boinc requires a c++ compiler
if test "${boinc}" = "true" ; then
  AC_PROG_CXX
fi

# check for programs
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
LT_INIT
AM_PATH_PYTHON([2.4],,[AC_MSG_ERROR([Python-2.4, or higher, is required])])
AC_CHECK_PROGS([M4],[gm4 m4], m4)
AC_CHECK_PROGS([LATEX],[pdflatex latex],[echo])
AC_CHECK_PROGS([MKIND],[makeindex],[echo])
AC_CHECK_PROGS([DVIPS],[dvips],[echo])

# check for supported mac os x version
if test "x$build_vendor" = "xapple"; then
  AC_CHECK_PROGS([SW_VERS],[sw_vers])
  if test "x$SW_VERS" != "x"; then
    AC_MSG_CHECKING([Mac OS X version])
    MACOSX_VERSION=`$SW_VERS -productVersion`
    AC_MSG_RESULT([$MACOSX_VERSION])
  fi
  case "$MACOSX_VERSION" in
    10.0*|10.1*|10.2*|10.3*)
      AC_MSG_ERROR([This version of Mac OS X is not supported])
      ;;
    10.4*|10.5*|10.6*)
      # supported version
      ;;
    *)
      AC_MSG_WARN([Unknown Mac OS X version])
      ;;
  esac
fi

# check for support tex flags
if test -z "$TEXFLAGS"
then
AC_MSG_CHECKING([if $LATEX accepts --interaction=batchmode])
cat > conflatextest.tex <<\CEOF
\documentclass{article}
\begin{document}
\end{document}
CEOF
if $LATEX conflatextest.tex --interaction=batchmode >/dev/null 2>&1
then
TEXFLAGS="--interaction=batchmode"
AC_MSG_RESULT([yes])
else
TEXFLAGS=""
AC_MSG_RESULT([no])
fi
rm -f conflatextest.*
fi
AC_SUBST([TEXFLAGS])

# set additional compiler flags
AC_MSG_CHECKING([for additional compiler flags])
case "${host_os}" in
  solaris*) CFLAGS="$CFLAGS -D_POSIX_C_SOURCE=200112L"
  AC_MSG_RESULT([-D_POSIX_C_SOURCE=200112L]);;
  *) AC_MSG_RESULT([none]);;
esac

# initialise lalsupport libs
LALSUPPORT_LIBADD=""

# system library checks
AC_CHECK_LIB([m],[sin])
AC_CHECK_LIB([z],[compress],[LALSUPPORT_LIBADD="$LALSUPPORT_LIBADD -lz"])

# check for platform specific libs
case "${host_os}" in
  solaris*) AC_CHECK_LIB([sunmath],[sincosp]);;
esac

# check for system headers files
AC_HEADER_STDC
AC_CHECK_HEADERS([sys/time.h unistd.h getopt.h malloc.h zlib.h regex.h glob.h])
AC_CHECK_HEADERS([stdint.h],,[AC_MSG_ERROR([could not find stdint.h])])
AC_CHECK_HEADERS([inttypes.h],,[AC_MSG_ERROR([could not find inttypes.h])])
AC_MSG_CHECKING([for gethostname prototype in unistd.h])
AC_EGREP_HEADER([gethostname],[unistd.h],AC_MSG_RESULT([yes])
AC_DEFINE([HAVE_GETHOSTNAME_PROTOTYPE],[1],[Define if gethostname prototype is in unistd.h]),AC_MSG_RESULT([no]))

# check for pthread headers
if test "${lal_pthread_lock}" = "true"; then
  AC_CHECK_HEADERS([pthread.h],[break])
fi

# check for platform specific headers
case "${host_os}" in
  solaris*) AC_CHECK_HEADERS([sunmath.h]);;
esac

# check for gsl
PKG_CHECK_MODULES([GSL],[gsl],[true],[false])
CPPFLAGS="$CPPFLAGS $GSL_CFLAGS"
LIBS="$LIBS $GSL_LIBS"
AC_CHECK_LIB([gslcblas],[main])
AC_CHECK_LIB([gsl],[gsl_strerror],,[AC_MSG_ERROR([could not find the gsl library])])
LAL_CHECK_GSL_VERSION([1.9])

# check for gsl headers
AC_CHECK_HEADERS([gsl/gsl_errno.h],,[AC_MSG_ERROR([could not find the gsl/gsl_errno.h header])])

# check for fft libraries
if test "${intelfft}" = "false" ; then
  fftw3="true"
  PKG_CHECK_MODULES([FFTW3],[fftw3 fftw3f],[true],[false])
  CPPFLAGS="$CPPFLAGS $FFTW3_CFLAGS"
  LIBS="$LIBS $FFTW3_LIBS"
  AC_CHECK_LIB([fftw3f],[fftwf_execute_dft],,[AC_MSG_ERROR([could not find the fftw3f library])],[-lm])
  AC_CHECK_LIB([fftw3],[fftw_execute_dft],,[AC_MSG_ERROR([could not find the fftw3 library])],[-lm])
else
  AC_MSG_WARN([Using Intel FFT routines])
  if test "x${qthread}" = "xtrue" ; then
    LAL_INTEL_MKL_QTHREAD_WARNING
  else
    AC_CHECK_LIB([pthread],[pthread_create],,[AC_MSG_ERROR([could not find the pthread library])])
  fi
  AC_CHECK_LIB([guide],[__kmp_abort],,[AC_MSG_ERROR([could not find the guide library included with Intel MKL])])
  AC_CHECK_HEADERS([pthread.h],,[AC_MSG_ERROR([could not find the pthread.h header])])
  if test "${enable_static}" = "yes"; then
    if test "${enable_shared}" = "yes" ; then
      LAL_INTEL_FFT_LIBS_MSG_ERROR
    else
      AC_CHECK_LIB([mkl_ia32],[DftiCreateDescriptor],,[AC_MSG_ERROR([could not find the Intel FFT library])])
    fi
  else
    AC_CHECK_LIB([mkl],[DftiCreateDescriptor],,[AC_MSG_ERROR([could not find the Intel FFT library])])
  fi
  AC_CHECK_HEADERS([mkl_fft.h],,[AC_MSG_ERROR([could not find the Intel FFT header])])
fi

# check for fft headers
if test "${intelfft}" = "false" ; then
  AC_CHECK_HEADERS([fftw3.h],,[AC_MSG_ERROR([could not find the fftw3.h header])])
fi

# check for boinc
if test "${boinc}" = "true" ; then
  if test -n "$BOINC_PREFIX}" ; then
    # do compilation checks with c++
    AC_LANG_PUSH([C++])

    # set boinc flags
    BOINC_CFLAGS="-I$BOINC_PREFIX/include"
    BOINC_LIBS="-L$BOINC_PREFIX/lib -lboinc_api -lboinc"
    CPPFLAGS="$CPPFLAGS $BOINC_CFLAGS"
    LIBS="$LIBS $BOINC_LIBS"

    # check for boinc libraries
    AC_CHECK_LIB([boinc],[boinc_fopen],[true],[boinc=false])
    AC_CHECK_LIB([boinc_api],[boinc_finish],[true],[boinc=false],[-lboinc])

    # check for boinc headers
    AC_CHECK_HEADERS([boinc/boinc_api.h],,[boinc=false])

    # go back to c
    AC_LANG_POP([C++])
  fi
fi

# define what is being enabled
if test "${cuda}" = "true"; then
  AC_DEFINE([LAL_CUDA_ENABLED],[1],[Define if using cuda library])
fi
if test "${fftw3}" = "true"; then
  AC_DEFINE([LAL_FFTW3_ENABLED],[1],[Define if using fftw3 library])
fi
if test "${boinc}" = "true"; then
  AC_DEFINE([LAL_BOINC_ENABLED],[1],[Define if using boinc library])
  AC_SUBST(BOINC_CFLAGS)
  AC_SUBST(BOINC_LIBS)
fi

# record the libraries needed for linking lal
LAL_LIBADD="$LIBS"
AC_SUBST(LAL_LIBADD)
AC_SUBST(LALSUPPORT_LIBADD)

# checks for typedefs, structures, and compiler characteristics
AC_C_BIGENDIAN
AC_C_CONST
AC_C_STRINGIZE
AC_TYPE_SIZE_T
AC_HEADER_TIME

# checks for library functions
AC_CHECK_FUNCS([getopt])
AC_CHECK_FUNCS([getopt_long])
AC_FUNC_VPRINTF
AC_CHECK_FUNCS([vsnprintf])
AC_CHECK_FUNCS([putenv])

# set package documentation install path
pkgdocdir="\${prefix}/share/doc/${PACKAGE}-${VERSION}"
AC_SUBST([pkgdocdir])

# set automake conditionals
AM_CONDITIONAL([INTELFFT],[test x$intelfft = xtrue])
AM_CONDITIONAL([CUDA],[test x$cuda = xtrue])
AM_CONDITIONAL([BOINC],[test x$boinc = xtrue])
AM_CONDITIONAL([QTHREAD],[test x$qthread = xtrue])

# add gcc specific flags --- must be done at end or tests will break!
if test "$GCC" = yes; then
  CFLAGS="$CFLAGS $lal_gcc_flags -fno-strict-aliasing"

  # add mac os x specific flags
  if test "x$MACOSX_VERSION" != "x"; then
    CFLAGS="$CFLAGS -mmacosx-version-min=10.4"
  fi
fi

INCLUDEMKFILE=$srcdir/misc/include.mk
DOCMKFILE=$srcdir/misc/doc.mk
DVIMKFILE=$srcdir/misc/dvi.mk
AC_SUBST_FILE([INCLUDEMKFILE])
AC_SUBST_FILE([DOCMKFILE])
AC_SUBST_FILE([DVIMKFILE])
AC_OUTPUT
cudaenabled="`test x${cuda} = xtrue && echo "ENABLED" || echo "DISABLED"`"
boincenabled="`test x${boinc} = xtrue && echo "ENABLED" || echo "DISABLED"`"
echo "
================================================================

        LAL has now been successfully configured:

                CUDA support is $cudaenabled
                BOINC support is $boincenabled

        Now run 'make' to build LAL
        and run 'make install' to install LAL
        LAL will be installed under the directory:

                $prefix

================================================================="
