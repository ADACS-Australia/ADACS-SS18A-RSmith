=======================
PyNDS: NDS1/NDS2 client
=======================

These are two independant wrappers for John Zweizig's NDS1/NDS2 client library.
pynds and _nds2.  You can use either to retrieve data from any of the tens of
thousands of channels provided by the LHO and LLO sites.


-----
To do
-----

 - Merge the two implimentations
 - Create binary distributions
 - Move into the official nds repository
 - Get feedback on iterator mechanism (seek)
 - Find out if call to daq_recv_next can be pulled out of daq_request_data
 - Find out what end-of-stream indicator is for NDS1 and for NDS2


----------
Change Log
----------

2010-03-26 Added build parameter for non-system installation of Boost.Python.

2010-03-26 Incremented to release 0.2.
           
           * Added daq.seek(start, stop, stride) command that returns an 
             iterator so that blocks of data can be read in a for loop.
             
             Example::
               
               for data in block.seek(start, stop, stride):
                  plot(data)
           
           * Added `host' and `port' attributes to nds.daq.
           
           * Added demos.
           
           * Added `timestamp' property to nds.daq.
           
2010-03-25 Created version 0.1.


------------
Dependencies
------------

 - Boost.Python (for pynds)
   
   See http://www.boost.org/doc/libs/release/libs/python/doc/
   Available in Debian as the package "libboost-python-dev", or in 
   MacPorts as the package "boost".
   
   To install Boost.Python locally, execute the following commands::
     
     $ wget http://sourceforge.net/projects/boost/files/boost/1.42.0/boost_1_42_0.tar.gz/download
     $ tar xzf boost_1_42_0.tar.gz
     $ pushd boost_1_42_0
     $ ./bootstrap --prefix=/path/to/local
     $ ./bjam --with-python --prefix=/path/to/local install
     $ popd
 
 - nds2-client (for both)
   
   Source download available at:
   https://www.lsc-group.phys.uwm.edu/daswg/wiki/NetworkDataServer2
   
   Make sure you have at least version 0.5.2, which is here:
   http://ldas-jobs.ligo.caltech.edu/~jzweizig/nds2-release/nds2-client-0.5.2.tar.gz
   
   nds2-client has some dependencies for the optional Kerberos authentication.
   (To do: find out from J. Zweizig what these dependencies are.)
   If you need to be able to connect to authenticated NDS2 servers, make sure
   that you have these dependencies installed.
   
   To install nds2-client locally, execute the following commands::
     
     $ wget http://ldas-jobs.ligo.caltech.edu/~jzweizig/nds2-release/nds2-client-0.5.2.tar.gz
     $ tar xzf nds2-client-0.5.2.tar.gz
     $ pushd nds2-client-0.5.2
     $ ./configure --prefix=/path/to/local && make install
     $ popd


----------------
Installing pynds
----------------

If you have Boost.Python installed in your compiler's default search path, 
then to install pyNDS, type::
   
   $ python setup.py install

Otherwise, you need to specify where Boost.Python is installed::
   
   $ BOOSTDIR=/path/to/boost  python setup.py install

If you want to install pyNDS in your own home directory, add the --prefix
argument to setup.py::
   
   $ python setup.py install --prefix=/path/to/local


----------------
Installing _nds2
----------------

edit build.sh appropriately and run.   Move _nds2.o somewhere in your _LD_LIBRARY_PATH
and nds/nds2.py to somewhere in your PYTHONPATH


-----------
pynds Usage
-----------

Examples showing the newly introduced iterator functionality are in 
demo.py and demo_online.py in this directory.

Here is an example Python session using the NDS library::
    
    # Import module
    >>> import nds
    
    # Connect to server
    >>> daq = nds.daq('blue.ligo-wa.caltech.edu', 31200)
    __main__:1: RuntimeWarning: No protocol specified, attempting protocol nds_v2
    Connecting....Server error 1: client request parse error
     authenticate failed, rc=1
    __main__:1: RuntimeWarning: Protocol nds_v2 failed, falling back to nds_v1
    Connecting.... done
    
    # Get available channels
    >>> channels = daq.recv_channel_list()
    
    # Get all fast channels with names starting with 'H1:LSC-DARM'
    >>> darm_channels = [c for c in channels if c.name.startswith('H1:LSC-DARM') and c.rate == 16384]
    
    # Show name of one of those channels
    >>> darm_channels[10]
    <H1:LSC-DARM_ERR (16384Hz, online)>
    
    # Request data for 'H1:LSC-DARM_ERR'
    >>> daq.request_channel(darm_channels[10])
    
    # Request 10 seconds of data
    >>> daq.request_data(953537410, 953537410 + 10, 10)
    
    # Unpack data into Numpy array
    >>> daq.unpack()
    [array([-0.00168277, -0.00168514, -0.00168315, ...,  0.0008413 ,
            0.00083448,  0.0008256 ], dtype=float32)]


-----------
_nds2 usage
-----------

See test_nds2.py in this directory
