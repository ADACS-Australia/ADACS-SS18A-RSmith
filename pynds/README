=======================
PyNDS: NDS1/NDS2 client
=======================

This is pynds, a wrapper for John Zweizig's NDS1/NDS2 client library.
You can use it to retrieve data from any of the tens of thousands of channels
provided by the LHO and LLO sites.


------------
Dependencies
------------

 - boost::python
   
   See http://www.boost.org/doc/libs/release/libs/python/doc/
   Available in Debian as the package "libboost-python-dev", or in 
   MacPorts as the package "boost".
 
 - nds2-client
   
   Source download available at:
   https://www.lsc-group.phys.uwm.edu/daswg/wiki/NetworkDataServer2
   
   Make sure you have at least version 0.5.2, which is here:
   http://ldas-jobs.ligo.caltech.edu/~jzweizig/nds2-release/nds2-client-0.5.2.tar.gz


-------
Install
-------

To install, simply type::
   
   $ python setup.py install

or, if you want to install in a particular directory::
   
   $ python setup.py install --prefix=/path/to/install



-----
Usage
-----

Here is an example Python session using the NDS library::
    
    # Import module
    >>> import nds
    
    # Connect to server
    >>> daq = nds.daq('blue.ligo-wa.caltech.edu', 31200)
    __main__:1: RuntimeWarning: No protocol specified, attempting protocol nds_v2
    Connecting....Server error 1: client request parse error
     authenticate failed, rc=1
    __main__:1: RuntimeWarning: Protocol nds_v2 failed, falling back to nds_v1
    Connecting.... done
    
    # Get available channels
    >>> channels = daq.recv_channel_list()
    
    # Get all fast channels with names starting with 'H1:LSC-DARM'
    >>> darm_channels = [c for c in channels if c.name.startswith('H1:LSC-DARM') and c.rate == 16384]
    
    # Show name of one of those channels
    >>> darm_channels[10]
    <H1:LSC-DARM_ERR (16384Hz, online)>
    
    # Request data for 'H1:LSC-DARM_ERR'
    >>> daq.request_channel(darm_channels[10])
    
    # Request 10 seconds of data
    >>> daq.request_data(953537410, 953537410 + 10, 10)
    
    # Unpack data into channel metadata and Numpy array
    >>> daq.unpack()
    [(<H1:LSC-DARM_ERR (16384Hz, online)>, array([-0.00168277, -0.00168514, -0.00168315, ...,  0.0008413 ,
            0.00083448,  0.0008256 ], dtype=float32))]
